// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for SystemLog

// register flags to command
func registerModelSystemLogFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemLogEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemLogLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemLogPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemLogServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemLogEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Set to true to enable sending syslog to remote logging server.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerSystemLogLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	levelDescription := `Enum: ["emerg","alert","crit","err","warning","notice","info","debug"]. Level of logs to include.`

	var levelFlagName string
	if cmdPrefix == "" {
		levelFlagName = "level"
	} else {
		levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
	}

	var levelFlagDefault string

	_ = cmd.PersistentFlags().String(levelFlagName, levelFlagDefault, levelDescription)

	if err := cmd.RegisterFlagCompletionFunc(levelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["emerg","alert","crit","err","warning","notice","info","debug"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSystemLogPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `Remote server port.`

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerSystemLogServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverDescription := `Remote server hostname.`

	var serverFlagName string
	if cmdPrefix == "" {
		serverFlagName = "server"
	} else {
		serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
	}

	var serverFlagDefault string

	_ = cmd.PersistentFlags().String(serverFlagName, serverFlagDefault, serverDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemLogFlags(depth int, m *models.SystemLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveSystemLogEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, levelAdded := retrieveSystemLogLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || levelAdded

	err, portAdded := retrieveSystemLogPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, serverAdded := retrieveSystemLogServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverAdded

	return nil, retAdded
}

func retrieveSystemLogEnabledFlags(depth int, m *models.SystemLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemLogLevelFlags(depth int, m *models.SystemLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	levelFlagName := fmt.Sprintf("%v.level", cmdPrefix)
	if cmd.Flags().Changed(levelFlagName) {

		var levelFlagName string
		if cmdPrefix == "" {
			levelFlagName = "level"
		} else {
			levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
		}

		levelFlagValue, err := cmd.Flags().GetString(levelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = levelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemLogPortFlags(depth int, m *models.SystemLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = &portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemLogServerFlags(depth int, m *models.SystemLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverFlagName := fmt.Sprintf("%v.server", cmdPrefix)
	if cmd.Flags().Changed(serverFlagName) {

		var serverFlagName string
		if cmdPrefix == "" {
			serverFlagName = "server"
		} else {
			serverFlagName = fmt.Sprintf("%v.server", cmdPrefix)
		}

		serverFlagValue, err := cmd.Flags().GetString(serverFlagName)
		if err != nil {
			return err, false
		}
		m.Server = serverFlagValue

		retAdded = true
	}

	return nil, retAdded
}
