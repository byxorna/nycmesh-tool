// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Olt

// register flags to command
func registerModelOltFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOltHasUnsupportedOnu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOltLayer2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOltOnuWifiCountries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOltHasUnsupportedOnu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hasUnsupportedOnuDescription := ``

	var hasUnsupportedOnuFlagName string
	if cmdPrefix == "" {
		hasUnsupportedOnuFlagName = "hasUnsupportedOnu"
	} else {
		hasUnsupportedOnuFlagName = fmt.Sprintf("%v.hasUnsupportedOnu", cmdPrefix)
	}

	var hasUnsupportedOnuFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hasUnsupportedOnuFlagName, hasUnsupportedOnuFlagDefault, hasUnsupportedOnuDescription)

	return nil
}

func registerOltLayer2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var layer2FlagName string
	if cmdPrefix == "" {
		layer2FlagName = "layer2"
	} else {
		layer2FlagName = fmt.Sprintf("%v.layer2", cmdPrefix)
	}

	if err := registerModelLayer2Flags(depth+1, layer2FlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerOltOnuWifiCountries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: onuWifiCountries OnuWifiCountries map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOltFlags(depth int, m *models.Olt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hasUnsupportedOnuAdded := retrieveOltHasUnsupportedOnuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hasUnsupportedOnuAdded

	err, layer2Added := retrieveOltLayer2Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || layer2Added

	err, onuWifiCountriesAdded := retrieveOltOnuWifiCountriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onuWifiCountriesAdded

	return nil, retAdded
}

func retrieveOltHasUnsupportedOnuFlags(depth int, m *models.Olt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hasUnsupportedOnuFlagName := fmt.Sprintf("%v.hasUnsupportedOnu", cmdPrefix)
	if cmd.Flags().Changed(hasUnsupportedOnuFlagName) {

		var hasUnsupportedOnuFlagName string
		if cmdPrefix == "" {
			hasUnsupportedOnuFlagName = "hasUnsupportedOnu"
		} else {
			hasUnsupportedOnuFlagName = fmt.Sprintf("%v.hasUnsupportedOnu", cmdPrefix)
		}

		hasUnsupportedOnuFlagValue, err := cmd.Flags().GetBool(hasUnsupportedOnuFlagName)
		if err != nil {
			return err, false
		}
		m.HasUnsupportedOnu = hasUnsupportedOnuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOltLayer2Flags(depth int, m *models.Olt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	layer2FlagName := fmt.Sprintf("%v.layer2", cmdPrefix)
	if cmd.Flags().Changed(layer2FlagName) {
		// info: complex object layer2 Layer2 is retrieved outside this Changed() block
	}
	layer2FlagValue := m.Layer2
	if swag.IsZero(layer2FlagValue) {
		layer2FlagValue = &models.Layer2{}
	}

	err, layer2Added := retrieveModelLayer2Flags(depth+1, layer2FlagValue, layer2FlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || layer2Added
	if layer2Added {
		m.Layer2 = layer2FlagValue
	}

	return nil, retAdded
}

func retrieveOltOnuWifiCountriesFlags(depth int, m *models.Olt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onuWifiCountriesFlagName := fmt.Sprintf("%v.onuWifiCountries", cmdPrefix)
	if cmd.Flags().Changed(onuWifiCountriesFlagName) {
		// warning: onuWifiCountries map type OnuWifiCountries is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
