// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for SMTP

// register flags to command
func registerModelSMTPFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSMTPCustomSMTPAuthEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPCustomSMTPHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPCustomSMTPPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPCustomSMTPPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPCustomSMTPSecurityMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPCustomSMTPSender(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPCustomSMTPUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPGmailPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPGmailUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPTLSAllowUnauthorized(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSMTPType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSMTPCustomSMTPAuthEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customSmtpAuthEnabledDescription := ``

	var customSmtpAuthEnabledFlagName string
	if cmdPrefix == "" {
		customSmtpAuthEnabledFlagName = "customSmtpAuthEnabled"
	} else {
		customSmtpAuthEnabledFlagName = fmt.Sprintf("%v.customSmtpAuthEnabled", cmdPrefix)
	}

	var customSmtpAuthEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(customSmtpAuthEnabledFlagName, customSmtpAuthEnabledFlagDefault, customSmtpAuthEnabledDescription)

	return nil
}

func registerSMTPCustomSMTPHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customSmtpHostnameDescription := ``

	var customSmtpHostnameFlagName string
	if cmdPrefix == "" {
		customSmtpHostnameFlagName = "customSmtpHostname"
	} else {
		customSmtpHostnameFlagName = fmt.Sprintf("%v.customSmtpHostname", cmdPrefix)
	}

	var customSmtpHostnameFlagDefault string

	_ = cmd.PersistentFlags().String(customSmtpHostnameFlagName, customSmtpHostnameFlagDefault, customSmtpHostnameDescription)

	return nil
}

func registerSMTPCustomSMTPPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customSmtpPasswordDescription := ``

	var customSmtpPasswordFlagName string
	if cmdPrefix == "" {
		customSmtpPasswordFlagName = "customSmtpPassword"
	} else {
		customSmtpPasswordFlagName = fmt.Sprintf("%v.customSmtpPassword", cmdPrefix)
	}

	var customSmtpPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(customSmtpPasswordFlagName, customSmtpPasswordFlagDefault, customSmtpPasswordDescription)

	return nil
}

func registerSMTPCustomSMTPPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customSmtpPortDescription := ``

	var customSmtpPortFlagName string
	if cmdPrefix == "" {
		customSmtpPortFlagName = "customSmtpPort"
	} else {
		customSmtpPortFlagName = fmt.Sprintf("%v.customSmtpPort", cmdPrefix)
	}

	var customSmtpPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(customSmtpPortFlagName, customSmtpPortFlagDefault, customSmtpPortDescription)

	return nil
}

func registerSMTPCustomSMTPSecurityMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customSmtpSecurityModeDescription := `Enum: ["Plain text","SSL","TLS"]. `

	var customSmtpSecurityModeFlagName string
	if cmdPrefix == "" {
		customSmtpSecurityModeFlagName = "customSmtpSecurityMode"
	} else {
		customSmtpSecurityModeFlagName = fmt.Sprintf("%v.customSmtpSecurityMode", cmdPrefix)
	}

	var customSmtpSecurityModeFlagDefault string

	_ = cmd.PersistentFlags().String(customSmtpSecurityModeFlagName, customSmtpSecurityModeFlagDefault, customSmtpSecurityModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(customSmtpSecurityModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Plain text","SSL","TLS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSMTPCustomSMTPSender(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customSmtpSenderDescription := ``

	var customSmtpSenderFlagName string
	if cmdPrefix == "" {
		customSmtpSenderFlagName = "customSmtpSender"
	} else {
		customSmtpSenderFlagName = fmt.Sprintf("%v.customSmtpSender", cmdPrefix)
	}

	var customSmtpSenderFlagDefault string

	_ = cmd.PersistentFlags().String(customSmtpSenderFlagName, customSmtpSenderFlagDefault, customSmtpSenderDescription)

	return nil
}

func registerSMTPCustomSMTPUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customSmtpUsernameDescription := ``

	var customSmtpUsernameFlagName string
	if cmdPrefix == "" {
		customSmtpUsernameFlagName = "customSmtpUsername"
	} else {
		customSmtpUsernameFlagName = fmt.Sprintf("%v.customSmtpUsername", cmdPrefix)
	}

	var customSmtpUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(customSmtpUsernameFlagName, customSmtpUsernameFlagDefault, customSmtpUsernameDescription)

	return nil
}

func registerSMTPGmailPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gmailPasswordDescription := ``

	var gmailPasswordFlagName string
	if cmdPrefix == "" {
		gmailPasswordFlagName = "gmailPassword"
	} else {
		gmailPasswordFlagName = fmt.Sprintf("%v.gmailPassword", cmdPrefix)
	}

	var gmailPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(gmailPasswordFlagName, gmailPasswordFlagDefault, gmailPasswordDescription)

	return nil
}

func registerSMTPGmailUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gmailUsernameDescription := ``

	var gmailUsernameFlagName string
	if cmdPrefix == "" {
		gmailUsernameFlagName = "gmailUsername"
	} else {
		gmailUsernameFlagName = fmt.Sprintf("%v.gmailUsername", cmdPrefix)
	}

	var gmailUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(gmailUsernameFlagName, gmailUsernameFlagDefault, gmailUsernameDescription)

	return nil
}

func registerSMTPTLSAllowUnauthorized(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tlsAllowUnauthorizedDescription := ``

	var tlsAllowUnauthorizedFlagName string
	if cmdPrefix == "" {
		tlsAllowUnauthorizedFlagName = "tlsAllowUnauthorized"
	} else {
		tlsAllowUnauthorizedFlagName = fmt.Sprintf("%v.tlsAllowUnauthorized", cmdPrefix)
	}

	var tlsAllowUnauthorizedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tlsAllowUnauthorizedFlagName, tlsAllowUnauthorizedFlagDefault, tlsAllowUnauthorizedDescription)

	return nil
}

func registerSMTPType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["smtp","gmail","nosmtp","cloud"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["smtp","gmail","nosmtp","cloud"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSMTPFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, customSmtpAuthEnabledAdded := retrieveSMTPCustomSMTPAuthEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customSmtpAuthEnabledAdded

	err, customSmtpHostnameAdded := retrieveSMTPCustomSMTPHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customSmtpHostnameAdded

	err, customSmtpPasswordAdded := retrieveSMTPCustomSMTPPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customSmtpPasswordAdded

	err, customSmtpPortAdded := retrieveSMTPCustomSMTPPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customSmtpPortAdded

	err, customSmtpSecurityModeAdded := retrieveSMTPCustomSMTPSecurityModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customSmtpSecurityModeAdded

	err, customSmtpSenderAdded := retrieveSMTPCustomSMTPSenderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customSmtpSenderAdded

	err, customSmtpUsernameAdded := retrieveSMTPCustomSMTPUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customSmtpUsernameAdded

	err, gmailPasswordAdded := retrieveSMTPGmailPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gmailPasswordAdded

	err, gmailUsernameAdded := retrieveSMTPGmailUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gmailUsernameAdded

	err, tlsAllowUnauthorizedAdded := retrieveSMTPTLSAllowUnauthorizedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsAllowUnauthorizedAdded

	err, typeAdded := retrieveSMTPTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveSMTPCustomSMTPAuthEnabledFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customSmtpAuthEnabledFlagName := fmt.Sprintf("%v.customSmtpAuthEnabled", cmdPrefix)
	if cmd.Flags().Changed(customSmtpAuthEnabledFlagName) {

		var customSmtpAuthEnabledFlagName string
		if cmdPrefix == "" {
			customSmtpAuthEnabledFlagName = "customSmtpAuthEnabled"
		} else {
			customSmtpAuthEnabledFlagName = fmt.Sprintf("%v.customSmtpAuthEnabled", cmdPrefix)
		}

		customSmtpAuthEnabledFlagValue, err := cmd.Flags().GetBool(customSmtpAuthEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.CustomSMTPAuthEnabled = customSmtpAuthEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPCustomSMTPHostnameFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customSmtpHostnameFlagName := fmt.Sprintf("%v.customSmtpHostname", cmdPrefix)
	if cmd.Flags().Changed(customSmtpHostnameFlagName) {

		var customSmtpHostnameFlagName string
		if cmdPrefix == "" {
			customSmtpHostnameFlagName = "customSmtpHostname"
		} else {
			customSmtpHostnameFlagName = fmt.Sprintf("%v.customSmtpHostname", cmdPrefix)
		}

		customSmtpHostnameFlagValue, err := cmd.Flags().GetString(customSmtpHostnameFlagName)
		if err != nil {
			return err, false
		}
		m.CustomSMTPHostname = customSmtpHostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPCustomSMTPPasswordFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customSmtpPasswordFlagName := fmt.Sprintf("%v.customSmtpPassword", cmdPrefix)
	if cmd.Flags().Changed(customSmtpPasswordFlagName) {

		var customSmtpPasswordFlagName string
		if cmdPrefix == "" {
			customSmtpPasswordFlagName = "customSmtpPassword"
		} else {
			customSmtpPasswordFlagName = fmt.Sprintf("%v.customSmtpPassword", cmdPrefix)
		}

		customSmtpPasswordFlagValue, err := cmd.Flags().GetString(customSmtpPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.CustomSMTPPassword = customSmtpPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPCustomSMTPPortFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customSmtpPortFlagName := fmt.Sprintf("%v.customSmtpPort", cmdPrefix)
	if cmd.Flags().Changed(customSmtpPortFlagName) {

		var customSmtpPortFlagName string
		if cmdPrefix == "" {
			customSmtpPortFlagName = "customSmtpPort"
		} else {
			customSmtpPortFlagName = fmt.Sprintf("%v.customSmtpPort", cmdPrefix)
		}

		customSmtpPortFlagValue, err := cmd.Flags().GetInt64(customSmtpPortFlagName)
		if err != nil {
			return err, false
		}
		m.CustomSMTPPort = &customSmtpPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPCustomSMTPSecurityModeFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customSmtpSecurityModeFlagName := fmt.Sprintf("%v.customSmtpSecurityMode", cmdPrefix)
	if cmd.Flags().Changed(customSmtpSecurityModeFlagName) {

		var customSmtpSecurityModeFlagName string
		if cmdPrefix == "" {
			customSmtpSecurityModeFlagName = "customSmtpSecurityMode"
		} else {
			customSmtpSecurityModeFlagName = fmt.Sprintf("%v.customSmtpSecurityMode", cmdPrefix)
		}

		customSmtpSecurityModeFlagValue, err := cmd.Flags().GetString(customSmtpSecurityModeFlagName)
		if err != nil {
			return err, false
		}
		m.CustomSMTPSecurityMode = customSmtpSecurityModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPCustomSMTPSenderFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customSmtpSenderFlagName := fmt.Sprintf("%v.customSmtpSender", cmdPrefix)
	if cmd.Flags().Changed(customSmtpSenderFlagName) {

		var customSmtpSenderFlagName string
		if cmdPrefix == "" {
			customSmtpSenderFlagName = "customSmtpSender"
		} else {
			customSmtpSenderFlagName = fmt.Sprintf("%v.customSmtpSender", cmdPrefix)
		}

		customSmtpSenderFlagValue, err := cmd.Flags().GetString(customSmtpSenderFlagName)
		if err != nil {
			return err, false
		}
		m.CustomSMTPSender = customSmtpSenderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPCustomSMTPUsernameFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customSmtpUsernameFlagName := fmt.Sprintf("%v.customSmtpUsername", cmdPrefix)
	if cmd.Flags().Changed(customSmtpUsernameFlagName) {

		var customSmtpUsernameFlagName string
		if cmdPrefix == "" {
			customSmtpUsernameFlagName = "customSmtpUsername"
		} else {
			customSmtpUsernameFlagName = fmt.Sprintf("%v.customSmtpUsername", cmdPrefix)
		}

		customSmtpUsernameFlagValue, err := cmd.Flags().GetString(customSmtpUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.CustomSMTPUsername = customSmtpUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPGmailPasswordFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gmailPasswordFlagName := fmt.Sprintf("%v.gmailPassword", cmdPrefix)
	if cmd.Flags().Changed(gmailPasswordFlagName) {

		var gmailPasswordFlagName string
		if cmdPrefix == "" {
			gmailPasswordFlagName = "gmailPassword"
		} else {
			gmailPasswordFlagName = fmt.Sprintf("%v.gmailPassword", cmdPrefix)
		}

		gmailPasswordFlagValue, err := cmd.Flags().GetString(gmailPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.GmailPassword = gmailPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPGmailUsernameFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gmailUsernameFlagName := fmt.Sprintf("%v.gmailUsername", cmdPrefix)
	if cmd.Flags().Changed(gmailUsernameFlagName) {

		var gmailUsernameFlagName string
		if cmdPrefix == "" {
			gmailUsernameFlagName = "gmailUsername"
		} else {
			gmailUsernameFlagName = fmt.Sprintf("%v.gmailUsername", cmdPrefix)
		}

		gmailUsernameFlagValue, err := cmd.Flags().GetString(gmailUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.GmailUsername = gmailUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPTLSAllowUnauthorizedFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsAllowUnauthorizedFlagName := fmt.Sprintf("%v.tlsAllowUnauthorized", cmdPrefix)
	if cmd.Flags().Changed(tlsAllowUnauthorizedFlagName) {

		var tlsAllowUnauthorizedFlagName string
		if cmdPrefix == "" {
			tlsAllowUnauthorizedFlagName = "tlsAllowUnauthorized"
		} else {
			tlsAllowUnauthorizedFlagName = fmt.Sprintf("%v.tlsAllowUnauthorized", cmdPrefix)
		}

		tlsAllowUnauthorizedFlagValue, err := cmd.Flags().GetBool(tlsAllowUnauthorizedFlagName)
		if err != nil {
			return err, false
		}
		m.TLSAllowUnauthorized = tlsAllowUnauthorizedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSMTPTypeFlags(depth int, m *models.SMTP, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
