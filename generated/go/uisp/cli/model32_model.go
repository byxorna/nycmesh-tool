// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model32

// register flags to command
func registerModelModel32Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel32ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel32Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel32Priority(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel32Receive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel32Transmit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel32ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel32Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerModel32Priority(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priorityDescription := ``

	var priorityFlagName string
	if cmdPrefix == "" {
		priorityFlagName = "priority"
	} else {
		priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
	}

	var priorityFlagDefault float64

	_ = cmd.PersistentFlags().Float64(priorityFlagName, priorityFlagDefault, priorityDescription)

	return nil
}

func registerModel32Receive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: receive ListOfCoordinates array type is not supported by go-swagger cli yet

	return nil
}

func registerModel32Transmit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: transmit ListOfCoordinates array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel32Flags(depth int, m *models.Model32, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveModel32IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveModel32NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, priorityAdded := retrieveModel32PriorityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priorityAdded

	err, receiveAdded := retrieveModel32ReceiveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || receiveAdded

	err, transmitAdded := retrieveModel32TransmitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitAdded

	return nil, retAdded
}

func retrieveModel32IDFlags(depth int, m *models.Model32, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel32NameFlags(depth int, m *models.Model32, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel32PriorityFlags(depth int, m *models.Model32, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priorityFlagName := fmt.Sprintf("%v.priority", cmdPrefix)
	if cmd.Flags().Changed(priorityFlagName) {

		var priorityFlagName string
		if cmdPrefix == "" {
			priorityFlagName = "priority"
		} else {
			priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
		}

		priorityFlagValue, err := cmd.Flags().GetFloat64(priorityFlagName)
		if err != nil {
			return err, false
		}
		m.Priority = priorityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel32ReceiveFlags(depth int, m *models.Model32, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	receiveFlagName := fmt.Sprintf("%v.receive", cmdPrefix)
	if cmd.Flags().Changed(receiveFlagName) {
		// warning: receive array type ListOfCoordinates is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel32TransmitFlags(depth int, m *models.Model32, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitFlagName := fmt.Sprintf("%v.transmit", cmdPrefix)
	if cmd.Flags().Changed(transmitFlagName) {
		// warning: transmit array type ListOfCoordinates is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
