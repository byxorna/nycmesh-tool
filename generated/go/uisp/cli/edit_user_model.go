// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for EditUser

// register flags to command
func registerModelEditUserFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEditUserAlerts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserCurrentPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserFirstName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserForceChangePassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserHomeScreen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserKeepMeSignedIn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserLastLogItemID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserLastName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserNewPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserPreferences(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserPresentationMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserSessionTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserTableConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserUcrmID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserUcrmRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEditUserAlerts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	alertsDescription := `Required. `

	var alertsFlagName string
	if cmdPrefix == "" {
		alertsFlagName = "alerts"
	} else {
		alertsFlagName = fmt.Sprintf("%v.alerts", cmdPrefix)
	}

	var alertsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(alertsFlagName, alertsFlagDefault, alertsDescription)

	return nil
}

func registerEditUserCurrentPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentPasswordDescription := ``

	var currentPasswordFlagName string
	if cmdPrefix == "" {
		currentPasswordFlagName = "currentPassword"
	} else {
		currentPasswordFlagName = fmt.Sprintf("%v.currentPassword", cmdPrefix)
	}

	var currentPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(currentPasswordFlagName, currentPasswordFlagDefault, currentPasswordDescription)

	return nil
}

func registerEditUserEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := ``

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerEditUserFirstName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firstNameDescription := ``

	var firstNameFlagName string
	if cmdPrefix == "" {
		firstNameFlagName = "firstName"
	} else {
		firstNameFlagName = fmt.Sprintf("%v.firstName", cmdPrefix)
	}

	var firstNameFlagDefault string

	_ = cmd.PersistentFlags().String(firstNameFlagName, firstNameFlagDefault, firstNameDescription)

	return nil
}

func registerEditUserForceChangePassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceChangePasswordDescription := `Required. `

	var forceChangePasswordFlagName string
	if cmdPrefix == "" {
		forceChangePasswordFlagName = "forceChangePassword"
	} else {
		forceChangePasswordFlagName = fmt.Sprintf("%v.forceChangePassword", cmdPrefix)
	}

	var forceChangePasswordFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceChangePasswordFlagName, forceChangePasswordFlagDefault, forceChangePasswordDescription)

	return nil
}

func registerEditUserHomeScreen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	homeScreenDescription := ``

	var homeScreenFlagName string
	if cmdPrefix == "" {
		homeScreenFlagName = "homeScreen"
	} else {
		homeScreenFlagName = fmt.Sprintf("%v.homeScreen", cmdPrefix)
	}

	var homeScreenFlagDefault string

	_ = cmd.PersistentFlags().String(homeScreenFlagName, homeScreenFlagDefault, homeScreenDescription)

	return nil
}

func registerEditUserKeepMeSignedIn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepMeSignedInDescription := `Whether session should be cleared when browser window is closed.`

	var keepMeSignedInFlagName string
	if cmdPrefix == "" {
		keepMeSignedInFlagName = "keepMeSignedIn"
	} else {
		keepMeSignedInFlagName = fmt.Sprintf("%v.keepMeSignedIn", cmdPrefix)
	}

	var keepMeSignedInFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepMeSignedInFlagName, keepMeSignedInFlagDefault, keepMeSignedInDescription)

	return nil
}

func registerEditUserLastLogItemID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastLogItemIdDescription := ``

	var lastLogItemIdFlagName string
	if cmdPrefix == "" {
		lastLogItemIdFlagName = "lastLogItemId"
	} else {
		lastLogItemIdFlagName = fmt.Sprintf("%v.lastLogItemId", cmdPrefix)
	}

	var lastLogItemIdFlagDefault string

	_ = cmd.PersistentFlags().String(lastLogItemIdFlagName, lastLogItemIdFlagDefault, lastLogItemIdDescription)

	return nil
}

func registerEditUserLastName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastNameDescription := ``

	var lastNameFlagName string
	if cmdPrefix == "" {
		lastNameFlagName = "lastName"
	} else {
		lastNameFlagName = fmt.Sprintf("%v.lastName", cmdPrefix)
	}

	var lastNameFlagDefault string

	_ = cmd.PersistentFlags().String(lastNameFlagName, lastNameFlagDefault, lastNameDescription)

	return nil
}

func registerEditUserNewPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	newPasswordDescription := ``

	var newPasswordFlagName string
	if cmdPrefix == "" {
		newPasswordFlagName = "newPassword"
	} else {
		newPasswordFlagName = fmt.Sprintf("%v.newPassword", cmdPrefix)
	}

	var newPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(newPasswordFlagName, newPasswordFlagDefault, newPasswordDescription)

	return nil
}

func registerEditUserPreferences(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: preferences Preferences map type is not supported by go-swagger cli yet

	return nil
}

func registerEditUserPresentationMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	presentationModeDescription := ``

	var presentationModeFlagName string
	if cmdPrefix == "" {
		presentationModeFlagName = "presentationMode"
	} else {
		presentationModeFlagName = fmt.Sprintf("%v.presentationMode", cmdPrefix)
	}

	var presentationModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(presentationModeFlagName, presentationModeFlagDefault, presentationModeDescription)

	return nil
}

func registerEditUserRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := `Ignored, user cannot change his own role.`

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault string

	_ = cmd.PersistentFlags().String(roleFlagName, roleFlagDefault, roleDescription)

	return nil
}

func registerEditUserSessionTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sessionTimeoutDescription := ``

	var sessionTimeoutFlagName string
	if cmdPrefix == "" {
		sessionTimeoutFlagName = "sessionTimeout"
	} else {
		sessionTimeoutFlagName = fmt.Sprintf("%v.sessionTimeout", cmdPrefix)
	}

	var sessionTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sessionTimeoutFlagName, sessionTimeoutFlagDefault, sessionTimeoutDescription)

	return nil
}

func registerEditUserTableConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tableConfig TableConfig map type is not supported by go-swagger cli yet

	return nil
}

func registerEditUserUcrmID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmIdDescription := ``

	var ucrmIdFlagName string
	if cmdPrefix == "" {
		ucrmIdFlagName = "ucrmId"
	} else {
		ucrmIdFlagName = fmt.Sprintf("%v.ucrmId", cmdPrefix)
	}

	var ucrmIdFlagDefault string

	_ = cmd.PersistentFlags().String(ucrmIdFlagName, ucrmIdFlagDefault, ucrmIdDescription)

	return nil
}

func registerEditUserUcrmRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmRoleDescription := ``

	var ucrmRoleFlagName string
	if cmdPrefix == "" {
		ucrmRoleFlagName = "ucrmRole"
	} else {
		ucrmRoleFlagName = fmt.Sprintf("%v.ucrmRole", cmdPrefix)
	}

	var ucrmRoleFlagDefault string

	_ = cmd.PersistentFlags().String(ucrmRoleFlagName, ucrmRoleFlagDefault, ucrmRoleDescription)

	return nil
}

func registerEditUserUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEditUserFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, alertsAdded := retrieveEditUserAlertsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alertsAdded

	err, currentPasswordAdded := retrieveEditUserCurrentPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentPasswordAdded

	err, emailAdded := retrieveEditUserEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, firstNameAdded := retrieveEditUserFirstNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firstNameAdded

	err, forceChangePasswordAdded := retrieveEditUserForceChangePasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceChangePasswordAdded

	err, homeScreenAdded := retrieveEditUserHomeScreenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || homeScreenAdded

	err, keepMeSignedInAdded := retrieveEditUserKeepMeSignedInFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepMeSignedInAdded

	err, lastLogItemIdAdded := retrieveEditUserLastLogItemIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastLogItemIdAdded

	err, lastNameAdded := retrieveEditUserLastNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastNameAdded

	err, newPasswordAdded := retrieveEditUserNewPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || newPasswordAdded

	err, preferencesAdded := retrieveEditUserPreferencesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || preferencesAdded

	err, presentationModeAdded := retrieveEditUserPresentationModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || presentationModeAdded

	err, roleAdded := retrieveEditUserRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, sessionTimeoutAdded := retrieveEditUserSessionTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessionTimeoutAdded

	err, tableConfigAdded := retrieveEditUserTableConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableConfigAdded

	err, ucrmIdAdded := retrieveEditUserUcrmIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmIdAdded

	err, ucrmRoleAdded := retrieveEditUserUcrmRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmRoleAdded

	err, usernameAdded := retrieveEditUserUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveEditUserAlertsFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alertsFlagName := fmt.Sprintf("%v.alerts", cmdPrefix)
	if cmd.Flags().Changed(alertsFlagName) {

		var alertsFlagName string
		if cmdPrefix == "" {
			alertsFlagName = "alerts"
		} else {
			alertsFlagName = fmt.Sprintf("%v.alerts", cmdPrefix)
		}

		alertsFlagValue, err := cmd.Flags().GetBool(alertsFlagName)
		if err != nil {
			return err, false
		}
		m.Alerts = &alertsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserCurrentPasswordFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentPasswordFlagName := fmt.Sprintf("%v.currentPassword", cmdPrefix)
	if cmd.Flags().Changed(currentPasswordFlagName) {

		var currentPasswordFlagName string
		if cmdPrefix == "" {
			currentPasswordFlagName = "currentPassword"
		} else {
			currentPasswordFlagName = fmt.Sprintf("%v.currentPassword", cmdPrefix)
		}

		currentPasswordFlagValue, err := cmd.Flags().GetString(currentPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.CurrentPassword = currentPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserEmailFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = emailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserFirstNameFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firstNameFlagName := fmt.Sprintf("%v.firstName", cmdPrefix)
	if cmd.Flags().Changed(firstNameFlagName) {

		var firstNameFlagName string
		if cmdPrefix == "" {
			firstNameFlagName = "firstName"
		} else {
			firstNameFlagName = fmt.Sprintf("%v.firstName", cmdPrefix)
		}

		firstNameFlagValue, err := cmd.Flags().GetString(firstNameFlagName)
		if err != nil {
			return err, false
		}
		m.FirstName = firstNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserForceChangePasswordFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceChangePasswordFlagName := fmt.Sprintf("%v.forceChangePassword", cmdPrefix)
	if cmd.Flags().Changed(forceChangePasswordFlagName) {

		var forceChangePasswordFlagName string
		if cmdPrefix == "" {
			forceChangePasswordFlagName = "forceChangePassword"
		} else {
			forceChangePasswordFlagName = fmt.Sprintf("%v.forceChangePassword", cmdPrefix)
		}

		forceChangePasswordFlagValue, err := cmd.Flags().GetBool(forceChangePasswordFlagName)
		if err != nil {
			return err, false
		}
		m.ForceChangePassword = &forceChangePasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserHomeScreenFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	homeScreenFlagName := fmt.Sprintf("%v.homeScreen", cmdPrefix)
	if cmd.Flags().Changed(homeScreenFlagName) {

		var homeScreenFlagName string
		if cmdPrefix == "" {
			homeScreenFlagName = "homeScreen"
		} else {
			homeScreenFlagName = fmt.Sprintf("%v.homeScreen", cmdPrefix)
		}

		homeScreenFlagValue, err := cmd.Flags().GetString(homeScreenFlagName)
		if err != nil {
			return err, false
		}
		m.HomeScreen = homeScreenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserKeepMeSignedInFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepMeSignedInFlagName := fmt.Sprintf("%v.keepMeSignedIn", cmdPrefix)
	if cmd.Flags().Changed(keepMeSignedInFlagName) {

		var keepMeSignedInFlagName string
		if cmdPrefix == "" {
			keepMeSignedInFlagName = "keepMeSignedIn"
		} else {
			keepMeSignedInFlagName = fmt.Sprintf("%v.keepMeSignedIn", cmdPrefix)
		}

		keepMeSignedInFlagValue, err := cmd.Flags().GetBool(keepMeSignedInFlagName)
		if err != nil {
			return err, false
		}
		m.KeepMeSignedIn = keepMeSignedInFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserLastLogItemIDFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastLogItemIdFlagName := fmt.Sprintf("%v.lastLogItemId", cmdPrefix)
	if cmd.Flags().Changed(lastLogItemIdFlagName) {

		var lastLogItemIdFlagName string
		if cmdPrefix == "" {
			lastLogItemIdFlagName = "lastLogItemId"
		} else {
			lastLogItemIdFlagName = fmt.Sprintf("%v.lastLogItemId", cmdPrefix)
		}

		lastLogItemIdFlagValue, err := cmd.Flags().GetString(lastLogItemIdFlagName)
		if err != nil {
			return err, false
		}
		m.LastLogItemID = lastLogItemIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserLastNameFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastNameFlagName := fmt.Sprintf("%v.lastName", cmdPrefix)
	if cmd.Flags().Changed(lastNameFlagName) {

		var lastNameFlagName string
		if cmdPrefix == "" {
			lastNameFlagName = "lastName"
		} else {
			lastNameFlagName = fmt.Sprintf("%v.lastName", cmdPrefix)
		}

		lastNameFlagValue, err := cmd.Flags().GetString(lastNameFlagName)
		if err != nil {
			return err, false
		}
		m.LastName = lastNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserNewPasswordFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	newPasswordFlagName := fmt.Sprintf("%v.newPassword", cmdPrefix)
	if cmd.Flags().Changed(newPasswordFlagName) {

		var newPasswordFlagName string
		if cmdPrefix == "" {
			newPasswordFlagName = "newPassword"
		} else {
			newPasswordFlagName = fmt.Sprintf("%v.newPassword", cmdPrefix)
		}

		newPasswordFlagValue, err := cmd.Flags().GetString(newPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.NewPassword = newPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserPreferencesFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	preferencesFlagName := fmt.Sprintf("%v.preferences", cmdPrefix)
	if cmd.Flags().Changed(preferencesFlagName) {
		// warning: preferences map type Preferences is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEditUserPresentationModeFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	presentationModeFlagName := fmt.Sprintf("%v.presentationMode", cmdPrefix)
	if cmd.Flags().Changed(presentationModeFlagName) {

		var presentationModeFlagName string
		if cmdPrefix == "" {
			presentationModeFlagName = "presentationMode"
		} else {
			presentationModeFlagName = fmt.Sprintf("%v.presentationMode", cmdPrefix)
		}

		presentationModeFlagValue, err := cmd.Flags().GetBool(presentationModeFlagName)
		if err != nil {
			return err, false
		}
		m.PresentationMode = presentationModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserRoleFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetString(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserSessionTimeoutFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessionTimeoutFlagName := fmt.Sprintf("%v.sessionTimeout", cmdPrefix)
	if cmd.Flags().Changed(sessionTimeoutFlagName) {

		var sessionTimeoutFlagName string
		if cmdPrefix == "" {
			sessionTimeoutFlagName = "sessionTimeout"
		} else {
			sessionTimeoutFlagName = fmt.Sprintf("%v.sessionTimeout", cmdPrefix)
		}

		sessionTimeoutFlagValue, err := cmd.Flags().GetInt64(sessionTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.SessionTimeout = sessionTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserTableConfigFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableConfigFlagName := fmt.Sprintf("%v.tableConfig", cmdPrefix)
	if cmd.Flags().Changed(tableConfigFlagName) {
		// warning: tableConfig map type TableConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEditUserUcrmIDFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmIdFlagName := fmt.Sprintf("%v.ucrmId", cmdPrefix)
	if cmd.Flags().Changed(ucrmIdFlagName) {

		var ucrmIdFlagName string
		if cmdPrefix == "" {
			ucrmIdFlagName = "ucrmId"
		} else {
			ucrmIdFlagName = fmt.Sprintf("%v.ucrmId", cmdPrefix)
		}

		ucrmIdFlagValue, err := cmd.Flags().GetString(ucrmIdFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmID = ucrmIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserUcrmRoleFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmRoleFlagName := fmt.Sprintf("%v.ucrmRole", cmdPrefix)
	if cmd.Flags().Changed(ucrmRoleFlagName) {

		var ucrmRoleFlagName string
		if cmdPrefix == "" {
			ucrmRoleFlagName = "ucrmRole"
		} else {
			ucrmRoleFlagName = fmt.Sprintf("%v.ucrmRole", cmdPrefix)
		}

		ucrmRoleFlagValue, err := cmd.Flags().GetString(ucrmRoleFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmRole = ucrmRoleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserUsernameFlags(depth int, m *models.EditUser, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = &usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
