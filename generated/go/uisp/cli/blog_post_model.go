// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// Schema cli for BlogPost

// register flags to command
func registerModelBlogPostFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBlogPostCategories(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostImagePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostLink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostPermanentLink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostPostID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostPublicationDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostRead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBlogPostTitle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBlogPostCategories(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: categories Categories array type is not supported by go-swagger cli yet

	return nil
}

func registerBlogPostDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `perex of blog post`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerBlogPostID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `blog post id in NMS`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerBlogPostImagePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imagePathDescription := `image path`

	var imagePathFlagName string
	if cmdPrefix == "" {
		imagePathFlagName = "imagePath"
	} else {
		imagePathFlagName = fmt.Sprintf("%v.imagePath", cmdPrefix)
	}

	var imagePathFlagDefault string

	_ = cmd.PersistentFlags().String(imagePathFlagName, imagePathFlagDefault, imagePathDescription)

	return nil
}

func registerBlogPostLink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	linkDescription := `post link`

	var linkFlagName string
	if cmdPrefix == "" {
		linkFlagName = "link"
	} else {
		linkFlagName = fmt.Sprintf("%v.link", cmdPrefix)
	}

	var linkFlagDefault string

	_ = cmd.PersistentFlags().String(linkFlagName, linkFlagDefault, linkDescription)

	return nil
}

func registerBlogPostPermanentLink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	permanentLinkDescription := ``

	var permanentLinkFlagName string
	if cmdPrefix == "" {
		permanentLinkFlagName = "permanentLink"
	} else {
		permanentLinkFlagName = fmt.Sprintf("%v.permanentLink", cmdPrefix)
	}

	var permanentLinkFlagDefault string

	_ = cmd.PersistentFlags().String(permanentLinkFlagName, permanentLinkFlagDefault, permanentLinkDescription)

	return nil
}

func registerBlogPostPostID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	postIdDescription := `blog post id in Ubiquiti blog`

	var postIdFlagName string
	if cmdPrefix == "" {
		postIdFlagName = "postId"
	} else {
		postIdFlagName = fmt.Sprintf("%v.postId", cmdPrefix)
	}

	var postIdFlagDefault float64

	_ = cmd.PersistentFlags().Float64(postIdFlagName, postIdFlagDefault, postIdDescription)

	return nil
}

func registerBlogPostPublicationDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicationDateDescription := `publication date on Ubiquiti blog`

	var publicationDateFlagName string
	if cmdPrefix == "" {
		publicationDateFlagName = "publicationDate"
	} else {
		publicationDateFlagName = fmt.Sprintf("%v.publicationDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(publicationDateFlagName, "", publicationDateDescription)

	return nil
}

func registerBlogPostRead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readDescription := `user read blog post`

	var readFlagName string
	if cmdPrefix == "" {
		readFlagName = "read"
	} else {
		readFlagName = fmt.Sprintf("%v.read", cmdPrefix)
	}

	var readFlagDefault bool

	_ = cmd.PersistentFlags().Bool(readFlagName, readFlagDefault, readDescription)

	return nil
}

func registerBlogPostTitle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := `post title`

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "title"
	} else {
		titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBlogPostFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, categoriesAdded := retrieveBlogPostCategoriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || categoriesAdded

	err, descriptionAdded := retrieveBlogPostDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrieveBlogPostIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, imagePathAdded := retrieveBlogPostImagePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imagePathAdded

	err, linkAdded := retrieveBlogPostLinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkAdded

	err, permanentLinkAdded := retrieveBlogPostPermanentLinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || permanentLinkAdded

	err, postIdAdded := retrieveBlogPostPostIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || postIdAdded

	err, publicationDateAdded := retrieveBlogPostPublicationDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicationDateAdded

	err, readAdded := retrieveBlogPostReadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readAdded

	err, titleAdded := retrieveBlogPostTitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	return nil, retAdded
}

func retrieveBlogPostCategoriesFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	categoriesFlagName := fmt.Sprintf("%v.categories", cmdPrefix)
	if cmd.Flags().Changed(categoriesFlagName) {
		// warning: categories array type Categories is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBlogPostDescriptionFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostIDFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostImagePathFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imagePathFlagName := fmt.Sprintf("%v.imagePath", cmdPrefix)
	if cmd.Flags().Changed(imagePathFlagName) {

		var imagePathFlagName string
		if cmdPrefix == "" {
			imagePathFlagName = "imagePath"
		} else {
			imagePathFlagName = fmt.Sprintf("%v.imagePath", cmdPrefix)
		}

		imagePathFlagValue, err := cmd.Flags().GetString(imagePathFlagName)
		if err != nil {
			return err, false
		}
		m.ImagePath = imagePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostLinkFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linkFlagName := fmt.Sprintf("%v.link", cmdPrefix)
	if cmd.Flags().Changed(linkFlagName) {

		var linkFlagName string
		if cmdPrefix == "" {
			linkFlagName = "link"
		} else {
			linkFlagName = fmt.Sprintf("%v.link", cmdPrefix)
		}

		linkFlagValue, err := cmd.Flags().GetString(linkFlagName)
		if err != nil {
			return err, false
		}
		m.Link = linkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostPermanentLinkFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	permanentLinkFlagName := fmt.Sprintf("%v.permanentLink", cmdPrefix)
	if cmd.Flags().Changed(permanentLinkFlagName) {

		var permanentLinkFlagName string
		if cmdPrefix == "" {
			permanentLinkFlagName = "permanentLink"
		} else {
			permanentLinkFlagName = fmt.Sprintf("%v.permanentLink", cmdPrefix)
		}

		permanentLinkFlagValue, err := cmd.Flags().GetString(permanentLinkFlagName)
		if err != nil {
			return err, false
		}
		m.PermanentLink = permanentLinkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostPostIDFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	postIdFlagName := fmt.Sprintf("%v.postId", cmdPrefix)
	if cmd.Flags().Changed(postIdFlagName) {

		var postIdFlagName string
		if cmdPrefix == "" {
			postIdFlagName = "postId"
		} else {
			postIdFlagName = fmt.Sprintf("%v.postId", cmdPrefix)
		}

		postIdFlagValue, err := cmd.Flags().GetFloat64(postIdFlagName)
		if err != nil {
			return err, false
		}
		m.PostID = postIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostPublicationDateFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicationDateFlagName := fmt.Sprintf("%v.publicationDate", cmdPrefix)
	if cmd.Flags().Changed(publicationDateFlagName) {

		var publicationDateFlagName string
		if cmdPrefix == "" {
			publicationDateFlagName = "publicationDate"
		} else {
			publicationDateFlagName = fmt.Sprintf("%v.publicationDate", cmdPrefix)
		}

		publicationDateFlagValueStr, err := cmd.Flags().GetString(publicationDateFlagName)
		if err != nil {
			return err, false
		}
		var publicationDateFlagValue strfmt.DateTime
		if err := publicationDateFlagValue.UnmarshalText([]byte(publicationDateFlagValueStr)); err != nil {
			return err, false
		}
		m.PublicationDate = publicationDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostReadFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readFlagName := fmt.Sprintf("%v.read", cmdPrefix)
	if cmd.Flags().Changed(readFlagName) {

		var readFlagName string
		if cmdPrefix == "" {
			readFlagName = "read"
		} else {
			readFlagName = fmt.Sprintf("%v.read", cmdPrefix)
		}

		readFlagValue, err := cmd.Flags().GetBool(readFlagName)
		if err != nil {
			return err, false
		}
		m.Read = readFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBlogPostTitleFlags(depth int, m *models.BlogPost, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "title"
		} else {
			titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}
