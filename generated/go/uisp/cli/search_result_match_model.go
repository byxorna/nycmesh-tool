// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for SearchResultMatch

// register flags to command
func registerModelSearchResultMatchFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSearchResultMatchField(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchResultMatchKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchResultMatchLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchResultMatchPosition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchResultMatchValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSearchResultMatchField(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fieldDescription := `Where in the "data" is the matched string.`

	var fieldFlagName string
	if cmdPrefix == "" {
		fieldFlagName = "field"
	} else {
		fieldFlagName = fmt.Sprintf("%v.field", cmdPrefix)
	}

	var fieldFlagDefault string

	_ = cmd.PersistentFlags().String(fieldFlagName, fieldFlagDefault, fieldDescription)

	return nil
}

func registerSearchResultMatchKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyDescription := `Identification of the matched string.`

	var keyFlagName string
	if cmdPrefix == "" {
		keyFlagName = "key"
	} else {
		keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
	}

	var keyFlagDefault string

	_ = cmd.PersistentFlags().String(keyFlagName, keyFlagDefault, keyDescription)

	return nil
}

func registerSearchResultMatchLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lengthDescription := `Length of the matched string.`

	var lengthFlagName string
	if cmdPrefix == "" {
		lengthFlagName = "length"
	} else {
		lengthFlagName = fmt.Sprintf("%v.length", cmdPrefix)
	}

	var lengthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(lengthFlagName, lengthFlagDefault, lengthDescription)

	return nil
}

func registerSearchResultMatchPosition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	positionDescription := `Position in the "value" where the match starts.`

	var positionFlagName string
	if cmdPrefix == "" {
		positionFlagName = "position"
	} else {
		positionFlagName = fmt.Sprintf("%v.position", cmdPrefix)
	}

	var positionFlagDefault float64

	_ = cmd.PersistentFlags().Float64(positionFlagName, positionFlagDefault, positionDescription)

	return nil
}

func registerSearchResultMatchValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `String that contains the match.`

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSearchResultMatchFlags(depth int, m *models.SearchResultMatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fieldAdded := retrieveSearchResultMatchFieldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fieldAdded

	err, keyAdded := retrieveSearchResultMatchKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyAdded

	err, lengthAdded := retrieveSearchResultMatchLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lengthAdded

	err, positionAdded := retrieveSearchResultMatchPositionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || positionAdded

	err, valueAdded := retrieveSearchResultMatchValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveSearchResultMatchFieldFlags(depth int, m *models.SearchResultMatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fieldFlagName := fmt.Sprintf("%v.field", cmdPrefix)
	if cmd.Flags().Changed(fieldFlagName) {

		var fieldFlagName string
		if cmdPrefix == "" {
			fieldFlagName = "field"
		} else {
			fieldFlagName = fmt.Sprintf("%v.field", cmdPrefix)
		}

		fieldFlagValue, err := cmd.Flags().GetString(fieldFlagName)
		if err != nil {
			return err, false
		}
		m.Field = fieldFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchResultMatchKeyFlags(depth int, m *models.SearchResultMatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyFlagName := fmt.Sprintf("%v.key", cmdPrefix)
	if cmd.Flags().Changed(keyFlagName) {

		var keyFlagName string
		if cmdPrefix == "" {
			keyFlagName = "key"
		} else {
			keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
		}

		keyFlagValue, err := cmd.Flags().GetString(keyFlagName)
		if err != nil {
			return err, false
		}
		m.Key = keyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchResultMatchLengthFlags(depth int, m *models.SearchResultMatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lengthFlagName := fmt.Sprintf("%v.length", cmdPrefix)
	if cmd.Flags().Changed(lengthFlagName) {

		var lengthFlagName string
		if cmdPrefix == "" {
			lengthFlagName = "length"
		} else {
			lengthFlagName = fmt.Sprintf("%v.length", cmdPrefix)
		}

		lengthFlagValue, err := cmd.Flags().GetFloat64(lengthFlagName)
		if err != nil {
			return err, false
		}
		m.Length = lengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchResultMatchPositionFlags(depth int, m *models.SearchResultMatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	positionFlagName := fmt.Sprintf("%v.position", cmdPrefix)
	if cmd.Flags().Changed(positionFlagName) {

		var positionFlagName string
		if cmdPrefix == "" {
			positionFlagName = "position"
		} else {
			positionFlagName = fmt.Sprintf("%v.position", cmdPrefix)
		}

		positionFlagValue, err := cmd.Flags().GetFloat64(positionFlagName)
		if err != nil {
			return err, false
		}
		m.Position = positionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchResultMatchValueFlags(depth int, m *models.SearchResultMatch, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
