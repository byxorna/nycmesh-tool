// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Router1

// register flags to command
func registerModelRouter1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRouter1DhcpLeaseTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1DhcpPoolEnd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1DhcpPoolStart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1DhcpRelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1DhcpServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1DNSProxyEnable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1NatProtocolFtp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1NatProtocolPptp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1NatProtocolRtsp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1NatProtocolSip(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1PrimaryDNS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1SecondaryDNS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1UpnpEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1WanAccessBlocked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1WanMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouter1WanVlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRouter1DhcpLeaseTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpLeaseTimeDescription := ``

	var dhcpLeaseTimeFlagName string
	if cmdPrefix == "" {
		dhcpLeaseTimeFlagName = "dhcpLeaseTime"
	} else {
		dhcpLeaseTimeFlagName = fmt.Sprintf("%v.dhcpLeaseTime", cmdPrefix)
	}

	var dhcpLeaseTimeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(dhcpLeaseTimeFlagName, dhcpLeaseTimeFlagDefault, dhcpLeaseTimeDescription)

	return nil
}

func registerRouter1DhcpPoolEnd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpPoolEndDescription := `Required. `

	var dhcpPoolEndFlagName string
	if cmdPrefix == "" {
		dhcpPoolEndFlagName = "dhcpPoolEnd"
	} else {
		dhcpPoolEndFlagName = fmt.Sprintf("%v.dhcpPoolEnd", cmdPrefix)
	}

	var dhcpPoolEndFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpPoolEndFlagName, dhcpPoolEndFlagDefault, dhcpPoolEndDescription)

	return nil
}

func registerRouter1DhcpPoolStart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpPoolStartDescription := `Required. `

	var dhcpPoolStartFlagName string
	if cmdPrefix == "" {
		dhcpPoolStartFlagName = "dhcpPoolStart"
	} else {
		dhcpPoolStartFlagName = fmt.Sprintf("%v.dhcpPoolStart", cmdPrefix)
	}

	var dhcpPoolStartFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpPoolStartFlagName, dhcpPoolStartFlagDefault, dhcpPoolStartDescription)

	return nil
}

func registerRouter1DhcpRelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpRelayDescription := `Required. `

	var dhcpRelayFlagName string
	if cmdPrefix == "" {
		dhcpRelayFlagName = "dhcpRelay"
	} else {
		dhcpRelayFlagName = fmt.Sprintf("%v.dhcpRelay", cmdPrefix)
	}

	var dhcpRelayFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpRelayFlagName, dhcpRelayFlagDefault, dhcpRelayDescription)

	return nil
}

func registerRouter1DhcpServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpServerDescription := `Required. `

	var dhcpServerFlagName string
	if cmdPrefix == "" {
		dhcpServerFlagName = "dhcpServer"
	} else {
		dhcpServerFlagName = fmt.Sprintf("%v.dhcpServer", cmdPrefix)
	}

	var dhcpServerFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpServerFlagName, dhcpServerFlagDefault, dhcpServerDescription)

	return nil
}

func registerRouter1DNSProxyEnable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dnsProxyEnableDescription := ``

	var dnsProxyEnableFlagName string
	if cmdPrefix == "" {
		dnsProxyEnableFlagName = "dnsProxyEnable"
	} else {
		dnsProxyEnableFlagName = fmt.Sprintf("%v.dnsProxyEnable", cmdPrefix)
	}

	var dnsProxyEnableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dnsProxyEnableFlagName, dnsProxyEnableFlagDefault, dnsProxyEnableDescription)

	return nil
}

func registerRouter1Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := `Required. `

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerRouter1NatProtocolFtp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	natProtocolFtpDescription := ``

	var natProtocolFtpFlagName string
	if cmdPrefix == "" {
		natProtocolFtpFlagName = "natProtocolFtp"
	} else {
		natProtocolFtpFlagName = fmt.Sprintf("%v.natProtocolFtp", cmdPrefix)
	}

	var natProtocolFtpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(natProtocolFtpFlagName, natProtocolFtpFlagDefault, natProtocolFtpDescription)

	return nil
}

func registerRouter1NatProtocolPptp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	natProtocolPptpDescription := ``

	var natProtocolPptpFlagName string
	if cmdPrefix == "" {
		natProtocolPptpFlagName = "natProtocolPptp"
	} else {
		natProtocolPptpFlagName = fmt.Sprintf("%v.natProtocolPptp", cmdPrefix)
	}

	var natProtocolPptpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(natProtocolPptpFlagName, natProtocolPptpFlagDefault, natProtocolPptpDescription)

	return nil
}

func registerRouter1NatProtocolRtsp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	natProtocolRtspDescription := ``

	var natProtocolRtspFlagName string
	if cmdPrefix == "" {
		natProtocolRtspFlagName = "natProtocolRtsp"
	} else {
		natProtocolRtspFlagName = fmt.Sprintf("%v.natProtocolRtsp", cmdPrefix)
	}

	var natProtocolRtspFlagDefault bool

	_ = cmd.PersistentFlags().Bool(natProtocolRtspFlagName, natProtocolRtspFlagDefault, natProtocolRtspDescription)

	return nil
}

func registerRouter1NatProtocolSip(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	natProtocolSipDescription := ``

	var natProtocolSipFlagName string
	if cmdPrefix == "" {
		natProtocolSipFlagName = "natProtocolSip"
	} else {
		natProtocolSipFlagName = fmt.Sprintf("%v.natProtocolSip", cmdPrefix)
	}

	var natProtocolSipFlagDefault bool

	_ = cmd.PersistentFlags().Bool(natProtocolSipFlagName, natProtocolSipFlagDefault, natProtocolSipDescription)

	return nil
}

func registerRouter1PrimaryDNS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	primaryDnsDescription := `Required. `

	var primaryDnsFlagName string
	if cmdPrefix == "" {
		primaryDnsFlagName = "primaryDns"
	} else {
		primaryDnsFlagName = fmt.Sprintf("%v.primaryDns", cmdPrefix)
	}

	var primaryDnsFlagDefault string

	_ = cmd.PersistentFlags().String(primaryDnsFlagName, primaryDnsFlagDefault, primaryDnsDescription)

	return nil
}

func registerRouter1SecondaryDNS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	secondaryDnsDescription := `Required. `

	var secondaryDnsFlagName string
	if cmdPrefix == "" {
		secondaryDnsFlagName = "secondaryDns"
	} else {
		secondaryDnsFlagName = fmt.Sprintf("%v.secondaryDns", cmdPrefix)
	}

	var secondaryDnsFlagDefault string

	_ = cmd.PersistentFlags().String(secondaryDnsFlagName, secondaryDnsFlagDefault, secondaryDnsDescription)

	return nil
}

func registerRouter1UpnpEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	upnpEnabledDescription := `Required. `

	var upnpEnabledFlagName string
	if cmdPrefix == "" {
		upnpEnabledFlagName = "upnpEnabled"
	} else {
		upnpEnabledFlagName = fmt.Sprintf("%v.upnpEnabled", cmdPrefix)
	}

	var upnpEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(upnpEnabledFlagName, upnpEnabledFlagDefault, upnpEnabledDescription)

	return nil
}

func registerRouter1WanAccessBlocked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanAccessBlockedDescription := ``

	var wanAccessBlockedFlagName string
	if cmdPrefix == "" {
		wanAccessBlockedFlagName = "wanAccessBlocked"
	} else {
		wanAccessBlockedFlagName = fmt.Sprintf("%v.wanAccessBlocked", cmdPrefix)
	}

	var wanAccessBlockedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(wanAccessBlockedFlagName, wanAccessBlockedFlagDefault, wanAccessBlockedDescription)

	return nil
}

func registerRouter1WanMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanModeDescription := `Required. `

	var wanModeFlagName string
	if cmdPrefix == "" {
		wanModeFlagName = "wanMode"
	} else {
		wanModeFlagName = fmt.Sprintf("%v.wanMode", cmdPrefix)
	}

	var wanModeFlagDefault string

	_ = cmd.PersistentFlags().String(wanModeFlagName, wanModeFlagDefault, wanModeDescription)

	return nil
}

func registerRouter1WanVlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanVlanDescription := `Required. `

	var wanVlanFlagName string
	if cmdPrefix == "" {
		wanVlanFlagName = "wanVlan"
	} else {
		wanVlanFlagName = fmt.Sprintf("%v.wanVlan", cmdPrefix)
	}

	var wanVlanFlagDefault float64

	_ = cmd.PersistentFlags().Float64(wanVlanFlagName, wanVlanFlagDefault, wanVlanDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRouter1Flags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dhcpLeaseTimeAdded := retrieveRouter1DhcpLeaseTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpLeaseTimeAdded

	err, dhcpPoolEndAdded := retrieveRouter1DhcpPoolEndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpPoolEndAdded

	err, dhcpPoolStartAdded := retrieveRouter1DhcpPoolStartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpPoolStartAdded

	err, dhcpRelayAdded := retrieveRouter1DhcpRelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpRelayAdded

	err, dhcpServerAdded := retrieveRouter1DhcpServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpServerAdded

	err, dnsProxyEnableAdded := retrieveRouter1DNSProxyEnableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsProxyEnableAdded

	err, gatewayAdded := retrieveRouter1GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, natProtocolFtpAdded := retrieveRouter1NatProtocolFtpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || natProtocolFtpAdded

	err, natProtocolPptpAdded := retrieveRouter1NatProtocolPptpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || natProtocolPptpAdded

	err, natProtocolRtspAdded := retrieveRouter1NatProtocolRtspFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || natProtocolRtspAdded

	err, natProtocolSipAdded := retrieveRouter1NatProtocolSipFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || natProtocolSipAdded

	err, primaryDnsAdded := retrieveRouter1PrimaryDNSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || primaryDnsAdded

	err, secondaryDnsAdded := retrieveRouter1SecondaryDNSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secondaryDnsAdded

	err, upnpEnabledAdded := retrieveRouter1UpnpEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upnpEnabledAdded

	err, wanAccessBlockedAdded := retrieveRouter1WanAccessBlockedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanAccessBlockedAdded

	err, wanModeAdded := retrieveRouter1WanModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanModeAdded

	err, wanVlanAdded := retrieveRouter1WanVlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanVlanAdded

	return nil, retAdded
}

func retrieveRouter1DhcpLeaseTimeFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpLeaseTimeFlagName := fmt.Sprintf("%v.dhcpLeaseTime", cmdPrefix)
	if cmd.Flags().Changed(dhcpLeaseTimeFlagName) {

		var dhcpLeaseTimeFlagName string
		if cmdPrefix == "" {
			dhcpLeaseTimeFlagName = "dhcpLeaseTime"
		} else {
			dhcpLeaseTimeFlagName = fmt.Sprintf("%v.dhcpLeaseTime", cmdPrefix)
		}

		dhcpLeaseTimeFlagValue, err := cmd.Flags().GetFloat64(dhcpLeaseTimeFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpLeaseTime = dhcpLeaseTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1DhcpPoolEndFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpPoolEndFlagName := fmt.Sprintf("%v.dhcpPoolEnd", cmdPrefix)
	if cmd.Flags().Changed(dhcpPoolEndFlagName) {

		var dhcpPoolEndFlagName string
		if cmdPrefix == "" {
			dhcpPoolEndFlagName = "dhcpPoolEnd"
		} else {
			dhcpPoolEndFlagName = fmt.Sprintf("%v.dhcpPoolEnd", cmdPrefix)
		}

		dhcpPoolEndFlagValue, err := cmd.Flags().GetString(dhcpPoolEndFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpPoolEnd = &dhcpPoolEndFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1DhcpPoolStartFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpPoolStartFlagName := fmt.Sprintf("%v.dhcpPoolStart", cmdPrefix)
	if cmd.Flags().Changed(dhcpPoolStartFlagName) {

		var dhcpPoolStartFlagName string
		if cmdPrefix == "" {
			dhcpPoolStartFlagName = "dhcpPoolStart"
		} else {
			dhcpPoolStartFlagName = fmt.Sprintf("%v.dhcpPoolStart", cmdPrefix)
		}

		dhcpPoolStartFlagValue, err := cmd.Flags().GetString(dhcpPoolStartFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpPoolStart = &dhcpPoolStartFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1DhcpRelayFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpRelayFlagName := fmt.Sprintf("%v.dhcpRelay", cmdPrefix)
	if cmd.Flags().Changed(dhcpRelayFlagName) {

		var dhcpRelayFlagName string
		if cmdPrefix == "" {
			dhcpRelayFlagName = "dhcpRelay"
		} else {
			dhcpRelayFlagName = fmt.Sprintf("%v.dhcpRelay", cmdPrefix)
		}

		dhcpRelayFlagValue, err := cmd.Flags().GetString(dhcpRelayFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpRelay = &dhcpRelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1DhcpServerFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpServerFlagName := fmt.Sprintf("%v.dhcpServer", cmdPrefix)
	if cmd.Flags().Changed(dhcpServerFlagName) {

		var dhcpServerFlagName string
		if cmdPrefix == "" {
			dhcpServerFlagName = "dhcpServer"
		} else {
			dhcpServerFlagName = fmt.Sprintf("%v.dhcpServer", cmdPrefix)
		}

		dhcpServerFlagValue, err := cmd.Flags().GetString(dhcpServerFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpServer = &dhcpServerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1DNSProxyEnableFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsProxyEnableFlagName := fmt.Sprintf("%v.dnsProxyEnable", cmdPrefix)
	if cmd.Flags().Changed(dnsProxyEnableFlagName) {

		var dnsProxyEnableFlagName string
		if cmdPrefix == "" {
			dnsProxyEnableFlagName = "dnsProxyEnable"
		} else {
			dnsProxyEnableFlagName = fmt.Sprintf("%v.dnsProxyEnable", cmdPrefix)
		}

		dnsProxyEnableFlagValue, err := cmd.Flags().GetBool(dnsProxyEnableFlagName)
		if err != nil {
			return err, false
		}
		m.DNSProxyEnable = dnsProxyEnableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1GatewayFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gatewayFlagName := fmt.Sprintf("%v.gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = &gatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1NatProtocolFtpFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	natProtocolFtpFlagName := fmt.Sprintf("%v.natProtocolFtp", cmdPrefix)
	if cmd.Flags().Changed(natProtocolFtpFlagName) {

		var natProtocolFtpFlagName string
		if cmdPrefix == "" {
			natProtocolFtpFlagName = "natProtocolFtp"
		} else {
			natProtocolFtpFlagName = fmt.Sprintf("%v.natProtocolFtp", cmdPrefix)
		}

		natProtocolFtpFlagValue, err := cmd.Flags().GetBool(natProtocolFtpFlagName)
		if err != nil {
			return err, false
		}
		m.NatProtocolFtp = natProtocolFtpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1NatProtocolPptpFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	natProtocolPptpFlagName := fmt.Sprintf("%v.natProtocolPptp", cmdPrefix)
	if cmd.Flags().Changed(natProtocolPptpFlagName) {

		var natProtocolPptpFlagName string
		if cmdPrefix == "" {
			natProtocolPptpFlagName = "natProtocolPptp"
		} else {
			natProtocolPptpFlagName = fmt.Sprintf("%v.natProtocolPptp", cmdPrefix)
		}

		natProtocolPptpFlagValue, err := cmd.Flags().GetBool(natProtocolPptpFlagName)
		if err != nil {
			return err, false
		}
		m.NatProtocolPptp = natProtocolPptpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1NatProtocolRtspFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	natProtocolRtspFlagName := fmt.Sprintf("%v.natProtocolRtsp", cmdPrefix)
	if cmd.Flags().Changed(natProtocolRtspFlagName) {

		var natProtocolRtspFlagName string
		if cmdPrefix == "" {
			natProtocolRtspFlagName = "natProtocolRtsp"
		} else {
			natProtocolRtspFlagName = fmt.Sprintf("%v.natProtocolRtsp", cmdPrefix)
		}

		natProtocolRtspFlagValue, err := cmd.Flags().GetBool(natProtocolRtspFlagName)
		if err != nil {
			return err, false
		}
		m.NatProtocolRtsp = natProtocolRtspFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1NatProtocolSipFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	natProtocolSipFlagName := fmt.Sprintf("%v.natProtocolSip", cmdPrefix)
	if cmd.Flags().Changed(natProtocolSipFlagName) {

		var natProtocolSipFlagName string
		if cmdPrefix == "" {
			natProtocolSipFlagName = "natProtocolSip"
		} else {
			natProtocolSipFlagName = fmt.Sprintf("%v.natProtocolSip", cmdPrefix)
		}

		natProtocolSipFlagValue, err := cmd.Flags().GetBool(natProtocolSipFlagName)
		if err != nil {
			return err, false
		}
		m.NatProtocolSip = natProtocolSipFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1PrimaryDNSFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	primaryDnsFlagName := fmt.Sprintf("%v.primaryDns", cmdPrefix)
	if cmd.Flags().Changed(primaryDnsFlagName) {

		var primaryDnsFlagName string
		if cmdPrefix == "" {
			primaryDnsFlagName = "primaryDns"
		} else {
			primaryDnsFlagName = fmt.Sprintf("%v.primaryDns", cmdPrefix)
		}

		primaryDnsFlagValue, err := cmd.Flags().GetString(primaryDnsFlagName)
		if err != nil {
			return err, false
		}
		m.PrimaryDNS = &primaryDnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1SecondaryDNSFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	secondaryDnsFlagName := fmt.Sprintf("%v.secondaryDns", cmdPrefix)
	if cmd.Flags().Changed(secondaryDnsFlagName) {

		var secondaryDnsFlagName string
		if cmdPrefix == "" {
			secondaryDnsFlagName = "secondaryDns"
		} else {
			secondaryDnsFlagName = fmt.Sprintf("%v.secondaryDns", cmdPrefix)
		}

		secondaryDnsFlagValue, err := cmd.Flags().GetString(secondaryDnsFlagName)
		if err != nil {
			return err, false
		}
		m.SecondaryDNS = &secondaryDnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1UpnpEnabledFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upnpEnabledFlagName := fmt.Sprintf("%v.upnpEnabled", cmdPrefix)
	if cmd.Flags().Changed(upnpEnabledFlagName) {

		var upnpEnabledFlagName string
		if cmdPrefix == "" {
			upnpEnabledFlagName = "upnpEnabled"
		} else {
			upnpEnabledFlagName = fmt.Sprintf("%v.upnpEnabled", cmdPrefix)
		}

		upnpEnabledFlagValue, err := cmd.Flags().GetBool(upnpEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.UpnpEnabled = &upnpEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1WanAccessBlockedFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanAccessBlockedFlagName := fmt.Sprintf("%v.wanAccessBlocked", cmdPrefix)
	if cmd.Flags().Changed(wanAccessBlockedFlagName) {

		var wanAccessBlockedFlagName string
		if cmdPrefix == "" {
			wanAccessBlockedFlagName = "wanAccessBlocked"
		} else {
			wanAccessBlockedFlagName = fmt.Sprintf("%v.wanAccessBlocked", cmdPrefix)
		}

		wanAccessBlockedFlagValue, err := cmd.Flags().GetBool(wanAccessBlockedFlagName)
		if err != nil {
			return err, false
		}
		m.WanAccessBlocked = wanAccessBlockedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1WanModeFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanModeFlagName := fmt.Sprintf("%v.wanMode", cmdPrefix)
	if cmd.Flags().Changed(wanModeFlagName) {

		var wanModeFlagName string
		if cmdPrefix == "" {
			wanModeFlagName = "wanMode"
		} else {
			wanModeFlagName = fmt.Sprintf("%v.wanMode", cmdPrefix)
		}

		wanModeFlagValue, err := cmd.Flags().GetString(wanModeFlagName)
		if err != nil {
			return err, false
		}
		m.WanMode = &wanModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouter1WanVlanFlags(depth int, m *models.Router1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanVlanFlagName := fmt.Sprintf("%v.wanVlan", cmdPrefix)
	if cmd.Flags().Changed(wanVlanFlagName) {

		var wanVlanFlagName string
		if cmdPrefix == "" {
			wanVlanFlagName = "wanVlan"
		} else {
			wanVlanFlagName = fmt.Sprintf("%v.wanVlan", cmdPrefix)
		}

		wanVlanFlagValue, err := cmd.Flags().GetFloat64(wanVlanFlagName)
		if err != nil {
			return err, false
		}
		m.WanVlan = &wanVlanFlagValue

		retAdded = true
	}

	return nil, retAdded
}
