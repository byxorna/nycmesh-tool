// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Model122

// register flags to command
func registerModelModel122Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel122RedistributeConnected(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel122RedistributeDefaultRoute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel122RedistributeStatic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel122Router(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel122RedistributeConnected(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var redistributeConnectedFlagName string
	if cmdPrefix == "" {
		redistributeConnectedFlagName = "redistributeConnected"
	} else {
		redistributeConnectedFlagName = fmt.Sprintf("%v.redistributeConnected", cmdPrefix)
	}

	if err := registerModelRedistributeConnectedFlags(depth+1, redistributeConnectedFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel122RedistributeDefaultRoute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var redistributeDefaultRouteFlagName string
	if cmdPrefix == "" {
		redistributeDefaultRouteFlagName = "redistributeDefaultRoute"
	} else {
		redistributeDefaultRouteFlagName = fmt.Sprintf("%v.redistributeDefaultRoute", cmdPrefix)
	}

	if err := registerModelRedistributeDefaultRoute3Flags(depth+1, redistributeDefaultRouteFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel122RedistributeStatic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var redistributeStaticFlagName string
	if cmdPrefix == "" {
		redistributeStaticFlagName = "redistributeStatic"
	} else {
		redistributeStaticFlagName = fmt.Sprintf("%v.redistributeStatic", cmdPrefix)
	}

	if err := registerModelRedistributeStaticFlags(depth+1, redistributeStaticFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel122Router(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	routerDescription := `Required. `

	var routerFlagName string
	if cmdPrefix == "" {
		routerFlagName = "router"
	} else {
		routerFlagName = fmt.Sprintf("%v.router", cmdPrefix)
	}

	var routerFlagDefault string

	_ = cmd.PersistentFlags().String(routerFlagName, routerFlagDefault, routerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel122Flags(depth int, m *models.Model122, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, redistributeConnectedAdded := retrieveModel122RedistributeConnectedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redistributeConnectedAdded

	err, redistributeDefaultRouteAdded := retrieveModel122RedistributeDefaultRouteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redistributeDefaultRouteAdded

	err, redistributeStaticAdded := retrieveModel122RedistributeStaticFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redistributeStaticAdded

	err, routerAdded := retrieveModel122RouterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routerAdded

	return nil, retAdded
}

func retrieveModel122RedistributeConnectedFlags(depth int, m *models.Model122, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redistributeConnectedFlagName := fmt.Sprintf("%v.redistributeConnected", cmdPrefix)
	if cmd.Flags().Changed(redistributeConnectedFlagName) {
		// info: complex object redistributeConnected RedistributeConnected is retrieved outside this Changed() block
	}
	redistributeConnectedFlagValue := m.RedistributeConnected
	if swag.IsZero(redistributeConnectedFlagValue) {
		redistributeConnectedFlagValue = &models.RedistributeConnected{}
	}

	err, redistributeConnectedAdded := retrieveModelRedistributeConnectedFlags(depth+1, redistributeConnectedFlagValue, redistributeConnectedFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redistributeConnectedAdded
	if redistributeConnectedAdded {
		m.RedistributeConnected = redistributeConnectedFlagValue
	}

	return nil, retAdded
}

func retrieveModel122RedistributeDefaultRouteFlags(depth int, m *models.Model122, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redistributeDefaultRouteFlagName := fmt.Sprintf("%v.redistributeDefaultRoute", cmdPrefix)
	if cmd.Flags().Changed(redistributeDefaultRouteFlagName) {
		// info: complex object redistributeDefaultRoute RedistributeDefaultRoute3 is retrieved outside this Changed() block
	}
	redistributeDefaultRouteFlagValue := m.RedistributeDefaultRoute
	if swag.IsZero(redistributeDefaultRouteFlagValue) {
		redistributeDefaultRouteFlagValue = &models.RedistributeDefaultRoute3{}
	}

	err, redistributeDefaultRouteAdded := retrieveModelRedistributeDefaultRoute3Flags(depth+1, redistributeDefaultRouteFlagValue, redistributeDefaultRouteFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redistributeDefaultRouteAdded
	if redistributeDefaultRouteAdded {
		m.RedistributeDefaultRoute = redistributeDefaultRouteFlagValue
	}

	return nil, retAdded
}

func retrieveModel122RedistributeStaticFlags(depth int, m *models.Model122, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	redistributeStaticFlagName := fmt.Sprintf("%v.redistributeStatic", cmdPrefix)
	if cmd.Flags().Changed(redistributeStaticFlagName) {
		// info: complex object redistributeStatic RedistributeStatic is retrieved outside this Changed() block
	}
	redistributeStaticFlagValue := m.RedistributeStatic
	if swag.IsZero(redistributeStaticFlagValue) {
		redistributeStaticFlagValue = &models.RedistributeStatic{}
	}

	err, redistributeStaticAdded := retrieveModelRedistributeStaticFlags(depth+1, redistributeStaticFlagValue, redistributeStaticFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || redistributeStaticAdded
	if redistributeStaticAdded {
		m.RedistributeStatic = redistributeStaticFlagValue
	}

	return nil, retAdded
}

func retrieveModel122RouterFlags(depth int, m *models.Model122, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routerFlagName := fmt.Sprintf("%v.router", cmdPrefix)
	if cmd.Flags().Changed(routerFlagName) {

		var routerFlagName string
		if cmdPrefix == "" {
			routerFlagName = "router"
		} else {
			routerFlagName = fmt.Sprintf("%v.router", cmdPrefix)
		}

		routerFlagValue, err := cmd.Flags().GetString(routerFlagName)
		if err != nil {
			return err, false
		}
		m.Router = &routerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
