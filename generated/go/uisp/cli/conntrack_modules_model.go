// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for ConntrackModules

// register flags to command
func registerModelConntrackModulesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConntrackModulesFtp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackModulesGre(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackModulesH323(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackModulesPptp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackModulesSip(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackModulesTftp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConntrackModulesFtp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ftpDescription := `Required. `

	var ftpFlagName string
	if cmdPrefix == "" {
		ftpFlagName = "ftp"
	} else {
		ftpFlagName = fmt.Sprintf("%v.ftp", cmdPrefix)
	}

	var ftpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ftpFlagName, ftpFlagDefault, ftpDescription)

	return nil
}

func registerConntrackModulesGre(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	greDescription := `Required. `

	var greFlagName string
	if cmdPrefix == "" {
		greFlagName = "gre"
	} else {
		greFlagName = fmt.Sprintf("%v.gre", cmdPrefix)
	}

	var greFlagDefault bool

	_ = cmd.PersistentFlags().Bool(greFlagName, greFlagDefault, greDescription)

	return nil
}

func registerConntrackModulesH323(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	h323Description := `Required. `

	var h323FlagName string
	if cmdPrefix == "" {
		h323FlagName = "h323"
	} else {
		h323FlagName = fmt.Sprintf("%v.h323", cmdPrefix)
	}

	var h323FlagDefault bool

	_ = cmd.PersistentFlags().Bool(h323FlagName, h323FlagDefault, h323Description)

	return nil
}

func registerConntrackModulesPptp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pptpDescription := `Required. `

	var pptpFlagName string
	if cmdPrefix == "" {
		pptpFlagName = "pptp"
	} else {
		pptpFlagName = fmt.Sprintf("%v.pptp", cmdPrefix)
	}

	var pptpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pptpFlagName, pptpFlagDefault, pptpDescription)

	return nil
}

func registerConntrackModulesSip(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sipDescription := `Required. `

	var sipFlagName string
	if cmdPrefix == "" {
		sipFlagName = "sip"
	} else {
		sipFlagName = fmt.Sprintf("%v.sip", cmdPrefix)
	}

	var sipFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sipFlagName, sipFlagDefault, sipDescription)

	return nil
}

func registerConntrackModulesTftp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tftpDescription := `Required. `

	var tftpFlagName string
	if cmdPrefix == "" {
		tftpFlagName = "tftp"
	} else {
		tftpFlagName = fmt.Sprintf("%v.tftp", cmdPrefix)
	}

	var tftpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tftpFlagName, tftpFlagDefault, tftpDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConntrackModulesFlags(depth int, m *models.ConntrackModules, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ftpAdded := retrieveConntrackModulesFtpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ftpAdded

	err, greAdded := retrieveConntrackModulesGreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || greAdded

	err, h323Added := retrieveConntrackModulesH323Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || h323Added

	err, pptpAdded := retrieveConntrackModulesPptpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pptpAdded

	err, sipAdded := retrieveConntrackModulesSipFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sipAdded

	err, tftpAdded := retrieveConntrackModulesTftpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tftpAdded

	return nil, retAdded
}

func retrieveConntrackModulesFtpFlags(depth int, m *models.ConntrackModules, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ftpFlagName := fmt.Sprintf("%v.ftp", cmdPrefix)
	if cmd.Flags().Changed(ftpFlagName) {

		var ftpFlagName string
		if cmdPrefix == "" {
			ftpFlagName = "ftp"
		} else {
			ftpFlagName = fmt.Sprintf("%v.ftp", cmdPrefix)
		}

		ftpFlagValue, err := cmd.Flags().GetBool(ftpFlagName)
		if err != nil {
			return err, false
		}
		m.Ftp = &ftpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackModulesGreFlags(depth int, m *models.ConntrackModules, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	greFlagName := fmt.Sprintf("%v.gre", cmdPrefix)
	if cmd.Flags().Changed(greFlagName) {

		var greFlagName string
		if cmdPrefix == "" {
			greFlagName = "gre"
		} else {
			greFlagName = fmt.Sprintf("%v.gre", cmdPrefix)
		}

		greFlagValue, err := cmd.Flags().GetBool(greFlagName)
		if err != nil {
			return err, false
		}
		m.Gre = &greFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackModulesH323Flags(depth int, m *models.ConntrackModules, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	h323FlagName := fmt.Sprintf("%v.h323", cmdPrefix)
	if cmd.Flags().Changed(h323FlagName) {

		var h323FlagName string
		if cmdPrefix == "" {
			h323FlagName = "h323"
		} else {
			h323FlagName = fmt.Sprintf("%v.h323", cmdPrefix)
		}

		h323FlagValue, err := cmd.Flags().GetBool(h323FlagName)
		if err != nil {
			return err, false
		}
		m.H323 = &h323FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackModulesPptpFlags(depth int, m *models.ConntrackModules, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pptpFlagName := fmt.Sprintf("%v.pptp", cmdPrefix)
	if cmd.Flags().Changed(pptpFlagName) {

		var pptpFlagName string
		if cmdPrefix == "" {
			pptpFlagName = "pptp"
		} else {
			pptpFlagName = fmt.Sprintf("%v.pptp", cmdPrefix)
		}

		pptpFlagValue, err := cmd.Flags().GetBool(pptpFlagName)
		if err != nil {
			return err, false
		}
		m.Pptp = &pptpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackModulesSipFlags(depth int, m *models.ConntrackModules, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sipFlagName := fmt.Sprintf("%v.sip", cmdPrefix)
	if cmd.Flags().Changed(sipFlagName) {

		var sipFlagName string
		if cmdPrefix == "" {
			sipFlagName = "sip"
		} else {
			sipFlagName = fmt.Sprintf("%v.sip", cmdPrefix)
		}

		sipFlagValue, err := cmd.Flags().GetBool(sipFlagName)
		if err != nil {
			return err, false
		}
		m.Sip = &sipFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackModulesTftpFlags(depth int, m *models.ConntrackModules, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tftpFlagName := fmt.Sprintf("%v.tftp", cmdPrefix)
	if cmd.Flags().Changed(tftpFlagName) {

		var tftpFlagName string
		if cmdPrefix == "" {
			tftpFlagName = "tftp"
		} else {
			tftpFlagName = fmt.Sprintf("%v.tftp", cmdPrefix)
		}

		tftpFlagValue, err := cmd.Flags().GetBool(tftpFlagName)
		if err != nil {
			return err, false
		}
		m.Tftp = &tftpFlagValue

		retAdded = true
	}

	return nil, retAdded
}
