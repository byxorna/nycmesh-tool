// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for TddFraming

// register flags to command
func registerModelTddFramingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTddFramingDlRatio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTddFramingDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTddFramingFlexBetaEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTddFramingReseEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTddFramingDlRatio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dlRatioDescription := `Required. `

	var dlRatioFlagName string
	if cmdPrefix == "" {
		dlRatioFlagName = "dlRatio"
	} else {
		dlRatioFlagName = fmt.Sprintf("%v.dlRatio", cmdPrefix)
	}

	var dlRatioFlagDefault float64

	_ = cmd.PersistentFlags().Float64(dlRatioFlagName, dlRatioFlagDefault, dlRatioDescription)

	return nil
}

func registerTddFramingDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	durationDescription := `Required. `

	var durationFlagName string
	if cmdPrefix == "" {
		durationFlagName = "duration"
	} else {
		durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
	}

	var durationFlagDefault float64

	_ = cmd.PersistentFlags().Float64(durationFlagName, durationFlagDefault, durationDescription)

	return nil
}

func registerTddFramingFlexBetaEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flexBetaEnabledDescription := `Required. `

	var flexBetaEnabledFlagName string
	if cmdPrefix == "" {
		flexBetaEnabledFlagName = "flexBetaEnabled"
	} else {
		flexBetaEnabledFlagName = fmt.Sprintf("%v.flexBetaEnabled", cmdPrefix)
	}

	var flexBetaEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(flexBetaEnabledFlagName, flexBetaEnabledFlagDefault, flexBetaEnabledDescription)

	return nil
}

func registerTddFramingReseEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reseEnabledDescription := `Required. `

	var reseEnabledFlagName string
	if cmdPrefix == "" {
		reseEnabledFlagName = "reseEnabled"
	} else {
		reseEnabledFlagName = fmt.Sprintf("%v.reseEnabled", cmdPrefix)
	}

	var reseEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(reseEnabledFlagName, reseEnabledFlagDefault, reseEnabledDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTddFramingFlags(depth int, m *models.TddFraming, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dlRatioAdded := retrieveTddFramingDlRatioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dlRatioAdded

	err, durationAdded := retrieveTddFramingDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || durationAdded

	err, flexBetaEnabledAdded := retrieveTddFramingFlexBetaEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || flexBetaEnabledAdded

	err, reseEnabledAdded := retrieveTddFramingReseEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reseEnabledAdded

	return nil, retAdded
}

func retrieveTddFramingDlRatioFlags(depth int, m *models.TddFraming, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dlRatioFlagName := fmt.Sprintf("%v.dlRatio", cmdPrefix)
	if cmd.Flags().Changed(dlRatioFlagName) {

		var dlRatioFlagName string
		if cmdPrefix == "" {
			dlRatioFlagName = "dlRatio"
		} else {
			dlRatioFlagName = fmt.Sprintf("%v.dlRatio", cmdPrefix)
		}

		dlRatioFlagValue, err := cmd.Flags().GetFloat64(dlRatioFlagName)
		if err != nil {
			return err, false
		}
		m.DlRatio = &dlRatioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTddFramingDurationFlags(depth int, m *models.TddFraming, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	durationFlagName := fmt.Sprintf("%v.duration", cmdPrefix)
	if cmd.Flags().Changed(durationFlagName) {

		var durationFlagName string
		if cmdPrefix == "" {
			durationFlagName = "duration"
		} else {
			durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
		}

		durationFlagValue, err := cmd.Flags().GetFloat64(durationFlagName)
		if err != nil {
			return err, false
		}
		m.Duration = &durationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTddFramingFlexBetaEnabledFlags(depth int, m *models.TddFraming, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flexBetaEnabledFlagName := fmt.Sprintf("%v.flexBetaEnabled", cmdPrefix)
	if cmd.Flags().Changed(flexBetaEnabledFlagName) {

		var flexBetaEnabledFlagName string
		if cmdPrefix == "" {
			flexBetaEnabledFlagName = "flexBetaEnabled"
		} else {
			flexBetaEnabledFlagName = fmt.Sprintf("%v.flexBetaEnabled", cmdPrefix)
		}

		flexBetaEnabledFlagValue, err := cmd.Flags().GetBool(flexBetaEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.FlexBetaEnabled = &flexBetaEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTddFramingReseEnabledFlags(depth int, m *models.TddFraming, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reseEnabledFlagName := fmt.Sprintf("%v.reseEnabled", cmdPrefix)
	if cmd.Flags().Changed(reseEnabledFlagName) {

		var reseEnabledFlagName string
		if cmdPrefix == "" {
			reseEnabledFlagName = "reseEnabled"
		} else {
			reseEnabledFlagName = fmt.Sprintf("%v.reseEnabled", cmdPrefix)
		}

		reseEnabledFlagValue, err := cmd.Flags().GetBool(reseEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.ReseEnabled = &reseEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}
