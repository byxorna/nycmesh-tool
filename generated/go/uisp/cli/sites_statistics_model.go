// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for SitesStatistics

// register flags to command
func registerModelSitesStatisticsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSitesStatisticsDownload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSitesStatisticsInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSitesStatisticsPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSitesStatisticsUpload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSitesStatisticsDownload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: download GraphDataSet array type is not supported by go-swagger cli yet

	return nil
}

func registerSitesStatisticsInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var intervalFlagName string
	if cmdPrefix == "" {
		intervalFlagName = "interval"
	} else {
		intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
	}

	if err := registerModelInterval1Flags(depth+1, intervalFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSitesStatisticsPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	periodDescription := `Number of milliseconds between data points`

	var periodFlagName string
	if cmdPrefix == "" {
		periodFlagName = "period"
	} else {
		periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
	}

	var periodFlagDefault float64

	_ = cmd.PersistentFlags().Float64(periodFlagName, periodFlagDefault, periodDescription)

	return nil
}

func registerSitesStatisticsUpload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: upload GraphDataSet array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSitesStatisticsFlags(depth int, m *models.SitesStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, downloadAdded := retrieveSitesStatisticsDownloadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downloadAdded

	err, intervalAdded := retrieveSitesStatisticsIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || intervalAdded

	err, periodAdded := retrieveSitesStatisticsPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || periodAdded

	err, uploadAdded := retrieveSitesStatisticsUploadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadAdded

	return nil, retAdded
}

func retrieveSitesStatisticsDownloadFlags(depth int, m *models.SitesStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downloadFlagName := fmt.Sprintf("%v.download", cmdPrefix)
	if cmd.Flags().Changed(downloadFlagName) {
		// warning: download array type GraphDataSet is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSitesStatisticsIntervalFlags(depth int, m *models.SitesStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	intervalFlagName := fmt.Sprintf("%v.interval", cmdPrefix)
	if cmd.Flags().Changed(intervalFlagName) {
		// info: complex object interval Interval1 is retrieved outside this Changed() block
	}
	intervalFlagValue := m.Interval
	if swag.IsZero(intervalFlagValue) {
		intervalFlagValue = &models.Interval1{}
	}

	err, intervalAdded := retrieveModelInterval1Flags(depth+1, intervalFlagValue, intervalFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || intervalAdded
	if intervalAdded {
		m.Interval = intervalFlagValue
	}

	return nil, retAdded
}

func retrieveSitesStatisticsPeriodFlags(depth int, m *models.SitesStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	periodFlagName := fmt.Sprintf("%v.period", cmdPrefix)
	if cmd.Flags().Changed(periodFlagName) {

		var periodFlagName string
		if cmdPrefix == "" {
			periodFlagName = "period"
		} else {
			periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
		}

		periodFlagValue, err := cmd.Flags().GetFloat64(periodFlagName)
		if err != nil {
			return err, false
		}
		m.Period = periodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSitesStatisticsUploadFlags(depth int, m *models.SitesStatistics, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadFlagName := fmt.Sprintf("%v.upload", cmdPrefix)
	if cmd.Flags().Changed(uploadFlagName) {
		// warning: upload array type GraphDataSet is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
