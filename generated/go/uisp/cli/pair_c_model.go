// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for PairC

// register flags to command
func registerModelPairCFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPairCLengthFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPairCLengthTo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPairCState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPairCLengthFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lengthFromDescription := `Required. `

	var lengthFromFlagName string
	if cmdPrefix == "" {
		lengthFromFlagName = "lengthFrom"
	} else {
		lengthFromFlagName = fmt.Sprintf("%v.lengthFrom", cmdPrefix)
	}

	var lengthFromFlagDefault float64

	_ = cmd.PersistentFlags().Float64(lengthFromFlagName, lengthFromFlagDefault, lengthFromDescription)

	return nil
}

func registerPairCLengthTo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lengthToDescription := `Required. `

	var lengthToFlagName string
	if cmdPrefix == "" {
		lengthToFlagName = "lengthTo"
	} else {
		lengthToFlagName = fmt.Sprintf("%v.lengthTo", cmdPrefix)
	}

	var lengthToFlagDefault float64

	_ = cmd.PersistentFlags().Float64(lengthToFlagName, lengthToFlagDefault, lengthToDescription)

	return nil
}

func registerPairCState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stateDescription := `Required. `

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPairCFlags(depth int, m *models.PairC, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, lengthFromAdded := retrievePairCLengthFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lengthFromAdded

	err, lengthToAdded := retrievePairCLengthToFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lengthToAdded

	err, stateAdded := retrievePairCStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	return nil, retAdded
}

func retrievePairCLengthFromFlags(depth int, m *models.PairC, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lengthFromFlagName := fmt.Sprintf("%v.lengthFrom", cmdPrefix)
	if cmd.Flags().Changed(lengthFromFlagName) {

		var lengthFromFlagName string
		if cmdPrefix == "" {
			lengthFromFlagName = "lengthFrom"
		} else {
			lengthFromFlagName = fmt.Sprintf("%v.lengthFrom", cmdPrefix)
		}

		lengthFromFlagValue, err := cmd.Flags().GetFloat64(lengthFromFlagName)
		if err != nil {
			return err, false
		}
		m.LengthFrom = &lengthFromFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePairCLengthToFlags(depth int, m *models.PairC, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lengthToFlagName := fmt.Sprintf("%v.lengthTo", cmdPrefix)
	if cmd.Flags().Changed(lengthToFlagName) {

		var lengthToFlagName string
		if cmdPrefix == "" {
			lengthToFlagName = "lengthTo"
		} else {
			lengthToFlagName = fmt.Sprintf("%v.lengthTo", cmdPrefix)
		}

		lengthToFlagValue, err := cmd.Flags().GetFloat64(lengthToFlagName)
		if err != nil {
			return err, false
		}
		m.LengthTo = &lengthToFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePairCStateFlags(depth int, m *models.PairC, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stateFlagName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = &stateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
