// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/client/server"
	serverops "github.com/byxorna/nycmesh-tool/generated/go/uisp/client/server"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationServerGetNmsStatisticsCmd returns a cmd to handle operation getNmsStatistics
func makeOperationServerGetNmsStatisticsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getNmsStatistics",
		Short: ``,
		RunE:  runOperationServerGetNmsStatistics,
	}

	if err := registerOperationServerGetNmsStatisticsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationServerGetNmsStatistics uses cmd flags to call endpoint api
func runOperationServerGetNmsStatistics(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := serverops.NewGetNmsStatisticsParams()
	if err, _ := retrieveOperationServerGetNmsStatisticsIntervalFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServerGetNmsStatisticsSiriFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationServerGetNmsStatisticsResult(appCli.Server.GetNmsStatistics(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationServerGetNmsStatisticsParamFlags registers all flags needed to fill params
func registerOperationServerGetNmsStatisticsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationServerGetNmsStatisticsIntervalParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServerGetNmsStatisticsSiriParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationServerGetNmsStatisticsIntervalParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	intervalDescription := `Enum: ["hour","day","month","quarter","year"]. Required. `

	var intervalFlagName string
	if cmdPrefix == "" {
		intervalFlagName = "interval"
	} else {
		intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
	}

	var intervalFlagDefault string

	_ = cmd.PersistentFlags().String(intervalFlagName, intervalFlagDefault, intervalDescription)

	if err := cmd.RegisterFlagCompletionFunc(intervalFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["hour","day","month","quarter","year"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationServerGetNmsStatisticsSiriParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	siriDescription := ``

	var siriFlagName string
	if cmdPrefix == "" {
		siriFlagName = "siri"
	} else {
		siriFlagName = fmt.Sprintf("%v.siri", cmdPrefix)
	}

	var siriFlagDefault bool

	_ = cmd.PersistentFlags().Bool(siriFlagName, siriFlagDefault, siriDescription)

	return nil
}

func retrieveOperationServerGetNmsStatisticsIntervalFlag(m *serverops.GetNmsStatisticsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("interval") {

		var intervalFlagName string
		if cmdPrefix == "" {
			intervalFlagName = "interval"
		} else {
			intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
		}

		intervalFlagValue, err := cmd.Flags().GetString(intervalFlagName)
		if err != nil {
			return err, false
		}
		m.Interval = intervalFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServerGetNmsStatisticsSiriFlag(m *serverops.GetNmsStatisticsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("siri") {

		var siriFlagName string
		if cmdPrefix == "" {
			siriFlagName = "siri"
		} else {
			siriFlagName = fmt.Sprintf("%v.siri", cmdPrefix)
		}

		siriFlagValue, err := cmd.Flags().GetBool(siriFlagName)
		if err != nil {
			return err, false
		}
		m.Siri = &siriFlagValue

	}
	return nil, retAdded
}

// parseOperationServerGetNmsStatisticsResult parses request result and return the string content
func parseOperationServerGetNmsStatisticsResult(resp0 *server.GetNmsStatisticsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*server.GetNmsStatisticsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*server.GetNmsStatisticsUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*server.GetNmsStatisticsForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*server.GetNmsStatisticsNotAcceptable)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*server.GetNmsStatisticsInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
