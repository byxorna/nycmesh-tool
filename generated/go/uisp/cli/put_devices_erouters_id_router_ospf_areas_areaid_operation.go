// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/client/devices"
	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidCmd returns a cmd to handle operation putDevicesEroutersIdRouterOspfAreasAreaid
func makeOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "putDevicesEroutersIdRouterOspfAreasAreaid",
		Short: ``,
		RunE:  runOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaid,
	}

	if err := registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaid uses cmd flags to call endpoint api
func runOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaid(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := devices.NewPutDevicesEroutersIDRouterOspfAreasAreaidParams()
	if err, _ := retrieveOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidAreaIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidResult(appCli.Devices.PutDevicesEroutersIDRouterOspfAreasAreaid(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidParamFlags registers all flags needed to fill params
func registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidAreaIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidAreaIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	areaIdDescription := `Required. `

	var areaIdFlagName string
	if cmdPrefix == "" {
		areaIdFlagName = "areaId"
	} else {
		areaIdFlagName = fmt.Sprintf("%v.areaId", cmdPrefix)
	}

	var areaIdFlagDefault string

	_ = cmd.PersistentFlags().String(areaIdFlagName, areaIdFlagDefault, areaIdDescription)

	return nil
}
func registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelOspfAreaFlags(0, "ospfArea", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidAreaIDFlag(m *devices.PutDevicesEroutersIDRouterOspfAreasAreaidParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("areaId") {

		var areaIdFlagName string
		if cmdPrefix == "" {
			areaIdFlagName = "areaId"
		} else {
			areaIdFlagName = fmt.Sprintf("%v.areaId", cmdPrefix)
		}

		areaIdFlagValue, err := cmd.Flags().GetString(areaIdFlagName)
		if err != nil {
			return err, false
		}
		m.AreaID = areaIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidBodyFlag(m *devices.PutDevicesEroutersIDRouterOspfAreasAreaidParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.OspfArea{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.OspfArea: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.OspfArea{}
	}
	err, added := retrieveModelOspfAreaFlags(0, bodyValueModel, "ospfArea", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidIDFlag(m *devices.PutDevicesEroutersIDRouterOspfAreasAreaidParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidResult parses request result and return the string content
func parseOperationDevicesPutDevicesEroutersIDRouterOspfAreasAreaidResult(resp0 *devices.PutDevicesEroutersIDRouterOspfAreasAreaidOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*devices.PutDevicesEroutersIDRouterOspfAreasAreaidOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*devices.PutDevicesEroutersIDRouterOspfAreasAreaidBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*devices.PutDevicesEroutersIDRouterOspfAreasAreaidUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*devices.PutDevicesEroutersIDRouterOspfAreasAreaidForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*devices.PutDevicesEroutersIDRouterOspfAreasAreaidNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*devices.PutDevicesEroutersIDRouterOspfAreasAreaidInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
