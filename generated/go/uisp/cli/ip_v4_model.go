// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for IPV4

// register flags to command
func registerModelIPV4Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPV4Lan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPV4Wan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPV4Lan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lanFlagName string
	if cmdPrefix == "" {
		lanFlagName = "lan"
	} else {
		lanFlagName = fmt.Sprintf("%v.lan", cmdPrefix)
	}

	if err := registerModelLan1Flags(depth+1, lanFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPV4Wan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wanFlagName string
	if cmdPrefix == "" {
		wanFlagName = "wan"
	} else {
		wanFlagName = fmt.Sprintf("%v.wan", cmdPrefix)
	}

	if err := registerModelWan1Flags(depth+1, wanFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPV4Flags(depth int, m *models.IPV4, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, lanAdded := retrieveIPV4LanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanAdded

	err, wanAdded := retrieveIPV4WanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanAdded

	return nil, retAdded
}

func retrieveIPV4LanFlags(depth int, m *models.IPV4, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lanFlagName := fmt.Sprintf("%v.lan", cmdPrefix)
	if cmd.Flags().Changed(lanFlagName) {
		// info: complex object lan Lan1 is retrieved outside this Changed() block
	}
	lanFlagValue := m.Lan
	if swag.IsZero(lanFlagValue) {
		lanFlagValue = &models.Lan1{}
	}

	err, lanAdded := retrieveModelLan1Flags(depth+1, lanFlagValue, lanFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanAdded
	if lanAdded {
		m.Lan = lanFlagValue
	}

	return nil, retAdded
}

func retrieveIPV4WanFlags(depth int, m *models.IPV4, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanFlagName := fmt.Sprintf("%v.wan", cmdPrefix)
	if cmd.Flags().Changed(wanFlagName) {
		// info: complex object wan Wan1 is retrieved outside this Changed() block
	}
	wanFlagValue := m.Wan
	if swag.IsZero(wanFlagValue) {
		wanFlagValue = &models.Wan1{}
	}

	err, wanAdded := retrieveModelWan1Flags(depth+1, wanFlagValue, wanFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanAdded
	if wanAdded {
		m.Wan = wanFlagValue
	}

	return nil, retAdded
}
