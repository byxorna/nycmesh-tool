// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Traffic1

// register flags to command
func registerModelTraffic1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTraffic1Download(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTraffic1Time(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTraffic1Upload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTraffic1Download(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downloadDescription := `Required. Total number of bytes downloaded during interval`

	var downloadFlagName string
	if cmdPrefix == "" {
		downloadFlagName = "download"
	} else {
		downloadFlagName = fmt.Sprintf("%v.download", cmdPrefix)
	}

	var downloadFlagDefault float64

	_ = cmd.PersistentFlags().Float64(downloadFlagName, downloadFlagDefault, downloadDescription)

	return nil
}

func registerTraffic1Time(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeDescription := `Required. Start of the aggregated time interval as a timestamp in milliseconds`

	var timeFlagName string
	if cmdPrefix == "" {
		timeFlagName = "time"
	} else {
		timeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	var timeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(timeFlagName, timeFlagDefault, timeDescription)

	return nil
}

func registerTraffic1Upload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uploadDescription := `Required. Total number of bytes uploaded during interval`

	var uploadFlagName string
	if cmdPrefix == "" {
		uploadFlagName = "upload"
	} else {
		uploadFlagName = fmt.Sprintf("%v.upload", cmdPrefix)
	}

	var uploadFlagDefault float64

	_ = cmd.PersistentFlags().Float64(uploadFlagName, uploadFlagDefault, uploadDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTraffic1Flags(depth int, m *models.Traffic1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, downloadAdded := retrieveTraffic1DownloadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downloadAdded

	err, timeAdded := retrieveTraffic1TimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeAdded

	err, uploadAdded := retrieveTraffic1UploadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadAdded

	return nil, retAdded
}

func retrieveTraffic1DownloadFlags(depth int, m *models.Traffic1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downloadFlagName := fmt.Sprintf("%v.download", cmdPrefix)
	if cmd.Flags().Changed(downloadFlagName) {

		var downloadFlagName string
		if cmdPrefix == "" {
			downloadFlagName = "download"
		} else {
			downloadFlagName = fmt.Sprintf("%v.download", cmdPrefix)
		}

		downloadFlagValue, err := cmd.Flags().GetFloat64(downloadFlagName)
		if err != nil {
			return err, false
		}
		m.Download = &downloadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTraffic1TimeFlags(depth int, m *models.Traffic1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFlagName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(timeFlagName) {

		var timeFlagName string
		if cmdPrefix == "" {
			timeFlagName = "time"
		} else {
			timeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		timeFlagValue, err := cmd.Flags().GetFloat64(timeFlagName)
		if err != nil {
			return err, false
		}
		m.Time = &timeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTraffic1UploadFlags(depth int, m *models.Traffic1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadFlagName := fmt.Sprintf("%v.upload", cmdPrefix)
	if cmd.Flags().Changed(uploadFlagName) {

		var uploadFlagName string
		if cmdPrefix == "" {
			uploadFlagName = "upload"
		} else {
			uploadFlagName = fmt.Sprintf("%v.upload", cmdPrefix)
		}

		uploadFlagValue, err := cmd.Flags().GetFloat64(uploadFlagName)
		if err != nil {
			return err, false
		}
		m.Upload = &uploadFlagValue

		retAdded = true
	}

	return nil, retAdded
}
