// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model52

// register flags to command
func registerModelModel52Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel52Band(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52CenterFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52Channel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52ChannelEndFreq(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52ChannelStartFreq(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52ChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52ControlFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52ExtensionChannels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52IsAirMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52IsDFS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52IsEIRPLimited(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52IsIndoor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52MaxAntennaGain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52MaxTXPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel52ObeyRegulations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel52Band(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bandDescription := `Enum: ["A","G"]. Required. `

	var bandFlagName string
	if cmdPrefix == "" {
		bandFlagName = "band"
	} else {
		bandFlagName = fmt.Sprintf("%v.band", cmdPrefix)
	}

	var bandFlagDefault string

	_ = cmd.PersistentFlags().String(bandFlagName, bandFlagDefault, bandDescription)

	if err := cmd.RegisterFlagCompletionFunc(bandFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["A","G"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel52CenterFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	centerFrequencyDescription := `Required. `

	var centerFrequencyFlagName string
	if cmdPrefix == "" {
		centerFrequencyFlagName = "centerFrequency"
	} else {
		centerFrequencyFlagName = fmt.Sprintf("%v.centerFrequency", cmdPrefix)
	}

	var centerFrequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(centerFrequencyFlagName, centerFrequencyFlagDefault, centerFrequencyDescription)

	return nil
}

func registerModel52Channel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelDescription := `Required. `

	var channelFlagName string
	if cmdPrefix == "" {
		channelFlagName = "channel"
	} else {
		channelFlagName = fmt.Sprintf("%v.channel", cmdPrefix)
	}

	var channelFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelFlagName, channelFlagDefault, channelDescription)

	return nil
}

func registerModel52ChannelEndFreq(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelEndFreqDescription := `Required. `

	var channelEndFreqFlagName string
	if cmdPrefix == "" {
		channelEndFreqFlagName = "channelEndFreq"
	} else {
		channelEndFreqFlagName = fmt.Sprintf("%v.channelEndFreq", cmdPrefix)
	}

	var channelEndFreqFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelEndFreqFlagName, channelEndFreqFlagDefault, channelEndFreqDescription)

	return nil
}

func registerModel52ChannelStartFreq(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelStartFreqDescription := `Required. `

	var channelStartFreqFlagName string
	if cmdPrefix == "" {
		channelStartFreqFlagName = "channelStartFreq"
	} else {
		channelStartFreqFlagName = fmt.Sprintf("%v.channelStartFreq", cmdPrefix)
	}

	var channelStartFreqFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelStartFreqFlagName, channelStartFreqFlagDefault, channelStartFreqDescription)

	return nil
}

func registerModel52ChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := `Required. `

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerModel52ControlFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	controlFrequencyDescription := `Required. `

	var controlFrequencyFlagName string
	if cmdPrefix == "" {
		controlFrequencyFlagName = "controlFrequency"
	} else {
		controlFrequencyFlagName = fmt.Sprintf("%v.controlFrequency", cmdPrefix)
	}

	var controlFrequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(controlFrequencyFlagName, controlFrequencyFlagDefault, controlFrequencyDescription)

	return nil
}

func registerModel52ExtensionChannels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: extensionChannels ExtensionChannels array type is not supported by go-swagger cli yet

	return nil
}

func registerModel52IsAirMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isAirMaxDescription := `Required. `

	var isAirMaxFlagName string
	if cmdPrefix == "" {
		isAirMaxFlagName = "isAirMax"
	} else {
		isAirMaxFlagName = fmt.Sprintf("%v.isAirMax", cmdPrefix)
	}

	var isAirMaxFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isAirMaxFlagName, isAirMaxFlagDefault, isAirMaxDescription)

	return nil
}

func registerModel52IsDFS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isDFSDescription := `Required. `

	var isDFSFlagName string
	if cmdPrefix == "" {
		isDFSFlagName = "isDFS"
	} else {
		isDFSFlagName = fmt.Sprintf("%v.isDFS", cmdPrefix)
	}

	var isDFSFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isDFSFlagName, isDFSFlagDefault, isDFSDescription)

	return nil
}

func registerModel52IsEIRPLimited(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isEIRPLimitedDescription := `Required. `

	var isEIRPLimitedFlagName string
	if cmdPrefix == "" {
		isEIRPLimitedFlagName = "isEIRPLimited"
	} else {
		isEIRPLimitedFlagName = fmt.Sprintf("%v.isEIRPLimited", cmdPrefix)
	}

	var isEIRPLimitedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isEIRPLimitedFlagName, isEIRPLimitedFlagDefault, isEIRPLimitedDescription)

	return nil
}

func registerModel52IsIndoor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isIndoorDescription := `Required. `

	var isIndoorFlagName string
	if cmdPrefix == "" {
		isIndoorFlagName = "isIndoor"
	} else {
		isIndoorFlagName = fmt.Sprintf("%v.isIndoor", cmdPrefix)
	}

	var isIndoorFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isIndoorFlagName, isIndoorFlagDefault, isIndoorDescription)

	return nil
}

func registerModel52MaxAntennaGain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxAntennaGainDescription := `Required. `

	var maxAntennaGainFlagName string
	if cmdPrefix == "" {
		maxAntennaGainFlagName = "maxAntennaGain"
	} else {
		maxAntennaGainFlagName = fmt.Sprintf("%v.maxAntennaGain", cmdPrefix)
	}

	var maxAntennaGainFlagDefault float64

	_ = cmd.PersistentFlags().Float64(maxAntennaGainFlagName, maxAntennaGainFlagDefault, maxAntennaGainDescription)

	return nil
}

func registerModel52MaxTXPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxTXPowerDescription := `Required. `

	var maxTXPowerFlagName string
	if cmdPrefix == "" {
		maxTXPowerFlagName = "maxTXPower"
	} else {
		maxTXPowerFlagName = fmt.Sprintf("%v.maxTXPower", cmdPrefix)
	}

	var maxTXPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(maxTXPowerFlagName, maxTXPowerFlagDefault, maxTXPowerDescription)

	return nil
}

func registerModel52ObeyRegulations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	obeyRegulationsDescription := `Required. `

	var obeyRegulationsFlagName string
	if cmdPrefix == "" {
		obeyRegulationsFlagName = "obeyRegulations"
	} else {
		obeyRegulationsFlagName = fmt.Sprintf("%v.obeyRegulations", cmdPrefix)
	}

	var obeyRegulationsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(obeyRegulationsFlagName, obeyRegulationsFlagDefault, obeyRegulationsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel52Flags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bandAdded := retrieveModel52BandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bandAdded

	err, centerFrequencyAdded := retrieveModel52CenterFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || centerFrequencyAdded

	err, channelAdded := retrieveModel52ChannelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelAdded

	err, channelEndFreqAdded := retrieveModel52ChannelEndFreqFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelEndFreqAdded

	err, channelStartFreqAdded := retrieveModel52ChannelStartFreqFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelStartFreqAdded

	err, channelWidthAdded := retrieveModel52ChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, controlFrequencyAdded := retrieveModel52ControlFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || controlFrequencyAdded

	err, extensionChannelsAdded := retrieveModel52ExtensionChannelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || extensionChannelsAdded

	err, isAirMaxAdded := retrieveModel52IsAirMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isAirMaxAdded

	err, isDFSAdded := retrieveModel52IsDFSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isDFSAdded

	err, isEIRPLimitedAdded := retrieveModel52IsEIRPLimitedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isEIRPLimitedAdded

	err, isIndoorAdded := retrieveModel52IsIndoorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isIndoorAdded

	err, maxAntennaGainAdded := retrieveModel52MaxAntennaGainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxAntennaGainAdded

	err, maxTXPowerAdded := retrieveModel52MaxTXPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxTXPowerAdded

	err, obeyRegulationsAdded := retrieveModel52ObeyRegulationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || obeyRegulationsAdded

	return nil, retAdded
}

func retrieveModel52BandFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bandFlagName := fmt.Sprintf("%v.band", cmdPrefix)
	if cmd.Flags().Changed(bandFlagName) {

		var bandFlagName string
		if cmdPrefix == "" {
			bandFlagName = "band"
		} else {
			bandFlagName = fmt.Sprintf("%v.band", cmdPrefix)
		}

		bandFlagValue, err := cmd.Flags().GetString(bandFlagName)
		if err != nil {
			return err, false
		}
		m.Band = &bandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52CenterFrequencyFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	centerFrequencyFlagName := fmt.Sprintf("%v.centerFrequency", cmdPrefix)
	if cmd.Flags().Changed(centerFrequencyFlagName) {

		var centerFrequencyFlagName string
		if cmdPrefix == "" {
			centerFrequencyFlagName = "centerFrequency"
		} else {
			centerFrequencyFlagName = fmt.Sprintf("%v.centerFrequency", cmdPrefix)
		}

		centerFrequencyFlagValue, err := cmd.Flags().GetFloat64(centerFrequencyFlagName)
		if err != nil {
			return err, false
		}
		m.CenterFrequency = &centerFrequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52ChannelFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelFlagName := fmt.Sprintf("%v.channel", cmdPrefix)
	if cmd.Flags().Changed(channelFlagName) {

		var channelFlagName string
		if cmdPrefix == "" {
			channelFlagName = "channel"
		} else {
			channelFlagName = fmt.Sprintf("%v.channel", cmdPrefix)
		}

		channelFlagValue, err := cmd.Flags().GetFloat64(channelFlagName)
		if err != nil {
			return err, false
		}
		m.Channel = &channelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52ChannelEndFreqFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelEndFreqFlagName := fmt.Sprintf("%v.channelEndFreq", cmdPrefix)
	if cmd.Flags().Changed(channelEndFreqFlagName) {

		var channelEndFreqFlagName string
		if cmdPrefix == "" {
			channelEndFreqFlagName = "channelEndFreq"
		} else {
			channelEndFreqFlagName = fmt.Sprintf("%v.channelEndFreq", cmdPrefix)
		}

		channelEndFreqFlagValue, err := cmd.Flags().GetFloat64(channelEndFreqFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelEndFreq = &channelEndFreqFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52ChannelStartFreqFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelStartFreqFlagName := fmt.Sprintf("%v.channelStartFreq", cmdPrefix)
	if cmd.Flags().Changed(channelStartFreqFlagName) {

		var channelStartFreqFlagName string
		if cmdPrefix == "" {
			channelStartFreqFlagName = "channelStartFreq"
		} else {
			channelStartFreqFlagName = fmt.Sprintf("%v.channelStartFreq", cmdPrefix)
		}

		channelStartFreqFlagValue, err := cmd.Flags().GetFloat64(channelStartFreqFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelStartFreq = &channelStartFreqFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52ChannelWidthFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetFloat64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52ControlFrequencyFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	controlFrequencyFlagName := fmt.Sprintf("%v.controlFrequency", cmdPrefix)
	if cmd.Flags().Changed(controlFrequencyFlagName) {

		var controlFrequencyFlagName string
		if cmdPrefix == "" {
			controlFrequencyFlagName = "controlFrequency"
		} else {
			controlFrequencyFlagName = fmt.Sprintf("%v.controlFrequency", cmdPrefix)
		}

		controlFrequencyFlagValue, err := cmd.Flags().GetFloat64(controlFrequencyFlagName)
		if err != nil {
			return err, false
		}
		m.ControlFrequency = &controlFrequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52ExtensionChannelsFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	extensionChannelsFlagName := fmt.Sprintf("%v.extensionChannels", cmdPrefix)
	if cmd.Flags().Changed(extensionChannelsFlagName) {
		// warning: extensionChannels array type ExtensionChannels is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel52IsAirMaxFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isAirMaxFlagName := fmt.Sprintf("%v.isAirMax", cmdPrefix)
	if cmd.Flags().Changed(isAirMaxFlagName) {

		var isAirMaxFlagName string
		if cmdPrefix == "" {
			isAirMaxFlagName = "isAirMax"
		} else {
			isAirMaxFlagName = fmt.Sprintf("%v.isAirMax", cmdPrefix)
		}

		isAirMaxFlagValue, err := cmd.Flags().GetBool(isAirMaxFlagName)
		if err != nil {
			return err, false
		}
		m.IsAirMax = &isAirMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52IsDFSFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isDFSFlagName := fmt.Sprintf("%v.isDFS", cmdPrefix)
	if cmd.Flags().Changed(isDFSFlagName) {

		var isDFSFlagName string
		if cmdPrefix == "" {
			isDFSFlagName = "isDFS"
		} else {
			isDFSFlagName = fmt.Sprintf("%v.isDFS", cmdPrefix)
		}

		isDFSFlagValue, err := cmd.Flags().GetBool(isDFSFlagName)
		if err != nil {
			return err, false
		}
		m.IsDFS = &isDFSFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52IsEIRPLimitedFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isEIRPLimitedFlagName := fmt.Sprintf("%v.isEIRPLimited", cmdPrefix)
	if cmd.Flags().Changed(isEIRPLimitedFlagName) {

		var isEIRPLimitedFlagName string
		if cmdPrefix == "" {
			isEIRPLimitedFlagName = "isEIRPLimited"
		} else {
			isEIRPLimitedFlagName = fmt.Sprintf("%v.isEIRPLimited", cmdPrefix)
		}

		isEIRPLimitedFlagValue, err := cmd.Flags().GetBool(isEIRPLimitedFlagName)
		if err != nil {
			return err, false
		}
		m.IsEIRPLimited = &isEIRPLimitedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52IsIndoorFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isIndoorFlagName := fmt.Sprintf("%v.isIndoor", cmdPrefix)
	if cmd.Flags().Changed(isIndoorFlagName) {

		var isIndoorFlagName string
		if cmdPrefix == "" {
			isIndoorFlagName = "isIndoor"
		} else {
			isIndoorFlagName = fmt.Sprintf("%v.isIndoor", cmdPrefix)
		}

		isIndoorFlagValue, err := cmd.Flags().GetBool(isIndoorFlagName)
		if err != nil {
			return err, false
		}
		m.IsIndoor = &isIndoorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52MaxAntennaGainFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxAntennaGainFlagName := fmt.Sprintf("%v.maxAntennaGain", cmdPrefix)
	if cmd.Flags().Changed(maxAntennaGainFlagName) {

		var maxAntennaGainFlagName string
		if cmdPrefix == "" {
			maxAntennaGainFlagName = "maxAntennaGain"
		} else {
			maxAntennaGainFlagName = fmt.Sprintf("%v.maxAntennaGain", cmdPrefix)
		}

		maxAntennaGainFlagValue, err := cmd.Flags().GetFloat64(maxAntennaGainFlagName)
		if err != nil {
			return err, false
		}
		m.MaxAntennaGain = &maxAntennaGainFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52MaxTXPowerFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxTXPowerFlagName := fmt.Sprintf("%v.maxTXPower", cmdPrefix)
	if cmd.Flags().Changed(maxTXPowerFlagName) {

		var maxTXPowerFlagName string
		if cmdPrefix == "" {
			maxTXPowerFlagName = "maxTXPower"
		} else {
			maxTXPowerFlagName = fmt.Sprintf("%v.maxTXPower", cmdPrefix)
		}

		maxTXPowerFlagValue, err := cmd.Flags().GetFloat64(maxTXPowerFlagName)
		if err != nil {
			return err, false
		}
		m.MaxTXPower = &maxTXPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel52ObeyRegulationsFlags(depth int, m *models.Model52, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	obeyRegulationsFlagName := fmt.Sprintf("%v.obeyRegulations", cmdPrefix)
	if cmd.Flags().Changed(obeyRegulationsFlagName) {

		var obeyRegulationsFlagName string
		if cmdPrefix == "" {
			obeyRegulationsFlagName = "obeyRegulations"
		} else {
			obeyRegulationsFlagName = fmt.Sprintf("%v.obeyRegulations", cmdPrefix)
		}

		obeyRegulationsFlagValue, err := cmd.Flags().GetBool(obeyRegulationsFlagName)
		if err != nil {
			return err, false
		}
		m.ObeyRegulations = &obeyRegulationsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
