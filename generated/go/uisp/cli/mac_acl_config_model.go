// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for MacACLConfig

// register flags to command
func registerModelMacACLConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMacACLConfigClients(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMacACLConfigIsEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMacACLConfigPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMacACLConfigClients(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: clients Clients array type is not supported by go-swagger cli yet

	return nil
}

func registerMacACLConfigIsEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isEnabledDescription := `Required. `

	var isEnabledFlagName string
	if cmdPrefix == "" {
		isEnabledFlagName = "isEnabled"
	} else {
		isEnabledFlagName = fmt.Sprintf("%v.isEnabled", cmdPrefix)
	}

	var isEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isEnabledFlagName, isEnabledFlagDefault, isEnabledDescription)

	return nil
}

func registerMacACLConfigPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	policyDescription := `Enum: ["allow","deny"]. Required. `

	var policyFlagName string
	if cmdPrefix == "" {
		policyFlagName = "policy"
	} else {
		policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	var policyFlagDefault string

	_ = cmd.PersistentFlags().String(policyFlagName, policyFlagDefault, policyDescription)

	if err := cmd.RegisterFlagCompletionFunc(policyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMacACLConfigFlags(depth int, m *models.MacACLConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clientsAdded := retrieveMacACLConfigClientsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientsAdded

	err, isEnabledAdded := retrieveMacACLConfigIsEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isEnabledAdded

	err, policyAdded := retrieveMacACLConfigPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || policyAdded

	return nil, retAdded
}

func retrieveMacACLConfigClientsFlags(depth int, m *models.MacACLConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientsFlagName := fmt.Sprintf("%v.clients", cmdPrefix)
	if cmd.Flags().Changed(clientsFlagName) {
		// warning: clients array type Clients is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMacACLConfigIsEnabledFlags(depth int, m *models.MacACLConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isEnabledFlagName := fmt.Sprintf("%v.isEnabled", cmdPrefix)
	if cmd.Flags().Changed(isEnabledFlagName) {

		var isEnabledFlagName string
		if cmdPrefix == "" {
			isEnabledFlagName = "isEnabled"
		} else {
			isEnabledFlagName = fmt.Sprintf("%v.isEnabled", cmdPrefix)
		}

		isEnabledFlagValue, err := cmd.Flags().GetBool(isEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsEnabled = &isEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMacACLConfigPolicyFlags(depth int, m *models.MacACLConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	policyFlagName := fmt.Sprintf("%v.policy", cmdPrefix)
	if cmd.Flags().Changed(policyFlagName) {

		var policyFlagName string
		if cmdPrefix == "" {
			policyFlagName = "policy"
		} else {
			policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
		}

		policyFlagValue, err := cmd.Flags().GetString(policyFlagName)
		if err != nil {
			return err, false
		}
		m.Policy = &policyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
