// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for NtpClient

// register flags to command
func registerModelNtpClientFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNtpClientEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNtpClientNtpServer1(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNtpClientNtpServer2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNtpClientEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Set to true to enable NTP client`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerNtpClientNtpServer1(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ntpServer1Description := ``

	var ntpServer1FlagName string
	if cmdPrefix == "" {
		ntpServer1FlagName = "ntpServer1"
	} else {
		ntpServer1FlagName = fmt.Sprintf("%v.ntpServer1", cmdPrefix)
	}

	var ntpServer1FlagDefault string

	_ = cmd.PersistentFlags().String(ntpServer1FlagName, ntpServer1FlagDefault, ntpServer1Description)

	return nil
}

func registerNtpClientNtpServer2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ntpServer2Description := `Secondary NTP server.`

	var ntpServer2FlagName string
	if cmdPrefix == "" {
		ntpServer2FlagName = "ntpServer2"
	} else {
		ntpServer2FlagName = fmt.Sprintf("%v.ntpServer2", cmdPrefix)
	}

	var ntpServer2FlagDefault string

	_ = cmd.PersistentFlags().String(ntpServer2FlagName, ntpServer2FlagDefault, ntpServer2Description)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNtpClientFlags(depth int, m *models.NtpClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveNtpClientEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, ntpServer1Added := retrieveNtpClientNtpServer1Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ntpServer1Added

	err, ntpServer2Added := retrieveNtpClientNtpServer2Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ntpServer2Added

	return nil, retAdded
}

func retrieveNtpClientEnabledFlags(depth int, m *models.NtpClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNtpClientNtpServer1Flags(depth int, m *models.NtpClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ntpServer1FlagName := fmt.Sprintf("%v.ntpServer1", cmdPrefix)
	if cmd.Flags().Changed(ntpServer1FlagName) {

		var ntpServer1FlagName string
		if cmdPrefix == "" {
			ntpServer1FlagName = "ntpServer1"
		} else {
			ntpServer1FlagName = fmt.Sprintf("%v.ntpServer1", cmdPrefix)
		}

		ntpServer1FlagValue, err := cmd.Flags().GetString(ntpServer1FlagName)
		if err != nil {
			return err, false
		}
		m.NtpServer1 = ntpServer1FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNtpClientNtpServer2Flags(depth int, m *models.NtpClient, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ntpServer2FlagName := fmt.Sprintf("%v.ntpServer2", cmdPrefix)
	if cmd.Flags().Changed(ntpServer2FlagName) {

		var ntpServer2FlagName string
		if cmdPrefix == "" {
			ntpServer2FlagName = "ntpServer2"
		} else {
			ntpServer2FlagName = fmt.Sprintf("%v.ntpServer2", cmdPrefix)
		}

		ntpServer2FlagValue, err := cmd.Flags().GetString(ntpServer2FlagName)
		if err != nil {
			return err, false
		}
		m.NtpServer2 = ntpServer2FlagValue

		retAdded = true
	}

	return nil, retAdded
}
