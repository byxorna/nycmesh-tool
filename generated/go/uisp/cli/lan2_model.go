// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Lan2

// register flags to command
func registerModelLan2Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLan2LanAddress6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan2LanMode6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan2RouterAdvertisementMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan2RouterAdvertisementPrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLan2LanAddress6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lanAddress6Description := `Required. IPv6 static LAN address`

	var lanAddress6FlagName string
	if cmdPrefix == "" {
		lanAddress6FlagName = "lanAddress6"
	} else {
		lanAddress6FlagName = fmt.Sprintf("%v.lanAddress6", cmdPrefix)
	}

	var lanAddress6FlagDefault string

	_ = cmd.PersistentFlags().String(lanAddress6FlagName, lanAddress6FlagDefault, lanAddress6Description)

	return nil
}

func registerLan2LanMode6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lanMode6Description := `Enum: ["auto","static"]. Required. IPv6 LAN mode`

	var lanMode6FlagName string
	if cmdPrefix == "" {
		lanMode6FlagName = "lanMode6"
	} else {
		lanMode6FlagName = fmt.Sprintf("%v.lanMode6", cmdPrefix)
	}

	var lanMode6FlagDefault string

	_ = cmd.PersistentFlags().String(lanMode6FlagName, lanMode6FlagDefault, lanMode6Description)

	if err := cmd.RegisterFlagCompletionFunc(lanMode6FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","static"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLan2RouterAdvertisementMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	routerAdvertisementModeDescription := `Enum: ["auto","static"]. Required. Router advertisement mode`

	var routerAdvertisementModeFlagName string
	if cmdPrefix == "" {
		routerAdvertisementModeFlagName = "routerAdvertisementMode"
	} else {
		routerAdvertisementModeFlagName = fmt.Sprintf("%v.routerAdvertisementMode", cmdPrefix)
	}

	var routerAdvertisementModeFlagDefault string

	_ = cmd.PersistentFlags().String(routerAdvertisementModeFlagName, routerAdvertisementModeFlagDefault, routerAdvertisementModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(routerAdvertisementModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","static"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLan2RouterAdvertisementPrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	routerAdvertisementPrefixDescription := `Required. Static prefix configuration in IPv6 CIDR`

	var routerAdvertisementPrefixFlagName string
	if cmdPrefix == "" {
		routerAdvertisementPrefixFlagName = "routerAdvertisementPrefix"
	} else {
		routerAdvertisementPrefixFlagName = fmt.Sprintf("%v.routerAdvertisementPrefix", cmdPrefix)
	}

	var routerAdvertisementPrefixFlagDefault string

	_ = cmd.PersistentFlags().String(routerAdvertisementPrefixFlagName, routerAdvertisementPrefixFlagDefault, routerAdvertisementPrefixDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLan2Flags(depth int, m *models.Lan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, lanAddress6Added := retrieveLan2LanAddress6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanAddress6Added

	err, lanMode6Added := retrieveLan2LanMode6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanMode6Added

	err, routerAdvertisementModeAdded := retrieveLan2RouterAdvertisementModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routerAdvertisementModeAdded

	err, routerAdvertisementPrefixAdded := retrieveLan2RouterAdvertisementPrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routerAdvertisementPrefixAdded

	return nil, retAdded
}

func retrieveLan2LanAddress6Flags(depth int, m *models.Lan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lanAddress6FlagName := fmt.Sprintf("%v.lanAddress6", cmdPrefix)
	if cmd.Flags().Changed(lanAddress6FlagName) {

		var lanAddress6FlagName string
		if cmdPrefix == "" {
			lanAddress6FlagName = "lanAddress6"
		} else {
			lanAddress6FlagName = fmt.Sprintf("%v.lanAddress6", cmdPrefix)
		}

		lanAddress6FlagValue, err := cmd.Flags().GetString(lanAddress6FlagName)
		if err != nil {
			return err, false
		}
		m.LanAddress6 = &lanAddress6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan2LanMode6Flags(depth int, m *models.Lan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lanMode6FlagName := fmt.Sprintf("%v.lanMode6", cmdPrefix)
	if cmd.Flags().Changed(lanMode6FlagName) {

		var lanMode6FlagName string
		if cmdPrefix == "" {
			lanMode6FlagName = "lanMode6"
		} else {
			lanMode6FlagName = fmt.Sprintf("%v.lanMode6", cmdPrefix)
		}

		lanMode6FlagValue, err := cmd.Flags().GetString(lanMode6FlagName)
		if err != nil {
			return err, false
		}
		m.LanMode6 = &lanMode6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan2RouterAdvertisementModeFlags(depth int, m *models.Lan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routerAdvertisementModeFlagName := fmt.Sprintf("%v.routerAdvertisementMode", cmdPrefix)
	if cmd.Flags().Changed(routerAdvertisementModeFlagName) {

		var routerAdvertisementModeFlagName string
		if cmdPrefix == "" {
			routerAdvertisementModeFlagName = "routerAdvertisementMode"
		} else {
			routerAdvertisementModeFlagName = fmt.Sprintf("%v.routerAdvertisementMode", cmdPrefix)
		}

		routerAdvertisementModeFlagValue, err := cmd.Flags().GetString(routerAdvertisementModeFlagName)
		if err != nil {
			return err, false
		}
		m.RouterAdvertisementMode = &routerAdvertisementModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan2RouterAdvertisementPrefixFlags(depth int, m *models.Lan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routerAdvertisementPrefixFlagName := fmt.Sprintf("%v.routerAdvertisementPrefix", cmdPrefix)
	if cmd.Flags().Changed(routerAdvertisementPrefixFlagName) {

		var routerAdvertisementPrefixFlagName string
		if cmdPrefix == "" {
			routerAdvertisementPrefixFlagName = "routerAdvertisementPrefix"
		} else {
			routerAdvertisementPrefixFlagName = fmt.Sprintf("%v.routerAdvertisementPrefix", cmdPrefix)
		}

		routerAdvertisementPrefixFlagValue, err := cmd.Flags().GetString(routerAdvertisementPrefixFlagName)
		if err != nil {
			return err, false
		}
		m.RouterAdvertisementPrefix = &routerAdvertisementPrefixFlagValue

		retAdded = true
	}

	return nil, retAdded
}
