// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/client/authorization"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationAuthorizationGetNmsAccountLoginUbiquitiCmd returns a cmd to handle operation getNmsAccountLoginUbiquiti
func makeOperationAuthorizationGetNmsAccountLoginUbiquitiCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getNmsAccountLoginUbiquiti",
		Short: ``,
		RunE:  runOperationAuthorizationGetNmsAccountLoginUbiquiti,
	}

	if err := registerOperationAuthorizationGetNmsAccountLoginUbiquitiParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationAuthorizationGetNmsAccountLoginUbiquiti uses cmd flags to call endpoint api
func runOperationAuthorizationGetNmsAccountLoginUbiquiti(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := authorization.NewGetNmsAccountLoginUbiquitiParams()
	if err, _ := retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiErrorFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiErrorDescriptionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiStateFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationAuthorizationGetNmsAccountLoginUbiquitiResult(appCli.Authorization.GetNmsAccountLoginUbiquiti(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationAuthorizationGetNmsAccountLoginUbiquitiParamFlags registers all flags needed to fill params
func registerOperationAuthorizationGetNmsAccountLoginUbiquitiParamFlags(cmd *cobra.Command) error {
	if err := registerOperationAuthorizationGetNmsAccountLoginUbiquitiCodeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAuthorizationGetNmsAccountLoginUbiquitiErrorParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAuthorizationGetNmsAccountLoginUbiquitiErrorDescriptionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAuthorizationGetNmsAccountLoginUbiquitiStateParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationAuthorizationGetNmsAccountLoginUbiquitiCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	codeDescription := ``

	var codeFlagName string
	if cmdPrefix == "" {
		codeFlagName = "code"
	} else {
		codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var codeFlagDefault string

	_ = cmd.PersistentFlags().String(codeFlagName, codeFlagDefault, codeDescription)

	return nil
}
func registerOperationAuthorizationGetNmsAccountLoginUbiquitiErrorParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	errorDescription := ``

	var errorFlagName string
	if cmdPrefix == "" {
		errorFlagName = "error"
	} else {
		errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var errorFlagDefault string

	_ = cmd.PersistentFlags().String(errorFlagName, errorFlagDefault, errorDescription)

	return nil
}
func registerOperationAuthorizationGetNmsAccountLoginUbiquitiErrorDescriptionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	errorDescriptionDescription := ``

	var errorDescriptionFlagName string
	if cmdPrefix == "" {
		errorDescriptionFlagName = "error_description"
	} else {
		errorDescriptionFlagName = fmt.Sprintf("%v.error_description", cmdPrefix)
	}

	var errorDescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(errorDescriptionFlagName, errorDescriptionFlagDefault, errorDescriptionDescription)

	return nil
}
func registerOperationAuthorizationGetNmsAccountLoginUbiquitiStateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stateDescription := ``

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	return nil
}

func retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiCodeFlag(m *authorization.GetNmsAccountLoginUbiquitiParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("code") {

		var codeFlagName string
		if cmdPrefix == "" {
			codeFlagName = "code"
		} else {
			codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		codeFlagValue, err := cmd.Flags().GetString(codeFlagName)
		if err != nil {
			return err, false
		}
		m.Code = &codeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiErrorFlag(m *authorization.GetNmsAccountLoginUbiquitiParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("error") {

		var errorFlagName string
		if cmdPrefix == "" {
			errorFlagName = "error"
		} else {
			errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		errorFlagValue, err := cmd.Flags().GetString(errorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = &errorFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiErrorDescriptionFlag(m *authorization.GetNmsAccountLoginUbiquitiParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("error_description") {

		var errorDescriptionFlagName string
		if cmdPrefix == "" {
			errorDescriptionFlagName = "error_description"
		} else {
			errorDescriptionFlagName = fmt.Sprintf("%v.error_description", cmdPrefix)
		}

		errorDescriptionFlagValue, err := cmd.Flags().GetString(errorDescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorDescription = &errorDescriptionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationAuthorizationGetNmsAccountLoginUbiquitiStateFlag(m *authorization.GetNmsAccountLoginUbiquitiParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("state") {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = &stateFlagValue

	}
	return nil, retAdded
}

// parseOperationAuthorizationGetNmsAccountLoginUbiquitiResult parses request result and return the string content
func parseOperationAuthorizationGetNmsAccountLoginUbiquitiResult(resp0 *authorization.GetNmsAccountLoginUbiquitiOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*authorization.GetNmsAccountLoginUbiquitiOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*authorization.GetNmsAccountLoginUbiquitiFound)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*authorization.GetNmsAccountLoginUbiquitiBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*authorization.GetNmsAccountLoginUbiquitiUnauthorized)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*authorization.GetNmsAccountLoginUbiquitiForbidden)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*authorization.GetNmsAccountLoginUbiquitiNotFound)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*authorization.GetNmsAccountLoginUbiquitiInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
