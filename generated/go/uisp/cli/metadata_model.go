// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Metadata

// register flags to command
func registerModelMetadataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMetadataMinVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMetadataMinVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minVersionDescription := `Required. Minimal required version of UNMS before update to the latest version is possible.`

	var minVersionFlagName string
	if cmdPrefix == "" {
		minVersionFlagName = "minVersion"
	} else {
		minVersionFlagName = fmt.Sprintf("%v.minVersion", cmdPrefix)
	}

	var minVersionFlagDefault string

	_ = cmd.PersistentFlags().String(minVersionFlagName, minVersionFlagDefault, minVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMetadataFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, minVersionAdded := retrieveMetadataMinVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minVersionAdded

	return nil, retAdded
}

func retrieveMetadataMinVersionFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minVersionFlagName := fmt.Sprintf("%v.minVersion", cmdPrefix)
	if cmd.Flags().Changed(minVersionFlagName) {

		var minVersionFlagName string
		if cmdPrefix == "" {
			minVersionFlagName = "minVersion"
		} else {
			minVersionFlagName = fmt.Sprintf("%v.minVersion", cmdPrefix)
		}

		minVersionFlagValue, err := cmd.Flags().GetString(minVersionFlagName)
		if err != nil {
			return err, false
		}
		m.MinVersion = &minVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
