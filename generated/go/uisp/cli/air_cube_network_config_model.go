// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for AirCubeNetworkConfig

// register flags to command
func registerModelAirCubeNetworkConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAirCubeNetworkConfigBlockManagementAccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigDataVlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigLan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigMgt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigNatEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigPortForwardRules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigStaticDhcpLeases(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigStaticRoutes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigUpnpd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigVlp1(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigVlp2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigVlp3(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeNetworkConfigWan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigBlockManagementAccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	blockManagementAccessDescription := `Required. `

	var blockManagementAccessFlagName string
	if cmdPrefix == "" {
		blockManagementAccessFlagName = "blockManagementAccess"
	} else {
		blockManagementAccessFlagName = fmt.Sprintf("%v.blockManagementAccess", cmdPrefix)
	}

	var blockManagementAccessFlagDefault bool

	_ = cmd.PersistentFlags().Bool(blockManagementAccessFlagName, blockManagementAccessFlagDefault, blockManagementAccessDescription)

	return nil
}

func registerAirCubeNetworkConfigDataVlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataVlanFlagName string
	if cmdPrefix == "" {
		dataVlanFlagName = "dataVlan"
	} else {
		dataVlanFlagName = fmt.Sprintf("%v.dataVlan", cmdPrefix)
	}

	if err := registerModelDataVlanFlags(depth+1, dataVlanFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigLan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lanFlagName string
	if cmdPrefix == "" {
		lanFlagName = "lan"
	} else {
		lanFlagName = fmt.Sprintf("%v.lan", cmdPrefix)
	}

	if err := registerModelLanFlags(depth+1, lanFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigMgt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var mgtFlagName string
	if cmdPrefix == "" {
		mgtFlagName = "mgt"
	} else {
		mgtFlagName = fmt.Sprintf("%v.mgt", cmdPrefix)
	}

	if err := registerModelMgtFlags(depth+1, mgtFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["bridge","router","soho"]. Required. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["bridge","router","soho"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigNatEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	natEnabledDescription := ``

	var natEnabledFlagName string
	if cmdPrefix == "" {
		natEnabledFlagName = "natEnabled"
	} else {
		natEnabledFlagName = fmt.Sprintf("%v.natEnabled", cmdPrefix)
	}

	var natEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(natEnabledFlagName, natEnabledFlagDefault, natEnabledDescription)

	return nil
}

func registerAirCubeNetworkConfigPortForwardRules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: portForwardRules PortForwardRules array type is not supported by go-swagger cli yet

	return nil
}

func registerAirCubeNetworkConfigStaticDhcpLeases(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: staticDhcpLeases StaticDhcpLeases array type is not supported by go-swagger cli yet

	return nil
}

func registerAirCubeNetworkConfigStaticRoutes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: staticRoutes StaticRoutes array type is not supported by go-swagger cli yet

	return nil
}

func registerAirCubeNetworkConfigUpnpd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var upnpdFlagName string
	if cmdPrefix == "" {
		upnpdFlagName = "upnpd"
	} else {
		upnpdFlagName = fmt.Sprintf("%v.upnpd", cmdPrefix)
	}

	if err := registerModelUpnpdFlags(depth+1, upnpdFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigVlp1(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var vlp1FlagName string
	if cmdPrefix == "" {
		vlp1FlagName = "vlp1"
	} else {
		vlp1FlagName = fmt.Sprintf("%v.vlp1", cmdPrefix)
	}

	if err := registerModelVlp1Flags(depth+1, vlp1FlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigVlp2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var vlp2FlagName string
	if cmdPrefix == "" {
		vlp2FlagName = "vlp2"
	} else {
		vlp2FlagName = fmt.Sprintf("%v.vlp2", cmdPrefix)
	}

	if err := registerModelVlp2Flags(depth+1, vlp2FlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigVlp3(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var vlp3FlagName string
	if cmdPrefix == "" {
		vlp3FlagName = "vlp3"
	} else {
		vlp3FlagName = fmt.Sprintf("%v.vlp3", cmdPrefix)
	}

	if err := registerModelVlp3Flags(depth+1, vlp3FlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeNetworkConfigWan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wanFlagName string
	if cmdPrefix == "" {
		wanFlagName = "wan"
	} else {
		wanFlagName = fmt.Sprintf("%v.wan", cmdPrefix)
	}

	if err := registerModelWanFlags(depth+1, wanFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAirCubeNetworkConfigFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, blockManagementAccessAdded := retrieveAirCubeNetworkConfigBlockManagementAccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blockManagementAccessAdded

	err, dataVlanAdded := retrieveAirCubeNetworkConfigDataVlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataVlanAdded

	err, lanAdded := retrieveAirCubeNetworkConfigLanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanAdded

	err, mgtAdded := retrieveAirCubeNetworkConfigMgtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mgtAdded

	err, modeAdded := retrieveAirCubeNetworkConfigModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, natEnabledAdded := retrieveAirCubeNetworkConfigNatEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || natEnabledAdded

	err, portForwardRulesAdded := retrieveAirCubeNetworkConfigPortForwardRulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portForwardRulesAdded

	err, staticDhcpLeasesAdded := retrieveAirCubeNetworkConfigStaticDhcpLeasesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || staticDhcpLeasesAdded

	err, staticRoutesAdded := retrieveAirCubeNetworkConfigStaticRoutesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || staticRoutesAdded

	err, upnpdAdded := retrieveAirCubeNetworkConfigUpnpdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upnpdAdded

	err, vlp1Added := retrieveAirCubeNetworkConfigVlp1Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlp1Added

	err, vlp2Added := retrieveAirCubeNetworkConfigVlp2Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlp2Added

	err, vlp3Added := retrieveAirCubeNetworkConfigVlp3Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlp3Added

	err, wanAdded := retrieveAirCubeNetworkConfigWanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanAdded

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigBlockManagementAccessFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	blockManagementAccessFlagName := fmt.Sprintf("%v.blockManagementAccess", cmdPrefix)
	if cmd.Flags().Changed(blockManagementAccessFlagName) {

		var blockManagementAccessFlagName string
		if cmdPrefix == "" {
			blockManagementAccessFlagName = "blockManagementAccess"
		} else {
			blockManagementAccessFlagName = fmt.Sprintf("%v.blockManagementAccess", cmdPrefix)
		}

		blockManagementAccessFlagValue, err := cmd.Flags().GetBool(blockManagementAccessFlagName)
		if err != nil {
			return err, false
		}
		m.BlockManagementAccess = &blockManagementAccessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigDataVlanFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataVlanFlagName := fmt.Sprintf("%v.dataVlan", cmdPrefix)
	if cmd.Flags().Changed(dataVlanFlagName) {
		// info: complex object dataVlan DataVlan is retrieved outside this Changed() block
	}
	dataVlanFlagValue := m.DataVlan
	if swag.IsZero(dataVlanFlagValue) {
		dataVlanFlagValue = &models.DataVlan{}
	}

	err, dataVlanAdded := retrieveModelDataVlanFlags(depth+1, dataVlanFlagValue, dataVlanFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataVlanAdded
	if dataVlanAdded {
		m.DataVlan = dataVlanFlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigLanFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lanFlagName := fmt.Sprintf("%v.lan", cmdPrefix)
	if cmd.Flags().Changed(lanFlagName) {
		// info: complex object lan Lan is retrieved outside this Changed() block
	}
	lanFlagValue := m.Lan
	if swag.IsZero(lanFlagValue) {
		lanFlagValue = &models.Lan{}
	}

	err, lanAdded := retrieveModelLanFlags(depth+1, lanFlagValue, lanFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanAdded
	if lanAdded {
		m.Lan = lanFlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigMgtFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mgtFlagName := fmt.Sprintf("%v.mgt", cmdPrefix)
	if cmd.Flags().Changed(mgtFlagName) {
		// info: complex object mgt Mgt is retrieved outside this Changed() block
	}
	mgtFlagValue := m.Mgt
	if swag.IsZero(mgtFlagValue) {
		mgtFlagValue = &models.Mgt{}
	}

	err, mgtAdded := retrieveModelMgtFlags(depth+1, mgtFlagValue, mgtFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mgtAdded
	if mgtAdded {
		m.Mgt = mgtFlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigModeFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = &modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigNatEnabledFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	natEnabledFlagName := fmt.Sprintf("%v.natEnabled", cmdPrefix)
	if cmd.Flags().Changed(natEnabledFlagName) {

		var natEnabledFlagName string
		if cmdPrefix == "" {
			natEnabledFlagName = "natEnabled"
		} else {
			natEnabledFlagName = fmt.Sprintf("%v.natEnabled", cmdPrefix)
		}

		natEnabledFlagValue, err := cmd.Flags().GetBool(natEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.NatEnabled = natEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigPortForwardRulesFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portForwardRulesFlagName := fmt.Sprintf("%v.portForwardRules", cmdPrefix)
	if cmd.Flags().Changed(portForwardRulesFlagName) {
		// warning: portForwardRules array type PortForwardRules is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigStaticDhcpLeasesFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	staticDhcpLeasesFlagName := fmt.Sprintf("%v.staticDhcpLeases", cmdPrefix)
	if cmd.Flags().Changed(staticDhcpLeasesFlagName) {
		// warning: staticDhcpLeases array type StaticDhcpLeases is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigStaticRoutesFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	staticRoutesFlagName := fmt.Sprintf("%v.staticRoutes", cmdPrefix)
	if cmd.Flags().Changed(staticRoutesFlagName) {
		// warning: staticRoutes array type StaticRoutes is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigUpnpdFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upnpdFlagName := fmt.Sprintf("%v.upnpd", cmdPrefix)
	if cmd.Flags().Changed(upnpdFlagName) {
		// info: complex object upnpd Upnpd is retrieved outside this Changed() block
	}
	upnpdFlagValue := m.Upnpd
	if swag.IsZero(upnpdFlagValue) {
		upnpdFlagValue = &models.Upnpd{}
	}

	err, upnpdAdded := retrieveModelUpnpdFlags(depth+1, upnpdFlagValue, upnpdFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upnpdAdded
	if upnpdAdded {
		m.Upnpd = upnpdFlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigVlp1Flags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlp1FlagName := fmt.Sprintf("%v.vlp1", cmdPrefix)
	if cmd.Flags().Changed(vlp1FlagName) {
		// info: complex object vlp1 Vlp1 is retrieved outside this Changed() block
	}
	vlp1FlagValue := m.Vlp1
	if swag.IsZero(vlp1FlagValue) {
		vlp1FlagValue = &models.Vlp1{}
	}

	err, vlp1Added := retrieveModelVlp1Flags(depth+1, vlp1FlagValue, vlp1FlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlp1Added
	if vlp1Added {
		m.Vlp1 = vlp1FlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigVlp2Flags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlp2FlagName := fmt.Sprintf("%v.vlp2", cmdPrefix)
	if cmd.Flags().Changed(vlp2FlagName) {
		// info: complex object vlp2 Vlp2 is retrieved outside this Changed() block
	}
	vlp2FlagValue := m.Vlp2
	if swag.IsZero(vlp2FlagValue) {
		vlp2FlagValue = &models.Vlp2{}
	}

	err, vlp2Added := retrieveModelVlp2Flags(depth+1, vlp2FlagValue, vlp2FlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlp2Added
	if vlp2Added {
		m.Vlp2 = vlp2FlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigVlp3Flags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlp3FlagName := fmt.Sprintf("%v.vlp3", cmdPrefix)
	if cmd.Flags().Changed(vlp3FlagName) {
		// info: complex object vlp3 Vlp3 is retrieved outside this Changed() block
	}
	vlp3FlagValue := m.Vlp3
	if swag.IsZero(vlp3FlagValue) {
		vlp3FlagValue = &models.Vlp3{}
	}

	err, vlp3Added := retrieveModelVlp3Flags(depth+1, vlp3FlagValue, vlp3FlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlp3Added
	if vlp3Added {
		m.Vlp3 = vlp3FlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeNetworkConfigWanFlags(depth int, m *models.AirCubeNetworkConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanFlagName := fmt.Sprintf("%v.wan", cmdPrefix)
	if cmd.Flags().Changed(wanFlagName) {
		// info: complex object wan Wan is retrieved outside this Changed() block
	}
	wanFlagValue := m.Wan
	if swag.IsZero(wanFlagValue) {
		wanFlagValue = &models.Wan{}
	}

	err, wanAdded := retrieveModelWanFlags(depth+1, wanFlagValue, wanFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanAdded
	if wanAdded {
		m.Wan = wanFlagValue
	}

	return nil, retAdded
}
