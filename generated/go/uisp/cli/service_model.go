// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// Schema cli for Service

// register flags to command
func registerModelServiceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceActiveFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceTariffID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceTrafficShapingOverrideEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceActiveFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	activeFromDescription := `Required. Time when the service was activated.`

	var activeFromFlagName string
	if cmdPrefix == "" {
		activeFromFlagName = "activeFrom"
	} else {
		activeFromFlagName = fmt.Sprintf("%v.activeFrom", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(activeFromFlagName, "", activeFromDescription)

	return nil
}

func registerServiceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerServiceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Service name.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerServiceStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: [0,1,2,3,4,5,6,7]. Required. Service status.`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault float64

	_ = cmd.PersistentFlags().Float64(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0,1,2,3,4,5,6,7]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerServiceTariffID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tariffIdDescription := `Required. ID of the tariff (service plan) used for this service.`

	var tariffIdFlagName string
	if cmdPrefix == "" {
		tariffIdFlagName = "tariffId"
	} else {
		tariffIdFlagName = fmt.Sprintf("%v.tariffId", cmdPrefix)
	}

	var tariffIdFlagDefault string

	_ = cmd.PersistentFlags().String(tariffIdFlagName, tariffIdFlagDefault, tariffIdDescription)

	return nil
}

func registerServiceTrafficShapingOverrideEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trafficShapingOverrideEnabledDescription := `Required. Whether traffic shaping is overridden for this client.`

	var trafficShapingOverrideEnabledFlagName string
	if cmdPrefix == "" {
		trafficShapingOverrideEnabledFlagName = "trafficShapingOverrideEnabled"
	} else {
		trafficShapingOverrideEnabledFlagName = fmt.Sprintf("%v.trafficShapingOverrideEnabled", cmdPrefix)
	}

	var trafficShapingOverrideEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(trafficShapingOverrideEnabledFlagName, trafficShapingOverrideEnabledFlagDefault, trafficShapingOverrideEnabledDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, activeFromAdded := retrieveServiceActiveFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || activeFromAdded

	err, idAdded := retrieveServiceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveServiceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, statusAdded := retrieveServiceStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, tariffIdAdded := retrieveServiceTariffIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tariffIdAdded

	err, trafficShapingOverrideEnabledAdded := retrieveServiceTrafficShapingOverrideEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trafficShapingOverrideEnabledAdded

	return nil, retAdded
}

func retrieveServiceActiveFromFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	activeFromFlagName := fmt.Sprintf("%v.activeFrom", cmdPrefix)
	if cmd.Flags().Changed(activeFromFlagName) {

		var activeFromFlagName string
		if cmdPrefix == "" {
			activeFromFlagName = "activeFrom"
		} else {
			activeFromFlagName = fmt.Sprintf("%v.activeFrom", cmdPrefix)
		}

		activeFromFlagValueStr, err := cmd.Flags().GetString(activeFromFlagName)
		if err != nil {
			return err, false
		}
		var activeFromFlagValue strfmt.DateTime
		if err := activeFromFlagValue.UnmarshalText([]byte(activeFromFlagValueStr)); err != nil {
			return err, false
		}
		m.ActiveFrom = &activeFromFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceIDFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceNameFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceStatusFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetFloat64(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceTariffIDFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tariffIdFlagName := fmt.Sprintf("%v.tariffId", cmdPrefix)
	if cmd.Flags().Changed(tariffIdFlagName) {

		var tariffIdFlagName string
		if cmdPrefix == "" {
			tariffIdFlagName = "tariffId"
		} else {
			tariffIdFlagName = fmt.Sprintf("%v.tariffId", cmdPrefix)
		}

		tariffIdFlagValue, err := cmd.Flags().GetString(tariffIdFlagName)
		if err != nil {
			return err, false
		}
		m.TariffID = &tariffIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceTrafficShapingOverrideEnabledFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trafficShapingOverrideEnabledFlagName := fmt.Sprintf("%v.trafficShapingOverrideEnabled", cmdPrefix)
	if cmd.Flags().Changed(trafficShapingOverrideEnabledFlagName) {

		var trafficShapingOverrideEnabledFlagName string
		if cmdPrefix == "" {
			trafficShapingOverrideEnabledFlagName = "trafficShapingOverrideEnabled"
		} else {
			trafficShapingOverrideEnabledFlagName = fmt.Sprintf("%v.trafficShapingOverrideEnabled", cmdPrefix)
		}

		trafficShapingOverrideEnabledFlagValue, err := cmd.Flags().GetBool(trafficShapingOverrideEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.TrafficShapingOverrideEnabled = &trafficShapingOverrideEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}
