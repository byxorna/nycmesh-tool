// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for DataComingFromCableTestOnESDevices

// register flags to command
func registerModelDataComingFromCableTestOnESDevicesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDataComingFromCableTestOnESDevicesLengthFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataComingFromCableTestOnESDevicesLengthTo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataComingFromCableTestOnESDevicesPairs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataComingFromCableTestOnESDevicesStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDataComingFromCableTestOnESDevicesLengthFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lengthFromDescription := `Required. `

	var lengthFromFlagName string
	if cmdPrefix == "" {
		lengthFromFlagName = "lengthFrom"
	} else {
		lengthFromFlagName = fmt.Sprintf("%v.lengthFrom", cmdPrefix)
	}

	var lengthFromFlagDefault float64

	_ = cmd.PersistentFlags().Float64(lengthFromFlagName, lengthFromFlagDefault, lengthFromDescription)

	return nil
}

func registerDataComingFromCableTestOnESDevicesLengthTo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lengthToDescription := `Required. `

	var lengthToFlagName string
	if cmdPrefix == "" {
		lengthToFlagName = "lengthTo"
	} else {
		lengthToFlagName = fmt.Sprintf("%v.lengthTo", cmdPrefix)
	}

	var lengthToFlagDefault float64

	_ = cmd.PersistentFlags().Float64(lengthToFlagName, lengthToFlagDefault, lengthToDescription)

	return nil
}

func registerDataComingFromCableTestOnESDevicesPairs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pairsFlagName string
	if cmdPrefix == "" {
		pairsFlagName = "pairs"
	} else {
		pairsFlagName = fmt.Sprintf("%v.pairs", cmdPrefix)
	}

	if err := registerModelPairsFlags(depth+1, pairsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDataComingFromCableTestOnESDevicesStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Required. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDataComingFromCableTestOnESDevicesFlags(depth int, m *models.DataComingFromCableTestOnESDevices, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, lengthFromAdded := retrieveDataComingFromCableTestOnESDevicesLengthFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lengthFromAdded

	err, lengthToAdded := retrieveDataComingFromCableTestOnESDevicesLengthToFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lengthToAdded

	err, pairsAdded := retrieveDataComingFromCableTestOnESDevicesPairsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pairsAdded

	err, statusAdded := retrieveDataComingFromCableTestOnESDevicesStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveDataComingFromCableTestOnESDevicesLengthFromFlags(depth int, m *models.DataComingFromCableTestOnESDevices, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lengthFromFlagName := fmt.Sprintf("%v.lengthFrom", cmdPrefix)
	if cmd.Flags().Changed(lengthFromFlagName) {

		var lengthFromFlagName string
		if cmdPrefix == "" {
			lengthFromFlagName = "lengthFrom"
		} else {
			lengthFromFlagName = fmt.Sprintf("%v.lengthFrom", cmdPrefix)
		}

		lengthFromFlagValue, err := cmd.Flags().GetFloat64(lengthFromFlagName)
		if err != nil {
			return err, false
		}
		m.LengthFrom = &lengthFromFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDataComingFromCableTestOnESDevicesLengthToFlags(depth int, m *models.DataComingFromCableTestOnESDevices, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lengthToFlagName := fmt.Sprintf("%v.lengthTo", cmdPrefix)
	if cmd.Flags().Changed(lengthToFlagName) {

		var lengthToFlagName string
		if cmdPrefix == "" {
			lengthToFlagName = "lengthTo"
		} else {
			lengthToFlagName = fmt.Sprintf("%v.lengthTo", cmdPrefix)
		}

		lengthToFlagValue, err := cmd.Flags().GetFloat64(lengthToFlagName)
		if err != nil {
			return err, false
		}
		m.LengthTo = &lengthToFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDataComingFromCableTestOnESDevicesPairsFlags(depth int, m *models.DataComingFromCableTestOnESDevices, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pairsFlagName := fmt.Sprintf("%v.pairs", cmdPrefix)
	if cmd.Flags().Changed(pairsFlagName) {
		// info: complex object pairs Pairs is retrieved outside this Changed() block
	}
	pairsFlagValue := m.Pairs
	if swag.IsZero(pairsFlagValue) {
		pairsFlagValue = &models.Pairs{}
	}

	err, pairsAdded := retrieveModelPairsFlags(depth+1, pairsFlagValue, pairsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pairsAdded
	if pairsAdded {
		m.Pairs = pairsFlagValue
	}

	return nil, retAdded
}

func retrieveDataComingFromCableTestOnESDevicesStatusFlags(depth int, m *models.DataComingFromCableTestOnESDevices, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
