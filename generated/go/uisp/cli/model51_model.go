// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model51

// register flags to command
func registerModelModel51Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel51Gain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel51ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel51IsBuiltIn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel51Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel51Gain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gainDescription := `Required. `

	var gainFlagName string
	if cmdPrefix == "" {
		gainFlagName = "gain"
	} else {
		gainFlagName = fmt.Sprintf("%v.gain", cmdPrefix)
	}

	var gainFlagDefault float64

	_ = cmd.PersistentFlags().Float64(gainFlagName, gainFlagDefault, gainDescription)

	return nil
}

func registerModel51ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault float64

	_ = cmd.PersistentFlags().Float64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel51IsBuiltIn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isBuiltInDescription := `Required. `

	var isBuiltInFlagName string
	if cmdPrefix == "" {
		isBuiltInFlagName = "isBuiltIn"
	} else {
		isBuiltInFlagName = fmt.Sprintf("%v.isBuiltIn", cmdPrefix)
	}

	var isBuiltInFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isBuiltInFlagName, isBuiltInFlagDefault, isBuiltInDescription)

	return nil
}

func registerModel51Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel51Flags(depth int, m *models.Model51, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, gainAdded := retrieveModel51GainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gainAdded

	err, idAdded := retrieveModel51IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, isBuiltInAdded := retrieveModel51IsBuiltInFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isBuiltInAdded

	err, nameAdded := retrieveModel51NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveModel51GainFlags(depth int, m *models.Model51, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gainFlagName := fmt.Sprintf("%v.gain", cmdPrefix)
	if cmd.Flags().Changed(gainFlagName) {

		var gainFlagName string
		if cmdPrefix == "" {
			gainFlagName = "gain"
		} else {
			gainFlagName = fmt.Sprintf("%v.gain", cmdPrefix)
		}

		gainFlagValue, err := cmd.Flags().GetFloat64(gainFlagName)
		if err != nil {
			return err, false
		}
		m.Gain = &gainFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel51IDFlags(depth int, m *models.Model51, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetFloat64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel51IsBuiltInFlags(depth int, m *models.Model51, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isBuiltInFlagName := fmt.Sprintf("%v.isBuiltIn", cmdPrefix)
	if cmd.Flags().Changed(isBuiltInFlagName) {

		var isBuiltInFlagName string
		if cmdPrefix == "" {
			isBuiltInFlagName = "isBuiltIn"
		} else {
			isBuiltInFlagName = fmt.Sprintf("%v.isBuiltIn", cmdPrefix)
		}

		isBuiltInFlagValue, err := cmd.Flags().GetBool(isBuiltInFlagName)
		if err != nil {
			return err, false
		}
		m.IsBuiltIn = &isBuiltInFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel51NameFlags(depth int, m *models.Model51, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
