// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model80

// register flags to command
func registerModelModel80Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel80Action(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel80ConnectionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel80Entity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel80Payload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel80Type(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel80Action(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := `Required. `

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	return nil
}

func registerModel80ConnectionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectionIdDescription := `Required. `

	var connectionIdFlagName string
	if cmdPrefix == "" {
		connectionIdFlagName = "connectionId"
	} else {
		connectionIdFlagName = fmt.Sprintf("%v.connectionId", cmdPrefix)
	}

	var connectionIdFlagDefault string

	_ = cmd.PersistentFlags().String(connectionIdFlagName, connectionIdFlagDefault, connectionIdDescription)

	return nil
}

func registerModel80Entity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entityDescription := `Required. `

	var entityFlagName string
	if cmdPrefix == "" {
		entityFlagName = "entity"
	} else {
		entityFlagName = fmt.Sprintf("%v.entity", cmdPrefix)
	}

	var entityFlagDefault string

	_ = cmd.PersistentFlags().String(entityFlagName, entityFlagDefault, entityDescription)

	return nil
}

func registerModel80Payload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	payloadDescription := ``

	var payloadFlagName string
	if cmdPrefix == "" {
		payloadFlagName = "payload"
	} else {
		payloadFlagName = fmt.Sprintf("%v.payload", cmdPrefix)
	}

	var payloadFlagDefault string

	_ = cmd.PersistentFlags().String(payloadFlagName, payloadFlagDefault, payloadDescription)

	return nil
}

func registerModel80Type(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel80Flags(depth int, m *models.Model80, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveModel80ActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, connectionIdAdded := retrieveModel80ConnectionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionIdAdded

	err, entityAdded := retrieveModel80EntityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entityAdded

	err, payloadAdded := retrieveModel80PayloadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || payloadAdded

	err, typeAdded := retrieveModel80TypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveModel80ActionFlags(depth int, m *models.Model80, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = &actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel80ConnectionIDFlags(depth int, m *models.Model80, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionIdFlagName := fmt.Sprintf("%v.connectionId", cmdPrefix)
	if cmd.Flags().Changed(connectionIdFlagName) {

		var connectionIdFlagName string
		if cmdPrefix == "" {
			connectionIdFlagName = "connectionId"
		} else {
			connectionIdFlagName = fmt.Sprintf("%v.connectionId", cmdPrefix)
		}

		connectionIdFlagValue, err := cmd.Flags().GetString(connectionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ConnectionID = &connectionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel80EntityFlags(depth int, m *models.Model80, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entityFlagName := fmt.Sprintf("%v.entity", cmdPrefix)
	if cmd.Flags().Changed(entityFlagName) {

		var entityFlagName string
		if cmdPrefix == "" {
			entityFlagName = "entity"
		} else {
			entityFlagName = fmt.Sprintf("%v.entity", cmdPrefix)
		}

		entityFlagValue, err := cmd.Flags().GetString(entityFlagName)
		if err != nil {
			return err, false
		}
		m.Entity = &entityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel80PayloadFlags(depth int, m *models.Model80, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	payloadFlagName := fmt.Sprintf("%v.payload", cmdPrefix)
	if cmd.Flags().Changed(payloadFlagName) {

		var payloadFlagName string
		if cmdPrefix == "" {
			payloadFlagName = "payload"
		} else {
			payloadFlagName = fmt.Sprintf("%v.payload", cmdPrefix)
		}

		payloadFlagValue, err := cmd.Flags().GetString(payloadFlagName)
		if err != nil {
			return err, false
		}
		m.Payload = payloadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel80TypeFlags(depth int, m *models.Model80, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
