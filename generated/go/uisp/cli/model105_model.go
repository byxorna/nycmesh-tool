// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model105

// register flags to command
func registerModelModel105Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel105Auth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel105AuthKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel105AuthKeysMD5(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel105Cost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel105ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel105Auth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authDescription := `Enum: ["md5","plaintext-password","off"]. Required. `

	var authFlagName string
	if cmdPrefix == "" {
		authFlagName = "auth"
	} else {
		authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
	}

	var authFlagDefault string

	_ = cmd.PersistentFlags().String(authFlagName, authFlagDefault, authDescription)

	if err := cmd.RegisterFlagCompletionFunc(authFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["md5","plaintext-password","off"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel105AuthKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authKeyDescription := ``

	var authKeyFlagName string
	if cmdPrefix == "" {
		authKeyFlagName = "authKey"
	} else {
		authKeyFlagName = fmt.Sprintf("%v.authKey", cmdPrefix)
	}

	var authKeyFlagDefault string

	_ = cmd.PersistentFlags().String(authKeyFlagName, authKeyFlagDefault, authKeyDescription)

	return nil
}

func registerModel105AuthKeysMD5(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: authKeysMD5 AuthKeysMD51 array type is not supported by go-swagger cli yet

	return nil
}

func registerModel105Cost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	costDescription := `Required. `

	var costFlagName string
	if cmdPrefix == "" {
		costFlagName = "cost"
	} else {
		costFlagName = fmt.Sprintf("%v.cost", cmdPrefix)
	}

	var costFlagDefault int64

	_ = cmd.PersistentFlags().Int64(costFlagName, costFlagDefault, costDescription)

	return nil
}

func registerModel105ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel105Flags(depth int, m *models.Model105, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authAdded := retrieveModel105AuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authAdded

	err, authKeyAdded := retrieveModel105AuthKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authKeyAdded

	err, authKeysMD5Added := retrieveModel105AuthKeysMD5Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authKeysMD5Added

	err, costAdded := retrieveModel105CostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || costAdded

	err, idAdded := retrieveModel105IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveModel105AuthFlags(depth int, m *models.Model105, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authFlagName := fmt.Sprintf("%v.auth", cmdPrefix)
	if cmd.Flags().Changed(authFlagName) {

		var authFlagName string
		if cmdPrefix == "" {
			authFlagName = "auth"
		} else {
			authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
		}

		authFlagValue, err := cmd.Flags().GetString(authFlagName)
		if err != nil {
			return err, false
		}
		m.Auth = &authFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel105AuthKeyFlags(depth int, m *models.Model105, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authKeyFlagName := fmt.Sprintf("%v.authKey", cmdPrefix)
	if cmd.Flags().Changed(authKeyFlagName) {

		var authKeyFlagName string
		if cmdPrefix == "" {
			authKeyFlagName = "authKey"
		} else {
			authKeyFlagName = fmt.Sprintf("%v.authKey", cmdPrefix)
		}

		authKeyFlagValue, err := cmd.Flags().GetString(authKeyFlagName)
		if err != nil {
			return err, false
		}
		m.AuthKey = authKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel105AuthKeysMD5Flags(depth int, m *models.Model105, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authKeysMD5FlagName := fmt.Sprintf("%v.authKeysMD5", cmdPrefix)
	if cmd.Flags().Changed(authKeysMD5FlagName) {
		// warning: authKeysMD5 array type AuthKeysMD51 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel105CostFlags(depth int, m *models.Model105, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	costFlagName := fmt.Sprintf("%v.cost", cmdPrefix)
	if cmd.Flags().Changed(costFlagName) {

		var costFlagName string
		if cmdPrefix == "" {
			costFlagName = "cost"
		} else {
			costFlagName = fmt.Sprintf("%v.cost", cmdPrefix)
		}

		costFlagValue, err := cmd.Flags().GetInt64(costFlagName)
		if err != nil {
			return err, false
		}
		m.Cost = &costFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel105IDFlags(depth int, m *models.Model105, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}
