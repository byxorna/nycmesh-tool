// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model75

// register flags to command
func registerModelModel75Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel75Channel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75ChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Elevation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Heading(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Latitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Longitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75MagneticHeading(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Model(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Resolution(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Roll(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel75Tilt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel75Channel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelDescription := `Channel frequency in MHz`

	var channelFlagName string
	if cmdPrefix == "" {
		channelFlagName = "channel"
	} else {
		channelFlagName = fmt.Sprintf("%v.channel", cmdPrefix)
	}

	var channelFlagDefault int64

	_ = cmd.PersistentFlags().Int64(channelFlagName, channelFlagDefault, channelDescription)

	return nil
}

func registerModel75ChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := `Channel width in MHz`

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerModel75Elevation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	elevationDescription := `Antenna's elevation in meters, defaults to 10m`

	var elevationFlagName string
	if cmdPrefix == "" {
		elevationFlagName = "elevation"
	} else {
		elevationFlagName = fmt.Sprintf("%v.elevation", cmdPrefix)
	}

	var elevationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(elevationFlagName, elevationFlagDefault, elevationDescription)

	return nil
}

func registerModel75Heading(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	headingDescription := `Antenna's azimuth rotation in rad, max 6.28318. North: 0, East: PI/2, South: PI, West: 3*PI/2.`

	var headingFlagName string
	if cmdPrefix == "" {
		headingFlagName = "heading"
	} else {
		headingFlagName = fmt.Sprintf("%v.heading", cmdPrefix)
	}

	var headingFlagDefault float64

	_ = cmd.PersistentFlags().Float64(headingFlagName, headingFlagDefault, headingDescription)

	return nil
}

func registerModel75Latitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latitudeDescription := `Required. `

	var latitudeFlagName string
	if cmdPrefix == "" {
		latitudeFlagName = "latitude"
	} else {
		latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
	}

	var latitudeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(latitudeFlagName, latitudeFlagDefault, latitudeDescription)

	return nil
}

func registerModel75Longitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	longitudeDescription := `Required. `

	var longitudeFlagName string
	if cmdPrefix == "" {
		longitudeFlagName = "longitude"
	} else {
		longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
	}

	var longitudeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(longitudeFlagName, longitudeFlagDefault, longitudeDescription)

	return nil
}

func registerModel75MagneticHeading(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	magneticHeadingDescription := `Antenna's azimuth rotation in rad with (magnetic declination is included), max 6.28318. North: 0, East: PI/2, South: PI, West: 3*PI/2.`

	var magneticHeadingFlagName string
	if cmdPrefix == "" {
		magneticHeadingFlagName = "magneticHeading"
	} else {
		magneticHeadingFlagName = fmt.Sprintf("%v.magneticHeading", cmdPrefix)
	}

	var magneticHeadingFlagDefault float64

	_ = cmd.PersistentFlags().Float64(magneticHeadingFlagName, magneticHeadingFlagDefault, magneticHeadingDescription)

	return nil
}

func registerModel75Model(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := `Enum: ["WaveAP"]. Required. `

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	if err := cmd.RegisterFlagCompletionFunc(modelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["WaveAP"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel75Resolution(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolutionDescription := `Enum: ["maxSize81","maxSize257","maxSize385","maxSize513","maxSize769","maxSize1025"]. Resolution of calculated coverage data`

	var resolutionFlagName string
	if cmdPrefix == "" {
		resolutionFlagName = "resolution"
	} else {
		resolutionFlagName = fmt.Sprintf("%v.resolution", cmdPrefix)
	}

	var resolutionFlagDefault string

	_ = cmd.PersistentFlags().String(resolutionFlagName, resolutionFlagDefault, resolutionDescription)

	if err := cmd.RegisterFlagCompletionFunc(resolutionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["maxSize81","maxSize257","maxSize385","maxSize513","maxSize769","maxSize1025"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel75Roll(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rollDescription := `Antenna's axial rotation in rad. Horizontal: 0, increased by right (clockwise) rotation.`

	var rollFlagName string
	if cmdPrefix == "" {
		rollFlagName = "roll"
	} else {
		rollFlagName = fmt.Sprintf("%v.roll", cmdPrefix)
	}

	var rollFlagDefault float64

	_ = cmd.PersistentFlags().Float64(rollFlagName, rollFlagDefault, rollDescription)

	return nil
}

func registerModel75Tilt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tiltDescription := `Antenna's vertical rotation in rad. Straight: 0, Down: -PI/2, Up: PI/2.`

	var tiltFlagName string
	if cmdPrefix == "" {
		tiltFlagName = "tilt"
	} else {
		tiltFlagName = fmt.Sprintf("%v.tilt", cmdPrefix)
	}

	var tiltFlagDefault float64

	_ = cmd.PersistentFlags().Float64(tiltFlagName, tiltFlagDefault, tiltDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel75Flags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, channelAdded := retrieveModel75ChannelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelAdded

	err, channelWidthAdded := retrieveModel75ChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, elevationAdded := retrieveModel75ElevationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || elevationAdded

	err, headingAdded := retrieveModel75HeadingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || headingAdded

	err, latitudeAdded := retrieveModel75LatitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latitudeAdded

	err, longitudeAdded := retrieveModel75LongitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || longitudeAdded

	err, magneticHeadingAdded := retrieveModel75MagneticHeadingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || magneticHeadingAdded

	err, modelAdded := retrieveModel75ModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, resolutionAdded := retrieveModel75ResolutionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolutionAdded

	err, rollAdded := retrieveModel75RollFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rollAdded

	err, tiltAdded := retrieveModel75TiltFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tiltAdded

	return nil, retAdded
}

func retrieveModel75ChannelFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelFlagName := fmt.Sprintf("%v.channel", cmdPrefix)
	if cmd.Flags().Changed(channelFlagName) {

		var channelFlagName string
		if cmdPrefix == "" {
			channelFlagName = "channel"
		} else {
			channelFlagName = fmt.Sprintf("%v.channel", cmdPrefix)
		}

		channelFlagValue, err := cmd.Flags().GetInt64(channelFlagName)
		if err != nil {
			return err, false
		}
		m.Channel = &channelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75ChannelWidthFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetInt64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75ElevationFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	elevationFlagName := fmt.Sprintf("%v.elevation", cmdPrefix)
	if cmd.Flags().Changed(elevationFlagName) {

		var elevationFlagName string
		if cmdPrefix == "" {
			elevationFlagName = "elevation"
		} else {
			elevationFlagName = fmt.Sprintf("%v.elevation", cmdPrefix)
		}

		elevationFlagValue, err := cmd.Flags().GetInt64(elevationFlagName)
		if err != nil {
			return err, false
		}
		m.Elevation = elevationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75HeadingFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	headingFlagName := fmt.Sprintf("%v.heading", cmdPrefix)
	if cmd.Flags().Changed(headingFlagName) {

		var headingFlagName string
		if cmdPrefix == "" {
			headingFlagName = "heading"
		} else {
			headingFlagName = fmt.Sprintf("%v.heading", cmdPrefix)
		}

		headingFlagValue, err := cmd.Flags().GetFloat64(headingFlagName)
		if err != nil {
			return err, false
		}
		m.Heading = &headingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75LatitudeFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latitudeFlagName := fmt.Sprintf("%v.latitude", cmdPrefix)
	if cmd.Flags().Changed(latitudeFlagName) {

		var latitudeFlagName string
		if cmdPrefix == "" {
			latitudeFlagName = "latitude"
		} else {
			latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
		}

		latitudeFlagValue, err := cmd.Flags().GetFloat64(latitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Latitude = &latitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75LongitudeFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	longitudeFlagName := fmt.Sprintf("%v.longitude", cmdPrefix)
	if cmd.Flags().Changed(longitudeFlagName) {

		var longitudeFlagName string
		if cmdPrefix == "" {
			longitudeFlagName = "longitude"
		} else {
			longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
		}

		longitudeFlagValue, err := cmd.Flags().GetFloat64(longitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Longitude = &longitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75MagneticHeadingFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	magneticHeadingFlagName := fmt.Sprintf("%v.magneticHeading", cmdPrefix)
	if cmd.Flags().Changed(magneticHeadingFlagName) {

		var magneticHeadingFlagName string
		if cmdPrefix == "" {
			magneticHeadingFlagName = "magneticHeading"
		} else {
			magneticHeadingFlagName = fmt.Sprintf("%v.magneticHeading", cmdPrefix)
		}

		magneticHeadingFlagValue, err := cmd.Flags().GetFloat64(magneticHeadingFlagName)
		if err != nil {
			return err, false
		}
		m.MagneticHeading = &magneticHeadingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75ModelFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = &modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75ResolutionFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolutionFlagName := fmt.Sprintf("%v.resolution", cmdPrefix)
	if cmd.Flags().Changed(resolutionFlagName) {

		var resolutionFlagName string
		if cmdPrefix == "" {
			resolutionFlagName = "resolution"
		} else {
			resolutionFlagName = fmt.Sprintf("%v.resolution", cmdPrefix)
		}

		resolutionFlagValue, err := cmd.Flags().GetString(resolutionFlagName)
		if err != nil {
			return err, false
		}
		m.Resolution = resolutionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75RollFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rollFlagName := fmt.Sprintf("%v.roll", cmdPrefix)
	if cmd.Flags().Changed(rollFlagName) {

		var rollFlagName string
		if cmdPrefix == "" {
			rollFlagName = "roll"
		} else {
			rollFlagName = fmt.Sprintf("%v.roll", cmdPrefix)
		}

		rollFlagValue, err := cmd.Flags().GetFloat64(rollFlagName)
		if err != nil {
			return err, false
		}
		m.Roll = &rollFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel75TiltFlags(depth int, m *models.Model75, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tiltFlagName := fmt.Sprintf("%v.tilt", cmdPrefix)
	if cmd.Flags().Changed(tiltFlagName) {

		var tiltFlagName string
		if cmdPrefix == "" {
			tiltFlagName = "tilt"
		} else {
			tiltFlagName = fmt.Sprintf("%v.tilt", cmdPrefix)
		}

		tiltFlagValue, err := cmd.Flags().GetFloat64(tiltFlagName)
		if err != nil {
			return err, false
		}
		m.Tilt = &tiltFlagValue

		retAdded = true
	}

	return nil, retAdded
}
