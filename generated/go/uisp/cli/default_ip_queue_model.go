// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for DefaultIPQueue

// register flags to command
func registerModelDefaultIPQueueFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDefaultIPQueueDownloadSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultIPQueueEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDefaultIPQueueUploadSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDefaultIPQueueDownloadSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downloadSpeedDescription := ``

	var downloadSpeedFlagName string
	if cmdPrefix == "" {
		downloadSpeedFlagName = "downloadSpeed"
	} else {
		downloadSpeedFlagName = fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
	}

	var downloadSpeedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downloadSpeedFlagName, downloadSpeedFlagDefault, downloadSpeedDescription)

	return nil
}

func registerDefaultIPQueueEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Enable configuration for QoS queue for IPs without any specific queue. The main purpose of this configuration is to block new devices without any active queue. If null, traffic not belonging to any queue is not limited.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerDefaultIPQueueUploadSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uploadSpeedDescription := ``

	var uploadSpeedFlagName string
	if cmdPrefix == "" {
		uploadSpeedFlagName = "uploadSpeed"
	} else {
		uploadSpeedFlagName = fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
	}

	var uploadSpeedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uploadSpeedFlagName, uploadSpeedFlagDefault, uploadSpeedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDefaultIPQueueFlags(depth int, m *models.DefaultIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, downloadSpeedAdded := retrieveDefaultIPQueueDownloadSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downloadSpeedAdded

	err, enabledAdded := retrieveDefaultIPQueueEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, uploadSpeedAdded := retrieveDefaultIPQueueUploadSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadSpeedAdded

	return nil, retAdded
}

func retrieveDefaultIPQueueDownloadSpeedFlags(depth int, m *models.DefaultIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downloadSpeedFlagName := fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
	if cmd.Flags().Changed(downloadSpeedFlagName) {

		var downloadSpeedFlagName string
		if cmdPrefix == "" {
			downloadSpeedFlagName = "downloadSpeed"
		} else {
			downloadSpeedFlagName = fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
		}

		downloadSpeedFlagValue, err := cmd.Flags().GetInt64(downloadSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.DownloadSpeed = &downloadSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultIPQueueEnabledFlags(depth int, m *models.DefaultIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDefaultIPQueueUploadSpeedFlags(depth int, m *models.DefaultIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadSpeedFlagName := fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
	if cmd.Flags().Changed(uploadSpeedFlagName) {

		var uploadSpeedFlagName string
		if cmdPrefix == "" {
			uploadSpeedFlagName = "uploadSpeed"
		} else {
			uploadSpeedFlagName = fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
		}

		uploadSpeedFlagValue, err := cmd.Flags().GetInt64(uploadSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.UploadSpeed = &uploadSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
