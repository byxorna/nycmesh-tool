// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model70

// register flags to command
func registerModelModel70Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel70UpgradeInMaintenanceWindow(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel70Upgrades(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel70UpgradeInMaintenanceWindow(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	upgradeInMaintenanceWindowDescription := `Schedule upgrade over maintenance window.`

	var upgradeInMaintenanceWindowFlagName string
	if cmdPrefix == "" {
		upgradeInMaintenanceWindowFlagName = "upgradeInMaintenanceWindow"
	} else {
		upgradeInMaintenanceWindowFlagName = fmt.Sprintf("%v.upgradeInMaintenanceWindow", cmdPrefix)
	}

	var upgradeInMaintenanceWindowFlagDefault bool

	_ = cmd.PersistentFlags().Bool(upgradeInMaintenanceWindowFlagName, upgradeInMaintenanceWindowFlagDefault, upgradeInMaintenanceWindowDescription)

	return nil
}

func registerModel70Upgrades(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: upgrades Upgrades array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel70Flags(depth int, m *models.Model70, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, upgradeInMaintenanceWindowAdded := retrieveModel70UpgradeInMaintenanceWindowFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradeInMaintenanceWindowAdded

	err, upgradesAdded := retrieveModel70UpgradesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradesAdded

	return nil, retAdded
}

func retrieveModel70UpgradeInMaintenanceWindowFlags(depth int, m *models.Model70, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upgradeInMaintenanceWindowFlagName := fmt.Sprintf("%v.upgradeInMaintenanceWindow", cmdPrefix)
	if cmd.Flags().Changed(upgradeInMaintenanceWindowFlagName) {

		var upgradeInMaintenanceWindowFlagName string
		if cmdPrefix == "" {
			upgradeInMaintenanceWindowFlagName = "upgradeInMaintenanceWindow"
		} else {
			upgradeInMaintenanceWindowFlagName = fmt.Sprintf("%v.upgradeInMaintenanceWindow", cmdPrefix)
		}

		upgradeInMaintenanceWindowFlagValue, err := cmd.Flags().GetBool(upgradeInMaintenanceWindowFlagName)
		if err != nil {
			return err, false
		}
		m.UpgradeInMaintenanceWindow = upgradeInMaintenanceWindowFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel70UpgradesFlags(depth int, m *models.Model70, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upgradesFlagName := fmt.Sprintf("%v.upgrades", cmdPrefix)
	if cmd.Flags().Changed(upgradesFlagName) {
		// warning: upgrades array type Upgrades is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
