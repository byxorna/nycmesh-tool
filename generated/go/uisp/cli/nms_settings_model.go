// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for NmsSettings

// register flags to command
func registerModelNmsSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNmsSettingsAllowAutoUpdateUbntFirmwares(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsAllowBetaFirmwares(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsAllowLoggingToLogentries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsAllowLoggingToSentry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsAllowNewDashboard(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsAllowUnmsBetaVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsAutoBackups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDateFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDefaultGracePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDefaultQosPropagation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDeviceAutoBackups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDeviceNumberOfBackups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDevicePingAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDevicePingAddressMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDevicePingIntervalNormal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDevicePingIntervalOutage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDeviceTransmissionFrequencies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDeviceTransmissionProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDiscoveryAllowLocalScan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDiscoveryAllowRemoteScan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDiscoveryAllowUnsecuredChannels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDiscoveryAutoConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDiscoveryBlacklist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDiscoveryHideBlackBox(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsDiscoverySnmpCommunity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsGoogleMapsAPIKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsHomePage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsInstanceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsIsIsp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsIsSetupSurveyAnswered(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsLetsEncryptError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsLetsEncryptTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowFriday(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowFromTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowMonday(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowSaturday(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowSunday(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowThursday(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowToTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowTuesday(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMaintenanceWindowWednesday(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMapsProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMigrationForceModeEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMigrationHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMigrationModeEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsMigrationPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsOutageMailablePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsRestartGracePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsTimeFormat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsTimezone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsTrafficShapingAdjustment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsUcrmEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsUpgradeGracePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsUseLetsEncrypt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsWifiManIsEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsSettingsWifiManURLAddressForSpeedTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsAllowAutoUpdateUbntFirmwares(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowAutoUpdateUbntFirmwaresDescription := `Required. `

	var allowAutoUpdateUbntFirmwaresFlagName string
	if cmdPrefix == "" {
		allowAutoUpdateUbntFirmwaresFlagName = "allowAutoUpdateUbntFirmwares"
	} else {
		allowAutoUpdateUbntFirmwaresFlagName = fmt.Sprintf("%v.allowAutoUpdateUbntFirmwares", cmdPrefix)
	}

	var allowAutoUpdateUbntFirmwaresFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowAutoUpdateUbntFirmwaresFlagName, allowAutoUpdateUbntFirmwaresFlagDefault, allowAutoUpdateUbntFirmwaresDescription)

	return nil
}

func registerNmsSettingsAllowBetaFirmwares(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowBetaFirmwaresDescription := `Required. `

	var allowBetaFirmwaresFlagName string
	if cmdPrefix == "" {
		allowBetaFirmwaresFlagName = "allowBetaFirmwares"
	} else {
		allowBetaFirmwaresFlagName = fmt.Sprintf("%v.allowBetaFirmwares", cmdPrefix)
	}

	var allowBetaFirmwaresFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowBetaFirmwaresFlagName, allowBetaFirmwaresFlagDefault, allowBetaFirmwaresDescription)

	return nil
}

func registerNmsSettingsAllowLoggingToLogentries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowLoggingToLogentriesDescription := `Required. `

	var allowLoggingToLogentriesFlagName string
	if cmdPrefix == "" {
		allowLoggingToLogentriesFlagName = "allowLoggingToLogentries"
	} else {
		allowLoggingToLogentriesFlagName = fmt.Sprintf("%v.allowLoggingToLogentries", cmdPrefix)
	}

	var allowLoggingToLogentriesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowLoggingToLogentriesFlagName, allowLoggingToLogentriesFlagDefault, allowLoggingToLogentriesDescription)

	return nil
}

func registerNmsSettingsAllowLoggingToSentry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowLoggingToSentryDescription := `Required. `

	var allowLoggingToSentryFlagName string
	if cmdPrefix == "" {
		allowLoggingToSentryFlagName = "allowLoggingToSentry"
	} else {
		allowLoggingToSentryFlagName = fmt.Sprintf("%v.allowLoggingToSentry", cmdPrefix)
	}

	var allowLoggingToSentryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowLoggingToSentryFlagName, allowLoggingToSentryFlagDefault, allowLoggingToSentryDescription)

	return nil
}

func registerNmsSettingsAllowNewDashboard(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowNewDashboardDescription := ``

	var allowNewDashboardFlagName string
	if cmdPrefix == "" {
		allowNewDashboardFlagName = "allowNewDashboard"
	} else {
		allowNewDashboardFlagName = fmt.Sprintf("%v.allowNewDashboard", cmdPrefix)
	}

	var allowNewDashboardFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowNewDashboardFlagName, allowNewDashboardFlagDefault, allowNewDashboardDescription)

	return nil
}

func registerNmsSettingsAllowUnmsBetaVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowUnmsBetaVersionDescription := `When true UISP will look for latest UISP version among beta releases.`

	var allowUnmsBetaVersionFlagName string
	if cmdPrefix == "" {
		allowUnmsBetaVersionFlagName = "allowUnmsBetaVersion"
	} else {
		allowUnmsBetaVersionFlagName = fmt.Sprintf("%v.allowUnmsBetaVersion", cmdPrefix)
	}

	var allowUnmsBetaVersionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allowUnmsBetaVersionFlagName, allowUnmsBetaVersionFlagDefault, allowUnmsBetaVersionDescription)

	return nil
}

func registerNmsSettingsAutoBackups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoBackupsDescription := `Required. `

	var autoBackupsFlagName string
	if cmdPrefix == "" {
		autoBackupsFlagName = "autoBackups"
	} else {
		autoBackupsFlagName = fmt.Sprintf("%v.autoBackups", cmdPrefix)
	}

	var autoBackupsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoBackupsFlagName, autoBackupsFlagDefault, autoBackupsDescription)

	return nil
}

func registerNmsSettingsCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryDescription := `Enum: ["XX","XY","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CK","CR","CI","HR","CW","CY","CZ","CD","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","HN","HK","HU","IS","IN","ID","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","KR","RS","SC","CG","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","PS","SR","SJ","SE","CH","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UY","UZ","VU","VA","VE","VN","VG","VI","WF","EH","YE","ZM","ZW"]. Required. `

	var countryFlagName string
	if cmdPrefix == "" {
		countryFlagName = "country"
	} else {
		countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
	}

	var countryFlagDefault string

	_ = cmd.PersistentFlags().String(countryFlagName, countryFlagDefault, countryDescription)

	if err := cmd.RegisterFlagCompletionFunc(countryFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["XX","XY","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CK","CR","CI","HR","CW","CY","CZ","CD","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","HN","HK","HU","IS","IN","ID","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","KR","RS","SC","CG","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","PS","SR","SJ","SE","CH","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UY","UZ","VU","VA","VE","VN","VG","VI","WF","EH","YE","ZM","ZW"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsDateFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dateFormatDescription := `Enum: ["D MMM YYYY","Do MMM YYYY","DD MMM YYYY","MMM D, YYYY","MMM Do, YYYY","MMM DD, YYYY","YYYY-MM-DD","DD-MM-YYYY","D.M.YYYY","DD.MM.YYYY","D/M/YYYY","DD/MM/YYYY","M/D/YYYY","MM/DD/YYYY"]. Required. `

	var dateFormatFlagName string
	if cmdPrefix == "" {
		dateFormatFlagName = "dateFormat"
	} else {
		dateFormatFlagName = fmt.Sprintf("%v.dateFormat", cmdPrefix)
	}

	var dateFormatFlagDefault string

	_ = cmd.PersistentFlags().String(dateFormatFlagName, dateFormatFlagDefault, dateFormatDescription)

	if err := cmd.RegisterFlagCompletionFunc(dateFormatFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["D MMM YYYY","Do MMM YYYY","DD MMM YYYY","MMM D, YYYY","MMM Do, YYYY","MMM DD, YYYY","YYYY-MM-DD","DD-MM-YYYY","D.M.YYYY","DD.MM.YYYY","D/M/YYYY","DD/MM/YYYY","M/D/YYYY","MM/DD/YYYY"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsDefaultGracePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultGracePeriodDescription := `Required. `

	var defaultGracePeriodFlagName string
	if cmdPrefix == "" {
		defaultGracePeriodFlagName = "defaultGracePeriod"
	} else {
		defaultGracePeriodFlagName = fmt.Sprintf("%v.defaultGracePeriod", cmdPrefix)
	}

	var defaultGracePeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(defaultGracePeriodFlagName, defaultGracePeriodFlagDefault, defaultGracePeriodDescription)

	return nil
}

func registerNmsSettingsDefaultQosPropagation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultQosPropagationDescription := `Enum: ["all","gateway"]. Required. `

	var defaultQosPropagationFlagName string
	if cmdPrefix == "" {
		defaultQosPropagationFlagName = "defaultQosPropagation"
	} else {
		defaultQosPropagationFlagName = fmt.Sprintf("%v.defaultQosPropagation", cmdPrefix)
	}

	var defaultQosPropagationFlagDefault string

	_ = cmd.PersistentFlags().String(defaultQosPropagationFlagName, defaultQosPropagationFlagDefault, defaultQosPropagationDescription)

	if err := cmd.RegisterFlagCompletionFunc(defaultQosPropagationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["all","gateway"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsDeviceAutoBackups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceAutoBackupsDescription := `Required. `

	var deviceAutoBackupsFlagName string
	if cmdPrefix == "" {
		deviceAutoBackupsFlagName = "deviceAutoBackups"
	} else {
		deviceAutoBackupsFlagName = fmt.Sprintf("%v.deviceAutoBackups", cmdPrefix)
	}

	var deviceAutoBackupsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deviceAutoBackupsFlagName, deviceAutoBackupsFlagDefault, deviceAutoBackupsDescription)

	return nil
}

func registerNmsSettingsDeviceNumberOfBackups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceNumberOfBackupsDescription := ``

	var deviceNumberOfBackupsFlagName string
	if cmdPrefix == "" {
		deviceNumberOfBackupsFlagName = "deviceNumberOfBackups"
	} else {
		deviceNumberOfBackupsFlagName = fmt.Sprintf("%v.deviceNumberOfBackups", cmdPrefix)
	}

	var deviceNumberOfBackupsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(deviceNumberOfBackupsFlagName, deviceNumberOfBackupsFlagDefault, deviceNumberOfBackupsDescription)

	return nil
}

func registerNmsSettingsDevicePingAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicePingAddressDescription := `Required. `

	var devicePingAddressFlagName string
	if cmdPrefix == "" {
		devicePingAddressFlagName = "devicePingAddress"
	} else {
		devicePingAddressFlagName = fmt.Sprintf("%v.devicePingAddress", cmdPrefix)
	}

	var devicePingAddressFlagDefault string

	_ = cmd.PersistentFlags().String(devicePingAddressFlagName, devicePingAddressFlagDefault, devicePingAddressDescription)

	return nil
}

func registerNmsSettingsDevicePingAddressMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicePingAddressModeDescription := `Enum: ["auto","custom"]. Required. `

	var devicePingAddressModeFlagName string
	if cmdPrefix == "" {
		devicePingAddressModeFlagName = "devicePingAddressMode"
	} else {
		devicePingAddressModeFlagName = fmt.Sprintf("%v.devicePingAddressMode", cmdPrefix)
	}

	var devicePingAddressModeFlagDefault string

	_ = cmd.PersistentFlags().String(devicePingAddressModeFlagName, devicePingAddressModeFlagDefault, devicePingAddressModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(devicePingAddressModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","custom"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsDevicePingIntervalNormal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicePingIntervalNormalDescription := `Required. In milliseconds.`

	var devicePingIntervalNormalFlagName string
	if cmdPrefix == "" {
		devicePingIntervalNormalFlagName = "devicePingIntervalNormal"
	} else {
		devicePingIntervalNormalFlagName = fmt.Sprintf("%v.devicePingIntervalNormal", cmdPrefix)
	}

	var devicePingIntervalNormalFlagDefault float64

	_ = cmd.PersistentFlags().Float64(devicePingIntervalNormalFlagName, devicePingIntervalNormalFlagDefault, devicePingIntervalNormalDescription)

	return nil
}

func registerNmsSettingsDevicePingIntervalOutage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicePingIntervalOutageDescription := `Required. In milliseconds.`

	var devicePingIntervalOutageFlagName string
	if cmdPrefix == "" {
		devicePingIntervalOutageFlagName = "devicePingIntervalOutage"
	} else {
		devicePingIntervalOutageFlagName = fmt.Sprintf("%v.devicePingIntervalOutage", cmdPrefix)
	}

	var devicePingIntervalOutageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(devicePingIntervalOutageFlagName, devicePingIntervalOutageFlagDefault, devicePingIntervalOutageDescription)

	return nil
}

func registerNmsSettingsDeviceTransmissionFrequencies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deviceTransmissionFrequenciesFlagName string
	if cmdPrefix == "" {
		deviceTransmissionFrequenciesFlagName = "deviceTransmissionFrequencies"
	} else {
		deviceTransmissionFrequenciesFlagName = fmt.Sprintf("%v.deviceTransmissionFrequencies", cmdPrefix)
	}

	if err := registerModelDeviceTransmissionFrequenciesFlags(depth+1, deviceTransmissionFrequenciesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsDeviceTransmissionProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceTransmissionProfileDescription := `Enum: ["auto","custom"]. Required. `

	var deviceTransmissionProfileFlagName string
	if cmdPrefix == "" {
		deviceTransmissionProfileFlagName = "deviceTransmissionProfile"
	} else {
		deviceTransmissionProfileFlagName = fmt.Sprintf("%v.deviceTransmissionProfile", cmdPrefix)
	}

	var deviceTransmissionProfileFlagDefault string

	_ = cmd.PersistentFlags().String(deviceTransmissionProfileFlagName, deviceTransmissionProfileFlagDefault, deviceTransmissionProfileDescription)

	if err := cmd.RegisterFlagCompletionFunc(deviceTransmissionProfileFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","custom"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsDiscoveryAllowLocalScan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	discoveryAllowLocalScanDescription := `Required. `

	var discoveryAllowLocalScanFlagName string
	if cmdPrefix == "" {
		discoveryAllowLocalScanFlagName = "discoveryAllowLocalScan"
	} else {
		discoveryAllowLocalScanFlagName = fmt.Sprintf("%v.discoveryAllowLocalScan", cmdPrefix)
	}

	var discoveryAllowLocalScanFlagDefault bool

	_ = cmd.PersistentFlags().Bool(discoveryAllowLocalScanFlagName, discoveryAllowLocalScanFlagDefault, discoveryAllowLocalScanDescription)

	return nil
}

func registerNmsSettingsDiscoveryAllowRemoteScan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	discoveryAllowRemoteScanDescription := `Required. `

	var discoveryAllowRemoteScanFlagName string
	if cmdPrefix == "" {
		discoveryAllowRemoteScanFlagName = "discoveryAllowRemoteScan"
	} else {
		discoveryAllowRemoteScanFlagName = fmt.Sprintf("%v.discoveryAllowRemoteScan", cmdPrefix)
	}

	var discoveryAllowRemoteScanFlagDefault bool

	_ = cmd.PersistentFlags().Bool(discoveryAllowRemoteScanFlagName, discoveryAllowRemoteScanFlagDefault, discoveryAllowRemoteScanDescription)

	return nil
}

func registerNmsSettingsDiscoveryAllowUnsecuredChannels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	discoveryAllowUnsecuredChannelsDescription := `Required. `

	var discoveryAllowUnsecuredChannelsFlagName string
	if cmdPrefix == "" {
		discoveryAllowUnsecuredChannelsFlagName = "discoveryAllowUnsecuredChannels"
	} else {
		discoveryAllowUnsecuredChannelsFlagName = fmt.Sprintf("%v.discoveryAllowUnsecuredChannels", cmdPrefix)
	}

	var discoveryAllowUnsecuredChannelsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(discoveryAllowUnsecuredChannelsFlagName, discoveryAllowUnsecuredChannelsFlagDefault, discoveryAllowUnsecuredChannelsDescription)

	return nil
}

func registerNmsSettingsDiscoveryAutoConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	discoveryAutoConfigurationDescription := `Required. `

	var discoveryAutoConfigurationFlagName string
	if cmdPrefix == "" {
		discoveryAutoConfigurationFlagName = "discoveryAutoConfiguration"
	} else {
		discoveryAutoConfigurationFlagName = fmt.Sprintf("%v.discoveryAutoConfiguration", cmdPrefix)
	}

	var discoveryAutoConfigurationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(discoveryAutoConfigurationFlagName, discoveryAutoConfigurationFlagDefault, discoveryAutoConfigurationDescription)

	return nil
}

func registerNmsSettingsDiscoveryBlacklist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: discoveryBlacklist DiscoveryBlacklist array type is not supported by go-swagger cli yet

	return nil
}

func registerNmsSettingsDiscoveryHideBlackBox(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	discoveryHideBlackBoxDescription := `Required. `

	var discoveryHideBlackBoxFlagName string
	if cmdPrefix == "" {
		discoveryHideBlackBoxFlagName = "discoveryHideBlackBox"
	} else {
		discoveryHideBlackBoxFlagName = fmt.Sprintf("%v.discoveryHideBlackBox", cmdPrefix)
	}

	var discoveryHideBlackBoxFlagDefault bool

	_ = cmd.PersistentFlags().Bool(discoveryHideBlackBoxFlagName, discoveryHideBlackBoxFlagDefault, discoveryHideBlackBoxDescription)

	return nil
}

func registerNmsSettingsDiscoverySnmpCommunity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	discoverySnmpCommunityDescription := `Required. `

	var discoverySnmpCommunityFlagName string
	if cmdPrefix == "" {
		discoverySnmpCommunityFlagName = "discoverySnmpCommunity"
	} else {
		discoverySnmpCommunityFlagName = fmt.Sprintf("%v.discoverySnmpCommunity", cmdPrefix)
	}

	var discoverySnmpCommunityFlagDefault string

	_ = cmd.PersistentFlags().String(discoverySnmpCommunityFlagName, discoverySnmpCommunityFlagDefault, discoverySnmpCommunityDescription)

	return nil
}

func registerNmsSettingsGoogleMapsAPIKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	googleMapsApiKeyDescription := `Required. `

	var googleMapsApiKeyFlagName string
	if cmdPrefix == "" {
		googleMapsApiKeyFlagName = "googleMapsApiKey"
	} else {
		googleMapsApiKeyFlagName = fmt.Sprintf("%v.googleMapsApiKey", cmdPrefix)
	}

	var googleMapsApiKeyFlagDefault string

	_ = cmd.PersistentFlags().String(googleMapsApiKeyFlagName, googleMapsApiKeyFlagDefault, googleMapsApiKeyDescription)

	return nil
}

func registerNmsSettingsHomePage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	homePageDescription := `Enum: ["unms","ucrm"]. Required. `

	var homePageFlagName string
	if cmdPrefix == "" {
		homePageFlagName = "homePage"
	} else {
		homePageFlagName = fmt.Sprintf("%v.homePage", cmdPrefix)
	}

	var homePageFlagDefault string

	_ = cmd.PersistentFlags().String(homePageFlagName, homePageFlagDefault, homePageDescription)

	if err := cmd.RegisterFlagCompletionFunc(homePageFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["unms","ucrm"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `Required. `

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerNmsSettingsInstanceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	instanceIdDescription := `Required. `

	var instanceIdFlagName string
	if cmdPrefix == "" {
		instanceIdFlagName = "instanceId"
	} else {
		instanceIdFlagName = fmt.Sprintf("%v.instanceId", cmdPrefix)
	}

	var instanceIdFlagDefault string

	_ = cmd.PersistentFlags().String(instanceIdFlagName, instanceIdFlagDefault, instanceIdDescription)

	return nil
}

func registerNmsSettingsIsIsp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isIspDescription := `Required. `

	var isIspFlagName string
	if cmdPrefix == "" {
		isIspFlagName = "isIsp"
	} else {
		isIspFlagName = fmt.Sprintf("%v.isIsp", cmdPrefix)
	}

	var isIspFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isIspFlagName, isIspFlagDefault, isIspDescription)

	return nil
}

func registerNmsSettingsIsSetupSurveyAnswered(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isSetupSurveyAnsweredDescription := `Required. `

	var isSetupSurveyAnsweredFlagName string
	if cmdPrefix == "" {
		isSetupSurveyAnsweredFlagName = "isSetupSurveyAnswered"
	} else {
		isSetupSurveyAnsweredFlagName = fmt.Sprintf("%v.isSetupSurveyAnswered", cmdPrefix)
	}

	var isSetupSurveyAnsweredFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isSetupSurveyAnsweredFlagName, isSetupSurveyAnsweredFlagDefault, isSetupSurveyAnsweredDescription)

	return nil
}

func registerNmsSettingsLetsEncryptError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	letsEncryptErrorDescription := `Required. `

	var letsEncryptErrorFlagName string
	if cmdPrefix == "" {
		letsEncryptErrorFlagName = "letsEncryptError"
	} else {
		letsEncryptErrorFlagName = fmt.Sprintf("%v.letsEncryptError", cmdPrefix)
	}

	var letsEncryptErrorFlagDefault string

	_ = cmd.PersistentFlags().String(letsEncryptErrorFlagName, letsEncryptErrorFlagDefault, letsEncryptErrorDescription)

	return nil
}

func registerNmsSettingsLetsEncryptTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	letsEncryptTimestampDescription := `Required. `

	var letsEncryptTimestampFlagName string
	if cmdPrefix == "" {
		letsEncryptTimestampFlagName = "letsEncryptTimestamp"
	} else {
		letsEncryptTimestampFlagName = fmt.Sprintf("%v.letsEncryptTimestamp", cmdPrefix)
	}

	var letsEncryptTimestampFlagDefault float64

	_ = cmd.PersistentFlags().Float64(letsEncryptTimestampFlagName, letsEncryptTimestampFlagDefault, letsEncryptTimestampDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowFriday(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowFridayDescription := `Allow automatically upgrade firmware in this day.`

	var maintenanceWindowFridayFlagName string
	if cmdPrefix == "" {
		maintenanceWindowFridayFlagName = "maintenanceWindowFriday"
	} else {
		maintenanceWindowFridayFlagName = fmt.Sprintf("%v.maintenanceWindowFriday", cmdPrefix)
	}

	var maintenanceWindowFridayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(maintenanceWindowFridayFlagName, maintenanceWindowFridayFlagDefault, maintenanceWindowFridayDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowFromTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowFromTimeDescription := `Hour when maintenance window start.`

	var maintenanceWindowFromTimeFlagName string
	if cmdPrefix == "" {
		maintenanceWindowFromTimeFlagName = "maintenanceWindowFromTime"
	} else {
		maintenanceWindowFromTimeFlagName = fmt.Sprintf("%v.maintenanceWindowFromTime", cmdPrefix)
	}

	var maintenanceWindowFromTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maintenanceWindowFromTimeFlagName, maintenanceWindowFromTimeFlagDefault, maintenanceWindowFromTimeDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowMonday(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowMondayDescription := `Allow automatically upgrade firmware in this day.`

	var maintenanceWindowMondayFlagName string
	if cmdPrefix == "" {
		maintenanceWindowMondayFlagName = "maintenanceWindowMonday"
	} else {
		maintenanceWindowMondayFlagName = fmt.Sprintf("%v.maintenanceWindowMonday", cmdPrefix)
	}

	var maintenanceWindowMondayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(maintenanceWindowMondayFlagName, maintenanceWindowMondayFlagDefault, maintenanceWindowMondayDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowSaturday(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowSaturdayDescription := `Allow automatically upgrade firmware in this day.`

	var maintenanceWindowSaturdayFlagName string
	if cmdPrefix == "" {
		maintenanceWindowSaturdayFlagName = "maintenanceWindowSaturday"
	} else {
		maintenanceWindowSaturdayFlagName = fmt.Sprintf("%v.maintenanceWindowSaturday", cmdPrefix)
	}

	var maintenanceWindowSaturdayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(maintenanceWindowSaturdayFlagName, maintenanceWindowSaturdayFlagDefault, maintenanceWindowSaturdayDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowSunday(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowSundayDescription := `Allow automatically upgrade firmware in this day.`

	var maintenanceWindowSundayFlagName string
	if cmdPrefix == "" {
		maintenanceWindowSundayFlagName = "maintenanceWindowSunday"
	} else {
		maintenanceWindowSundayFlagName = fmt.Sprintf("%v.maintenanceWindowSunday", cmdPrefix)
	}

	var maintenanceWindowSundayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(maintenanceWindowSundayFlagName, maintenanceWindowSundayFlagDefault, maintenanceWindowSundayDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowThursday(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowThursdayDescription := `Allow automatically upgrade firmware in this day.`

	var maintenanceWindowThursdayFlagName string
	if cmdPrefix == "" {
		maintenanceWindowThursdayFlagName = "maintenanceWindowThursday"
	} else {
		maintenanceWindowThursdayFlagName = fmt.Sprintf("%v.maintenanceWindowThursday", cmdPrefix)
	}

	var maintenanceWindowThursdayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(maintenanceWindowThursdayFlagName, maintenanceWindowThursdayFlagDefault, maintenanceWindowThursdayDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowToTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowToTimeDescription := `Hour when maintenance window end.`

	var maintenanceWindowToTimeFlagName string
	if cmdPrefix == "" {
		maintenanceWindowToTimeFlagName = "maintenanceWindowToTime"
	} else {
		maintenanceWindowToTimeFlagName = fmt.Sprintf("%v.maintenanceWindowToTime", cmdPrefix)
	}

	var maintenanceWindowToTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maintenanceWindowToTimeFlagName, maintenanceWindowToTimeFlagDefault, maintenanceWindowToTimeDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowTuesday(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowTuesdayDescription := `Allow automatically upgrade firmware in this day.`

	var maintenanceWindowTuesdayFlagName string
	if cmdPrefix == "" {
		maintenanceWindowTuesdayFlagName = "maintenanceWindowTuesday"
	} else {
		maintenanceWindowTuesdayFlagName = fmt.Sprintf("%v.maintenanceWindowTuesday", cmdPrefix)
	}

	var maintenanceWindowTuesdayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(maintenanceWindowTuesdayFlagName, maintenanceWindowTuesdayFlagDefault, maintenanceWindowTuesdayDescription)

	return nil
}

func registerNmsSettingsMaintenanceWindowWednesday(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintenanceWindowWednesdayDescription := `Allow automatically upgrade firmware in this day.`

	var maintenanceWindowWednesdayFlagName string
	if cmdPrefix == "" {
		maintenanceWindowWednesdayFlagName = "maintenanceWindowWednesday"
	} else {
		maintenanceWindowWednesdayFlagName = fmt.Sprintf("%v.maintenanceWindowWednesday", cmdPrefix)
	}

	var maintenanceWindowWednesdayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(maintenanceWindowWednesdayFlagName, maintenanceWindowWednesdayFlagDefault, maintenanceWindowWednesdayDescription)

	return nil
}

func registerNmsSettingsMapsProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mapsProviderDescription := `Enum: ["GoogleMaps","OpenStreetMap"]. Required. `

	var mapsProviderFlagName string
	if cmdPrefix == "" {
		mapsProviderFlagName = "mapsProvider"
	} else {
		mapsProviderFlagName = fmt.Sprintf("%v.mapsProvider", cmdPrefix)
	}

	var mapsProviderFlagDefault string

	_ = cmd.PersistentFlags().String(mapsProviderFlagName, mapsProviderFlagDefault, mapsProviderDescription)

	if err := cmd.RegisterFlagCompletionFunc(mapsProviderFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["GoogleMaps","OpenStreetMap"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsMigrationForceModeEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	migrationForceModeEnabledDescription := `Required. When true reachability check will be skipped.`

	var migrationForceModeEnabledFlagName string
	if cmdPrefix == "" {
		migrationForceModeEnabledFlagName = "migrationForceModeEnabled"
	} else {
		migrationForceModeEnabledFlagName = fmt.Sprintf("%v.migrationForceModeEnabled", cmdPrefix)
	}

	var migrationForceModeEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(migrationForceModeEnabledFlagName, migrationForceModeEnabledFlagDefault, migrationForceModeEnabledDescription)

	return nil
}

func registerNmsSettingsMigrationHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	migrationHostnameDescription := `Required. `

	var migrationHostnameFlagName string
	if cmdPrefix == "" {
		migrationHostnameFlagName = "migrationHostname"
	} else {
		migrationHostnameFlagName = fmt.Sprintf("%v.migrationHostname", cmdPrefix)
	}

	var migrationHostnameFlagDefault string

	_ = cmd.PersistentFlags().String(migrationHostnameFlagName, migrationHostnameFlagDefault, migrationHostnameDescription)

	return nil
}

func registerNmsSettingsMigrationModeEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	migrationModeEnabledDescription := `Required. When true all new device connections and connected devices will change UISP Key.`

	var migrationModeEnabledFlagName string
	if cmdPrefix == "" {
		migrationModeEnabledFlagName = "migrationModeEnabled"
	} else {
		migrationModeEnabledFlagName = fmt.Sprintf("%v.migrationModeEnabled", cmdPrefix)
	}

	var migrationModeEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(migrationModeEnabledFlagName, migrationModeEnabledFlagDefault, migrationModeEnabledDescription)

	return nil
}

func registerNmsSettingsMigrationPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	migrationPortDescription := `Required. UISP port to migrate to.`

	var migrationPortFlagName string
	if cmdPrefix == "" {
		migrationPortFlagName = "migrationPort"
	} else {
		migrationPortFlagName = fmt.Sprintf("%v.migrationPort", cmdPrefix)
	}

	var migrationPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(migrationPortFlagName, migrationPortFlagDefault, migrationPortDescription)

	return nil
}

func registerNmsSettingsOutageMailablePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	outageMailablePeriodDescription := `Required. `

	var outageMailablePeriodFlagName string
	if cmdPrefix == "" {
		outageMailablePeriodFlagName = "outageMailablePeriod"
	} else {
		outageMailablePeriodFlagName = fmt.Sprintf("%v.outageMailablePeriod", cmdPrefix)
	}

	var outageMailablePeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(outageMailablePeriodFlagName, outageMailablePeriodFlagDefault, outageMailablePeriodDescription)

	return nil
}

func registerNmsSettingsRestartGracePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restartGracePeriodDescription := `Required. `

	var restartGracePeriodFlagName string
	if cmdPrefix == "" {
		restartGracePeriodFlagName = "restartGracePeriod"
	} else {
		restartGracePeriodFlagName = fmt.Sprintf("%v.restartGracePeriod", cmdPrefix)
	}

	var restartGracePeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(restartGracePeriodFlagName, restartGracePeriodFlagDefault, restartGracePeriodDescription)

	return nil
}

func registerNmsSettingsTimeFormat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeFormatDescription := `Enum: ["H:mm","h:mm a"]. Required. `

	var timeFormatFlagName string
	if cmdPrefix == "" {
		timeFormatFlagName = "timeFormat"
	} else {
		timeFormatFlagName = fmt.Sprintf("%v.timeFormat", cmdPrefix)
	}

	var timeFormatFlagDefault string

	_ = cmd.PersistentFlags().String(timeFormatFlagName, timeFormatFlagDefault, timeFormatDescription)

	if err := cmd.RegisterFlagCompletionFunc(timeFormatFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["H:mm","h:mm a"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsTimezone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timezoneDescription := `Enum: ["Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Asmera","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Timbuktu","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/ComodRivadavia","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Atka","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Buenos_Aires","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Catamarca","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Coral_Harbour","America/Cordoba","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Ensenada","America/Fort_Nelson","America/Fort_Wayne","America/Fortaleza","America/Glace_Bay","America/Godthab","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Indianapolis","America/Inuvik","America/Iqaluit","America/Jamaica","America/Jujuy","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Knox_IN","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Louisville","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Mendoza","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montreal","America/Montserrat","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Acre","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Rosario","America/Santa_Isabel","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Shiprock","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Virgin","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/South_Pole","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Ashkhabad","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Calcutta","Asia/Chita","Asia/Choibalsan","Asia/Chongqing","Asia/Chungking","Asia/Colombo","Asia/Dacca","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Harbin","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Istanbul","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kashgar","Asia/Kathmandu","Asia/Katmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macao","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qyzylorda","Asia/Rangoon","Asia/Riyadh","Asia/Saigon","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Tel_Aviv","Asia/Thimbu","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ujung_Pandang","Asia/Ulaanbaatar","Asia/Ulan_Bator","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faeroe","Atlantic/Faroe","Atlantic/Jan_Mayen","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/ACT","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Canberra","Australia/Currie","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/LHI","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/NSW","Australia/North","Australia/Perth","Australia/Queensland","Australia/South","Australia/Sydney","Australia/Tasmania","Australia/Victoria","Australia/West","Australia/Yancowinna","Brazil/Acre","Brazil/DeNoronha","Brazil/East","Brazil/West","CET","CST6CDT","Canada/Atlantic","Canada/Central","Canada/Eastern","Canada/Mountain","Canada/Newfoundland","Canada/Pacific","Canada/Saskatchewan","Canada/Yukon","Chile/Continental","Chile/EasterIsland","Cuba","EET","EST","EST5EDT","Egypt","Eire","Etc/GMT","Etc/GMT+0","Etc/GMT+1","Etc/GMT+10","Etc/GMT+11","Etc/GMT+12","Etc/GMT+2","Etc/GMT+3","Etc/GMT+4","Etc/GMT+5","Etc/GMT+6","Etc/GMT+7","Etc/GMT+8","Etc/GMT+9","Etc/GMT-0","Etc/GMT-1","Etc/GMT-10","Etc/GMT-11","Etc/GMT-12","Etc/GMT-13","Etc/GMT-14","Etc/GMT-2","Etc/GMT-3","Etc/GMT-4","Etc/GMT-5","Etc/GMT-6","Etc/GMT-7","Etc/GMT-8","Etc/GMT-9","Etc/GMT0","Etc/Greenwich","Etc/UCT","Etc/UTC","Etc/Universal","Etc/Zulu","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belfast","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Nicosia","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Tiraspol","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zaporozhye","Europe/Zurich","GB","GB-Eire","GMT","GMT+0","GMT-0","GMT0","Greenwich","HST","Hongkong","Iceland","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Iran","Israel","Jamaica","Japan","Kwajalein","Libya","MET","MST","MST7MDT","Mexico/BajaNorte","Mexico/BajaSur","Mexico/General","NZ","NZ-CHAT","Navajo","PRC","PST8PDT","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Johnston","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Ponape","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Samoa","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Truk","Pacific/Wake","Pacific/Wallis","Pacific/Yap","Poland","Portugal","ROC","ROK","Singapore","Turkey","UCT","US/Alaska","US/Aleutian","US/Arizona","US/Central","US/East-Indiana","US/Eastern","US/Hawaii","US/Indiana-Starke","US/Michigan","US/Mountain","US/Pacific","US/Pacific-New","US/Samoa","UTC","Universal","W-SU","WET","Zulu"]. Required. `

	var timezoneFlagName string
	if cmdPrefix == "" {
		timezoneFlagName = "timezone"
	} else {
		timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
	}

	var timezoneFlagDefault string

	_ = cmd.PersistentFlags().String(timezoneFlagName, timezoneFlagDefault, timezoneDescription)

	if err := cmd.RegisterFlagCompletionFunc(timezoneFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Asmera","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Timbuktu","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/ComodRivadavia","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Atka","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Buenos_Aires","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Catamarca","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Coral_Harbour","America/Cordoba","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Ensenada","America/Fort_Nelson","America/Fort_Wayne","America/Fortaleza","America/Glace_Bay","America/Godthab","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Indianapolis","America/Inuvik","America/Iqaluit","America/Jamaica","America/Jujuy","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Knox_IN","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Louisville","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Mendoza","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montreal","America/Montserrat","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Acre","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Rosario","America/Santa_Isabel","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Shiprock","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Virgin","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/South_Pole","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Ashkhabad","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Calcutta","Asia/Chita","Asia/Choibalsan","Asia/Chongqing","Asia/Chungking","Asia/Colombo","Asia/Dacca","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Harbin","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Istanbul","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kashgar","Asia/Kathmandu","Asia/Katmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macao","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qyzylorda","Asia/Rangoon","Asia/Riyadh","Asia/Saigon","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Tel_Aviv","Asia/Thimbu","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ujung_Pandang","Asia/Ulaanbaatar","Asia/Ulan_Bator","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faeroe","Atlantic/Faroe","Atlantic/Jan_Mayen","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/ACT","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Canberra","Australia/Currie","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/LHI","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/NSW","Australia/North","Australia/Perth","Australia/Queensland","Australia/South","Australia/Sydney","Australia/Tasmania","Australia/Victoria","Australia/West","Australia/Yancowinna","Brazil/Acre","Brazil/DeNoronha","Brazil/East","Brazil/West","CET","CST6CDT","Canada/Atlantic","Canada/Central","Canada/Eastern","Canada/Mountain","Canada/Newfoundland","Canada/Pacific","Canada/Saskatchewan","Canada/Yukon","Chile/Continental","Chile/EasterIsland","Cuba","EET","EST","EST5EDT","Egypt","Eire","Etc/GMT","Etc/GMT+0","Etc/GMT+1","Etc/GMT+10","Etc/GMT+11","Etc/GMT+12","Etc/GMT+2","Etc/GMT+3","Etc/GMT+4","Etc/GMT+5","Etc/GMT+6","Etc/GMT+7","Etc/GMT+8","Etc/GMT+9","Etc/GMT-0","Etc/GMT-1","Etc/GMT-10","Etc/GMT-11","Etc/GMT-12","Etc/GMT-13","Etc/GMT-14","Etc/GMT-2","Etc/GMT-3","Etc/GMT-4","Etc/GMT-5","Etc/GMT-6","Etc/GMT-7","Etc/GMT-8","Etc/GMT-9","Etc/GMT0","Etc/Greenwich","Etc/UCT","Etc/UTC","Etc/Universal","Etc/Zulu","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belfast","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Nicosia","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Tiraspol","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zaporozhye","Europe/Zurich","GB","GB-Eire","GMT","GMT+0","GMT-0","GMT0","Greenwich","HST","Hongkong","Iceland","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Iran","Israel","Jamaica","Japan","Kwajalein","Libya","MET","MST","MST7MDT","Mexico/BajaNorte","Mexico/BajaSur","Mexico/General","NZ","NZ-CHAT","Navajo","PRC","PST8PDT","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Johnston","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Ponape","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Samoa","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Truk","Pacific/Wake","Pacific/Wallis","Pacific/Yap","Poland","Portugal","ROC","ROK","Singapore","Turkey","UCT","US/Alaska","US/Aleutian","US/Arizona","US/Central","US/East-Indiana","US/Eastern","US/Hawaii","US/Indiana-Starke","US/Michigan","US/Mountain","US/Pacific","US/Pacific-New","US/Samoa","UTC","Universal","W-SU","WET","Zulu"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerNmsSettingsTrafficShapingAdjustment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trafficShapingAdjustmentDescription := ``

	var trafficShapingAdjustmentFlagName string
	if cmdPrefix == "" {
		trafficShapingAdjustmentFlagName = "trafficShapingAdjustment"
	} else {
		trafficShapingAdjustmentFlagName = fmt.Sprintf("%v.trafficShapingAdjustment", cmdPrefix)
	}

	var trafficShapingAdjustmentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(trafficShapingAdjustmentFlagName, trafficShapingAdjustmentFlagDefault, trafficShapingAdjustmentDescription)

	return nil
}

func registerNmsSettingsUcrmEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmEnabledDescription := `Required. `

	var ucrmEnabledFlagName string
	if cmdPrefix == "" {
		ucrmEnabledFlagName = "ucrmEnabled"
	} else {
		ucrmEnabledFlagName = fmt.Sprintf("%v.ucrmEnabled", cmdPrefix)
	}

	var ucrmEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ucrmEnabledFlagName, ucrmEnabledFlagDefault, ucrmEnabledDescription)

	return nil
}

func registerNmsSettingsUpgradeGracePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	upgradeGracePeriodDescription := `Required. `

	var upgradeGracePeriodFlagName string
	if cmdPrefix == "" {
		upgradeGracePeriodFlagName = "upgradeGracePeriod"
	} else {
		upgradeGracePeriodFlagName = fmt.Sprintf("%v.upgradeGracePeriod", cmdPrefix)
	}

	var upgradeGracePeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(upgradeGracePeriodFlagName, upgradeGracePeriodFlagDefault, upgradeGracePeriodDescription)

	return nil
}

func registerNmsSettingsUseLetsEncrypt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useLetsEncryptDescription := `Required. `

	var useLetsEncryptFlagName string
	if cmdPrefix == "" {
		useLetsEncryptFlagName = "useLetsEncrypt"
	} else {
		useLetsEncryptFlagName = fmt.Sprintf("%v.useLetsEncrypt", cmdPrefix)
	}

	var useLetsEncryptFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useLetsEncryptFlagName, useLetsEncryptFlagDefault, useLetsEncryptDescription)

	return nil
}

func registerNmsSettingsWifiManIsEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wifiManIsEnabledDescription := ``

	var wifiManIsEnabledFlagName string
	if cmdPrefix == "" {
		wifiManIsEnabledFlagName = "wifiManIsEnabled"
	} else {
		wifiManIsEnabledFlagName = fmt.Sprintf("%v.wifiManIsEnabled", cmdPrefix)
	}

	var wifiManIsEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(wifiManIsEnabledFlagName, wifiManIsEnabledFlagDefault, wifiManIsEnabledDescription)

	return nil
}

func registerNmsSettingsWifiManURLAddressForSpeedTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wifiManUrlAddressForSpeedTestDescription := ``

	var wifiManUrlAddressForSpeedTestFlagName string
	if cmdPrefix == "" {
		wifiManUrlAddressForSpeedTestFlagName = "wifiManUrlAddressForSpeedTest"
	} else {
		wifiManUrlAddressForSpeedTestFlagName = fmt.Sprintf("%v.wifiManUrlAddressForSpeedTest", cmdPrefix)
	}

	var wifiManUrlAddressForSpeedTestFlagDefault string

	_ = cmd.PersistentFlags().String(wifiManUrlAddressForSpeedTestFlagName, wifiManUrlAddressForSpeedTestFlagDefault, wifiManUrlAddressForSpeedTestDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNmsSettingsFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allowAutoUpdateUbntFirmwaresAdded := retrieveNmsSettingsAllowAutoUpdateUbntFirmwaresFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowAutoUpdateUbntFirmwaresAdded

	err, allowBetaFirmwaresAdded := retrieveNmsSettingsAllowBetaFirmwaresFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowBetaFirmwaresAdded

	err, allowLoggingToLogentriesAdded := retrieveNmsSettingsAllowLoggingToLogentriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowLoggingToLogentriesAdded

	err, allowLoggingToSentryAdded := retrieveNmsSettingsAllowLoggingToSentryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowLoggingToSentryAdded

	err, allowNewDashboardAdded := retrieveNmsSettingsAllowNewDashboardFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowNewDashboardAdded

	err, allowUnmsBetaVersionAdded := retrieveNmsSettingsAllowUnmsBetaVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowUnmsBetaVersionAdded

	err, autoBackupsAdded := retrieveNmsSettingsAutoBackupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoBackupsAdded

	err, countryAdded := retrieveNmsSettingsCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryAdded

	err, dateFormatAdded := retrieveNmsSettingsDateFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateFormatAdded

	err, defaultGracePeriodAdded := retrieveNmsSettingsDefaultGracePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultGracePeriodAdded

	err, defaultQosPropagationAdded := retrieveNmsSettingsDefaultQosPropagationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultQosPropagationAdded

	err, deviceAutoBackupsAdded := retrieveNmsSettingsDeviceAutoBackupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceAutoBackupsAdded

	err, deviceNumberOfBackupsAdded := retrieveNmsSettingsDeviceNumberOfBackupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceNumberOfBackupsAdded

	err, devicePingAddressAdded := retrieveNmsSettingsDevicePingAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicePingAddressAdded

	err, devicePingAddressModeAdded := retrieveNmsSettingsDevicePingAddressModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicePingAddressModeAdded

	err, devicePingIntervalNormalAdded := retrieveNmsSettingsDevicePingIntervalNormalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicePingIntervalNormalAdded

	err, devicePingIntervalOutageAdded := retrieveNmsSettingsDevicePingIntervalOutageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicePingIntervalOutageAdded

	err, deviceTransmissionFrequenciesAdded := retrieveNmsSettingsDeviceTransmissionFrequenciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceTransmissionFrequenciesAdded

	err, deviceTransmissionProfileAdded := retrieveNmsSettingsDeviceTransmissionProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceTransmissionProfileAdded

	err, discoveryAllowLocalScanAdded := retrieveNmsSettingsDiscoveryAllowLocalScanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discoveryAllowLocalScanAdded

	err, discoveryAllowRemoteScanAdded := retrieveNmsSettingsDiscoveryAllowRemoteScanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discoveryAllowRemoteScanAdded

	err, discoveryAllowUnsecuredChannelsAdded := retrieveNmsSettingsDiscoveryAllowUnsecuredChannelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discoveryAllowUnsecuredChannelsAdded

	err, discoveryAutoConfigurationAdded := retrieveNmsSettingsDiscoveryAutoConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discoveryAutoConfigurationAdded

	err, discoveryBlacklistAdded := retrieveNmsSettingsDiscoveryBlacklistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discoveryBlacklistAdded

	err, discoveryHideBlackBoxAdded := retrieveNmsSettingsDiscoveryHideBlackBoxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discoveryHideBlackBoxAdded

	err, discoverySnmpCommunityAdded := retrieveNmsSettingsDiscoverySnmpCommunityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discoverySnmpCommunityAdded

	err, googleMapsApiKeyAdded := retrieveNmsSettingsGoogleMapsAPIKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || googleMapsApiKeyAdded

	err, homePageAdded := retrieveNmsSettingsHomePageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || homePageAdded

	err, hostnameAdded := retrieveNmsSettingsHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, instanceIdAdded := retrieveNmsSettingsInstanceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || instanceIdAdded

	err, isIspAdded := retrieveNmsSettingsIsIspFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isIspAdded

	err, isSetupSurveyAnsweredAdded := retrieveNmsSettingsIsSetupSurveyAnsweredFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isSetupSurveyAnsweredAdded

	err, letsEncryptErrorAdded := retrieveNmsSettingsLetsEncryptErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || letsEncryptErrorAdded

	err, letsEncryptTimestampAdded := retrieveNmsSettingsLetsEncryptTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || letsEncryptTimestampAdded

	err, maintenanceWindowFridayAdded := retrieveNmsSettingsMaintenanceWindowFridayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowFridayAdded

	err, maintenanceWindowFromTimeAdded := retrieveNmsSettingsMaintenanceWindowFromTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowFromTimeAdded

	err, maintenanceWindowMondayAdded := retrieveNmsSettingsMaintenanceWindowMondayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowMondayAdded

	err, maintenanceWindowSaturdayAdded := retrieveNmsSettingsMaintenanceWindowSaturdayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowSaturdayAdded

	err, maintenanceWindowSundayAdded := retrieveNmsSettingsMaintenanceWindowSundayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowSundayAdded

	err, maintenanceWindowThursdayAdded := retrieveNmsSettingsMaintenanceWindowThursdayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowThursdayAdded

	err, maintenanceWindowToTimeAdded := retrieveNmsSettingsMaintenanceWindowToTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowToTimeAdded

	err, maintenanceWindowTuesdayAdded := retrieveNmsSettingsMaintenanceWindowTuesdayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowTuesdayAdded

	err, maintenanceWindowWednesdayAdded := retrieveNmsSettingsMaintenanceWindowWednesdayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintenanceWindowWednesdayAdded

	err, mapsProviderAdded := retrieveNmsSettingsMapsProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapsProviderAdded

	err, migrationForceModeEnabledAdded := retrieveNmsSettingsMigrationForceModeEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || migrationForceModeEnabledAdded

	err, migrationHostnameAdded := retrieveNmsSettingsMigrationHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || migrationHostnameAdded

	err, migrationModeEnabledAdded := retrieveNmsSettingsMigrationModeEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || migrationModeEnabledAdded

	err, migrationPortAdded := retrieveNmsSettingsMigrationPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || migrationPortAdded

	err, outageMailablePeriodAdded := retrieveNmsSettingsOutageMailablePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outageMailablePeriodAdded

	err, restartGracePeriodAdded := retrieveNmsSettingsRestartGracePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restartGracePeriodAdded

	err, timeFormatAdded := retrieveNmsSettingsTimeFormatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeFormatAdded

	err, timezoneAdded := retrieveNmsSettingsTimezoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timezoneAdded

	err, trafficShapingAdjustmentAdded := retrieveNmsSettingsTrafficShapingAdjustmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trafficShapingAdjustmentAdded

	err, ucrmEnabledAdded := retrieveNmsSettingsUcrmEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmEnabledAdded

	err, upgradeGracePeriodAdded := retrieveNmsSettingsUpgradeGracePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradeGracePeriodAdded

	err, useLetsEncryptAdded := retrieveNmsSettingsUseLetsEncryptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useLetsEncryptAdded

	err, wifiManIsEnabledAdded := retrieveNmsSettingsWifiManIsEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifiManIsEnabledAdded

	err, wifiManUrlAddressForSpeedTestAdded := retrieveNmsSettingsWifiManURLAddressForSpeedTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifiManUrlAddressForSpeedTestAdded

	return nil, retAdded
}

func retrieveNmsSettingsAllowAutoUpdateUbntFirmwaresFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowAutoUpdateUbntFirmwaresFlagName := fmt.Sprintf("%v.allowAutoUpdateUbntFirmwares", cmdPrefix)
	if cmd.Flags().Changed(allowAutoUpdateUbntFirmwaresFlagName) {

		var allowAutoUpdateUbntFirmwaresFlagName string
		if cmdPrefix == "" {
			allowAutoUpdateUbntFirmwaresFlagName = "allowAutoUpdateUbntFirmwares"
		} else {
			allowAutoUpdateUbntFirmwaresFlagName = fmt.Sprintf("%v.allowAutoUpdateUbntFirmwares", cmdPrefix)
		}

		allowAutoUpdateUbntFirmwaresFlagValue, err := cmd.Flags().GetBool(allowAutoUpdateUbntFirmwaresFlagName)
		if err != nil {
			return err, false
		}
		m.AllowAutoUpdateUbntFirmwares = &allowAutoUpdateUbntFirmwaresFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsAllowBetaFirmwaresFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowBetaFirmwaresFlagName := fmt.Sprintf("%v.allowBetaFirmwares", cmdPrefix)
	if cmd.Flags().Changed(allowBetaFirmwaresFlagName) {

		var allowBetaFirmwaresFlagName string
		if cmdPrefix == "" {
			allowBetaFirmwaresFlagName = "allowBetaFirmwares"
		} else {
			allowBetaFirmwaresFlagName = fmt.Sprintf("%v.allowBetaFirmwares", cmdPrefix)
		}

		allowBetaFirmwaresFlagValue, err := cmd.Flags().GetBool(allowBetaFirmwaresFlagName)
		if err != nil {
			return err, false
		}
		m.AllowBetaFirmwares = &allowBetaFirmwaresFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsAllowLoggingToLogentriesFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowLoggingToLogentriesFlagName := fmt.Sprintf("%v.allowLoggingToLogentries", cmdPrefix)
	if cmd.Flags().Changed(allowLoggingToLogentriesFlagName) {

		var allowLoggingToLogentriesFlagName string
		if cmdPrefix == "" {
			allowLoggingToLogentriesFlagName = "allowLoggingToLogentries"
		} else {
			allowLoggingToLogentriesFlagName = fmt.Sprintf("%v.allowLoggingToLogentries", cmdPrefix)
		}

		allowLoggingToLogentriesFlagValue, err := cmd.Flags().GetBool(allowLoggingToLogentriesFlagName)
		if err != nil {
			return err, false
		}
		m.AllowLoggingToLogentries = &allowLoggingToLogentriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsAllowLoggingToSentryFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowLoggingToSentryFlagName := fmt.Sprintf("%v.allowLoggingToSentry", cmdPrefix)
	if cmd.Flags().Changed(allowLoggingToSentryFlagName) {

		var allowLoggingToSentryFlagName string
		if cmdPrefix == "" {
			allowLoggingToSentryFlagName = "allowLoggingToSentry"
		} else {
			allowLoggingToSentryFlagName = fmt.Sprintf("%v.allowLoggingToSentry", cmdPrefix)
		}

		allowLoggingToSentryFlagValue, err := cmd.Flags().GetBool(allowLoggingToSentryFlagName)
		if err != nil {
			return err, false
		}
		m.AllowLoggingToSentry = &allowLoggingToSentryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsAllowNewDashboardFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowNewDashboardFlagName := fmt.Sprintf("%v.allowNewDashboard", cmdPrefix)
	if cmd.Flags().Changed(allowNewDashboardFlagName) {

		var allowNewDashboardFlagName string
		if cmdPrefix == "" {
			allowNewDashboardFlagName = "allowNewDashboard"
		} else {
			allowNewDashboardFlagName = fmt.Sprintf("%v.allowNewDashboard", cmdPrefix)
		}

		allowNewDashboardFlagValue, err := cmd.Flags().GetBool(allowNewDashboardFlagName)
		if err != nil {
			return err, false
		}
		m.AllowNewDashboard = allowNewDashboardFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsAllowUnmsBetaVersionFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowUnmsBetaVersionFlagName := fmt.Sprintf("%v.allowUnmsBetaVersion", cmdPrefix)
	if cmd.Flags().Changed(allowUnmsBetaVersionFlagName) {

		var allowUnmsBetaVersionFlagName string
		if cmdPrefix == "" {
			allowUnmsBetaVersionFlagName = "allowUnmsBetaVersion"
		} else {
			allowUnmsBetaVersionFlagName = fmt.Sprintf("%v.allowUnmsBetaVersion", cmdPrefix)
		}

		allowUnmsBetaVersionFlagValue, err := cmd.Flags().GetBool(allowUnmsBetaVersionFlagName)
		if err != nil {
			return err, false
		}
		m.AllowUnmsBetaVersion = allowUnmsBetaVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsAutoBackupsFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoBackupsFlagName := fmt.Sprintf("%v.autoBackups", cmdPrefix)
	if cmd.Flags().Changed(autoBackupsFlagName) {

		var autoBackupsFlagName string
		if cmdPrefix == "" {
			autoBackupsFlagName = "autoBackups"
		} else {
			autoBackupsFlagName = fmt.Sprintf("%v.autoBackups", cmdPrefix)
		}

		autoBackupsFlagValue, err := cmd.Flags().GetBool(autoBackupsFlagName)
		if err != nil {
			return err, false
		}
		m.AutoBackups = &autoBackupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsCountryFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryFlagName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(countryFlagName) {

		var countryFlagName string
		if cmdPrefix == "" {
			countryFlagName = "country"
		} else {
			countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
		}

		countryFlagValue, err := cmd.Flags().GetString(countryFlagName)
		if err != nil {
			return err, false
		}
		m.Country = &countryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDateFormatFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateFormatFlagName := fmt.Sprintf("%v.dateFormat", cmdPrefix)
	if cmd.Flags().Changed(dateFormatFlagName) {

		var dateFormatFlagName string
		if cmdPrefix == "" {
			dateFormatFlagName = "dateFormat"
		} else {
			dateFormatFlagName = fmt.Sprintf("%v.dateFormat", cmdPrefix)
		}

		dateFormatFlagValue, err := cmd.Flags().GetString(dateFormatFlagName)
		if err != nil {
			return err, false
		}
		m.DateFormat = &dateFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDefaultGracePeriodFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultGracePeriodFlagName := fmt.Sprintf("%v.defaultGracePeriod", cmdPrefix)
	if cmd.Flags().Changed(defaultGracePeriodFlagName) {

		var defaultGracePeriodFlagName string
		if cmdPrefix == "" {
			defaultGracePeriodFlagName = "defaultGracePeriod"
		} else {
			defaultGracePeriodFlagName = fmt.Sprintf("%v.defaultGracePeriod", cmdPrefix)
		}

		defaultGracePeriodFlagValue, err := cmd.Flags().GetInt64(defaultGracePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultGracePeriod = &defaultGracePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDefaultQosPropagationFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultQosPropagationFlagName := fmt.Sprintf("%v.defaultQosPropagation", cmdPrefix)
	if cmd.Flags().Changed(defaultQosPropagationFlagName) {

		var defaultQosPropagationFlagName string
		if cmdPrefix == "" {
			defaultQosPropagationFlagName = "defaultQosPropagation"
		} else {
			defaultQosPropagationFlagName = fmt.Sprintf("%v.defaultQosPropagation", cmdPrefix)
		}

		defaultQosPropagationFlagValue, err := cmd.Flags().GetString(defaultQosPropagationFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultQosPropagation = &defaultQosPropagationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDeviceAutoBackupsFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceAutoBackupsFlagName := fmt.Sprintf("%v.deviceAutoBackups", cmdPrefix)
	if cmd.Flags().Changed(deviceAutoBackupsFlagName) {

		var deviceAutoBackupsFlagName string
		if cmdPrefix == "" {
			deviceAutoBackupsFlagName = "deviceAutoBackups"
		} else {
			deviceAutoBackupsFlagName = fmt.Sprintf("%v.deviceAutoBackups", cmdPrefix)
		}

		deviceAutoBackupsFlagValue, err := cmd.Flags().GetBool(deviceAutoBackupsFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceAutoBackups = &deviceAutoBackupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDeviceNumberOfBackupsFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceNumberOfBackupsFlagName := fmt.Sprintf("%v.deviceNumberOfBackups", cmdPrefix)
	if cmd.Flags().Changed(deviceNumberOfBackupsFlagName) {

		var deviceNumberOfBackupsFlagName string
		if cmdPrefix == "" {
			deviceNumberOfBackupsFlagName = "deviceNumberOfBackups"
		} else {
			deviceNumberOfBackupsFlagName = fmt.Sprintf("%v.deviceNumberOfBackups", cmdPrefix)
		}

		deviceNumberOfBackupsFlagValue, err := cmd.Flags().GetInt64(deviceNumberOfBackupsFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceNumberOfBackups = deviceNumberOfBackupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDevicePingAddressFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicePingAddressFlagName := fmt.Sprintf("%v.devicePingAddress", cmdPrefix)
	if cmd.Flags().Changed(devicePingAddressFlagName) {

		var devicePingAddressFlagName string
		if cmdPrefix == "" {
			devicePingAddressFlagName = "devicePingAddress"
		} else {
			devicePingAddressFlagName = fmt.Sprintf("%v.devicePingAddress", cmdPrefix)
		}

		devicePingAddressFlagValue, err := cmd.Flags().GetString(devicePingAddressFlagName)
		if err != nil {
			return err, false
		}
		m.DevicePingAddress = &devicePingAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDevicePingAddressModeFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicePingAddressModeFlagName := fmt.Sprintf("%v.devicePingAddressMode", cmdPrefix)
	if cmd.Flags().Changed(devicePingAddressModeFlagName) {

		var devicePingAddressModeFlagName string
		if cmdPrefix == "" {
			devicePingAddressModeFlagName = "devicePingAddressMode"
		} else {
			devicePingAddressModeFlagName = fmt.Sprintf("%v.devicePingAddressMode", cmdPrefix)
		}

		devicePingAddressModeFlagValue, err := cmd.Flags().GetString(devicePingAddressModeFlagName)
		if err != nil {
			return err, false
		}
		m.DevicePingAddressMode = &devicePingAddressModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDevicePingIntervalNormalFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicePingIntervalNormalFlagName := fmt.Sprintf("%v.devicePingIntervalNormal", cmdPrefix)
	if cmd.Flags().Changed(devicePingIntervalNormalFlagName) {

		var devicePingIntervalNormalFlagName string
		if cmdPrefix == "" {
			devicePingIntervalNormalFlagName = "devicePingIntervalNormal"
		} else {
			devicePingIntervalNormalFlagName = fmt.Sprintf("%v.devicePingIntervalNormal", cmdPrefix)
		}

		devicePingIntervalNormalFlagValue, err := cmd.Flags().GetFloat64(devicePingIntervalNormalFlagName)
		if err != nil {
			return err, false
		}
		m.DevicePingIntervalNormal = &devicePingIntervalNormalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDevicePingIntervalOutageFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicePingIntervalOutageFlagName := fmt.Sprintf("%v.devicePingIntervalOutage", cmdPrefix)
	if cmd.Flags().Changed(devicePingIntervalOutageFlagName) {

		var devicePingIntervalOutageFlagName string
		if cmdPrefix == "" {
			devicePingIntervalOutageFlagName = "devicePingIntervalOutage"
		} else {
			devicePingIntervalOutageFlagName = fmt.Sprintf("%v.devicePingIntervalOutage", cmdPrefix)
		}

		devicePingIntervalOutageFlagValue, err := cmd.Flags().GetFloat64(devicePingIntervalOutageFlagName)
		if err != nil {
			return err, false
		}
		m.DevicePingIntervalOutage = &devicePingIntervalOutageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDeviceTransmissionFrequenciesFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceTransmissionFrequenciesFlagName := fmt.Sprintf("%v.deviceTransmissionFrequencies", cmdPrefix)
	if cmd.Flags().Changed(deviceTransmissionFrequenciesFlagName) {
		// info: complex object deviceTransmissionFrequencies DeviceTransmissionFrequencies is retrieved outside this Changed() block
	}
	deviceTransmissionFrequenciesFlagValue := m.DeviceTransmissionFrequencies
	if swag.IsZero(deviceTransmissionFrequenciesFlagValue) {
		deviceTransmissionFrequenciesFlagValue = &models.DeviceTransmissionFrequencies{}
	}

	err, deviceTransmissionFrequenciesAdded := retrieveModelDeviceTransmissionFrequenciesFlags(depth+1, deviceTransmissionFrequenciesFlagValue, deviceTransmissionFrequenciesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceTransmissionFrequenciesAdded
	if deviceTransmissionFrequenciesAdded {
		m.DeviceTransmissionFrequencies = deviceTransmissionFrequenciesFlagValue
	}

	return nil, retAdded
}

func retrieveNmsSettingsDeviceTransmissionProfileFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceTransmissionProfileFlagName := fmt.Sprintf("%v.deviceTransmissionProfile", cmdPrefix)
	if cmd.Flags().Changed(deviceTransmissionProfileFlagName) {

		var deviceTransmissionProfileFlagName string
		if cmdPrefix == "" {
			deviceTransmissionProfileFlagName = "deviceTransmissionProfile"
		} else {
			deviceTransmissionProfileFlagName = fmt.Sprintf("%v.deviceTransmissionProfile", cmdPrefix)
		}

		deviceTransmissionProfileFlagValue, err := cmd.Flags().GetString(deviceTransmissionProfileFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceTransmissionProfile = &deviceTransmissionProfileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDiscoveryAllowLocalScanFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discoveryAllowLocalScanFlagName := fmt.Sprintf("%v.discoveryAllowLocalScan", cmdPrefix)
	if cmd.Flags().Changed(discoveryAllowLocalScanFlagName) {

		var discoveryAllowLocalScanFlagName string
		if cmdPrefix == "" {
			discoveryAllowLocalScanFlagName = "discoveryAllowLocalScan"
		} else {
			discoveryAllowLocalScanFlagName = fmt.Sprintf("%v.discoveryAllowLocalScan", cmdPrefix)
		}

		discoveryAllowLocalScanFlagValue, err := cmd.Flags().GetBool(discoveryAllowLocalScanFlagName)
		if err != nil {
			return err, false
		}
		m.DiscoveryAllowLocalScan = &discoveryAllowLocalScanFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDiscoveryAllowRemoteScanFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discoveryAllowRemoteScanFlagName := fmt.Sprintf("%v.discoveryAllowRemoteScan", cmdPrefix)
	if cmd.Flags().Changed(discoveryAllowRemoteScanFlagName) {

		var discoveryAllowRemoteScanFlagName string
		if cmdPrefix == "" {
			discoveryAllowRemoteScanFlagName = "discoveryAllowRemoteScan"
		} else {
			discoveryAllowRemoteScanFlagName = fmt.Sprintf("%v.discoveryAllowRemoteScan", cmdPrefix)
		}

		discoveryAllowRemoteScanFlagValue, err := cmd.Flags().GetBool(discoveryAllowRemoteScanFlagName)
		if err != nil {
			return err, false
		}
		m.DiscoveryAllowRemoteScan = &discoveryAllowRemoteScanFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDiscoveryAllowUnsecuredChannelsFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discoveryAllowUnsecuredChannelsFlagName := fmt.Sprintf("%v.discoveryAllowUnsecuredChannels", cmdPrefix)
	if cmd.Flags().Changed(discoveryAllowUnsecuredChannelsFlagName) {

		var discoveryAllowUnsecuredChannelsFlagName string
		if cmdPrefix == "" {
			discoveryAllowUnsecuredChannelsFlagName = "discoveryAllowUnsecuredChannels"
		} else {
			discoveryAllowUnsecuredChannelsFlagName = fmt.Sprintf("%v.discoveryAllowUnsecuredChannels", cmdPrefix)
		}

		discoveryAllowUnsecuredChannelsFlagValue, err := cmd.Flags().GetBool(discoveryAllowUnsecuredChannelsFlagName)
		if err != nil {
			return err, false
		}
		m.DiscoveryAllowUnsecuredChannels = &discoveryAllowUnsecuredChannelsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDiscoveryAutoConfigurationFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discoveryAutoConfigurationFlagName := fmt.Sprintf("%v.discoveryAutoConfiguration", cmdPrefix)
	if cmd.Flags().Changed(discoveryAutoConfigurationFlagName) {

		var discoveryAutoConfigurationFlagName string
		if cmdPrefix == "" {
			discoveryAutoConfigurationFlagName = "discoveryAutoConfiguration"
		} else {
			discoveryAutoConfigurationFlagName = fmt.Sprintf("%v.discoveryAutoConfiguration", cmdPrefix)
		}

		discoveryAutoConfigurationFlagValue, err := cmd.Flags().GetBool(discoveryAutoConfigurationFlagName)
		if err != nil {
			return err, false
		}
		m.DiscoveryAutoConfiguration = &discoveryAutoConfigurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDiscoveryBlacklistFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discoveryBlacklistFlagName := fmt.Sprintf("%v.discoveryBlacklist", cmdPrefix)
	if cmd.Flags().Changed(discoveryBlacklistFlagName) {
		// warning: discoveryBlacklist array type DiscoveryBlacklist is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveNmsSettingsDiscoveryHideBlackBoxFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discoveryHideBlackBoxFlagName := fmt.Sprintf("%v.discoveryHideBlackBox", cmdPrefix)
	if cmd.Flags().Changed(discoveryHideBlackBoxFlagName) {

		var discoveryHideBlackBoxFlagName string
		if cmdPrefix == "" {
			discoveryHideBlackBoxFlagName = "discoveryHideBlackBox"
		} else {
			discoveryHideBlackBoxFlagName = fmt.Sprintf("%v.discoveryHideBlackBox", cmdPrefix)
		}

		discoveryHideBlackBoxFlagValue, err := cmd.Flags().GetBool(discoveryHideBlackBoxFlagName)
		if err != nil {
			return err, false
		}
		m.DiscoveryHideBlackBox = &discoveryHideBlackBoxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsDiscoverySnmpCommunityFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discoverySnmpCommunityFlagName := fmt.Sprintf("%v.discoverySnmpCommunity", cmdPrefix)
	if cmd.Flags().Changed(discoverySnmpCommunityFlagName) {

		var discoverySnmpCommunityFlagName string
		if cmdPrefix == "" {
			discoverySnmpCommunityFlagName = "discoverySnmpCommunity"
		} else {
			discoverySnmpCommunityFlagName = fmt.Sprintf("%v.discoverySnmpCommunity", cmdPrefix)
		}

		discoverySnmpCommunityFlagValue, err := cmd.Flags().GetString(discoverySnmpCommunityFlagName)
		if err != nil {
			return err, false
		}
		m.DiscoverySnmpCommunity = &discoverySnmpCommunityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsGoogleMapsAPIKeyFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	googleMapsApiKeyFlagName := fmt.Sprintf("%v.googleMapsApiKey", cmdPrefix)
	if cmd.Flags().Changed(googleMapsApiKeyFlagName) {

		var googleMapsApiKeyFlagName string
		if cmdPrefix == "" {
			googleMapsApiKeyFlagName = "googleMapsApiKey"
		} else {
			googleMapsApiKeyFlagName = fmt.Sprintf("%v.googleMapsApiKey", cmdPrefix)
		}

		googleMapsApiKeyFlagValue, err := cmd.Flags().GetString(googleMapsApiKeyFlagName)
		if err != nil {
			return err, false
		}
		m.GoogleMapsAPIKey = &googleMapsApiKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsHomePageFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	homePageFlagName := fmt.Sprintf("%v.homePage", cmdPrefix)
	if cmd.Flags().Changed(homePageFlagName) {

		var homePageFlagName string
		if cmdPrefix == "" {
			homePageFlagName = "homePage"
		} else {
			homePageFlagName = fmt.Sprintf("%v.homePage", cmdPrefix)
		}

		homePageFlagValue, err := cmd.Flags().GetString(homePageFlagName)
		if err != nil {
			return err, false
		}
		m.HomePage = &homePageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsHostnameFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = &hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsInstanceIDFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	instanceIdFlagName := fmt.Sprintf("%v.instanceId", cmdPrefix)
	if cmd.Flags().Changed(instanceIdFlagName) {

		var instanceIdFlagName string
		if cmdPrefix == "" {
			instanceIdFlagName = "instanceId"
		} else {
			instanceIdFlagName = fmt.Sprintf("%v.instanceId", cmdPrefix)
		}

		instanceIdFlagValue, err := cmd.Flags().GetString(instanceIdFlagName)
		if err != nil {
			return err, false
		}
		m.InstanceID = &instanceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsIsIspFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isIspFlagName := fmt.Sprintf("%v.isIsp", cmdPrefix)
	if cmd.Flags().Changed(isIspFlagName) {

		var isIspFlagName string
		if cmdPrefix == "" {
			isIspFlagName = "isIsp"
		} else {
			isIspFlagName = fmt.Sprintf("%v.isIsp", cmdPrefix)
		}

		isIspFlagValue, err := cmd.Flags().GetBool(isIspFlagName)
		if err != nil {
			return err, false
		}
		m.IsIsp = &isIspFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsIsSetupSurveyAnsweredFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isSetupSurveyAnsweredFlagName := fmt.Sprintf("%v.isSetupSurveyAnswered", cmdPrefix)
	if cmd.Flags().Changed(isSetupSurveyAnsweredFlagName) {

		var isSetupSurveyAnsweredFlagName string
		if cmdPrefix == "" {
			isSetupSurveyAnsweredFlagName = "isSetupSurveyAnswered"
		} else {
			isSetupSurveyAnsweredFlagName = fmt.Sprintf("%v.isSetupSurveyAnswered", cmdPrefix)
		}

		isSetupSurveyAnsweredFlagValue, err := cmd.Flags().GetBool(isSetupSurveyAnsweredFlagName)
		if err != nil {
			return err, false
		}
		m.IsSetupSurveyAnswered = &isSetupSurveyAnsweredFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsLetsEncryptErrorFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	letsEncryptErrorFlagName := fmt.Sprintf("%v.letsEncryptError", cmdPrefix)
	if cmd.Flags().Changed(letsEncryptErrorFlagName) {

		var letsEncryptErrorFlagName string
		if cmdPrefix == "" {
			letsEncryptErrorFlagName = "letsEncryptError"
		} else {
			letsEncryptErrorFlagName = fmt.Sprintf("%v.letsEncryptError", cmdPrefix)
		}

		letsEncryptErrorFlagValue, err := cmd.Flags().GetString(letsEncryptErrorFlagName)
		if err != nil {
			return err, false
		}
		m.LetsEncryptError = &letsEncryptErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsLetsEncryptTimestampFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	letsEncryptTimestampFlagName := fmt.Sprintf("%v.letsEncryptTimestamp", cmdPrefix)
	if cmd.Flags().Changed(letsEncryptTimestampFlagName) {

		var letsEncryptTimestampFlagName string
		if cmdPrefix == "" {
			letsEncryptTimestampFlagName = "letsEncryptTimestamp"
		} else {
			letsEncryptTimestampFlagName = fmt.Sprintf("%v.letsEncryptTimestamp", cmdPrefix)
		}

		letsEncryptTimestampFlagValue, err := cmd.Flags().GetFloat64(letsEncryptTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.LetsEncryptTimestamp = &letsEncryptTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowFridayFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowFridayFlagName := fmt.Sprintf("%v.maintenanceWindowFriday", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowFridayFlagName) {

		var maintenanceWindowFridayFlagName string
		if cmdPrefix == "" {
			maintenanceWindowFridayFlagName = "maintenanceWindowFriday"
		} else {
			maintenanceWindowFridayFlagName = fmt.Sprintf("%v.maintenanceWindowFriday", cmdPrefix)
		}

		maintenanceWindowFridayFlagValue, err := cmd.Flags().GetBool(maintenanceWindowFridayFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowFriday = maintenanceWindowFridayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowFromTimeFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowFromTimeFlagName := fmt.Sprintf("%v.maintenanceWindowFromTime", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowFromTimeFlagName) {

		var maintenanceWindowFromTimeFlagName string
		if cmdPrefix == "" {
			maintenanceWindowFromTimeFlagName = "maintenanceWindowFromTime"
		} else {
			maintenanceWindowFromTimeFlagName = fmt.Sprintf("%v.maintenanceWindowFromTime", cmdPrefix)
		}

		maintenanceWindowFromTimeFlagValue, err := cmd.Flags().GetInt64(maintenanceWindowFromTimeFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowFromTime = &maintenanceWindowFromTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowMondayFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowMondayFlagName := fmt.Sprintf("%v.maintenanceWindowMonday", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowMondayFlagName) {

		var maintenanceWindowMondayFlagName string
		if cmdPrefix == "" {
			maintenanceWindowMondayFlagName = "maintenanceWindowMonday"
		} else {
			maintenanceWindowMondayFlagName = fmt.Sprintf("%v.maintenanceWindowMonday", cmdPrefix)
		}

		maintenanceWindowMondayFlagValue, err := cmd.Flags().GetBool(maintenanceWindowMondayFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowMonday = maintenanceWindowMondayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowSaturdayFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowSaturdayFlagName := fmt.Sprintf("%v.maintenanceWindowSaturday", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowSaturdayFlagName) {

		var maintenanceWindowSaturdayFlagName string
		if cmdPrefix == "" {
			maintenanceWindowSaturdayFlagName = "maintenanceWindowSaturday"
		} else {
			maintenanceWindowSaturdayFlagName = fmt.Sprintf("%v.maintenanceWindowSaturday", cmdPrefix)
		}

		maintenanceWindowSaturdayFlagValue, err := cmd.Flags().GetBool(maintenanceWindowSaturdayFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowSaturday = maintenanceWindowSaturdayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowSundayFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowSundayFlagName := fmt.Sprintf("%v.maintenanceWindowSunday", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowSundayFlagName) {

		var maintenanceWindowSundayFlagName string
		if cmdPrefix == "" {
			maintenanceWindowSundayFlagName = "maintenanceWindowSunday"
		} else {
			maintenanceWindowSundayFlagName = fmt.Sprintf("%v.maintenanceWindowSunday", cmdPrefix)
		}

		maintenanceWindowSundayFlagValue, err := cmd.Flags().GetBool(maintenanceWindowSundayFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowSunday = maintenanceWindowSundayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowThursdayFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowThursdayFlagName := fmt.Sprintf("%v.maintenanceWindowThursday", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowThursdayFlagName) {

		var maintenanceWindowThursdayFlagName string
		if cmdPrefix == "" {
			maintenanceWindowThursdayFlagName = "maintenanceWindowThursday"
		} else {
			maintenanceWindowThursdayFlagName = fmt.Sprintf("%v.maintenanceWindowThursday", cmdPrefix)
		}

		maintenanceWindowThursdayFlagValue, err := cmd.Flags().GetBool(maintenanceWindowThursdayFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowThursday = maintenanceWindowThursdayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowToTimeFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowToTimeFlagName := fmt.Sprintf("%v.maintenanceWindowToTime", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowToTimeFlagName) {

		var maintenanceWindowToTimeFlagName string
		if cmdPrefix == "" {
			maintenanceWindowToTimeFlagName = "maintenanceWindowToTime"
		} else {
			maintenanceWindowToTimeFlagName = fmt.Sprintf("%v.maintenanceWindowToTime", cmdPrefix)
		}

		maintenanceWindowToTimeFlagValue, err := cmd.Flags().GetInt64(maintenanceWindowToTimeFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowToTime = &maintenanceWindowToTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowTuesdayFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowTuesdayFlagName := fmt.Sprintf("%v.maintenanceWindowTuesday", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowTuesdayFlagName) {

		var maintenanceWindowTuesdayFlagName string
		if cmdPrefix == "" {
			maintenanceWindowTuesdayFlagName = "maintenanceWindowTuesday"
		} else {
			maintenanceWindowTuesdayFlagName = fmt.Sprintf("%v.maintenanceWindowTuesday", cmdPrefix)
		}

		maintenanceWindowTuesdayFlagValue, err := cmd.Flags().GetBool(maintenanceWindowTuesdayFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowTuesday = maintenanceWindowTuesdayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMaintenanceWindowWednesdayFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintenanceWindowWednesdayFlagName := fmt.Sprintf("%v.maintenanceWindowWednesday", cmdPrefix)
	if cmd.Flags().Changed(maintenanceWindowWednesdayFlagName) {

		var maintenanceWindowWednesdayFlagName string
		if cmdPrefix == "" {
			maintenanceWindowWednesdayFlagName = "maintenanceWindowWednesday"
		} else {
			maintenanceWindowWednesdayFlagName = fmt.Sprintf("%v.maintenanceWindowWednesday", cmdPrefix)
		}

		maintenanceWindowWednesdayFlagValue, err := cmd.Flags().GetBool(maintenanceWindowWednesdayFlagName)
		if err != nil {
			return err, false
		}
		m.MaintenanceWindowWednesday = maintenanceWindowWednesdayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMapsProviderFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapsProviderFlagName := fmt.Sprintf("%v.mapsProvider", cmdPrefix)
	if cmd.Flags().Changed(mapsProviderFlagName) {

		var mapsProviderFlagName string
		if cmdPrefix == "" {
			mapsProviderFlagName = "mapsProvider"
		} else {
			mapsProviderFlagName = fmt.Sprintf("%v.mapsProvider", cmdPrefix)
		}

		mapsProviderFlagValue, err := cmd.Flags().GetString(mapsProviderFlagName)
		if err != nil {
			return err, false
		}
		m.MapsProvider = &mapsProviderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMigrationForceModeEnabledFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	migrationForceModeEnabledFlagName := fmt.Sprintf("%v.migrationForceModeEnabled", cmdPrefix)
	if cmd.Flags().Changed(migrationForceModeEnabledFlagName) {

		var migrationForceModeEnabledFlagName string
		if cmdPrefix == "" {
			migrationForceModeEnabledFlagName = "migrationForceModeEnabled"
		} else {
			migrationForceModeEnabledFlagName = fmt.Sprintf("%v.migrationForceModeEnabled", cmdPrefix)
		}

		migrationForceModeEnabledFlagValue, err := cmd.Flags().GetBool(migrationForceModeEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.MigrationForceModeEnabled = &migrationForceModeEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMigrationHostnameFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	migrationHostnameFlagName := fmt.Sprintf("%v.migrationHostname", cmdPrefix)
	if cmd.Flags().Changed(migrationHostnameFlagName) {

		var migrationHostnameFlagName string
		if cmdPrefix == "" {
			migrationHostnameFlagName = "migrationHostname"
		} else {
			migrationHostnameFlagName = fmt.Sprintf("%v.migrationHostname", cmdPrefix)
		}

		migrationHostnameFlagValue, err := cmd.Flags().GetString(migrationHostnameFlagName)
		if err != nil {
			return err, false
		}
		m.MigrationHostname = &migrationHostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMigrationModeEnabledFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	migrationModeEnabledFlagName := fmt.Sprintf("%v.migrationModeEnabled", cmdPrefix)
	if cmd.Flags().Changed(migrationModeEnabledFlagName) {

		var migrationModeEnabledFlagName string
		if cmdPrefix == "" {
			migrationModeEnabledFlagName = "migrationModeEnabled"
		} else {
			migrationModeEnabledFlagName = fmt.Sprintf("%v.migrationModeEnabled", cmdPrefix)
		}

		migrationModeEnabledFlagValue, err := cmd.Flags().GetBool(migrationModeEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.MigrationModeEnabled = &migrationModeEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsMigrationPortFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	migrationPortFlagName := fmt.Sprintf("%v.migrationPort", cmdPrefix)
	if cmd.Flags().Changed(migrationPortFlagName) {

		var migrationPortFlagName string
		if cmdPrefix == "" {
			migrationPortFlagName = "migrationPort"
		} else {
			migrationPortFlagName = fmt.Sprintf("%v.migrationPort", cmdPrefix)
		}

		migrationPortFlagValue, err := cmd.Flags().GetInt64(migrationPortFlagName)
		if err != nil {
			return err, false
		}
		m.MigrationPort = &migrationPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsOutageMailablePeriodFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outageMailablePeriodFlagName := fmt.Sprintf("%v.outageMailablePeriod", cmdPrefix)
	if cmd.Flags().Changed(outageMailablePeriodFlagName) {

		var outageMailablePeriodFlagName string
		if cmdPrefix == "" {
			outageMailablePeriodFlagName = "outageMailablePeriod"
		} else {
			outageMailablePeriodFlagName = fmt.Sprintf("%v.outageMailablePeriod", cmdPrefix)
		}

		outageMailablePeriodFlagValue, err := cmd.Flags().GetInt64(outageMailablePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.OutageMailablePeriod = &outageMailablePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsRestartGracePeriodFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	restartGracePeriodFlagName := fmt.Sprintf("%v.restartGracePeriod", cmdPrefix)
	if cmd.Flags().Changed(restartGracePeriodFlagName) {

		var restartGracePeriodFlagName string
		if cmdPrefix == "" {
			restartGracePeriodFlagName = "restartGracePeriod"
		} else {
			restartGracePeriodFlagName = fmt.Sprintf("%v.restartGracePeriod", cmdPrefix)
		}

		restartGracePeriodFlagValue, err := cmd.Flags().GetInt64(restartGracePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.RestartGracePeriod = &restartGracePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsTimeFormatFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFormatFlagName := fmt.Sprintf("%v.timeFormat", cmdPrefix)
	if cmd.Flags().Changed(timeFormatFlagName) {

		var timeFormatFlagName string
		if cmdPrefix == "" {
			timeFormatFlagName = "timeFormat"
		} else {
			timeFormatFlagName = fmt.Sprintf("%v.timeFormat", cmdPrefix)
		}

		timeFormatFlagValue, err := cmd.Flags().GetString(timeFormatFlagName)
		if err != nil {
			return err, false
		}
		m.TimeFormat = &timeFormatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsTimezoneFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timezoneFlagName := fmt.Sprintf("%v.timezone", cmdPrefix)
	if cmd.Flags().Changed(timezoneFlagName) {

		var timezoneFlagName string
		if cmdPrefix == "" {
			timezoneFlagName = "timezone"
		} else {
			timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
		}

		timezoneFlagValue, err := cmd.Flags().GetString(timezoneFlagName)
		if err != nil {
			return err, false
		}
		m.Timezone = &timezoneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsTrafficShapingAdjustmentFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trafficShapingAdjustmentFlagName := fmt.Sprintf("%v.trafficShapingAdjustment", cmdPrefix)
	if cmd.Flags().Changed(trafficShapingAdjustmentFlagName) {

		var trafficShapingAdjustmentFlagName string
		if cmdPrefix == "" {
			trafficShapingAdjustmentFlagName = "trafficShapingAdjustment"
		} else {
			trafficShapingAdjustmentFlagName = fmt.Sprintf("%v.trafficShapingAdjustment", cmdPrefix)
		}

		trafficShapingAdjustmentFlagValue, err := cmd.Flags().GetInt64(trafficShapingAdjustmentFlagName)
		if err != nil {
			return err, false
		}
		m.TrafficShapingAdjustment = trafficShapingAdjustmentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsUcrmEnabledFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmEnabledFlagName := fmt.Sprintf("%v.ucrmEnabled", cmdPrefix)
	if cmd.Flags().Changed(ucrmEnabledFlagName) {

		var ucrmEnabledFlagName string
		if cmdPrefix == "" {
			ucrmEnabledFlagName = "ucrmEnabled"
		} else {
			ucrmEnabledFlagName = fmt.Sprintf("%v.ucrmEnabled", cmdPrefix)
		}

		ucrmEnabledFlagValue, err := cmd.Flags().GetBool(ucrmEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmEnabled = &ucrmEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsUpgradeGracePeriodFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upgradeGracePeriodFlagName := fmt.Sprintf("%v.upgradeGracePeriod", cmdPrefix)
	if cmd.Flags().Changed(upgradeGracePeriodFlagName) {

		var upgradeGracePeriodFlagName string
		if cmdPrefix == "" {
			upgradeGracePeriodFlagName = "upgradeGracePeriod"
		} else {
			upgradeGracePeriodFlagName = fmt.Sprintf("%v.upgradeGracePeriod", cmdPrefix)
		}

		upgradeGracePeriodFlagValue, err := cmd.Flags().GetInt64(upgradeGracePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.UpgradeGracePeriod = &upgradeGracePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsUseLetsEncryptFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useLetsEncryptFlagName := fmt.Sprintf("%v.useLetsEncrypt", cmdPrefix)
	if cmd.Flags().Changed(useLetsEncryptFlagName) {

		var useLetsEncryptFlagName string
		if cmdPrefix == "" {
			useLetsEncryptFlagName = "useLetsEncrypt"
		} else {
			useLetsEncryptFlagName = fmt.Sprintf("%v.useLetsEncrypt", cmdPrefix)
		}

		useLetsEncryptFlagValue, err := cmd.Flags().GetBool(useLetsEncryptFlagName)
		if err != nil {
			return err, false
		}
		m.UseLetsEncrypt = &useLetsEncryptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsWifiManIsEnabledFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifiManIsEnabledFlagName := fmt.Sprintf("%v.wifiManIsEnabled", cmdPrefix)
	if cmd.Flags().Changed(wifiManIsEnabledFlagName) {

		var wifiManIsEnabledFlagName string
		if cmdPrefix == "" {
			wifiManIsEnabledFlagName = "wifiManIsEnabled"
		} else {
			wifiManIsEnabledFlagName = fmt.Sprintf("%v.wifiManIsEnabled", cmdPrefix)
		}

		wifiManIsEnabledFlagValue, err := cmd.Flags().GetBool(wifiManIsEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.WifiManIsEnabled = wifiManIsEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsSettingsWifiManURLAddressForSpeedTestFlags(depth int, m *models.NmsSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifiManUrlAddressForSpeedTestFlagName := fmt.Sprintf("%v.wifiManUrlAddressForSpeedTest", cmdPrefix)
	if cmd.Flags().Changed(wifiManUrlAddressForSpeedTestFlagName) {

		var wifiManUrlAddressForSpeedTestFlagName string
		if cmdPrefix == "" {
			wifiManUrlAddressForSpeedTestFlagName = "wifiManUrlAddressForSpeedTest"
		} else {
			wifiManUrlAddressForSpeedTestFlagName = fmt.Sprintf("%v.wifiManUrlAddressForSpeedTest", cmdPrefix)
		}

		wifiManUrlAddressForSpeedTestFlagValue, err := cmd.Flags().GetString(wifiManUrlAddressForSpeedTestFlagName)
		if err != nil {
			return err, false
		}
		m.WifiManURLAddressForSpeedTest = wifiManUrlAddressForSpeedTestFlagValue

		retAdded = true
	}

	return nil, retAdded
}
