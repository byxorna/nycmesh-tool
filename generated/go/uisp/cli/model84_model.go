// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model84

// register flags to command
func registerModelModel84Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel84DeviceIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel84HTTPSPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel84Password(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel84ReplaceExistingBlackBox(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel84UseUnstableFirmware(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel84Username(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel84DeviceIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: deviceIds DeviceIds5 array type is not supported by go-swagger cli yet

	return nil
}

func registerModel84HTTPSPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpsPortDescription := ``

	var httpsPortFlagName string
	if cmdPrefix == "" {
		httpsPortFlagName = "httpsPort"
	} else {
		httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
	}

	var httpsPortFlagDefault int64 = 443

	_ = cmd.PersistentFlags().Int64(httpsPortFlagName, httpsPortFlagDefault, httpsPortDescription)

	return nil
}

func registerModel84Password(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `Required. `

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerModel84ReplaceExistingBlackBox(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replaceExistingBlackBoxDescription := ``

	var replaceExistingBlackBoxFlagName string
	if cmdPrefix == "" {
		replaceExistingBlackBoxFlagName = "replaceExistingBlackBox"
	} else {
		replaceExistingBlackBoxFlagName = fmt.Sprintf("%v.replaceExistingBlackBox", cmdPrefix)
	}

	var replaceExistingBlackBoxFlagDefault bool

	_ = cmd.PersistentFlags().Bool(replaceExistingBlackBoxFlagName, replaceExistingBlackBoxFlagDefault, replaceExistingBlackBoxDescription)

	return nil
}

func registerModel84UseUnstableFirmware(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useUnstableFirmwareDescription := ``

	var useUnstableFirmwareFlagName string
	if cmdPrefix == "" {
		useUnstableFirmwareFlagName = "useUnstableFirmware"
	} else {
		useUnstableFirmwareFlagName = fmt.Sprintf("%v.useUnstableFirmware", cmdPrefix)
	}

	var useUnstableFirmwareFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useUnstableFirmwareFlagName, useUnstableFirmwareFlagDefault, useUnstableFirmwareDescription)

	return nil
}

func registerModel84Username(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel84Flags(depth int, m *models.Model84, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceIdsAdded := retrieveModel84DeviceIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdsAdded

	err, httpsPortAdded := retrieveModel84HTTPSPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpsPortAdded

	err, passwordAdded := retrieveModel84PasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, replaceExistingBlackBoxAdded := retrieveModel84ReplaceExistingBlackBoxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replaceExistingBlackBoxAdded

	err, useUnstableFirmwareAdded := retrieveModel84UseUnstableFirmwareFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useUnstableFirmwareAdded

	err, usernameAdded := retrieveModel84UsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveModel84DeviceIdsFlags(depth int, m *models.Model84, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdsFlagName := fmt.Sprintf("%v.deviceIds", cmdPrefix)
	if cmd.Flags().Changed(deviceIdsFlagName) {
		// warning: deviceIds array type DeviceIds5 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel84HTTPSPortFlags(depth int, m *models.Model84, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpsPortFlagName := fmt.Sprintf("%v.httpsPort", cmdPrefix)
	if cmd.Flags().Changed(httpsPortFlagName) {

		var httpsPortFlagName string
		if cmdPrefix == "" {
			httpsPortFlagName = "httpsPort"
		} else {
			httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
		}

		httpsPortFlagValue, err := cmd.Flags().GetInt64(httpsPortFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPSPort = &httpsPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel84PasswordFlags(depth int, m *models.Model84, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = &passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel84ReplaceExistingBlackBoxFlags(depth int, m *models.Model84, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replaceExistingBlackBoxFlagName := fmt.Sprintf("%v.replaceExistingBlackBox", cmdPrefix)
	if cmd.Flags().Changed(replaceExistingBlackBoxFlagName) {

		var replaceExistingBlackBoxFlagName string
		if cmdPrefix == "" {
			replaceExistingBlackBoxFlagName = "replaceExistingBlackBox"
		} else {
			replaceExistingBlackBoxFlagName = fmt.Sprintf("%v.replaceExistingBlackBox", cmdPrefix)
		}

		replaceExistingBlackBoxFlagValue, err := cmd.Flags().GetBool(replaceExistingBlackBoxFlagName)
		if err != nil {
			return err, false
		}
		m.ReplaceExistingBlackBox = &replaceExistingBlackBoxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel84UseUnstableFirmwareFlags(depth int, m *models.Model84, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useUnstableFirmwareFlagName := fmt.Sprintf("%v.useUnstableFirmware", cmdPrefix)
	if cmd.Flags().Changed(useUnstableFirmwareFlagName) {

		var useUnstableFirmwareFlagName string
		if cmdPrefix == "" {
			useUnstableFirmwareFlagName = "useUnstableFirmware"
		} else {
			useUnstableFirmwareFlagName = fmt.Sprintf("%v.useUnstableFirmware", cmdPrefix)
		}

		useUnstableFirmwareFlagValue, err := cmd.Flags().GetBool(useUnstableFirmwareFlagName)
		if err != nil {
			return err, false
		}
		m.UseUnstableFirmware = &useUnstableFirmwareFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel84UsernameFlags(depth int, m *models.Model84, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = &usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
