// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for SpanningTreeProtocolSchema

// register flags to command
func registerModelSpanningTreeProtocolSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSpanningTreeProtocolSchemaEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpanningTreeProtocolSchemaForwardDelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpanningTreeProtocolSchemaHelloTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpanningTreeProtocolSchemaMaxAge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpanningTreeProtocolSchemaPriority(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpanningTreeProtocolSchemaVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSpanningTreeProtocolSchemaEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. Set to true if STP is enabled.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerSpanningTreeProtocolSchemaForwardDelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forwardDelayDescription := `Required. Time spent in listening and learning state (in seconds) prior to entering forwarding state.`

	var forwardDelayFlagName string
	if cmdPrefix == "" {
		forwardDelayFlagName = "forwardDelay"
	} else {
		forwardDelayFlagName = fmt.Sprintf("%v.forwardDelay", cmdPrefix)
	}

	var forwardDelayFlagDefault int64

	_ = cmd.PersistentFlags().Int64(forwardDelayFlagName, forwardDelayFlagDefault, forwardDelayDescription)

	return nil
}

func registerSpanningTreeProtocolSchemaHelloTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	helloTimeDescription := `Required. Time between each bridge protocol data unit (BPDU) that is sent on a port (in seconds).
      Updating hello time is disallowed per IEEE 802.1Q-REV 200.
    `

	var helloTimeFlagName string
	if cmdPrefix == "" {
		helloTimeFlagName = "helloTime"
	} else {
		helloTimeFlagName = fmt.Sprintf("%v.helloTime", cmdPrefix)
	}

	var helloTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(helloTimeFlagName, helloTimeFlagDefault, helloTimeDescription)

	return nil
}

func registerSpanningTreeProtocolSchemaMaxAge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxAgeDescription := `Required. Length of time (in seconds) since last BPDU received on this port before aging out the BPDU and
      initiating topology reconvergence.`

	var maxAgeFlagName string
	if cmdPrefix == "" {
		maxAgeFlagName = "maxAge"
	} else {
		maxAgeFlagName = fmt.Sprintf("%v.maxAge", cmdPrefix)
	}

	var maxAgeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxAgeFlagName, maxAgeFlagDefault, maxAgeDescription)

	return nil
}

func registerSpanningTreeProtocolSchemaPriority(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priorityDescription := `Required. STP root bridge priority.`

	var priorityFlagName string
	if cmdPrefix == "" {
		priorityFlagName = "priority"
	} else {
		priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
	}

	var priorityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(priorityFlagName, priorityFlagDefault, priorityDescription)

	return nil
}

func registerSpanningTreeProtocolSchemaVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Enum: ["RSTP","MSTP","STP"]. Required. Version of STP: RSTP (802.1w), MSTP (802.1s) or STP (802.1d).`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	if err := cmd.RegisterFlagCompletionFunc(versionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["RSTP","MSTP","STP"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSpanningTreeProtocolSchemaFlags(depth int, m *models.SpanningTreeProtocolSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveSpanningTreeProtocolSchemaEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, forwardDelayAdded := retrieveSpanningTreeProtocolSchemaForwardDelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forwardDelayAdded

	err, helloTimeAdded := retrieveSpanningTreeProtocolSchemaHelloTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || helloTimeAdded

	err, maxAgeAdded := retrieveSpanningTreeProtocolSchemaMaxAgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxAgeAdded

	err, priorityAdded := retrieveSpanningTreeProtocolSchemaPriorityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priorityAdded

	err, versionAdded := retrieveSpanningTreeProtocolSchemaVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveSpanningTreeProtocolSchemaEnabledFlags(depth int, m *models.SpanningTreeProtocolSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpanningTreeProtocolSchemaForwardDelayFlags(depth int, m *models.SpanningTreeProtocolSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forwardDelayFlagName := fmt.Sprintf("%v.forwardDelay", cmdPrefix)
	if cmd.Flags().Changed(forwardDelayFlagName) {

		var forwardDelayFlagName string
		if cmdPrefix == "" {
			forwardDelayFlagName = "forwardDelay"
		} else {
			forwardDelayFlagName = fmt.Sprintf("%v.forwardDelay", cmdPrefix)
		}

		forwardDelayFlagValue, err := cmd.Flags().GetInt64(forwardDelayFlagName)
		if err != nil {
			return err, false
		}
		m.ForwardDelay = &forwardDelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpanningTreeProtocolSchemaHelloTimeFlags(depth int, m *models.SpanningTreeProtocolSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	helloTimeFlagName := fmt.Sprintf("%v.helloTime", cmdPrefix)
	if cmd.Flags().Changed(helloTimeFlagName) {

		var helloTimeFlagName string
		if cmdPrefix == "" {
			helloTimeFlagName = "helloTime"
		} else {
			helloTimeFlagName = fmt.Sprintf("%v.helloTime", cmdPrefix)
		}

		helloTimeFlagValue, err := cmd.Flags().GetInt64(helloTimeFlagName)
		if err != nil {
			return err, false
		}
		m.HelloTime = &helloTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpanningTreeProtocolSchemaMaxAgeFlags(depth int, m *models.SpanningTreeProtocolSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxAgeFlagName := fmt.Sprintf("%v.maxAge", cmdPrefix)
	if cmd.Flags().Changed(maxAgeFlagName) {

		var maxAgeFlagName string
		if cmdPrefix == "" {
			maxAgeFlagName = "maxAge"
		} else {
			maxAgeFlagName = fmt.Sprintf("%v.maxAge", cmdPrefix)
		}

		maxAgeFlagValue, err := cmd.Flags().GetInt64(maxAgeFlagName)
		if err != nil {
			return err, false
		}
		m.MaxAge = &maxAgeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpanningTreeProtocolSchemaPriorityFlags(depth int, m *models.SpanningTreeProtocolSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priorityFlagName := fmt.Sprintf("%v.priority", cmdPrefix)
	if cmd.Flags().Changed(priorityFlagName) {

		var priorityFlagName string
		if cmdPrefix == "" {
			priorityFlagName = "priority"
		} else {
			priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
		}

		priorityFlagValue, err := cmd.Flags().GetInt64(priorityFlagName)
		if err != nil {
			return err, false
		}
		m.Priority = &priorityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpanningTreeProtocolSchemaVersionFlags(depth int, m *models.SpanningTreeProtocolSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
