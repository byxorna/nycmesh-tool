// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for RequestSiteAccessGroupSingleSite

// register flags to command
func registerModelRequestSiteAccessGroupSingleSiteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRequestSiteAccessGroupSingleSiteID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRequestSiteAccessGroupSingleSiteIsReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRequestSiteAccessGroupSingleSiteID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerRequestSiteAccessGroupSingleSiteIsReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isReadOnlyDescription := `Required. If true, access to site is read-only. If false, access to site is read-write.`

	var isReadOnlyFlagName string
	if cmdPrefix == "" {
		isReadOnlyFlagName = "isReadOnly"
	} else {
		isReadOnlyFlagName = fmt.Sprintf("%v.isReadOnly", cmdPrefix)
	}

	var isReadOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isReadOnlyFlagName, isReadOnlyFlagDefault, isReadOnlyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRequestSiteAccessGroupSingleSiteFlags(depth int, m *models.RequestSiteAccessGroupSingleSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveRequestSiteAccessGroupSingleSiteIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, isReadOnlyAdded := retrieveRequestSiteAccessGroupSingleSiteIsReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isReadOnlyAdded

	return nil, retAdded
}

func retrieveRequestSiteAccessGroupSingleSiteIDFlags(depth int, m *models.RequestSiteAccessGroupSingleSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRequestSiteAccessGroupSingleSiteIsReadOnlyFlags(depth int, m *models.RequestSiteAccessGroupSingleSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isReadOnlyFlagName := fmt.Sprintf("%v.isReadOnly", cmdPrefix)
	if cmd.Flags().Changed(isReadOnlyFlagName) {

		var isReadOnlyFlagName string
		if cmdPrefix == "" {
			isReadOnlyFlagName = "isReadOnly"
		} else {
			isReadOnlyFlagName = fmt.Sprintf("%v.isReadOnly", cmdPrefix)
		}

		isReadOnlyFlagValue, err := cmd.Flags().GetBool(isReadOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.IsReadOnly = &isReadOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
