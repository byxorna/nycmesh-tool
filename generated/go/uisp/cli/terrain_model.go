// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Terrain

// register flags to command
func registerModelTerrainFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTerrainAltitudeAp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTerrainAltitudeCpe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTerrainAltitudeAp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	altitudeApDescription := `Required. `

	var altitudeApFlagName string
	if cmdPrefix == "" {
		altitudeApFlagName = "altitudeAp"
	} else {
		altitudeApFlagName = fmt.Sprintf("%v.altitudeAp", cmdPrefix)
	}

	var altitudeApFlagDefault float64

	_ = cmd.PersistentFlags().Float64(altitudeApFlagName, altitudeApFlagDefault, altitudeApDescription)

	return nil
}

func registerTerrainAltitudeCpe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	altitudeCpeDescription := `Required. `

	var altitudeCpeFlagName string
	if cmdPrefix == "" {
		altitudeCpeFlagName = "altitudeCpe"
	} else {
		altitudeCpeFlagName = fmt.Sprintf("%v.altitudeCpe", cmdPrefix)
	}

	var altitudeCpeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(altitudeCpeFlagName, altitudeCpeFlagDefault, altitudeCpeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTerrainFlags(depth int, m *models.Terrain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, altitudeApAdded := retrieveTerrainAltitudeApFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || altitudeApAdded

	err, altitudeCpeAdded := retrieveTerrainAltitudeCpeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || altitudeCpeAdded

	return nil, retAdded
}

func retrieveTerrainAltitudeApFlags(depth int, m *models.Terrain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	altitudeApFlagName := fmt.Sprintf("%v.altitudeAp", cmdPrefix)
	if cmd.Flags().Changed(altitudeApFlagName) {

		var altitudeApFlagName string
		if cmdPrefix == "" {
			altitudeApFlagName = "altitudeAp"
		} else {
			altitudeApFlagName = fmt.Sprintf("%v.altitudeAp", cmdPrefix)
		}

		altitudeApFlagValue, err := cmd.Flags().GetFloat64(altitudeApFlagName)
		if err != nil {
			return err, false
		}
		m.AltitudeAp = &altitudeApFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTerrainAltitudeCpeFlags(depth int, m *models.Terrain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	altitudeCpeFlagName := fmt.Sprintf("%v.altitudeCpe", cmdPrefix)
	if cmd.Flags().Changed(altitudeCpeFlagName) {

		var altitudeCpeFlagName string
		if cmdPrefix == "" {
			altitudeCpeFlagName = "altitudeCpe"
		} else {
			altitudeCpeFlagName = fmt.Sprintf("%v.altitudeCpe", cmdPrefix)
		}

		altitudeCpeFlagValue, err := cmd.Flags().GetFloat64(altitudeCpeFlagName)
		if err != nil {
			return err, false
		}
		m.AltitudeCpe = &altitudeCpeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
