// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Port

// register flags to command
func registerModelPortFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortDhcpSnooping(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortFlowControl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortIsolated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortPingWatchdog(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortRouted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortSpeedLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortStp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortDhcpSnooping(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpSnoopingDescription := ``

	var dhcpSnoopingFlagName string
	if cmdPrefix == "" {
		dhcpSnoopingFlagName = "dhcpSnooping"
	} else {
		dhcpSnoopingFlagName = fmt.Sprintf("%v.dhcpSnooping", cmdPrefix)
	}

	var dhcpSnoopingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dhcpSnoopingFlagName, dhcpSnoopingFlagDefault, dhcpSnoopingDescription)

	return nil
}

func registerPortFlowControl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flowControlDescription := ``

	var flowControlFlagName string
	if cmdPrefix == "" {
		flowControlFlagName = "flowControl"
	} else {
		flowControlFlagName = fmt.Sprintf("%v.flowControl", cmdPrefix)
	}

	var flowControlFlagDefault bool

	_ = cmd.PersistentFlags().Bool(flowControlFlagName, flowControlFlagDefault, flowControlDescription)

	return nil
}

func registerPortIsolated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isolatedDescription := ``

	var isolatedFlagName string
	if cmdPrefix == "" {
		isolatedFlagName = "isolated"
	} else {
		isolatedFlagName = fmt.Sprintf("%v.isolated", cmdPrefix)
	}

	var isolatedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isolatedFlagName, isolatedFlagDefault, isolatedDescription)

	return nil
}

func registerPortPingWatchdog(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pingWatchdogFlagName string
	if cmdPrefix == "" {
		pingWatchdogFlagName = "pingWatchdog"
	} else {
		pingWatchdogFlagName = fmt.Sprintf("%v.pingWatchdog", cmdPrefix)
	}

	if err := registerModelPingWatchdogFlags(depth+1, pingWatchdogFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortRouted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	routedDescription := ``

	var routedFlagName string
	if cmdPrefix == "" {
		routedFlagName = "routed"
	} else {
		routedFlagName = fmt.Sprintf("%v.routed", cmdPrefix)
	}

	var routedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(routedFlagName, routedFlagDefault, routedDescription)

	return nil
}

func registerPortSpeedLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var speedLimitFlagName string
	if cmdPrefix == "" {
		speedLimitFlagName = "speedLimit"
	} else {
		speedLimitFlagName = fmt.Sprintf("%v.speedLimit", cmdPrefix)
	}

	if err := registerModelSpeedLimitFlags(depth+1, speedLimitFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortStp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var stpFlagName string
	if cmdPrefix == "" {
		stpFlagName = "stp"
	} else {
		stpFlagName = fmt.Sprintf("%v.stp", cmdPrefix)
	}

	if err := registerModelStp1Flags(depth+1, stpFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dhcpSnoopingAdded := retrievePortDhcpSnoopingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpSnoopingAdded

	err, flowControlAdded := retrievePortFlowControlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || flowControlAdded

	err, isolatedAdded := retrievePortIsolatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isolatedAdded

	err, pingWatchdogAdded := retrievePortPingWatchdogFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingWatchdogAdded

	err, routedAdded := retrievePortRoutedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routedAdded

	err, speedLimitAdded := retrievePortSpeedLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedLimitAdded

	err, stpAdded := retrievePortStpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stpAdded

	return nil, retAdded
}

func retrievePortDhcpSnoopingFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpSnoopingFlagName := fmt.Sprintf("%v.dhcpSnooping", cmdPrefix)
	if cmd.Flags().Changed(dhcpSnoopingFlagName) {

		var dhcpSnoopingFlagName string
		if cmdPrefix == "" {
			dhcpSnoopingFlagName = "dhcpSnooping"
		} else {
			dhcpSnoopingFlagName = fmt.Sprintf("%v.dhcpSnooping", cmdPrefix)
		}

		dhcpSnoopingFlagValue, err := cmd.Flags().GetBool(dhcpSnoopingFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpSnooping = dhcpSnoopingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortFlowControlFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flowControlFlagName := fmt.Sprintf("%v.flowControl", cmdPrefix)
	if cmd.Flags().Changed(flowControlFlagName) {

		var flowControlFlagName string
		if cmdPrefix == "" {
			flowControlFlagName = "flowControl"
		} else {
			flowControlFlagName = fmt.Sprintf("%v.flowControl", cmdPrefix)
		}

		flowControlFlagValue, err := cmd.Flags().GetBool(flowControlFlagName)
		if err != nil {
			return err, false
		}
		m.FlowControl = flowControlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortIsolatedFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isolatedFlagName := fmt.Sprintf("%v.isolated", cmdPrefix)
	if cmd.Flags().Changed(isolatedFlagName) {

		var isolatedFlagName string
		if cmdPrefix == "" {
			isolatedFlagName = "isolated"
		} else {
			isolatedFlagName = fmt.Sprintf("%v.isolated", cmdPrefix)
		}

		isolatedFlagValue, err := cmd.Flags().GetBool(isolatedFlagName)
		if err != nil {
			return err, false
		}
		m.Isolated = isolatedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortPingWatchdogFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingWatchdogFlagName := fmt.Sprintf("%v.pingWatchdog", cmdPrefix)
	if cmd.Flags().Changed(pingWatchdogFlagName) {
		// info: complex object pingWatchdog PingWatchdog is retrieved outside this Changed() block
	}
	pingWatchdogFlagValue := m.PingWatchdog
	if swag.IsZero(pingWatchdogFlagValue) {
		pingWatchdogFlagValue = &models.PingWatchdog{}
	}

	err, pingWatchdogAdded := retrieveModelPingWatchdogFlags(depth+1, pingWatchdogFlagValue, pingWatchdogFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingWatchdogAdded
	if pingWatchdogAdded {
		m.PingWatchdog = pingWatchdogFlagValue
	}

	return nil, retAdded
}

func retrievePortRoutedFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routedFlagName := fmt.Sprintf("%v.routed", cmdPrefix)
	if cmd.Flags().Changed(routedFlagName) {

		var routedFlagName string
		if cmdPrefix == "" {
			routedFlagName = "routed"
		} else {
			routedFlagName = fmt.Sprintf("%v.routed", cmdPrefix)
		}

		routedFlagValue, err := cmd.Flags().GetBool(routedFlagName)
		if err != nil {
			return err, false
		}
		m.Routed = routedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortSpeedLimitFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedLimitFlagName := fmt.Sprintf("%v.speedLimit", cmdPrefix)
	if cmd.Flags().Changed(speedLimitFlagName) {
		// info: complex object speedLimit SpeedLimit is retrieved outside this Changed() block
	}
	speedLimitFlagValue := m.SpeedLimit
	if swag.IsZero(speedLimitFlagValue) {
		speedLimitFlagValue = &models.SpeedLimit{}
	}

	err, speedLimitAdded := retrieveModelSpeedLimitFlags(depth+1, speedLimitFlagValue, speedLimitFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedLimitAdded
	if speedLimitAdded {
		m.SpeedLimit = speedLimitFlagValue
	}

	return nil, retAdded
}

func retrievePortStpFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stpFlagName := fmt.Sprintf("%v.stp", cmdPrefix)
	if cmd.Flags().Changed(stpFlagName) {
		// info: complex object stp Stp1 is retrieved outside this Changed() block
	}
	stpFlagValue := m.Stp
	if swag.IsZero(stpFlagValue) {
		stpFlagValue = &models.Stp1{}
	}

	err, stpAdded := retrieveModelStp1Flags(depth+1, stpFlagValue, stpFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stpAdded
	if stpAdded {
		m.Stp = stpFlagValue
	}

	return nil, retAdded
}
