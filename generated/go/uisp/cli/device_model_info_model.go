// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceModelInfo

// register flags to command
func registerModelDeviceModelInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceModelInfoCategory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoFrontImagePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoIconPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoIconURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoImagePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoImageURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceModelInfoStoreURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceModelInfoCategory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	categoryDescription := `Enum: ["device","accessories"]. Required. `

	var categoryFlagName string
	if cmdPrefix == "" {
		categoryFlagName = "category"
	} else {
		categoryFlagName = fmt.Sprintf("%v.category", cmdPrefix)
	}

	var categoryFlagDefault string

	_ = cmd.PersistentFlags().String(categoryFlagName, categoryFlagDefault, categoryDescription)

	if err := cmd.RegisterFlagCompletionFunc(categoryFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["device","accessories"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceModelInfoFrontImagePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frontImagePathDescription := `Required. `

	var frontImagePathFlagName string
	if cmdPrefix == "" {
		frontImagePathFlagName = "frontImagePath"
	} else {
		frontImagePathFlagName = fmt.Sprintf("%v.frontImagePath", cmdPrefix)
	}

	var frontImagePathFlagDefault string

	_ = cmd.PersistentFlags().String(frontImagePathFlagName, frontImagePathFlagDefault, frontImagePathDescription)

	return nil
}

func registerDeviceModelInfoIconPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iconPathDescription := `Required. `

	var iconPathFlagName string
	if cmdPrefix == "" {
		iconPathFlagName = "iconPath"
	} else {
		iconPathFlagName = fmt.Sprintf("%v.iconPath", cmdPrefix)
	}

	var iconPathFlagDefault string

	_ = cmd.PersistentFlags().String(iconPathFlagName, iconPathFlagDefault, iconPathDescription)

	return nil
}

func registerDeviceModelInfoIconURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iconUrlDescription := `Required. `

	var iconUrlFlagName string
	if cmdPrefix == "" {
		iconUrlFlagName = "iconUrl"
	} else {
		iconUrlFlagName = fmt.Sprintf("%v.iconUrl", cmdPrefix)
	}

	var iconUrlFlagDefault string

	_ = cmd.PersistentFlags().String(iconUrlFlagName, iconUrlFlagDefault, iconUrlDescription)

	return nil
}

func registerDeviceModelInfoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerDeviceModelInfoImagePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imagePathDescription := `Required. `

	var imagePathFlagName string
	if cmdPrefix == "" {
		imagePathFlagName = "imagePath"
	} else {
		imagePathFlagName = fmt.Sprintf("%v.imagePath", cmdPrefix)
	}

	var imagePathFlagDefault string

	_ = cmd.PersistentFlags().String(imagePathFlagName, imagePathFlagDefault, imagePathDescription)

	return nil
}

func registerDeviceModelInfoImageURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageUrlDescription := `Required. `

	var imageUrlFlagName string
	if cmdPrefix == "" {
		imageUrlFlagName = "imageUrl"
	} else {
		imageUrlFlagName = fmt.Sprintf("%v.imageUrl", cmdPrefix)
	}

	var imageUrlFlagDefault string

	_ = cmd.PersistentFlags().String(imageUrlFlagName, imageUrlFlagDefault, imageUrlDescription)

	return nil
}

func registerDeviceModelInfoModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := `Required. `

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	return nil
}

func registerDeviceModelInfoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDeviceModelInfoStoreURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storeUrlDescription := `Required. `

	var storeUrlFlagName string
	if cmdPrefix == "" {
		storeUrlFlagName = "storeUrl"
	} else {
		storeUrlFlagName = fmt.Sprintf("%v.storeUrl", cmdPrefix)
	}

	var storeUrlFlagDefault string

	_ = cmd.PersistentFlags().String(storeUrlFlagName, storeUrlFlagDefault, storeUrlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceModelInfoFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, categoryAdded := retrieveDeviceModelInfoCategoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || categoryAdded

	err, frontImagePathAdded := retrieveDeviceModelInfoFrontImagePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frontImagePathAdded

	err, iconPathAdded := retrieveDeviceModelInfoIconPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iconPathAdded

	err, iconUrlAdded := retrieveDeviceModelInfoIconURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iconUrlAdded

	err, idAdded := retrieveDeviceModelInfoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, imagePathAdded := retrieveDeviceModelInfoImagePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imagePathAdded

	err, imageUrlAdded := retrieveDeviceModelInfoImageURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageUrlAdded

	err, modelAdded := retrieveDeviceModelInfoModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, nameAdded := retrieveDeviceModelInfoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, storeUrlAdded := retrieveDeviceModelInfoStoreURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storeUrlAdded

	return nil, retAdded
}

func retrieveDeviceModelInfoCategoryFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	categoryFlagName := fmt.Sprintf("%v.category", cmdPrefix)
	if cmd.Flags().Changed(categoryFlagName) {

		var categoryFlagName string
		if cmdPrefix == "" {
			categoryFlagName = "category"
		} else {
			categoryFlagName = fmt.Sprintf("%v.category", cmdPrefix)
		}

		categoryFlagValue, err := cmd.Flags().GetString(categoryFlagName)
		if err != nil {
			return err, false
		}
		m.Category = &categoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoFrontImagePathFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frontImagePathFlagName := fmt.Sprintf("%v.frontImagePath", cmdPrefix)
	if cmd.Flags().Changed(frontImagePathFlagName) {

		var frontImagePathFlagName string
		if cmdPrefix == "" {
			frontImagePathFlagName = "frontImagePath"
		} else {
			frontImagePathFlagName = fmt.Sprintf("%v.frontImagePath", cmdPrefix)
		}

		frontImagePathFlagValue, err := cmd.Flags().GetString(frontImagePathFlagName)
		if err != nil {
			return err, false
		}
		m.FrontImagePath = &frontImagePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoIconPathFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	iconPathFlagName := fmt.Sprintf("%v.iconPath", cmdPrefix)
	if cmd.Flags().Changed(iconPathFlagName) {

		var iconPathFlagName string
		if cmdPrefix == "" {
			iconPathFlagName = "iconPath"
		} else {
			iconPathFlagName = fmt.Sprintf("%v.iconPath", cmdPrefix)
		}

		iconPathFlagValue, err := cmd.Flags().GetString(iconPathFlagName)
		if err != nil {
			return err, false
		}
		m.IconPath = &iconPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoIconURLFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	iconUrlFlagName := fmt.Sprintf("%v.iconUrl", cmdPrefix)
	if cmd.Flags().Changed(iconUrlFlagName) {

		var iconUrlFlagName string
		if cmdPrefix == "" {
			iconUrlFlagName = "iconUrl"
		} else {
			iconUrlFlagName = fmt.Sprintf("%v.iconUrl", cmdPrefix)
		}

		iconUrlFlagValue, err := cmd.Flags().GetString(iconUrlFlagName)
		if err != nil {
			return err, false
		}
		m.IconURL = &iconUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoIDFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoImagePathFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imagePathFlagName := fmt.Sprintf("%v.imagePath", cmdPrefix)
	if cmd.Flags().Changed(imagePathFlagName) {

		var imagePathFlagName string
		if cmdPrefix == "" {
			imagePathFlagName = "imagePath"
		} else {
			imagePathFlagName = fmt.Sprintf("%v.imagePath", cmdPrefix)
		}

		imagePathFlagValue, err := cmd.Flags().GetString(imagePathFlagName)
		if err != nil {
			return err, false
		}
		m.ImagePath = &imagePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoImageURLFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imageUrlFlagName := fmt.Sprintf("%v.imageUrl", cmdPrefix)
	if cmd.Flags().Changed(imageUrlFlagName) {

		var imageUrlFlagName string
		if cmdPrefix == "" {
			imageUrlFlagName = "imageUrl"
		} else {
			imageUrlFlagName = fmt.Sprintf("%v.imageUrl", cmdPrefix)
		}

		imageUrlFlagValue, err := cmd.Flags().GetString(imageUrlFlagName)
		if err != nil {
			return err, false
		}
		m.ImageURL = &imageUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoModelFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = &modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoNameFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceModelInfoStoreURLFlags(depth int, m *models.DeviceModelInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storeUrlFlagName := fmt.Sprintf("%v.storeUrl", cmdPrefix)
	if cmd.Flags().Changed(storeUrlFlagName) {

		var storeUrlFlagName string
		if cmdPrefix == "" {
			storeUrlFlagName = "storeUrl"
		} else {
			storeUrlFlagName = fmt.Sprintf("%v.storeUrl", cmdPrefix)
		}

		storeUrlFlagValue, err := cmd.Flags().GetString(storeUrlFlagName)
		if err != nil {
			return err, false
		}
		m.StoreURL = &storeUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
