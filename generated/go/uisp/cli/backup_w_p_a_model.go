// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for BackupWPA

// register flags to command
func registerModelBackupWPAFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBackupWPAApMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAEapAnonymousIdentity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAEapPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAEapType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAEapTypeExt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAEapUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAPresharedKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPASecurity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPASsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBackupWPAWpaAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBackupWPAApMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apMacDescription := `Required. MAC address`

	var apMacFlagName string
	if cmdPrefix == "" {
		apMacFlagName = "apMac"
	} else {
		apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
	}

	var apMacFlagDefault string

	_ = cmd.PersistentFlags().String(apMacFlagName, apMacFlagDefault, apMacDescription)

	return nil
}

func registerBackupWPAEapAnonymousIdentity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eapAnonymousIdentityDescription := `Required. `

	var eapAnonymousIdentityFlagName string
	if cmdPrefix == "" {
		eapAnonymousIdentityFlagName = "eapAnonymousIdentity"
	} else {
		eapAnonymousIdentityFlagName = fmt.Sprintf("%v.eapAnonymousIdentity", cmdPrefix)
	}

	var eapAnonymousIdentityFlagDefault string

	_ = cmd.PersistentFlags().String(eapAnonymousIdentityFlagName, eapAnonymousIdentityFlagDefault, eapAnonymousIdentityDescription)

	return nil
}

func registerBackupWPAEapPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eapPasswordDescription := `Required. `

	var eapPasswordFlagName string
	if cmdPrefix == "" {
		eapPasswordFlagName = "eapPassword"
	} else {
		eapPasswordFlagName = fmt.Sprintf("%v.eapPassword", cmdPrefix)
	}

	var eapPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(eapPasswordFlagName, eapPasswordFlagDefault, eapPasswordDescription)

	return nil
}

func registerBackupWPAEapType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eapTypeDescription := `Enum: ["PEAP","TTLS"]. Required. `

	var eapTypeFlagName string
	if cmdPrefix == "" {
		eapTypeFlagName = "eapType"
	} else {
		eapTypeFlagName = fmt.Sprintf("%v.eapType", cmdPrefix)
	}

	var eapTypeFlagDefault string

	_ = cmd.PersistentFlags().String(eapTypeFlagName, eapTypeFlagDefault, eapTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(eapTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["PEAP","TTLS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackupWPAEapTypeExt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eapTypeExtDescription := `Enum: ["auth=MSCHAPV2"]. Required. `

	var eapTypeExtFlagName string
	if cmdPrefix == "" {
		eapTypeExtFlagName = "eapTypeExt"
	} else {
		eapTypeExtFlagName = fmt.Sprintf("%v.eapTypeExt", cmdPrefix)
	}

	var eapTypeExtFlagDefault string

	_ = cmd.PersistentFlags().String(eapTypeExtFlagName, eapTypeExtFlagDefault, eapTypeExtDescription)

	if err := cmd.RegisterFlagCompletionFunc(eapTypeExtFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auth=MSCHAPV2"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackupWPAEapUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eapUsernameDescription := `Required. `

	var eapUsernameFlagName string
	if cmdPrefix == "" {
		eapUsernameFlagName = "eapUsername"
	} else {
		eapUsernameFlagName = fmt.Sprintf("%v.eapUsername", cmdPrefix)
	}

	var eapUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(eapUsernameFlagName, eapUsernameFlagDefault, eapUsernameDescription)

	return nil
}

func registerBackupWPAEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerBackupWPAPresharedKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	presharedKeyDescription := `Required. `

	var presharedKeyFlagName string
	if cmdPrefix == "" {
		presharedKeyFlagName = "presharedKey"
	} else {
		presharedKeyFlagName = fmt.Sprintf("%v.presharedKey", cmdPrefix)
	}

	var presharedKeyFlagDefault string

	_ = cmd.PersistentFlags().String(presharedKeyFlagName, presharedKeyFlagDefault, presharedKeyDescription)

	return nil
}

func registerBackupWPASecurity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	securityDescription := `Enum: ["wep","wpa","wpa2","wpaTKIP","wpa2TKIP","wpaAES","wpa2AES","aes256","none"]. Required. `

	var securityFlagName string
	if cmdPrefix == "" {
		securityFlagName = "security"
	} else {
		securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
	}

	var securityFlagDefault string

	_ = cmd.PersistentFlags().String(securityFlagName, securityFlagDefault, securityDescription)

	if err := cmd.RegisterFlagCompletionFunc(securityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["wep","wpa","wpa2","wpaTKIP","wpa2TKIP","wpaAES","wpa2AES","aes256","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBackupWPASsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := `Required. `

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerBackupWPAWpaAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wpaAuthenticationDescription := `Enum: ["psk","psk2","ent","none"]. Required. `

	var wpaAuthenticationFlagName string
	if cmdPrefix == "" {
		wpaAuthenticationFlagName = "wpaAuthentication"
	} else {
		wpaAuthenticationFlagName = fmt.Sprintf("%v.wpaAuthentication", cmdPrefix)
	}

	var wpaAuthenticationFlagDefault string

	_ = cmd.PersistentFlags().String(wpaAuthenticationFlagName, wpaAuthenticationFlagDefault, wpaAuthenticationDescription)

	if err := cmd.RegisterFlagCompletionFunc(wpaAuthenticationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBackupWPAFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, apMacAdded := retrieveBackupWPAApMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apMacAdded

	err, eapAnonymousIdentityAdded := retrieveBackupWPAEapAnonymousIdentityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eapAnonymousIdentityAdded

	err, eapPasswordAdded := retrieveBackupWPAEapPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eapPasswordAdded

	err, eapTypeAdded := retrieveBackupWPAEapTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eapTypeAdded

	err, eapTypeExtAdded := retrieveBackupWPAEapTypeExtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eapTypeExtAdded

	err, eapUsernameAdded := retrieveBackupWPAEapUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eapUsernameAdded

	err, enabledAdded := retrieveBackupWPAEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, presharedKeyAdded := retrieveBackupWPAPresharedKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || presharedKeyAdded

	err, securityAdded := retrieveBackupWPASecurityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securityAdded

	err, ssidAdded := retrieveBackupWPASsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, wpaAuthenticationAdded := retrieveBackupWPAWpaAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wpaAuthenticationAdded

	return nil, retAdded
}

func retrieveBackupWPAApMacFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apMacFlagName := fmt.Sprintf("%v.apMac", cmdPrefix)
	if cmd.Flags().Changed(apMacFlagName) {

		var apMacFlagName string
		if cmdPrefix == "" {
			apMacFlagName = "apMac"
		} else {
			apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
		}

		apMacFlagValue, err := cmd.Flags().GetString(apMacFlagName)
		if err != nil {
			return err, false
		}
		m.ApMac = &apMacFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAEapAnonymousIdentityFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eapAnonymousIdentityFlagName := fmt.Sprintf("%v.eapAnonymousIdentity", cmdPrefix)
	if cmd.Flags().Changed(eapAnonymousIdentityFlagName) {

		var eapAnonymousIdentityFlagName string
		if cmdPrefix == "" {
			eapAnonymousIdentityFlagName = "eapAnonymousIdentity"
		} else {
			eapAnonymousIdentityFlagName = fmt.Sprintf("%v.eapAnonymousIdentity", cmdPrefix)
		}

		eapAnonymousIdentityFlagValue, err := cmd.Flags().GetString(eapAnonymousIdentityFlagName)
		if err != nil {
			return err, false
		}
		m.EapAnonymousIdentity = &eapAnonymousIdentityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAEapPasswordFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eapPasswordFlagName := fmt.Sprintf("%v.eapPassword", cmdPrefix)
	if cmd.Flags().Changed(eapPasswordFlagName) {

		var eapPasswordFlagName string
		if cmdPrefix == "" {
			eapPasswordFlagName = "eapPassword"
		} else {
			eapPasswordFlagName = fmt.Sprintf("%v.eapPassword", cmdPrefix)
		}

		eapPasswordFlagValue, err := cmd.Flags().GetString(eapPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.EapPassword = &eapPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAEapTypeFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eapTypeFlagName := fmt.Sprintf("%v.eapType", cmdPrefix)
	if cmd.Flags().Changed(eapTypeFlagName) {

		var eapTypeFlagName string
		if cmdPrefix == "" {
			eapTypeFlagName = "eapType"
		} else {
			eapTypeFlagName = fmt.Sprintf("%v.eapType", cmdPrefix)
		}

		eapTypeFlagValue, err := cmd.Flags().GetString(eapTypeFlagName)
		if err != nil {
			return err, false
		}
		m.EapType = &eapTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAEapTypeExtFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eapTypeExtFlagName := fmt.Sprintf("%v.eapTypeExt", cmdPrefix)
	if cmd.Flags().Changed(eapTypeExtFlagName) {

		var eapTypeExtFlagName string
		if cmdPrefix == "" {
			eapTypeExtFlagName = "eapTypeExt"
		} else {
			eapTypeExtFlagName = fmt.Sprintf("%v.eapTypeExt", cmdPrefix)
		}

		eapTypeExtFlagValue, err := cmd.Flags().GetString(eapTypeExtFlagName)
		if err != nil {
			return err, false
		}
		m.EapTypeExt = &eapTypeExtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAEapUsernameFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eapUsernameFlagName := fmt.Sprintf("%v.eapUsername", cmdPrefix)
	if cmd.Flags().Changed(eapUsernameFlagName) {

		var eapUsernameFlagName string
		if cmdPrefix == "" {
			eapUsernameFlagName = "eapUsername"
		} else {
			eapUsernameFlagName = fmt.Sprintf("%v.eapUsername", cmdPrefix)
		}

		eapUsernameFlagValue, err := cmd.Flags().GetString(eapUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.EapUsername = &eapUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAEnabledFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAPresharedKeyFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	presharedKeyFlagName := fmt.Sprintf("%v.presharedKey", cmdPrefix)
	if cmd.Flags().Changed(presharedKeyFlagName) {

		var presharedKeyFlagName string
		if cmdPrefix == "" {
			presharedKeyFlagName = "presharedKey"
		} else {
			presharedKeyFlagName = fmt.Sprintf("%v.presharedKey", cmdPrefix)
		}

		presharedKeyFlagValue, err := cmd.Flags().GetString(presharedKeyFlagName)
		if err != nil {
			return err, false
		}
		m.PresharedKey = &presharedKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPASecurityFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securityFlagName := fmt.Sprintf("%v.security", cmdPrefix)
	if cmd.Flags().Changed(securityFlagName) {

		var securityFlagName string
		if cmdPrefix == "" {
			securityFlagName = "security"
		} else {
			securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
		}

		securityFlagValue, err := cmd.Flags().GetString(securityFlagName)
		if err != nil {
			return err, false
		}
		m.Security = &securityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPASsidFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = &ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBackupWPAWpaAuthenticationFlags(depth int, m *models.BackupWPA, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wpaAuthenticationFlagName := fmt.Sprintf("%v.wpaAuthentication", cmdPrefix)
	if cmd.Flags().Changed(wpaAuthenticationFlagName) {

		var wpaAuthenticationFlagName string
		if cmdPrefix == "" {
			wpaAuthenticationFlagName = "wpaAuthentication"
		} else {
			wpaAuthenticationFlagName = fmt.Sprintf("%v.wpaAuthentication", cmdPrefix)
		}

		wpaAuthenticationFlagValue, err := cmd.Flags().GetString(wpaAuthenticationFlagName)
		if err != nil {
			return err, false
		}
		m.WpaAuthentication = &wpaAuthenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}
