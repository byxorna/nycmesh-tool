// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// Schema cli for Model35

// register flags to command
func registerModelModel35Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel35CreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel35DeviceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel35HTTPSPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel35Password(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel35ReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel35SSHPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel35Username(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel35CreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "createdAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createdAtFlagName, "", createdAtDescription)

	return nil
}

func registerModel35DeviceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceIdDescription := `Required. `

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}

func registerModel35HTTPSPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpsPortDescription := ``

	var httpsPortFlagName string
	if cmdPrefix == "" {
		httpsPortFlagName = "httpsPort"
	} else {
		httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
	}

	var httpsPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpsPortFlagName, httpsPortFlagDefault, httpsPortDescription)

	return nil
}

func registerModel35Password(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerModel35ReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readOnlyDescription := ``

	var readOnlyFlagName string
	if cmdPrefix == "" {
		readOnlyFlagName = "readOnly"
	} else {
		readOnlyFlagName = fmt.Sprintf("%v.readOnly", cmdPrefix)
	}

	var readOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(readOnlyFlagName, readOnlyFlagDefault, readOnlyDescription)

	return nil
}

func registerModel35SSHPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sshPortDescription := ``

	var sshPortFlagName string
	if cmdPrefix == "" {
		sshPortFlagName = "sshPort"
	} else {
		sshPortFlagName = fmt.Sprintf("%v.sshPort", cmdPrefix)
	}

	var sshPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sshPortFlagName, sshPortFlagDefault, sshPortDescription)

	return nil
}

func registerModel35Username(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel35Flags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveModel35CreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, deviceIdAdded := retrieveModel35DeviceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdAdded

	err, httpsPortAdded := retrieveModel35HTTPSPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpsPortAdded

	err, passwordAdded := retrieveModel35PasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, readOnlyAdded := retrieveModel35ReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded

	err, sshPortAdded := retrieveModel35SSHPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshPortAdded

	err, usernameAdded := retrieveModel35UsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveModel35CreatedAtFlags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "createdAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
		}

		createdAtFlagValueStr, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		var createdAtFlagValue strfmt.DateTime
		if err := createdAtFlagValue.UnmarshalText([]byte(createdAtFlagValueStr)); err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel35DeviceIDFlags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdFlagName := fmt.Sprintf("%v.deviceId", cmdPrefix)
	if cmd.Flags().Changed(deviceIdFlagName) {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel35HTTPSPortFlags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpsPortFlagName := fmt.Sprintf("%v.httpsPort", cmdPrefix)
	if cmd.Flags().Changed(httpsPortFlagName) {

		var httpsPortFlagName string
		if cmdPrefix == "" {
			httpsPortFlagName = "httpsPort"
		} else {
			httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
		}

		httpsPortFlagValue, err := cmd.Flags().GetInt64(httpsPortFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPSPort = &httpsPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel35PasswordFlags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel35ReadOnlyFlags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyFlagName := fmt.Sprintf("%v.readOnly", cmdPrefix)
	if cmd.Flags().Changed(readOnlyFlagName) {

		var readOnlyFlagName string
		if cmdPrefix == "" {
			readOnlyFlagName = "readOnly"
		} else {
			readOnlyFlagName = fmt.Sprintf("%v.readOnly", cmdPrefix)
		}

		readOnlyFlagValue, err := cmd.Flags().GetBool(readOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = readOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel35SSHPortFlags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshPortFlagName := fmt.Sprintf("%v.sshPort", cmdPrefix)
	if cmd.Flags().Changed(sshPortFlagName) {

		var sshPortFlagName string
		if cmdPrefix == "" {
			sshPortFlagName = "sshPort"
		} else {
			sshPortFlagName = fmt.Sprintf("%v.sshPort", cmdPrefix)
		}

		sshPortFlagValue, err := cmd.Flags().GetInt64(sshPortFlagName)
		if err != nil {
			return err, false
		}
		m.SSHPort = &sshPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel35UsernameFlags(depth int, m *models.Model35, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
