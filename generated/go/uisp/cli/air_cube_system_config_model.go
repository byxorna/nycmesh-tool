// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for AirCubeSystemConfig

// register flags to command
func registerModelAirCubeSystemConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAirCubeSystemConfigDeviceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeSystemConfigLedNightMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeSystemConfigNewPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeSystemConfigPoePassthrough(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeSystemConfigResetButtonEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeSystemConfigTimezone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeSystemConfigUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeSystemConfigZonename(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeSystemConfigDeviceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceNameDescription := `Required. `

	var deviceNameFlagName string
	if cmdPrefix == "" {
		deviceNameFlagName = "deviceName"
	} else {
		deviceNameFlagName = fmt.Sprintf("%v.deviceName", cmdPrefix)
	}

	var deviceNameFlagDefault string

	_ = cmd.PersistentFlags().String(deviceNameFlagName, deviceNameFlagDefault, deviceNameDescription)

	return nil
}

func registerAirCubeSystemConfigLedNightMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ledNightModeFlagName string
	if cmdPrefix == "" {
		ledNightModeFlagName = "ledNightMode"
	} else {
		ledNightModeFlagName = fmt.Sprintf("%v.ledNightMode", cmdPrefix)
	}

	if err := registerModelLedNightModeFlags(depth+1, ledNightModeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeSystemConfigNewPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	newPasswordDescription := ``

	var newPasswordFlagName string
	if cmdPrefix == "" {
		newPasswordFlagName = "newPassword"
	} else {
		newPasswordFlagName = fmt.Sprintf("%v.newPassword", cmdPrefix)
	}

	var newPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(newPasswordFlagName, newPasswordFlagDefault, newPasswordDescription)

	return nil
}

func registerAirCubeSystemConfigPoePassthrough(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poePassthroughDescription := `Required. `

	var poePassthroughFlagName string
	if cmdPrefix == "" {
		poePassthroughFlagName = "poePassthrough"
	} else {
		poePassthroughFlagName = fmt.Sprintf("%v.poePassthrough", cmdPrefix)
	}

	var poePassthroughFlagDefault bool

	_ = cmd.PersistentFlags().Bool(poePassthroughFlagName, poePassthroughFlagDefault, poePassthroughDescription)

	return nil
}

func registerAirCubeSystemConfigResetButtonEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resetButtonEnabledDescription := `Required. `

	var resetButtonEnabledFlagName string
	if cmdPrefix == "" {
		resetButtonEnabledFlagName = "resetButtonEnabled"
	} else {
		resetButtonEnabledFlagName = fmt.Sprintf("%v.resetButtonEnabled", cmdPrefix)
	}

	var resetButtonEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(resetButtonEnabledFlagName, resetButtonEnabledFlagDefault, resetButtonEnabledDescription)

	return nil
}

func registerAirCubeSystemConfigTimezone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timezoneDescription := `Required. `

	var timezoneFlagName string
	if cmdPrefix == "" {
		timezoneFlagName = "timezone"
	} else {
		timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
	}

	var timezoneFlagDefault string

	_ = cmd.PersistentFlags().String(timezoneFlagName, timezoneFlagDefault, timezoneDescription)

	return nil
}

func registerAirCubeSystemConfigUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

func registerAirCubeSystemConfigZonename(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	zonenameDescription := `Required. `

	var zonenameFlagName string
	if cmdPrefix == "" {
		zonenameFlagName = "zonename"
	} else {
		zonenameFlagName = fmt.Sprintf("%v.zonename", cmdPrefix)
	}

	var zonenameFlagDefault string

	_ = cmd.PersistentFlags().String(zonenameFlagName, zonenameFlagDefault, zonenameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAirCubeSystemConfigFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceNameAdded := retrieveAirCubeSystemConfigDeviceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceNameAdded

	err, ledNightModeAdded := retrieveAirCubeSystemConfigLedNightModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ledNightModeAdded

	err, newPasswordAdded := retrieveAirCubeSystemConfigNewPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || newPasswordAdded

	err, poePassthroughAdded := retrieveAirCubeSystemConfigPoePassthroughFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poePassthroughAdded

	err, resetButtonEnabledAdded := retrieveAirCubeSystemConfigResetButtonEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resetButtonEnabledAdded

	err, timezoneAdded := retrieveAirCubeSystemConfigTimezoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timezoneAdded

	err, usernameAdded := retrieveAirCubeSystemConfigUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	err, zonenameAdded := retrieveAirCubeSystemConfigZonenameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || zonenameAdded

	return nil, retAdded
}

func retrieveAirCubeSystemConfigDeviceNameFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceNameFlagName := fmt.Sprintf("%v.deviceName", cmdPrefix)
	if cmd.Flags().Changed(deviceNameFlagName) {

		var deviceNameFlagName string
		if cmdPrefix == "" {
			deviceNameFlagName = "deviceName"
		} else {
			deviceNameFlagName = fmt.Sprintf("%v.deviceName", cmdPrefix)
		}

		deviceNameFlagValue, err := cmd.Flags().GetString(deviceNameFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceName = &deviceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeSystemConfigLedNightModeFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ledNightModeFlagName := fmt.Sprintf("%v.ledNightMode", cmdPrefix)
	if cmd.Flags().Changed(ledNightModeFlagName) {
		// info: complex object ledNightMode LedNightMode is retrieved outside this Changed() block
	}
	ledNightModeFlagValue := m.LedNightMode
	if swag.IsZero(ledNightModeFlagValue) {
		ledNightModeFlagValue = &models.LedNightMode{}
	}

	err, ledNightModeAdded := retrieveModelLedNightModeFlags(depth+1, ledNightModeFlagValue, ledNightModeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ledNightModeAdded
	if ledNightModeAdded {
		m.LedNightMode = ledNightModeFlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeSystemConfigNewPasswordFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	newPasswordFlagName := fmt.Sprintf("%v.newPassword", cmdPrefix)
	if cmd.Flags().Changed(newPasswordFlagName) {

		var newPasswordFlagName string
		if cmdPrefix == "" {
			newPasswordFlagName = "newPassword"
		} else {
			newPasswordFlagName = fmt.Sprintf("%v.newPassword", cmdPrefix)
		}

		newPasswordFlagValue, err := cmd.Flags().GetString(newPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.NewPassword = newPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeSystemConfigPoePassthroughFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poePassthroughFlagName := fmt.Sprintf("%v.poePassthrough", cmdPrefix)
	if cmd.Flags().Changed(poePassthroughFlagName) {

		var poePassthroughFlagName string
		if cmdPrefix == "" {
			poePassthroughFlagName = "poePassthrough"
		} else {
			poePassthroughFlagName = fmt.Sprintf("%v.poePassthrough", cmdPrefix)
		}

		poePassthroughFlagValue, err := cmd.Flags().GetBool(poePassthroughFlagName)
		if err != nil {
			return err, false
		}
		m.PoePassthrough = &poePassthroughFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeSystemConfigResetButtonEnabledFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resetButtonEnabledFlagName := fmt.Sprintf("%v.resetButtonEnabled", cmdPrefix)
	if cmd.Flags().Changed(resetButtonEnabledFlagName) {

		var resetButtonEnabledFlagName string
		if cmdPrefix == "" {
			resetButtonEnabledFlagName = "resetButtonEnabled"
		} else {
			resetButtonEnabledFlagName = fmt.Sprintf("%v.resetButtonEnabled", cmdPrefix)
		}

		resetButtonEnabledFlagValue, err := cmd.Flags().GetBool(resetButtonEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.ResetButtonEnabled = &resetButtonEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeSystemConfigTimezoneFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timezoneFlagName := fmt.Sprintf("%v.timezone", cmdPrefix)
	if cmd.Flags().Changed(timezoneFlagName) {

		var timezoneFlagName string
		if cmdPrefix == "" {
			timezoneFlagName = "timezone"
		} else {
			timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
		}

		timezoneFlagValue, err := cmd.Flags().GetString(timezoneFlagName)
		if err != nil {
			return err, false
		}
		m.Timezone = &timezoneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeSystemConfigUsernameFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = &usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirCubeSystemConfigZonenameFlags(depth int, m *models.AirCubeSystemConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	zonenameFlagName := fmt.Sprintf("%v.zonename", cmdPrefix)
	if cmd.Flags().Changed(zonenameFlagName) {

		var zonenameFlagName string
		if cmdPrefix == "" {
			zonenameFlagName = "zonename"
		} else {
			zonenameFlagName = fmt.Sprintf("%v.zonename", cmdPrefix)
		}

		zonenameFlagValue, err := cmd.Flags().GetString(zonenameFlagName)
		if err != nil {
			return err, false
		}
		m.Zonename = &zonenameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
