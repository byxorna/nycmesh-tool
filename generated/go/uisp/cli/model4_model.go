// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model4

// register flags to command
func registerModelModel4Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel4Connected(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel4MaxChargingPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel4PsuType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel4Connected(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectedDescription := ``

	var connectedFlagName string
	if cmdPrefix == "" {
		connectedFlagName = "connected"
	} else {
		connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
	}

	var connectedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(connectedFlagName, connectedFlagDefault, connectedDescription)

	return nil
}

func registerModel4MaxChargingPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxChargingPowerDescription := `Power reserved for charging in W.`

	var maxChargingPowerFlagName string
	if cmdPrefix == "" {
		maxChargingPowerFlagName = "maxChargingPower"
	} else {
		maxChargingPowerFlagName = fmt.Sprintf("%v.maxChargingPower", cmdPrefix)
	}

	var maxChargingPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(maxChargingPowerFlagName, maxChargingPowerFlagDefault, maxChargingPowerDescription)

	return nil
}

func registerModel4PsuType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	psuTypeDescription := ``

	var psuTypeFlagName string
	if cmdPrefix == "" {
		psuTypeFlagName = "psuType"
	} else {
		psuTypeFlagName = fmt.Sprintf("%v.psuType", cmdPrefix)
	}

	var psuTypeFlagDefault string

	_ = cmd.PersistentFlags().String(psuTypeFlagName, psuTypeFlagDefault, psuTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel4Flags(depth int, m *models.Model4, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, connectedAdded := retrieveModel4ConnectedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectedAdded

	err, maxChargingPowerAdded := retrieveModel4MaxChargingPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxChargingPowerAdded

	err, psuTypeAdded := retrieveModel4PsuTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || psuTypeAdded

	return nil, retAdded
}

func retrieveModel4ConnectedFlags(depth int, m *models.Model4, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectedFlagName := fmt.Sprintf("%v.connected", cmdPrefix)
	if cmd.Flags().Changed(connectedFlagName) {

		var connectedFlagName string
		if cmdPrefix == "" {
			connectedFlagName = "connected"
		} else {
			connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
		}

		connectedFlagValue, err := cmd.Flags().GetBool(connectedFlagName)
		if err != nil {
			return err, false
		}
		m.Connected = connectedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel4MaxChargingPowerFlags(depth int, m *models.Model4, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxChargingPowerFlagName := fmt.Sprintf("%v.maxChargingPower", cmdPrefix)
	if cmd.Flags().Changed(maxChargingPowerFlagName) {

		var maxChargingPowerFlagName string
		if cmdPrefix == "" {
			maxChargingPowerFlagName = "maxChargingPower"
		} else {
			maxChargingPowerFlagName = fmt.Sprintf("%v.maxChargingPower", cmdPrefix)
		}

		maxChargingPowerFlagValue, err := cmd.Flags().GetFloat64(maxChargingPowerFlagName)
		if err != nil {
			return err, false
		}
		m.MaxChargingPower = maxChargingPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel4PsuTypeFlags(depth int, m *models.Model4, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	psuTypeFlagName := fmt.Sprintf("%v.psuType", cmdPrefix)
	if cmd.Flags().Changed(psuTypeFlagName) {

		var psuTypeFlagName string
		if cmdPrefix == "" {
			psuTypeFlagName = "psuType"
		} else {
			psuTypeFlagName = fmt.Sprintf("%v.psuType", cmdPrefix)
		}

		psuTypeFlagValue, err := cmd.Flags().GetString(psuTypeFlagName)
		if err != nil {
			return err, false
		}
		m.PsuType = psuTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
