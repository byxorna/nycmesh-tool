// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for SpeedLimit

// register flags to command
func registerModelSpeedLimitFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSpeedLimitEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedLimitRx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedLimitTx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSpeedLimitEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerSpeedLimitRx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxDescription := ``

	var rxFlagName string
	if cmdPrefix == "" {
		rxFlagName = "rx"
	} else {
		rxFlagName = fmt.Sprintf("%v.rx", cmdPrefix)
	}

	var rxFlagDefault float64

	_ = cmd.PersistentFlags().Float64(rxFlagName, rxFlagDefault, rxDescription)

	return nil
}

func registerSpeedLimitTx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txDescription := ``

	var txFlagName string
	if cmdPrefix == "" {
		txFlagName = "tx"
	} else {
		txFlagName = fmt.Sprintf("%v.tx", cmdPrefix)
	}

	var txFlagDefault float64

	_ = cmd.PersistentFlags().Float64(txFlagName, txFlagDefault, txDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSpeedLimitFlags(depth int, m *models.SpeedLimit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveSpeedLimitEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, rxAdded := retrieveSpeedLimitRxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxAdded

	err, txAdded := retrieveSpeedLimitTxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txAdded

	return nil, retAdded
}

func retrieveSpeedLimitEnabledFlags(depth int, m *models.SpeedLimit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedLimitRxFlags(depth int, m *models.SpeedLimit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxFlagName := fmt.Sprintf("%v.rx", cmdPrefix)
	if cmd.Flags().Changed(rxFlagName) {

		var rxFlagName string
		if cmdPrefix == "" {
			rxFlagName = "rx"
		} else {
			rxFlagName = fmt.Sprintf("%v.rx", cmdPrefix)
		}

		rxFlagValue, err := cmd.Flags().GetFloat64(rxFlagName)
		if err != nil {
			return err, false
		}
		m.Rx = &rxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedLimitTxFlags(depth int, m *models.SpeedLimit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txFlagName := fmt.Sprintf("%v.tx", cmdPrefix)
	if cmd.Flags().Changed(txFlagName) {

		var txFlagName string
		if cmdPrefix == "" {
			txFlagName = "tx"
		} else {
			txFlagName = fmt.Sprintf("%v.tx", cmdPrefix)
		}

		txFlagValue, err := cmd.Flags().GetFloat64(txFlagName)
		if err != nil {
			return err, false
		}
		m.Tx = &txFlagValue

		retAdded = true
	}

	return nil, retAdded
}
