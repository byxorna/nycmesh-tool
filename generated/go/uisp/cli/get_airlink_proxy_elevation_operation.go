// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/client/devices"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDevicesGetAirlinkProxyElevationCmd returns a cmd to handle operation getAirlinkProxyElevation
func makeOperationDevicesGetAirlinkProxyElevationCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getAirlinkProxyElevation",
		Short: ``,
		RunE:  runOperationDevicesGetAirlinkProxyElevation,
	}

	if err := registerOperationDevicesGetAirlinkProxyElevationParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDevicesGetAirlinkProxyElevation uses cmd flags to call endpoint api
func runOperationDevicesGetAirlinkProxyElevation(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := devices.NewGetAirlinkProxyElevationParams()
	if err, _ := retrieveOperationDevicesGetAirlinkProxyElevationFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesGetAirlinkProxyElevationVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDevicesGetAirlinkProxyElevationResult(appCli.Devices.GetAirlinkProxyElevation(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDevicesGetAirlinkProxyElevationParamFlags registers all flags needed to fill params
func registerOperationDevicesGetAirlinkProxyElevationParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDevicesGetAirlinkProxyElevationFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesGetAirlinkProxyElevationVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDevicesGetAirlinkProxyElevationFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	fileDescription := `Required. Elevation file name.`

	var fileFlagName string
	if cmdPrefix == "" {
		fileFlagName = "file"
	} else {
		fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	var fileFlagDefault string

	_ = cmd.PersistentFlags().String(fileFlagName, fileFlagDefault, fileDescription)

	return nil
}
func registerOperationDevicesGetAirlinkProxyElevationVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Elevation file version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault float64 = 1

	_ = cmd.PersistentFlags().Float64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationDevicesGetAirlinkProxyElevationFileFlag(m *devices.GetAirlinkProxyElevationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("file") {

		var fileFlagName string
		if cmdPrefix == "" {
			fileFlagName = "file"
		} else {
			fileFlagName = fmt.Sprintf("%v.file", cmdPrefix)
		}

		fileFlagValue, err := cmd.Flags().GetString(fileFlagName)
		if err != nil {
			return err, false
		}
		m.File = fileFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesGetAirlinkProxyElevationVersionFlag(m *devices.GetAirlinkProxyElevationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetFloat64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationDevicesGetAirlinkProxyElevationResult parses request result and return the string content
func parseOperationDevicesGetAirlinkProxyElevationResult(respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*devices.GetAirlinkProxyElevationBadRequest)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*devices.GetAirlinkProxyElevationUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*devices.GetAirlinkProxyElevationForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*devices.GetAirlinkProxyElevationInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*devices.GetAirlinkProxyElevationBadGateway)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}
	return "", nil
}
