// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for ConntrackOptions

// register flags to command
func registerModelConntrackOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConntrackOptionsExpectTableSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackOptionsTableSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackOptionsTCPLoose(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackOptionsTCPMaxRetrans(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConntrackOptionsExpectTableSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expectTableSizeDescription := `Required. `

	var expectTableSizeFlagName string
	if cmdPrefix == "" {
		expectTableSizeFlagName = "expectTableSize"
	} else {
		expectTableSizeFlagName = fmt.Sprintf("%v.expectTableSize", cmdPrefix)
	}

	var expectTableSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(expectTableSizeFlagName, expectTableSizeFlagDefault, expectTableSizeDescription)

	return nil
}

func registerConntrackOptionsTableSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tableSizeDescription := `Required. `

	var tableSizeFlagName string
	if cmdPrefix == "" {
		tableSizeFlagName = "tableSize"
	} else {
		tableSizeFlagName = fmt.Sprintf("%v.tableSize", cmdPrefix)
	}

	var tableSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tableSizeFlagName, tableSizeFlagDefault, tableSizeDescription)

	return nil
}

func registerConntrackOptionsTCPLoose(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpLooseDescription := `Required. `

	var tcpLooseFlagName string
	if cmdPrefix == "" {
		tcpLooseFlagName = "tcpLoose"
	} else {
		tcpLooseFlagName = fmt.Sprintf("%v.tcpLoose", cmdPrefix)
	}

	var tcpLooseFlagDefault bool

	_ = cmd.PersistentFlags().Bool(tcpLooseFlagName, tcpLooseFlagDefault, tcpLooseDescription)

	return nil
}

func registerConntrackOptionsTCPMaxRetrans(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpMaxRetransDescription := `Required. `

	var tcpMaxRetransFlagName string
	if cmdPrefix == "" {
		tcpMaxRetransFlagName = "tcpMaxRetrans"
	} else {
		tcpMaxRetransFlagName = fmt.Sprintf("%v.tcpMaxRetrans", cmdPrefix)
	}

	var tcpMaxRetransFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpMaxRetransFlagName, tcpMaxRetransFlagDefault, tcpMaxRetransDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConntrackOptionsFlags(depth int, m *models.ConntrackOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, expectTableSizeAdded := retrieveConntrackOptionsExpectTableSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expectTableSizeAdded

	err, tableSizeAdded := retrieveConntrackOptionsTableSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableSizeAdded

	err, tcpLooseAdded := retrieveConntrackOptionsTCPLooseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpLooseAdded

	err, tcpMaxRetransAdded := retrieveConntrackOptionsTCPMaxRetransFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpMaxRetransAdded

	return nil, retAdded
}

func retrieveConntrackOptionsExpectTableSizeFlags(depth int, m *models.ConntrackOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expectTableSizeFlagName := fmt.Sprintf("%v.expectTableSize", cmdPrefix)
	if cmd.Flags().Changed(expectTableSizeFlagName) {

		var expectTableSizeFlagName string
		if cmdPrefix == "" {
			expectTableSizeFlagName = "expectTableSize"
		} else {
			expectTableSizeFlagName = fmt.Sprintf("%v.expectTableSize", cmdPrefix)
		}

		expectTableSizeFlagValue, err := cmd.Flags().GetInt64(expectTableSizeFlagName)
		if err != nil {
			return err, false
		}
		m.ExpectTableSize = &expectTableSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackOptionsTableSizeFlags(depth int, m *models.ConntrackOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableSizeFlagName := fmt.Sprintf("%v.tableSize", cmdPrefix)
	if cmd.Flags().Changed(tableSizeFlagName) {

		var tableSizeFlagName string
		if cmdPrefix == "" {
			tableSizeFlagName = "tableSize"
		} else {
			tableSizeFlagName = fmt.Sprintf("%v.tableSize", cmdPrefix)
		}

		tableSizeFlagValue, err := cmd.Flags().GetInt64(tableSizeFlagName)
		if err != nil {
			return err, false
		}
		m.TableSize = &tableSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackOptionsTCPLooseFlags(depth int, m *models.ConntrackOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpLooseFlagName := fmt.Sprintf("%v.tcpLoose", cmdPrefix)
	if cmd.Flags().Changed(tcpLooseFlagName) {

		var tcpLooseFlagName string
		if cmdPrefix == "" {
			tcpLooseFlagName = "tcpLoose"
		} else {
			tcpLooseFlagName = fmt.Sprintf("%v.tcpLoose", cmdPrefix)
		}

		tcpLooseFlagValue, err := cmd.Flags().GetBool(tcpLooseFlagName)
		if err != nil {
			return err, false
		}
		m.TCPLoose = &tcpLooseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackOptionsTCPMaxRetransFlags(depth int, m *models.ConntrackOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpMaxRetransFlagName := fmt.Sprintf("%v.tcpMaxRetrans", cmdPrefix)
	if cmd.Flags().Changed(tcpMaxRetransFlagName) {

		var tcpMaxRetransFlagName string
		if cmdPrefix == "" {
			tcpMaxRetransFlagName = "tcpMaxRetrans"
		} else {
			tcpMaxRetransFlagName = fmt.Sprintf("%v.tcpMaxRetrans", cmdPrefix)
		}

		tcpMaxRetransFlagValue, err := cmd.Flags().GetInt64(tcpMaxRetransFlagName)
		if err != nil {
			return err, false
		}
		m.TCPMaxRetrans = &tcpMaxRetransFlagValue

		retAdded = true
	}

	return nil, retAdded
}
