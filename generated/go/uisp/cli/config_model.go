// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Config

// register flags to command
func registerModelConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigLogDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerConfigLogDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logDefaultDescription := ``

	var logDefaultFlagName string
	if cmdPrefix == "" {
		logDefaultFlagName = "logDefault"
	} else {
		logDefaultFlagName = fmt.Sprintf("%v.logDefault", cmdPrefix)
	}

	var logDefaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(logDefaultFlagName, logDefaultFlagDefault, logDefaultDescription)

	return nil
}

func registerConfigName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerConfigPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	policyDescription := `Required. `

	var policyFlagName string
	if cmdPrefix == "" {
		policyFlagName = "policy"
	} else {
		policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	var policyFlagDefault string

	_ = cmd.PersistentFlags().String(policyFlagName, policyFlagDefault, policyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveConfigEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, logDefaultAdded := retrieveConfigLogDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logDefaultAdded

	err, nameAdded := retrieveConfigNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, policyAdded := retrieveConfigPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || policyAdded

	return nil, retAdded
}

func retrieveConfigEnabledFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigLogDefaultFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logDefaultFlagName := fmt.Sprintf("%v.logDefault", cmdPrefix)
	if cmd.Flags().Changed(logDefaultFlagName) {

		var logDefaultFlagName string
		if cmdPrefix == "" {
			logDefaultFlagName = "logDefault"
		} else {
			logDefaultFlagName = fmt.Sprintf("%v.logDefault", cmdPrefix)
		}

		logDefaultFlagValue, err := cmd.Flags().GetBool(logDefaultFlagName)
		if err != nil {
			return err, false
		}
		m.LogDefault = logDefaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigNameFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigPolicyFlags(depth int, m *models.Config, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	policyFlagName := fmt.Sprintf("%v.policy", cmdPrefix)
	if cmd.Flags().Changed(policyFlagName) {

		var policyFlagName string
		if cmdPrefix == "" {
			policyFlagName = "policy"
		} else {
			policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
		}

		policyFlagValue, err := cmd.Flags().GetString(policyFlagName)
		if err != nil {
			return err, false
		}
		m.Policy = &policyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
