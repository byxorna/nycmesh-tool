// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Interval1

// register flags to command
func registerModelInterval1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInterval1End(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInterval1Start(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInterval1End(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endDescription := `Required. `

	var endFlagName string
	if cmdPrefix == "" {
		endFlagName = "end"
	} else {
		endFlagName = fmt.Sprintf("%v.end", cmdPrefix)
	}

	var endFlagDefault float64

	_ = cmd.PersistentFlags().Float64(endFlagName, endFlagDefault, endDescription)

	return nil
}

func registerInterval1Start(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startDescription := `Required. `

	var startFlagName string
	if cmdPrefix == "" {
		startFlagName = "start"
	} else {
		startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
	}

	var startFlagDefault float64

	_ = cmd.PersistentFlags().Float64(startFlagName, startFlagDefault, startDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInterval1Flags(depth int, m *models.Interval1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endAdded := retrieveInterval1EndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endAdded

	err, startAdded := retrieveInterval1StartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startAdded

	return nil, retAdded
}

func retrieveInterval1EndFlags(depth int, m *models.Interval1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endFlagName := fmt.Sprintf("%v.end", cmdPrefix)
	if cmd.Flags().Changed(endFlagName) {

		var endFlagName string
		if cmdPrefix == "" {
			endFlagName = "end"
		} else {
			endFlagName = fmt.Sprintf("%v.end", cmdPrefix)
		}

		endFlagValue, err := cmd.Flags().GetFloat64(endFlagName)
		if err != nil {
			return err, false
		}
		m.End = &endFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInterval1StartFlags(depth int, m *models.Interval1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startFlagName := fmt.Sprintf("%v.start", cmdPrefix)
	if cmd.Flags().Changed(startFlagName) {

		var startFlagName string
		if cmdPrefix == "" {
			startFlagName = "start"
		} else {
			startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
		}

		startFlagValue, err := cmd.Flags().GetFloat64(startFlagName)
		if err != nil {
			return err, false
		}
		m.Start = &startFlagValue

		retAdded = true
	}

	return nil, retAdded
}
