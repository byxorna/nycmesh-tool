// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/client/sites"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSitesGetSitesSearchCmd returns a cmd to handle operation getSitesSearch
func makeOperationSitesGetSitesSearchCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getSitesSearch",
		Short: ``,
		RunE:  runOperationSitesGetSitesSearch,
	}

	if err := registerOperationSitesGetSitesSearchParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSitesGetSitesSearch uses cmd flags to call endpoint api
func runOperationSitesGetSitesSearch(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := sites.NewGetSitesSearchParams()
	if err, _ := retrieveOperationSitesGetSitesSearchCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesSearchLatitudeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesSearchLongitudeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesSearchPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesSearchQueryFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesSearchTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesSearchUcrmFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSitesGetSitesSearchResult(appCli.Sites.GetSitesSearch(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSitesGetSitesSearchParamFlags registers all flags needed to fill params
func registerOperationSitesGetSitesSearchParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSitesGetSitesSearchCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesSearchLatitudeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesSearchLongitudeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesSearchPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesSearchQueryParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesSearchTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesSearchUcrmParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSitesGetSitesSearchCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	countDescription := `Required. Results per page.`

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}
func registerOperationSitesGetSitesSearchLatitudeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	latitudeDescription := `Order sites by distance from this latitude.`

	var latitudeFlagName string
	if cmdPrefix == "" {
		latitudeFlagName = "latitude"
	} else {
		latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
	}

	var latitudeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(latitudeFlagName, latitudeFlagDefault, latitudeDescription)

	return nil
}
func registerOperationSitesGetSitesSearchLongitudeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	longitudeDescription := `Order sites by distance from this longitude.`

	var longitudeFlagName string
	if cmdPrefix == "" {
		longitudeFlagName = "longitude"
	} else {
		longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
	}

	var longitudeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(longitudeFlagName, longitudeFlagDefault, longitudeDescription)

	return nil
}
func registerOperationSitesGetSitesSearchPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `Required. Results page.`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationSitesGetSitesSearchQueryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	queryDescription := `Text to search for in site.`

	var queryFlagName string
	if cmdPrefix == "" {
		queryFlagName = "query"
	} else {
		queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
	}

	var queryFlagDefault string

	_ = cmd.PersistentFlags().String(queryFlagName, queryFlagDefault, queryDescription)

	return nil
}
func registerOperationSitesGetSitesSearchTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: ["site","endpoint","client"]. Type of site to search.`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["site","endpoint","client"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationSitesGetSitesSearchUcrmParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ucrmDescription := `Search sites bound with UCRM.`

	var ucrmFlagName string
	if cmdPrefix == "" {
		ucrmFlagName = "ucrm"
	} else {
		ucrmFlagName = fmt.Sprintf("%v.ucrm", cmdPrefix)
	}

	var ucrmFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ucrmFlagName, ucrmFlagDefault, ucrmDescription)

	return nil
}

func retrieveOperationSitesGetSitesSearchCountFlag(m *sites.GetSitesSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("count") {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesSearchLatitudeFlag(m *sites.GetSitesSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("latitude") {

		var latitudeFlagName string
		if cmdPrefix == "" {
			latitudeFlagName = "latitude"
		} else {
			latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
		}

		latitudeFlagValue, err := cmd.Flags().GetFloat64(latitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Latitude = &latitudeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesSearchLongitudeFlag(m *sites.GetSitesSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("longitude") {

		var longitudeFlagName string
		if cmdPrefix == "" {
			longitudeFlagName = "longitude"
		} else {
			longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
		}

		longitudeFlagValue, err := cmd.Flags().GetFloat64(longitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Longitude = &longitudeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesSearchPageFlag(m *sites.GetSitesSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetFloat64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesSearchQueryFlag(m *sites.GetSitesSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("query") {

		var queryFlagName string
		if cmdPrefix == "" {
			queryFlagName = "query"
		} else {
			queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
		}

		queryFlagValue, err := cmd.Flags().GetString(queryFlagName)
		if err != nil {
			return err, false
		}
		m.Query = &queryFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesSearchTypeFlag(m *sites.GetSitesSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesSearchUcrmFlag(m *sites.GetSitesSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("ucrm") {

		var ucrmFlagName string
		if cmdPrefix == "" {
			ucrmFlagName = "ucrm"
		} else {
			ucrmFlagName = fmt.Sprintf("%v.ucrm", cmdPrefix)
		}

		ucrmFlagValue, err := cmd.Flags().GetBool(ucrmFlagName)
		if err != nil {
			return err, false
		}
		m.Ucrm = &ucrmFlagValue

	}
	return nil, retAdded
}

// parseOperationSitesGetSitesSearchResult parses request result and return the string content
func parseOperationSitesGetSitesSearchResult(resp0 *sites.GetSitesSearchOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*sites.GetSitesSearchOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*sites.GetSitesSearchBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*sites.GetSitesSearchUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*sites.GetSitesSearchForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*sites.GetSitesSearchNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*sites.GetSitesSearchInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
