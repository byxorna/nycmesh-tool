// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for ServerConfig

// register flags to command
func registerModelServerConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerConfigFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerConfigIsCloudSMTPAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerConfigIsProduction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerConfigLatestVersionURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerConfigNetflowPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerConfigPermissions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerConfigUseCustomSslCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerConfigFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var featuresFlagName string
	if cmdPrefix == "" {
		featuresFlagName = "features"
	} else {
		featuresFlagName = fmt.Sprintf("%v.features", cmdPrefix)
	}

	if err := registerModelFeaturesFlags(depth+1, featuresFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerConfigIsCloudSMTPAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isCloudSmtpAvailableDescription := `Required. Whether cloud SMTP is available or not.`

	var isCloudSmtpAvailableFlagName string
	if cmdPrefix == "" {
		isCloudSmtpAvailableFlagName = "isCloudSmtpAvailable"
	} else {
		isCloudSmtpAvailableFlagName = fmt.Sprintf("%v.isCloudSmtpAvailable", cmdPrefix)
	}

	var isCloudSmtpAvailableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isCloudSmtpAvailableFlagName, isCloudSmtpAvailableFlagDefault, isCloudSmtpAvailableDescription)

	return nil
}

func registerServerConfigIsProduction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isProductionDescription := `Required. If deployed version is production build.`

	var isProductionFlagName string
	if cmdPrefix == "" {
		isProductionFlagName = "isProduction"
	} else {
		isProductionFlagName = fmt.Sprintf("%v.isProduction", cmdPrefix)
	}

	var isProductionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isProductionFlagName, isProductionFlagDefault, isProductionDescription)

	return nil
}

func registerServerConfigLatestVersionURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latestVersionUrlDescription := `Required. URL to check for new version of UISP.`

	var latestVersionUrlFlagName string
	if cmdPrefix == "" {
		latestVersionUrlFlagName = "latestVersionUrl"
	} else {
		latestVersionUrlFlagName = fmt.Sprintf("%v.latestVersionUrl", cmdPrefix)
	}

	var latestVersionUrlFlagDefault string

	_ = cmd.PersistentFlags().String(latestVersionUrlFlagName, latestVersionUrlFlagDefault, latestVersionUrlDescription)

	return nil
}

func registerServerConfigNetflowPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	netflowPortDescription := `Required. Port where server is listening for netflow packets.`

	var netflowPortFlagName string
	if cmdPrefix == "" {
		netflowPortFlagName = "netflowPort"
	} else {
		netflowPortFlagName = fmt.Sprintf("%v.netflowPort", cmdPrefix)
	}

	var netflowPortFlagDefault float64

	_ = cmd.PersistentFlags().Float64(netflowPortFlagName, netflowPortFlagDefault, netflowPortDescription)

	return nil
}

func registerServerConfigPermissions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var permissionsFlagName string
	if cmdPrefix == "" {
		permissionsFlagName = "permissions"
	} else {
		permissionsFlagName = fmt.Sprintf("%v.permissions", cmdPrefix)
	}

	if err := registerModelServerConfigPermissionsFlags(depth+1, permissionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerConfigUseCustomSslCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useCustomSslCertDescription := `Required. Whether the server is using custom SSL cert or not.`

	var useCustomSslCertFlagName string
	if cmdPrefix == "" {
		useCustomSslCertFlagName = "useCustomSslCert"
	} else {
		useCustomSslCertFlagName = fmt.Sprintf("%v.useCustomSslCert", cmdPrefix)
	}

	var useCustomSslCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useCustomSslCertFlagName, useCustomSslCertFlagDefault, useCustomSslCertDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerConfigFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, featuresAdded := retrieveServerConfigFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded

	err, isCloudSmtpAvailableAdded := retrieveServerConfigIsCloudSMTPAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isCloudSmtpAvailableAdded

	err, isProductionAdded := retrieveServerConfigIsProductionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isProductionAdded

	err, latestVersionUrlAdded := retrieveServerConfigLatestVersionURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latestVersionUrlAdded

	err, netflowPortAdded := retrieveServerConfigNetflowPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || netflowPortAdded

	err, permissionsAdded := retrieveServerConfigPermissionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || permissionsAdded

	err, useCustomSslCertAdded := retrieveServerConfigUseCustomSslCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useCustomSslCertAdded

	return nil, retAdded
}

func retrieveServerConfigFeaturesFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featuresFlagName := fmt.Sprintf("%v.features", cmdPrefix)
	if cmd.Flags().Changed(featuresFlagName) {
		// info: complex object features Features is retrieved outside this Changed() block
	}
	featuresFlagValue := m.Features
	if swag.IsZero(featuresFlagValue) {
		featuresFlagValue = &models.Features{}
	}

	err, featuresAdded := retrieveModelFeaturesFlags(depth+1, featuresFlagValue, featuresFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded
	if featuresAdded {
		m.Features = featuresFlagValue
	}

	return nil, retAdded
}

func retrieveServerConfigIsCloudSMTPAvailableFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isCloudSmtpAvailableFlagName := fmt.Sprintf("%v.isCloudSmtpAvailable", cmdPrefix)
	if cmd.Flags().Changed(isCloudSmtpAvailableFlagName) {

		var isCloudSmtpAvailableFlagName string
		if cmdPrefix == "" {
			isCloudSmtpAvailableFlagName = "isCloudSmtpAvailable"
		} else {
			isCloudSmtpAvailableFlagName = fmt.Sprintf("%v.isCloudSmtpAvailable", cmdPrefix)
		}

		isCloudSmtpAvailableFlagValue, err := cmd.Flags().GetBool(isCloudSmtpAvailableFlagName)
		if err != nil {
			return err, false
		}
		m.IsCloudSMTPAvailable = &isCloudSmtpAvailableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerConfigIsProductionFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isProductionFlagName := fmt.Sprintf("%v.isProduction", cmdPrefix)
	if cmd.Flags().Changed(isProductionFlagName) {

		var isProductionFlagName string
		if cmdPrefix == "" {
			isProductionFlagName = "isProduction"
		} else {
			isProductionFlagName = fmt.Sprintf("%v.isProduction", cmdPrefix)
		}

		isProductionFlagValue, err := cmd.Flags().GetBool(isProductionFlagName)
		if err != nil {
			return err, false
		}
		m.IsProduction = &isProductionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerConfigLatestVersionURLFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latestVersionUrlFlagName := fmt.Sprintf("%v.latestVersionUrl", cmdPrefix)
	if cmd.Flags().Changed(latestVersionUrlFlagName) {

		var latestVersionUrlFlagName string
		if cmdPrefix == "" {
			latestVersionUrlFlagName = "latestVersionUrl"
		} else {
			latestVersionUrlFlagName = fmt.Sprintf("%v.latestVersionUrl", cmdPrefix)
		}

		latestVersionUrlFlagValue, err := cmd.Flags().GetString(latestVersionUrlFlagName)
		if err != nil {
			return err, false
		}
		m.LatestVersionURL = &latestVersionUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerConfigNetflowPortFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	netflowPortFlagName := fmt.Sprintf("%v.netflowPort", cmdPrefix)
	if cmd.Flags().Changed(netflowPortFlagName) {

		var netflowPortFlagName string
		if cmdPrefix == "" {
			netflowPortFlagName = "netflowPort"
		} else {
			netflowPortFlagName = fmt.Sprintf("%v.netflowPort", cmdPrefix)
		}

		netflowPortFlagValue, err := cmd.Flags().GetFloat64(netflowPortFlagName)
		if err != nil {
			return err, false
		}
		m.NetflowPort = &netflowPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerConfigPermissionsFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	permissionsFlagName := fmt.Sprintf("%v.permissions", cmdPrefix)
	if cmd.Flags().Changed(permissionsFlagName) {
		// info: complex object permissions ServerConfigPermissions is retrieved outside this Changed() block
	}
	permissionsFlagValue := m.Permissions
	if swag.IsZero(permissionsFlagValue) {
		permissionsFlagValue = &models.ServerConfigPermissions{}
	}

	err, permissionsAdded := retrieveModelServerConfigPermissionsFlags(depth+1, permissionsFlagValue, permissionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || permissionsAdded
	if permissionsAdded {
		m.Permissions = permissionsFlagValue
	}

	return nil, retAdded
}

func retrieveServerConfigUseCustomSslCertFlags(depth int, m *models.ServerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useCustomSslCertFlagName := fmt.Sprintf("%v.useCustomSslCert", cmdPrefix)
	if cmd.Flags().Changed(useCustomSslCertFlagName) {

		var useCustomSslCertFlagName string
		if cmdPrefix == "" {
			useCustomSslCertFlagName = "useCustomSslCert"
		} else {
			useCustomSslCertFlagName = fmt.Sprintf("%v.useCustomSslCert", cmdPrefix)
		}

		useCustomSslCertFlagValue, err := cmd.Flags().GetBool(useCustomSslCertFlagName)
		if err != nil {
			return err, false
		}
		m.UseCustomSslCert = &useCustomSslCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}
