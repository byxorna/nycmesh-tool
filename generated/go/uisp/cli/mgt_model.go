// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Mgt

// register flags to command
func registerModelMgtFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMgtCidr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMgtEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMgtPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMgtProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMgtService(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMgtUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMgtVlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMgtCidr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cidrDescription := `Required. `

	var cidrFlagName string
	if cmdPrefix == "" {
		cidrFlagName = "cidr"
	} else {
		cidrFlagName = fmt.Sprintf("%v.cidr", cmdPrefix)
	}

	var cidrFlagDefault string

	_ = cmd.PersistentFlags().String(cidrFlagName, cidrFlagDefault, cidrDescription)

	return nil
}

func registerMgtEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerMgtPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `Required. `

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerMgtProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protoDescription := `Enum: ["static","dhcp","pppoe"]. Required. `

	var protoFlagName string
	if cmdPrefix == "" {
		protoFlagName = "proto"
	} else {
		protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
	}

	var protoFlagDefault string

	_ = cmd.PersistentFlags().String(protoFlagName, protoFlagDefault, protoDescription)

	if err := cmd.RegisterFlagCompletionFunc(protoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["static","dhcp","pppoe"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerMgtService(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serviceDescription := `Required. `

	var serviceFlagName string
	if cmdPrefix == "" {
		serviceFlagName = "service"
	} else {
		serviceFlagName = fmt.Sprintf("%v.service", cmdPrefix)
	}

	var serviceFlagDefault string

	_ = cmd.PersistentFlags().String(serviceFlagName, serviceFlagDefault, serviceDescription)

	return nil
}

func registerMgtUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

func registerMgtVlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlanIdDescription := `Required. `

	var vlanIdFlagName string
	if cmdPrefix == "" {
		vlanIdFlagName = "vlanId"
	} else {
		vlanIdFlagName = fmt.Sprintf("%v.vlanId", cmdPrefix)
	}

	var vlanIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(vlanIdFlagName, vlanIdFlagDefault, vlanIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMgtFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cidrAdded := retrieveMgtCidrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cidrAdded

	err, enabledAdded := retrieveMgtEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, passwordAdded := retrieveMgtPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, protoAdded := retrieveMgtProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protoAdded

	err, serviceAdded := retrieveMgtServiceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceAdded

	err, usernameAdded := retrieveMgtUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	err, vlanIdAdded := retrieveMgtVlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlanIdAdded

	return nil, retAdded
}

func retrieveMgtCidrFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cidrFlagName := fmt.Sprintf("%v.cidr", cmdPrefix)
	if cmd.Flags().Changed(cidrFlagName) {

		var cidrFlagName string
		if cmdPrefix == "" {
			cidrFlagName = "cidr"
		} else {
			cidrFlagName = fmt.Sprintf("%v.cidr", cmdPrefix)
		}

		cidrFlagValue, err := cmd.Flags().GetString(cidrFlagName)
		if err != nil {
			return err, false
		}
		m.Cidr = &cidrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMgtEnabledFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMgtPasswordFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = &passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMgtProtoFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protoFlagName := fmt.Sprintf("%v.proto", cmdPrefix)
	if cmd.Flags().Changed(protoFlagName) {

		var protoFlagName string
		if cmdPrefix == "" {
			protoFlagName = "proto"
		} else {
			protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
		}

		protoFlagValue, err := cmd.Flags().GetString(protoFlagName)
		if err != nil {
			return err, false
		}
		m.Proto = &protoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMgtServiceFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceFlagName := fmt.Sprintf("%v.service", cmdPrefix)
	if cmd.Flags().Changed(serviceFlagName) {

		var serviceFlagName string
		if cmdPrefix == "" {
			serviceFlagName = "service"
		} else {
			serviceFlagName = fmt.Sprintf("%v.service", cmdPrefix)
		}

		serviceFlagValue, err := cmd.Flags().GetString(serviceFlagName)
		if err != nil {
			return err, false
		}
		m.Service = &serviceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMgtUsernameFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = &usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMgtVlanIDFlags(depth int, m *models.Mgt, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlanIdFlagName := fmt.Sprintf("%v.vlanId", cmdPrefix)
	if cmd.Flags().Changed(vlanIdFlagName) {

		var vlanIdFlagName string
		if cmdPrefix == "" {
			vlanIdFlagName = "vlanId"
		} else {
			vlanIdFlagName = fmt.Sprintf("%v.vlanId", cmdPrefix)
		}

		vlanIdFlagValue, err := cmd.Flags().GetInt64(vlanIdFlagName)
		if err != nil {
			return err, false
		}
		m.VlanID = &vlanIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
