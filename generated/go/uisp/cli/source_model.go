// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Source

// register flags to command
func registerModelSourceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSourceAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSourceMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSourcePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSourceSets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSourceAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := ``

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerSourceMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := ``

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

func registerSourcePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := ``

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault string

	_ = cmd.PersistentFlags().String(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerSourceSets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	setsDescription := ``

	var setsFlagName string
	if cmdPrefix == "" {
		setsFlagName = "sets"
	} else {
		setsFlagName = fmt.Sprintf("%v.sets", cmdPrefix)
	}

	var setsFlagDefault string

	_ = cmd.PersistentFlags().String(setsFlagName, setsFlagDefault, setsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSourceFlags(depth int, m *models.Source, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveSourceAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, macAdded := retrieveSourceMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	err, portAdded := retrieveSourcePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, setsAdded := retrieveSourceSetsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || setsAdded

	return nil, retAdded
}

func retrieveSourceAddressFlags(depth int, m *models.Source, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSourceMacFlags(depth int, m *models.Source, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = macFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSourcePortFlags(depth int, m *models.Source, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetString(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSourceSetsFlags(depth int, m *models.Source, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	setsFlagName := fmt.Sprintf("%v.sets", cmdPrefix)
	if cmd.Flags().Changed(setsFlagName) {

		var setsFlagName string
		if cmdPrefix == "" {
			setsFlagName = "sets"
		} else {
			setsFlagName = fmt.Sprintf("%v.sets", cmdPrefix)
		}

		setsFlagValue, err := cmd.Flags().GetString(setsFlagName)
		if err != nil {
			return err, false
		}
		m.Sets = setsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
