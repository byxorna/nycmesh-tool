// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model97

// register flags to command
func registerModelModel97Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel97Addresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel97Description(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel97Interface(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel97Mtu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel97Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel97ProxyARP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel97VlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel97Addresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: addresses Addresses5 array type is not supported by go-swagger cli yet

	return nil
}

func registerModel97Description(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerModel97Interface(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceDescription := `Required. `

	var interfaceFlagName string
	if cmdPrefix == "" {
		interfaceFlagName = "interface"
	} else {
		interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
	}

	var interfaceFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceFlagName, interfaceFlagDefault, interfaceDescription)

	return nil
}

func registerModel97Mtu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mtuDescription := `Required. `

	var mtuFlagName string
	if cmdPrefix == "" {
		mtuFlagName = "mtu"
	} else {
		mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
	}

	var mtuFlagDefault float64

	_ = cmd.PersistentFlags().Float64(mtuFlagName, mtuFlagDefault, mtuDescription)

	return nil
}

func registerModel97Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerModel97ProxyARP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	proxyARPDescription := ``

	var proxyARPFlagName string
	if cmdPrefix == "" {
		proxyARPFlagName = "proxyARP"
	} else {
		proxyARPFlagName = fmt.Sprintf("%v.proxyARP", cmdPrefix)
	}

	var proxyARPFlagDefault bool

	_ = cmd.PersistentFlags().Bool(proxyARPFlagName, proxyARPFlagDefault, proxyARPDescription)

	return nil
}

func registerModel97VlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlanIdDescription := `Required. `

	var vlanIdFlagName string
	if cmdPrefix == "" {
		vlanIdFlagName = "vlanId"
	} else {
		vlanIdFlagName = fmt.Sprintf("%v.vlanId", cmdPrefix)
	}

	var vlanIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(vlanIdFlagName, vlanIdFlagDefault, vlanIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel97Flags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressesAdded := retrieveModel97AddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressesAdded

	err, descriptionAdded := retrieveModel97DescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, interfaceAdded := retrieveModel97InterfaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceAdded

	err, mtuAdded := retrieveModel97MtuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mtuAdded

	err, nameAdded := retrieveModel97NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, proxyARPAdded := retrieveModel97ProxyARPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || proxyARPAdded

	err, vlanIdAdded := retrieveModel97VlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlanIdAdded

	return nil, retAdded
}

func retrieveModel97AddressesFlags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressesFlagName := fmt.Sprintf("%v.addresses", cmdPrefix)
	if cmd.Flags().Changed(addressesFlagName) {
		// warning: addresses array type Addresses5 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel97DescriptionFlags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel97InterfaceFlags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceFlagName := fmt.Sprintf("%v.interface", cmdPrefix)
	if cmd.Flags().Changed(interfaceFlagName) {

		var interfaceFlagName string
		if cmdPrefix == "" {
			interfaceFlagName = "interface"
		} else {
			interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
		}

		interfaceFlagValue, err := cmd.Flags().GetString(interfaceFlagName)
		if err != nil {
			return err, false
		}
		m.Interface = &interfaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel97MtuFlags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mtuFlagName := fmt.Sprintf("%v.mtu", cmdPrefix)
	if cmd.Flags().Changed(mtuFlagName) {

		var mtuFlagName string
		if cmdPrefix == "" {
			mtuFlagName = "mtu"
		} else {
			mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
		}

		mtuFlagValue, err := cmd.Flags().GetFloat64(mtuFlagName)
		if err != nil {
			return err, false
		}
		m.Mtu = &mtuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel97NameFlags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel97ProxyARPFlags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	proxyARPFlagName := fmt.Sprintf("%v.proxyARP", cmdPrefix)
	if cmd.Flags().Changed(proxyARPFlagName) {

		var proxyARPFlagName string
		if cmdPrefix == "" {
			proxyARPFlagName = "proxyARP"
		} else {
			proxyARPFlagName = fmt.Sprintf("%v.proxyARP", cmdPrefix)
		}

		proxyARPFlagValue, err := cmd.Flags().GetBool(proxyARPFlagName)
		if err != nil {
			return err, false
		}
		m.ProxyARP = proxyARPFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel97VlanIDFlags(depth int, m *models.Model97, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlanIdFlagName := fmt.Sprintf("%v.vlanId", cmdPrefix)
	if cmd.Flags().Changed(vlanIdFlagName) {

		var vlanIdFlagName string
		if cmdPrefix == "" {
			vlanIdFlagName = "vlanId"
		} else {
			vlanIdFlagName = fmt.Sprintf("%v.vlanId", cmdPrefix)
		}

		vlanIdFlagValue, err := cmd.Flags().GetInt64(vlanIdFlagName)
		if err != nil {
			return err, false
		}
		m.VlanID = &vlanIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
