// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/client/devices"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDevicesGetDevicesDeviceidMactableCmd returns a cmd to handle operation getDevicesDeviceidMactable
func makeOperationDevicesGetDevicesDeviceidMactableCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getDevicesDeviceidMactable",
		Short: ``,
		RunE:  runOperationDevicesGetDevicesDeviceidMactable,
	}

	if err := registerOperationDevicesGetDevicesDeviceidMactableParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDevicesGetDevicesDeviceidMactable uses cmd flags to call endpoint api
func runOperationDevicesGetDevicesDeviceidMactable(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := devices.NewGetDevicesDeviceidMactableParams()
	if err, _ := retrieveOperationDevicesGetDevicesDeviceidMactableCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesGetDevicesDeviceidMactableDeviceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesGetDevicesDeviceidMactablePageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesGetDevicesDeviceidMactableSearchFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesGetDevicesDeviceidMactableSortByFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesGetDevicesDeviceidMactableSortDescFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDevicesGetDevicesDeviceidMactableResult(appCli.Devices.GetDevicesDeviceidMactable(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDevicesGetDevicesDeviceidMactableParamFlags registers all flags needed to fill params
func registerOperationDevicesGetDevicesDeviceidMactableParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDevicesGetDevicesDeviceidMactableCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesGetDevicesDeviceidMactableDeviceIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesGetDevicesDeviceidMactablePageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesGetDevicesDeviceidMactableSearchParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesGetDevicesDeviceidMactableSortByParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesGetDevicesDeviceidMactableSortDescParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDevicesGetDevicesDeviceidMactableCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	countDescription := `items count`

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault int64

	_ = cmd.PersistentFlags().Int64(countFlagName, countFlagDefault, countDescription)

	return nil
}
func registerOperationDevicesGetDevicesDeviceidMactableDeviceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	deviceIdDescription := `Required. `

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}
func registerOperationDevicesGetDevicesDeviceidMactablePageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `number page`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationDevicesGetDevicesDeviceidMactableSearchParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	searchDescription := ``

	var searchFlagName string
	if cmdPrefix == "" {
		searchFlagName = "search"
	} else {
		searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
	}

	var searchFlagDefault string

	_ = cmd.PersistentFlags().String(searchFlagName, searchFlagDefault, searchDescription)

	return nil
}
func registerOperationDevicesGetDevicesDeviceidMactableSortByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortByDescription := `Enum: ["device_id","addresses","vendor","mac","vlan","s_name","hostname","interface_id"]. column name`

	var sortByFlagName string
	if cmdPrefix == "" {
		sortByFlagName = "sortBy"
	} else {
		sortByFlagName = fmt.Sprintf("%v.sortBy", cmdPrefix)
	}

	var sortByFlagDefault string

	_ = cmd.PersistentFlags().String(sortByFlagName, sortByFlagDefault, sortByDescription)

	if err := cmd.RegisterFlagCompletionFunc(sortByFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["device_id","addresses","vendor","mac","vlan","s_name","hostname","interface_id"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationDevicesGetDevicesDeviceidMactableSortDescParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortDescDescription := `descending sort rows [z-a] or [9-0]`

	var sortDescFlagName string
	if cmdPrefix == "" {
		sortDescFlagName = "sortDesc"
	} else {
		sortDescFlagName = fmt.Sprintf("%v.sortDesc", cmdPrefix)
	}

	var sortDescFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sortDescFlagName, sortDescFlagDefault, sortDescDescription)

	return nil
}

func retrieveOperationDevicesGetDevicesDeviceidMactableCountFlag(m *devices.GetDevicesDeviceidMactableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("count") {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetInt64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = &countFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesGetDevicesDeviceidMactableDeviceIDFlag(m *devices.GetDevicesDeviceidMactableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("deviceId") {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = deviceIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesGetDevicesDeviceidMactablePageFlag(m *devices.GetDevicesDeviceidMactableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = &pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesGetDevicesDeviceidMactableSearchFlag(m *devices.GetDevicesDeviceidMactableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("search") {

		var searchFlagName string
		if cmdPrefix == "" {
			searchFlagName = "search"
		} else {
			searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
		}

		searchFlagValue, err := cmd.Flags().GetString(searchFlagName)
		if err != nil {
			return err, false
		}
		m.Search = &searchFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesGetDevicesDeviceidMactableSortByFlag(m *devices.GetDevicesDeviceidMactableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sortBy") {

		var sortByFlagName string
		if cmdPrefix == "" {
			sortByFlagName = "sortBy"
		} else {
			sortByFlagName = fmt.Sprintf("%v.sortBy", cmdPrefix)
		}

		sortByFlagValue, err := cmd.Flags().GetString(sortByFlagName)
		if err != nil {
			return err, false
		}
		m.SortBy = &sortByFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesGetDevicesDeviceidMactableSortDescFlag(m *devices.GetDevicesDeviceidMactableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sortDesc") {

		var sortDescFlagName string
		if cmdPrefix == "" {
			sortDescFlagName = "sortDesc"
		} else {
			sortDescFlagName = fmt.Sprintf("%v.sortDesc", cmdPrefix)
		}

		sortDescFlagValue, err := cmd.Flags().GetBool(sortDescFlagName)
		if err != nil {
			return err, false
		}
		m.SortDesc = &sortDescFlagValue

	}
	return nil, retAdded
}

// parseOperationDevicesGetDevicesDeviceidMactableResult parses request result and return the string content
func parseOperationDevicesGetDevicesDeviceidMactableResult(resp0 *devices.GetDevicesDeviceidMactableOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*devices.GetDevicesDeviceidMactableOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*devices.GetDevicesDeviceidMactableBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*devices.GetDevicesDeviceidMactableUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*devices.GetDevicesDeviceidMactableForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*devices.GetDevicesDeviceidMactableNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*devices.GetDevicesDeviceidMactableInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
