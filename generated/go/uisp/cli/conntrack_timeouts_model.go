// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for ConntrackTimeouts

// register flags to command
func registerModelConntrackTimeoutsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConntrackTimeoutsIcmp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPClose(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPCloseWait(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPEstablished(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPFinWait(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPLastAck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPSynRecv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPSynSent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsTCPTimeWait(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsUDPOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConntrackTimeoutsUDPStream(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConntrackTimeoutsIcmp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	icmpDescription := `Required. `

	var icmpFlagName string
	if cmdPrefix == "" {
		icmpFlagName = "icmp"
	} else {
		icmpFlagName = fmt.Sprintf("%v.icmp", cmdPrefix)
	}

	var icmpFlagDefault int64

	_ = cmd.PersistentFlags().Int64(icmpFlagName, icmpFlagDefault, icmpDescription)

	return nil
}

func registerConntrackTimeoutsOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	otherDescription := `Required. `

	var otherFlagName string
	if cmdPrefix == "" {
		otherFlagName = "other"
	} else {
		otherFlagName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var otherFlagDefault int64

	_ = cmd.PersistentFlags().Int64(otherFlagName, otherFlagDefault, otherDescription)

	return nil
}

func registerConntrackTimeoutsTCPClose(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpCloseDescription := `Required. `

	var tcpCloseFlagName string
	if cmdPrefix == "" {
		tcpCloseFlagName = "tcpClose"
	} else {
		tcpCloseFlagName = fmt.Sprintf("%v.tcpClose", cmdPrefix)
	}

	var tcpCloseFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpCloseFlagName, tcpCloseFlagDefault, tcpCloseDescription)

	return nil
}

func registerConntrackTimeoutsTCPCloseWait(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpCloseWaitDescription := `Required. `

	var tcpCloseWaitFlagName string
	if cmdPrefix == "" {
		tcpCloseWaitFlagName = "tcpCloseWait"
	} else {
		tcpCloseWaitFlagName = fmt.Sprintf("%v.tcpCloseWait", cmdPrefix)
	}

	var tcpCloseWaitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpCloseWaitFlagName, tcpCloseWaitFlagDefault, tcpCloseWaitDescription)

	return nil
}

func registerConntrackTimeoutsTCPEstablished(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpEstablishedDescription := `Required. `

	var tcpEstablishedFlagName string
	if cmdPrefix == "" {
		tcpEstablishedFlagName = "tcpEstablished"
	} else {
		tcpEstablishedFlagName = fmt.Sprintf("%v.tcpEstablished", cmdPrefix)
	}

	var tcpEstablishedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpEstablishedFlagName, tcpEstablishedFlagDefault, tcpEstablishedDescription)

	return nil
}

func registerConntrackTimeoutsTCPFinWait(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpFinWaitDescription := `Required. `

	var tcpFinWaitFlagName string
	if cmdPrefix == "" {
		tcpFinWaitFlagName = "tcpFinWait"
	} else {
		tcpFinWaitFlagName = fmt.Sprintf("%v.tcpFinWait", cmdPrefix)
	}

	var tcpFinWaitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpFinWaitFlagName, tcpFinWaitFlagDefault, tcpFinWaitDescription)

	return nil
}

func registerConntrackTimeoutsTCPLastAck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpLastAckDescription := `Required. `

	var tcpLastAckFlagName string
	if cmdPrefix == "" {
		tcpLastAckFlagName = "tcpLastAck"
	} else {
		tcpLastAckFlagName = fmt.Sprintf("%v.tcpLastAck", cmdPrefix)
	}

	var tcpLastAckFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpLastAckFlagName, tcpLastAckFlagDefault, tcpLastAckDescription)

	return nil
}

func registerConntrackTimeoutsTCPSynRecv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpSynRecvDescription := `Required. `

	var tcpSynRecvFlagName string
	if cmdPrefix == "" {
		tcpSynRecvFlagName = "tcpSynRecv"
	} else {
		tcpSynRecvFlagName = fmt.Sprintf("%v.tcpSynRecv", cmdPrefix)
	}

	var tcpSynRecvFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpSynRecvFlagName, tcpSynRecvFlagDefault, tcpSynRecvDescription)

	return nil
}

func registerConntrackTimeoutsTCPSynSent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpSynSentDescription := `Required. `

	var tcpSynSentFlagName string
	if cmdPrefix == "" {
		tcpSynSentFlagName = "tcpSynSent"
	} else {
		tcpSynSentFlagName = fmt.Sprintf("%v.tcpSynSent", cmdPrefix)
	}

	var tcpSynSentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpSynSentFlagName, tcpSynSentFlagDefault, tcpSynSentDescription)

	return nil
}

func registerConntrackTimeoutsTCPTimeWait(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tcpTimeWaitDescription := `Required. `

	var tcpTimeWaitFlagName string
	if cmdPrefix == "" {
		tcpTimeWaitFlagName = "tcpTimeWait"
	} else {
		tcpTimeWaitFlagName = fmt.Sprintf("%v.tcpTimeWait", cmdPrefix)
	}

	var tcpTimeWaitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tcpTimeWaitFlagName, tcpTimeWaitFlagDefault, tcpTimeWaitDescription)

	return nil
}

func registerConntrackTimeoutsUDPOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	udpOtherDescription := `Required. `

	var udpOtherFlagName string
	if cmdPrefix == "" {
		udpOtherFlagName = "udpOther"
	} else {
		udpOtherFlagName = fmt.Sprintf("%v.udpOther", cmdPrefix)
	}

	var udpOtherFlagDefault int64

	_ = cmd.PersistentFlags().Int64(udpOtherFlagName, udpOtherFlagDefault, udpOtherDescription)

	return nil
}

func registerConntrackTimeoutsUDPStream(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	udpStreamDescription := `Required. `

	var udpStreamFlagName string
	if cmdPrefix == "" {
		udpStreamFlagName = "udpStream"
	} else {
		udpStreamFlagName = fmt.Sprintf("%v.udpStream", cmdPrefix)
	}

	var udpStreamFlagDefault int64

	_ = cmd.PersistentFlags().Int64(udpStreamFlagName, udpStreamFlagDefault, udpStreamDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConntrackTimeoutsFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, icmpAdded := retrieveConntrackTimeoutsIcmpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || icmpAdded

	err, otherAdded := retrieveConntrackTimeoutsOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || otherAdded

	err, tcpCloseAdded := retrieveConntrackTimeoutsTCPCloseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpCloseAdded

	err, tcpCloseWaitAdded := retrieveConntrackTimeoutsTCPCloseWaitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpCloseWaitAdded

	err, tcpEstablishedAdded := retrieveConntrackTimeoutsTCPEstablishedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpEstablishedAdded

	err, tcpFinWaitAdded := retrieveConntrackTimeoutsTCPFinWaitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpFinWaitAdded

	err, tcpLastAckAdded := retrieveConntrackTimeoutsTCPLastAckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpLastAckAdded

	err, tcpSynRecvAdded := retrieveConntrackTimeoutsTCPSynRecvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpSynRecvAdded

	err, tcpSynSentAdded := retrieveConntrackTimeoutsTCPSynSentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpSynSentAdded

	err, tcpTimeWaitAdded := retrieveConntrackTimeoutsTCPTimeWaitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tcpTimeWaitAdded

	err, udpOtherAdded := retrieveConntrackTimeoutsUDPOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || udpOtherAdded

	err, udpStreamAdded := retrieveConntrackTimeoutsUDPStreamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || udpStreamAdded

	return nil, retAdded
}

func retrieveConntrackTimeoutsIcmpFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	icmpFlagName := fmt.Sprintf("%v.icmp", cmdPrefix)
	if cmd.Flags().Changed(icmpFlagName) {

		var icmpFlagName string
		if cmdPrefix == "" {
			icmpFlagName = "icmp"
		} else {
			icmpFlagName = fmt.Sprintf("%v.icmp", cmdPrefix)
		}

		icmpFlagValue, err := cmd.Flags().GetInt64(icmpFlagName)
		if err != nil {
			return err, false
		}
		m.Icmp = &icmpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsOtherFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	otherFlagName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(otherFlagName) {

		var otherFlagName string
		if cmdPrefix == "" {
			otherFlagName = "other"
		} else {
			otherFlagName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		otherFlagValue, err := cmd.Flags().GetInt64(otherFlagName)
		if err != nil {
			return err, false
		}
		m.Other = &otherFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPCloseFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpCloseFlagName := fmt.Sprintf("%v.tcpClose", cmdPrefix)
	if cmd.Flags().Changed(tcpCloseFlagName) {

		var tcpCloseFlagName string
		if cmdPrefix == "" {
			tcpCloseFlagName = "tcpClose"
		} else {
			tcpCloseFlagName = fmt.Sprintf("%v.tcpClose", cmdPrefix)
		}

		tcpCloseFlagValue, err := cmd.Flags().GetInt64(tcpCloseFlagName)
		if err != nil {
			return err, false
		}
		m.TCPClose = &tcpCloseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPCloseWaitFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpCloseWaitFlagName := fmt.Sprintf("%v.tcpCloseWait", cmdPrefix)
	if cmd.Flags().Changed(tcpCloseWaitFlagName) {

		var tcpCloseWaitFlagName string
		if cmdPrefix == "" {
			tcpCloseWaitFlagName = "tcpCloseWait"
		} else {
			tcpCloseWaitFlagName = fmt.Sprintf("%v.tcpCloseWait", cmdPrefix)
		}

		tcpCloseWaitFlagValue, err := cmd.Flags().GetInt64(tcpCloseWaitFlagName)
		if err != nil {
			return err, false
		}
		m.TCPCloseWait = &tcpCloseWaitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPEstablishedFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpEstablishedFlagName := fmt.Sprintf("%v.tcpEstablished", cmdPrefix)
	if cmd.Flags().Changed(tcpEstablishedFlagName) {

		var tcpEstablishedFlagName string
		if cmdPrefix == "" {
			tcpEstablishedFlagName = "tcpEstablished"
		} else {
			tcpEstablishedFlagName = fmt.Sprintf("%v.tcpEstablished", cmdPrefix)
		}

		tcpEstablishedFlagValue, err := cmd.Flags().GetInt64(tcpEstablishedFlagName)
		if err != nil {
			return err, false
		}
		m.TCPEstablished = &tcpEstablishedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPFinWaitFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpFinWaitFlagName := fmt.Sprintf("%v.tcpFinWait", cmdPrefix)
	if cmd.Flags().Changed(tcpFinWaitFlagName) {

		var tcpFinWaitFlagName string
		if cmdPrefix == "" {
			tcpFinWaitFlagName = "tcpFinWait"
		} else {
			tcpFinWaitFlagName = fmt.Sprintf("%v.tcpFinWait", cmdPrefix)
		}

		tcpFinWaitFlagValue, err := cmd.Flags().GetInt64(tcpFinWaitFlagName)
		if err != nil {
			return err, false
		}
		m.TCPFinWait = &tcpFinWaitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPLastAckFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpLastAckFlagName := fmt.Sprintf("%v.tcpLastAck", cmdPrefix)
	if cmd.Flags().Changed(tcpLastAckFlagName) {

		var tcpLastAckFlagName string
		if cmdPrefix == "" {
			tcpLastAckFlagName = "tcpLastAck"
		} else {
			tcpLastAckFlagName = fmt.Sprintf("%v.tcpLastAck", cmdPrefix)
		}

		tcpLastAckFlagValue, err := cmd.Flags().GetInt64(tcpLastAckFlagName)
		if err != nil {
			return err, false
		}
		m.TCPLastAck = &tcpLastAckFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPSynRecvFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpSynRecvFlagName := fmt.Sprintf("%v.tcpSynRecv", cmdPrefix)
	if cmd.Flags().Changed(tcpSynRecvFlagName) {

		var tcpSynRecvFlagName string
		if cmdPrefix == "" {
			tcpSynRecvFlagName = "tcpSynRecv"
		} else {
			tcpSynRecvFlagName = fmt.Sprintf("%v.tcpSynRecv", cmdPrefix)
		}

		tcpSynRecvFlagValue, err := cmd.Flags().GetInt64(tcpSynRecvFlagName)
		if err != nil {
			return err, false
		}
		m.TCPSynRecv = &tcpSynRecvFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPSynSentFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpSynSentFlagName := fmt.Sprintf("%v.tcpSynSent", cmdPrefix)
	if cmd.Flags().Changed(tcpSynSentFlagName) {

		var tcpSynSentFlagName string
		if cmdPrefix == "" {
			tcpSynSentFlagName = "tcpSynSent"
		} else {
			tcpSynSentFlagName = fmt.Sprintf("%v.tcpSynSent", cmdPrefix)
		}

		tcpSynSentFlagValue, err := cmd.Flags().GetInt64(tcpSynSentFlagName)
		if err != nil {
			return err, false
		}
		m.TCPSynSent = &tcpSynSentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsTCPTimeWaitFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tcpTimeWaitFlagName := fmt.Sprintf("%v.tcpTimeWait", cmdPrefix)
	if cmd.Flags().Changed(tcpTimeWaitFlagName) {

		var tcpTimeWaitFlagName string
		if cmdPrefix == "" {
			tcpTimeWaitFlagName = "tcpTimeWait"
		} else {
			tcpTimeWaitFlagName = fmt.Sprintf("%v.tcpTimeWait", cmdPrefix)
		}

		tcpTimeWaitFlagValue, err := cmd.Flags().GetInt64(tcpTimeWaitFlagName)
		if err != nil {
			return err, false
		}
		m.TCPTimeWait = &tcpTimeWaitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsUDPOtherFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	udpOtherFlagName := fmt.Sprintf("%v.udpOther", cmdPrefix)
	if cmd.Flags().Changed(udpOtherFlagName) {

		var udpOtherFlagName string
		if cmdPrefix == "" {
			udpOtherFlagName = "udpOther"
		} else {
			udpOtherFlagName = fmt.Sprintf("%v.udpOther", cmdPrefix)
		}

		udpOtherFlagValue, err := cmd.Flags().GetInt64(udpOtherFlagName)
		if err != nil {
			return err, false
		}
		m.UDPOther = &udpOtherFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConntrackTimeoutsUDPStreamFlags(depth int, m *models.ConntrackTimeouts, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	udpStreamFlagName := fmt.Sprintf("%v.udpStream", cmdPrefix)
	if cmd.Flags().Changed(udpStreamFlagName) {

		var udpStreamFlagName string
		if cmdPrefix == "" {
			udpStreamFlagName = "udpStream"
		} else {
			udpStreamFlagName = fmt.Sprintf("%v.udpStream", cmdPrefix)
		}

		udpStreamFlagValue, err := cmd.Flags().GetInt64(udpStreamFlagName)
		if err != nil {
			return err, false
		}
		m.UDPStream = &udpStreamFlagValue

		retAdded = true
	}

	return nil, retAdded
}
