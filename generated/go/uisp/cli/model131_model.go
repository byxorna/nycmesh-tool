// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model131

// register flags to command
func registerModelModel131Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel131Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel131Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel131PortForwards(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel131PppoePassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel131PppoeUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel131Profile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel131WanAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel131Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerModel131Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerModel131PortForwards(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: portForwards PortForwards1 array type is not supported by go-swagger cli yet

	return nil
}

func registerModel131PppoePassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pppoePasswordDescription := ``

	var pppoePasswordFlagName string
	if cmdPrefix == "" {
		pppoePasswordFlagName = "pppoePassword"
	} else {
		pppoePasswordFlagName = fmt.Sprintf("%v.pppoePassword", cmdPrefix)
	}

	var pppoePasswordFlagDefault string

	_ = cmd.PersistentFlags().String(pppoePasswordFlagName, pppoePasswordFlagDefault, pppoePasswordDescription)

	return nil
}

func registerModel131PppoeUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pppoeUserDescription := ``

	var pppoeUserFlagName string
	if cmdPrefix == "" {
		pppoeUserFlagName = "pppoeUser"
	} else {
		pppoeUserFlagName = fmt.Sprintf("%v.pppoeUser", cmdPrefix)
	}

	var pppoeUserFlagDefault string

	_ = cmd.PersistentFlags().String(pppoeUserFlagName, pppoeUserFlagDefault, pppoeUserDescription)

	return nil
}

func registerModel131Profile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	profileDescription := `Required. `

	var profileFlagName string
	if cmdPrefix == "" {
		profileFlagName = "profile"
	} else {
		profileFlagName = fmt.Sprintf("%v.profile", cmdPrefix)
	}

	var profileFlagDefault string

	_ = cmd.PersistentFlags().String(profileFlagName, profileFlagDefault, profileDescription)

	return nil
}

func registerModel131WanAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanAddressDescription := `Required. `

	var wanAddressFlagName string
	if cmdPrefix == "" {
		wanAddressFlagName = "wanAddress"
	} else {
		wanAddressFlagName = fmt.Sprintf("%v.wanAddress", cmdPrefix)
	}

	var wanAddressFlagDefault string

	_ = cmd.PersistentFlags().String(wanAddressFlagName, wanAddressFlagDefault, wanAddressDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel131Flags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveModel131EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, nameAdded := retrieveModel131NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, portForwardsAdded := retrieveModel131PortForwardsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portForwardsAdded

	err, pppoePasswordAdded := retrieveModel131PppoePasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pppoePasswordAdded

	err, pppoeUserAdded := retrieveModel131PppoeUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pppoeUserAdded

	err, profileAdded := retrieveModel131ProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || profileAdded

	err, wanAddressAdded := retrieveModel131WanAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanAddressAdded

	return nil, retAdded
}

func retrieveModel131EnabledFlags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel131NameFlags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel131PortForwardsFlags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portForwardsFlagName := fmt.Sprintf("%v.portForwards", cmdPrefix)
	if cmd.Flags().Changed(portForwardsFlagName) {
		// warning: portForwards array type PortForwards1 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel131PppoePasswordFlags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pppoePasswordFlagName := fmt.Sprintf("%v.pppoePassword", cmdPrefix)
	if cmd.Flags().Changed(pppoePasswordFlagName) {

		var pppoePasswordFlagName string
		if cmdPrefix == "" {
			pppoePasswordFlagName = "pppoePassword"
		} else {
			pppoePasswordFlagName = fmt.Sprintf("%v.pppoePassword", cmdPrefix)
		}

		pppoePasswordFlagValue, err := cmd.Flags().GetString(pppoePasswordFlagName)
		if err != nil {
			return err, false
		}
		m.PppoePassword = pppoePasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel131PppoeUserFlags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pppoeUserFlagName := fmt.Sprintf("%v.pppoeUser", cmdPrefix)
	if cmd.Flags().Changed(pppoeUserFlagName) {

		var pppoeUserFlagName string
		if cmdPrefix == "" {
			pppoeUserFlagName = "pppoeUser"
		} else {
			pppoeUserFlagName = fmt.Sprintf("%v.pppoeUser", cmdPrefix)
		}

		pppoeUserFlagValue, err := cmd.Flags().GetString(pppoeUserFlagName)
		if err != nil {
			return err, false
		}
		m.PppoeUser = pppoeUserFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel131ProfileFlags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	profileFlagName := fmt.Sprintf("%v.profile", cmdPrefix)
	if cmd.Flags().Changed(profileFlagName) {

		var profileFlagName string
		if cmdPrefix == "" {
			profileFlagName = "profile"
		} else {
			profileFlagName = fmt.Sprintf("%v.profile", cmdPrefix)
		}

		profileFlagValue, err := cmd.Flags().GetString(profileFlagName)
		if err != nil {
			return err, false
		}
		m.Profile = &profileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel131WanAddressFlags(depth int, m *models.Model131, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanAddressFlagName := fmt.Sprintf("%v.wanAddress", cmdPrefix)
	if cmd.Flags().Changed(wanAddressFlagName) {

		var wanAddressFlagName string
		if cmdPrefix == "" {
			wanAddressFlagName = "wanAddress"
		} else {
			wanAddressFlagName = fmt.Sprintf("%v.wanAddress", cmdPrefix)
		}

		wanAddressFlagValue, err := cmd.Flags().GetString(wanAddressFlagName)
		if err != nil {
			return err, false
		}
		m.WanAddress = &wanAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}
