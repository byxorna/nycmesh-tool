// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Discovery1

// register flags to command
func registerModelDiscovery1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDiscovery1Responder(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDiscovery1Scanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDiscovery1Responder(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var responderFlagName string
	if cmdPrefix == "" {
		responderFlagName = "responder"
	} else {
		responderFlagName = fmt.Sprintf("%v.responder", cmdPrefix)
	}

	if err := registerModelResponderFlags(depth+1, responderFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDiscovery1Scanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scannerFlagName string
	if cmdPrefix == "" {
		scannerFlagName = "scanner"
	} else {
		scannerFlagName = fmt.Sprintf("%v.scanner", cmdPrefix)
	}

	if err := registerModelScannerFlags(depth+1, scannerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDiscovery1Flags(depth int, m *models.Discovery1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, responderAdded := retrieveDiscovery1ResponderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || responderAdded

	err, scannerAdded := retrieveDiscovery1ScannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scannerAdded

	return nil, retAdded
}

func retrieveDiscovery1ResponderFlags(depth int, m *models.Discovery1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	responderFlagName := fmt.Sprintf("%v.responder", cmdPrefix)
	if cmd.Flags().Changed(responderFlagName) {
		// info: complex object responder Responder is retrieved outside this Changed() block
	}
	responderFlagValue := m.Responder
	if swag.IsZero(responderFlagValue) {
		responderFlagValue = &models.Responder{}
	}

	err, responderAdded := retrieveModelResponderFlags(depth+1, responderFlagValue, responderFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || responderAdded
	if responderAdded {
		m.Responder = responderFlagValue
	}

	return nil, retAdded
}

func retrieveDiscovery1ScannerFlags(depth int, m *models.Discovery1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scannerFlagName := fmt.Sprintf("%v.scanner", cmdPrefix)
	if cmd.Flags().Changed(scannerFlagName) {
		// info: complex object scanner Scanner is retrieved outside this Changed() block
	}
	scannerFlagValue := m.Scanner
	if swag.IsZero(scannerFlagValue) {
		scannerFlagValue = &models.Scanner{}
	}

	err, scannerAdded := retrieveModelScannerFlags(depth+1, scannerFlagValue, scannerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scannerAdded
	if scannerAdded {
		m.Scanner = scannerFlagValue
	}

	return nil, retAdded
}
