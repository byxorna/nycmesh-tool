// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for EditUserPreferences

// register flags to command
func registerModelEditUserPreferencesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEditUserPreferencesAlerts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserPreferencesMapConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserPreferencesPreferences(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEditUserPreferencesTableConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEditUserPreferencesAlerts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	alertsDescription := ``

	var alertsFlagName string
	if cmdPrefix == "" {
		alertsFlagName = "alerts"
	} else {
		alertsFlagName = fmt.Sprintf("%v.alerts", cmdPrefix)
	}

	var alertsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(alertsFlagName, alertsFlagDefault, alertsDescription)

	return nil
}

func registerEditUserPreferencesMapConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var mapConfigFlagName string
	if cmdPrefix == "" {
		mapConfigFlagName = "mapConfig"
	} else {
		mapConfigFlagName = fmt.Sprintf("%v.mapConfig", cmdPrefix)
	}

	if err := registerModelMapConfigFlags(depth+1, mapConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEditUserPreferencesPreferences(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: preferences Preferences map type is not supported by go-swagger cli yet

	return nil
}

func registerEditUserPreferencesTableConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tableConfig TableConfig map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEditUserPreferencesFlags(depth int, m *models.EditUserPreferences, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, alertsAdded := retrieveEditUserPreferencesAlertsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alertsAdded

	err, mapConfigAdded := retrieveEditUserPreferencesMapConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapConfigAdded

	err, preferencesAdded := retrieveEditUserPreferencesPreferencesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || preferencesAdded

	err, tableConfigAdded := retrieveEditUserPreferencesTableConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableConfigAdded

	return nil, retAdded
}

func retrieveEditUserPreferencesAlertsFlags(depth int, m *models.EditUserPreferences, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alertsFlagName := fmt.Sprintf("%v.alerts", cmdPrefix)
	if cmd.Flags().Changed(alertsFlagName) {

		var alertsFlagName string
		if cmdPrefix == "" {
			alertsFlagName = "alerts"
		} else {
			alertsFlagName = fmt.Sprintf("%v.alerts", cmdPrefix)
		}

		alertsFlagValue, err := cmd.Flags().GetBool(alertsFlagName)
		if err != nil {
			return err, false
		}
		m.Alerts = alertsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEditUserPreferencesMapConfigFlags(depth int, m *models.EditUserPreferences, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapConfigFlagName := fmt.Sprintf("%v.mapConfig", cmdPrefix)
	if cmd.Flags().Changed(mapConfigFlagName) {
		// info: complex object mapConfig MapConfig is retrieved outside this Changed() block
	}
	mapConfigFlagValue := m.MapConfig
	if swag.IsZero(mapConfigFlagValue) {
		mapConfigFlagValue = &models.MapConfig{}
	}

	err, mapConfigAdded := retrieveModelMapConfigFlags(depth+1, mapConfigFlagValue, mapConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapConfigAdded
	if mapConfigAdded {
		m.MapConfig = mapConfigFlagValue
	}

	return nil, retAdded
}

func retrieveEditUserPreferencesPreferencesFlags(depth int, m *models.EditUserPreferences, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	preferencesFlagName := fmt.Sprintf("%v.preferences", cmdPrefix)
	if cmd.Flags().Changed(preferencesFlagName) {
		// warning: preferences map type Preferences is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEditUserPreferencesTableConfigFlags(depth int, m *models.EditUserPreferences, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableConfigFlagName := fmt.Sprintf("%v.tableConfig", cmdPrefix)
	if cmd.Flags().Changed(tableConfigFlagName) {
		// warning: tableConfig map type TableConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
