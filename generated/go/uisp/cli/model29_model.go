// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model29

// register flags to command
func registerModelModel29Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel29Dynamic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel29ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel29Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel29Participation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel29Type(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel29Dynamic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dynamicDescription := ``

	var dynamicFlagName string
	if cmdPrefix == "" {
		dynamicFlagName = "dynamic"
	} else {
		dynamicFlagName = fmt.Sprintf("%v.dynamic", cmdPrefix)
	}

	var dynamicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dynamicFlagName, dynamicFlagDefault, dynamicDescription)

	return nil
}

func registerModel29ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. VLAN id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel29Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. VLAN name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerModel29Participation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: participation Participation array type is not supported by go-swagger cli yet

	return nil
}

func registerModel29Type(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["single"]. Required. VLAN type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["single"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel29Flags(depth int, m *models.Model29, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dynamicAdded := retrieveModel29DynamicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dynamicAdded

	err, idAdded := retrieveModel29IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveModel29NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, participationAdded := retrieveModel29ParticipationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || participationAdded

	err, typeAdded := retrieveModel29TypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveModel29DynamicFlags(depth int, m *models.Model29, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dynamicFlagName := fmt.Sprintf("%v.dynamic", cmdPrefix)
	if cmd.Flags().Changed(dynamicFlagName) {

		var dynamicFlagName string
		if cmdPrefix == "" {
			dynamicFlagName = "dynamic"
		} else {
			dynamicFlagName = fmt.Sprintf("%v.dynamic", cmdPrefix)
		}

		dynamicFlagValue, err := cmd.Flags().GetBool(dynamicFlagName)
		if err != nil {
			return err, false
		}
		m.Dynamic = dynamicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel29IDFlags(depth int, m *models.Model29, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel29NameFlags(depth int, m *models.Model29, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel29ParticipationFlags(depth int, m *models.Model29, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	participationFlagName := fmt.Sprintf("%v.participation", cmdPrefix)
	if cmd.Flags().Changed(participationFlagName) {
		// warning: participation array type Participation is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel29TypeFlags(depth int, m *models.Model29, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
