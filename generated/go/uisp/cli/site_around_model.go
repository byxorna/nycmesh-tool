// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for SiteAround

// register flags to command
func registerModelSiteAroundFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSiteAroundAirmaxMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundBandString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundEncryption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundIsAirmaxEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundIsWirelessModeValid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundNoiseLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundSignalLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteAroundValidEncryption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteAroundAirmaxMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	airmaxModeDescription := ``

	var airmaxModeFlagName string
	if cmdPrefix == "" {
		airmaxModeFlagName = "airmaxMode"
	} else {
		airmaxModeFlagName = fmt.Sprintf("%v.airmaxMode", cmdPrefix)
	}

	var airmaxModeFlagDefault string

	_ = cmd.PersistentFlags().String(airmaxModeFlagName, airmaxModeFlagDefault, airmaxModeDescription)

	return nil
}

func registerSiteAroundBandString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bandStringDescription := ``

	var bandStringFlagName string
	if cmdPrefix == "" {
		bandStringFlagName = "bandString"
	} else {
		bandStringFlagName = fmt.Sprintf("%v.bandString", cmdPrefix)
	}

	var bandStringFlagDefault string

	_ = cmd.PersistentFlags().String(bandStringFlagName, bandStringFlagDefault, bandStringDescription)

	return nil
}

func registerSiteAroundEncryption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encryptionDescription := `Enum: ["wep","wpa","wpa-psk","wpa2","enabled","none"]. `

	var encryptionFlagName string
	if cmdPrefix == "" {
		encryptionFlagName = "encryption"
	} else {
		encryptionFlagName = fmt.Sprintf("%v.encryption", cmdPrefix)
	}

	var encryptionFlagDefault string

	_ = cmd.PersistentFlags().String(encryptionFlagName, encryptionFlagDefault, encryptionDescription)

	if err := cmd.RegisterFlagCompletionFunc(encryptionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteAroundFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := ``

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	return nil
}

func registerSiteAroundHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerSiteAroundID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerSiteAroundIsAirmaxEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isAirmaxEnabledDescription := ``

	var isAirmaxEnabledFlagName string
	if cmdPrefix == "" {
		isAirmaxEnabledFlagName = "isAirmaxEnabled"
	} else {
		isAirmaxEnabledFlagName = fmt.Sprintf("%v.isAirmaxEnabled", cmdPrefix)
	}

	var isAirmaxEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isAirmaxEnabledFlagName, isAirmaxEnabledFlagDefault, isAirmaxEnabledDescription)

	return nil
}

func registerSiteAroundIsWirelessModeValid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isWirelessModeValidDescription := ``

	var isWirelessModeValidFlagName string
	if cmdPrefix == "" {
		isWirelessModeValidFlagName = "isWirelessModeValid"
	} else {
		isWirelessModeValidFlagName = fmt.Sprintf("%v.isWirelessModeValid", cmdPrefix)
	}

	var isWirelessModeValidFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isWirelessModeValidFlagName, isWirelessModeValidFlagDefault, isWirelessModeValidDescription)

	return nil
}

func registerSiteAroundMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := ``

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

func registerSiteAroundMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := ``

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	return nil
}

func registerSiteAroundName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSiteAroundNoiseLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noiseLevelDescription := ``

	var noiseLevelFlagName string
	if cmdPrefix == "" {
		noiseLevelFlagName = "noiseLevel"
	} else {
		noiseLevelFlagName = fmt.Sprintf("%v.noiseLevel", cmdPrefix)
	}

	var noiseLevelFlagDefault float64

	_ = cmd.PersistentFlags().Float64(noiseLevelFlagName, noiseLevelFlagDefault, noiseLevelDescription)

	return nil
}

func registerSiteAroundSignalLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signalLevelDescription := ``

	var signalLevelFlagName string
	if cmdPrefix == "" {
		signalLevelFlagName = "signalLevel"
	} else {
		signalLevelFlagName = fmt.Sprintf("%v.signalLevel", cmdPrefix)
	}

	var signalLevelFlagDefault float64

	_ = cmd.PersistentFlags().Float64(signalLevelFlagName, signalLevelFlagDefault, signalLevelDescription)

	return nil
}

func registerSiteAroundSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := `SSID`

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerSiteAroundValidEncryption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	validEncryptionDescription := ``

	var validEncryptionFlagName string
	if cmdPrefix == "" {
		validEncryptionFlagName = "validEncryption"
	} else {
		validEncryptionFlagName = fmt.Sprintf("%v.validEncryption", cmdPrefix)
	}

	var validEncryptionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(validEncryptionFlagName, validEncryptionFlagDefault, validEncryptionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSiteAroundFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, airmaxModeAdded := retrieveSiteAroundAirmaxModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || airmaxModeAdded

	err, bandStringAdded := retrieveSiteAroundBandStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bandStringAdded

	err, encryptionAdded := retrieveSiteAroundEncryptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encryptionAdded

	err, frequencyAdded := retrieveSiteAroundFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, hostnameAdded := retrieveSiteAroundHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, idAdded := retrieveSiteAroundIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, isAirmaxEnabledAdded := retrieveSiteAroundIsAirmaxEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isAirmaxEnabledAdded

	err, isWirelessModeValidAdded := retrieveSiteAroundIsWirelessModeValidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isWirelessModeValidAdded

	err, macAdded := retrieveSiteAroundMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	err, modeAdded := retrieveSiteAroundModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, nameAdded := retrieveSiteAroundNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, noiseLevelAdded := retrieveSiteAroundNoiseLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noiseLevelAdded

	err, signalLevelAdded := retrieveSiteAroundSignalLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalLevelAdded

	err, ssidAdded := retrieveSiteAroundSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, validEncryptionAdded := retrieveSiteAroundValidEncryptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || validEncryptionAdded

	return nil, retAdded
}

func retrieveSiteAroundAirmaxModeFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	airmaxModeFlagName := fmt.Sprintf("%v.airmaxMode", cmdPrefix)
	if cmd.Flags().Changed(airmaxModeFlagName) {

		var airmaxModeFlagName string
		if cmdPrefix == "" {
			airmaxModeFlagName = "airmaxMode"
		} else {
			airmaxModeFlagName = fmt.Sprintf("%v.airmaxMode", cmdPrefix)
		}

		airmaxModeFlagValue, err := cmd.Flags().GetString(airmaxModeFlagName)
		if err != nil {
			return err, false
		}
		m.AirmaxMode = airmaxModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundBandStringFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bandStringFlagName := fmt.Sprintf("%v.bandString", cmdPrefix)
	if cmd.Flags().Changed(bandStringFlagName) {

		var bandStringFlagName string
		if cmdPrefix == "" {
			bandStringFlagName = "bandString"
		} else {
			bandStringFlagName = fmt.Sprintf("%v.bandString", cmdPrefix)
		}

		bandStringFlagValue, err := cmd.Flags().GetString(bandStringFlagName)
		if err != nil {
			return err, false
		}
		m.BandString = bandStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundEncryptionFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encryptionFlagName := fmt.Sprintf("%v.encryption", cmdPrefix)
	if cmd.Flags().Changed(encryptionFlagName) {

		var encryptionFlagName string
		if cmdPrefix == "" {
			encryptionFlagName = "encryption"
		} else {
			encryptionFlagName = fmt.Sprintf("%v.encryption", cmdPrefix)
		}

		encryptionFlagValue, err := cmd.Flags().GetString(encryptionFlagName)
		if err != nil {
			return err, false
		}
		m.Encryption = encryptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundFrequencyFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetFloat64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundHostnameFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundIDFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundIsAirmaxEnabledFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isAirmaxEnabledFlagName := fmt.Sprintf("%v.isAirmaxEnabled", cmdPrefix)
	if cmd.Flags().Changed(isAirmaxEnabledFlagName) {

		var isAirmaxEnabledFlagName string
		if cmdPrefix == "" {
			isAirmaxEnabledFlagName = "isAirmaxEnabled"
		} else {
			isAirmaxEnabledFlagName = fmt.Sprintf("%v.isAirmaxEnabled", cmdPrefix)
		}

		isAirmaxEnabledFlagValue, err := cmd.Flags().GetBool(isAirmaxEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsAirmaxEnabled = isAirmaxEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundIsWirelessModeValidFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isWirelessModeValidFlagName := fmt.Sprintf("%v.isWirelessModeValid", cmdPrefix)
	if cmd.Flags().Changed(isWirelessModeValidFlagName) {

		var isWirelessModeValidFlagName string
		if cmdPrefix == "" {
			isWirelessModeValidFlagName = "isWirelessModeValid"
		} else {
			isWirelessModeValidFlagName = fmt.Sprintf("%v.isWirelessModeValid", cmdPrefix)
		}

		isWirelessModeValidFlagValue, err := cmd.Flags().GetBool(isWirelessModeValidFlagName)
		if err != nil {
			return err, false
		}
		m.IsWirelessModeValid = isWirelessModeValidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundMacFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = macFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundModeFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundNameFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundNoiseLevelFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noiseLevelFlagName := fmt.Sprintf("%v.noiseLevel", cmdPrefix)
	if cmd.Flags().Changed(noiseLevelFlagName) {

		var noiseLevelFlagName string
		if cmdPrefix == "" {
			noiseLevelFlagName = "noiseLevel"
		} else {
			noiseLevelFlagName = fmt.Sprintf("%v.noiseLevel", cmdPrefix)
		}

		noiseLevelFlagValue, err := cmd.Flags().GetFloat64(noiseLevelFlagName)
		if err != nil {
			return err, false
		}
		m.NoiseLevel = noiseLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundSignalLevelFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalLevelFlagName := fmt.Sprintf("%v.signalLevel", cmdPrefix)
	if cmd.Flags().Changed(signalLevelFlagName) {

		var signalLevelFlagName string
		if cmdPrefix == "" {
			signalLevelFlagName = "signalLevel"
		} else {
			signalLevelFlagName = fmt.Sprintf("%v.signalLevel", cmdPrefix)
		}

		signalLevelFlagValue, err := cmd.Flags().GetFloat64(signalLevelFlagName)
		if err != nil {
			return err, false
		}
		m.SignalLevel = signalLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundSsidFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteAroundValidEncryptionFlags(depth int, m *models.SiteAround, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	validEncryptionFlagName := fmt.Sprintf("%v.validEncryption", cmdPrefix)
	if cmd.Flags().Changed(validEncryptionFlagName) {

		var validEncryptionFlagName string
		if cmdPrefix == "" {
			validEncryptionFlagName = "validEncryption"
		} else {
			validEncryptionFlagName = fmt.Sprintf("%v.validEncryption", cmdPrefix)
		}

		validEncryptionFlagValue, err := cmd.Flags().GetBool(validEncryptionFlagName)
		if err != nil {
			return err, false
		}
		m.ValidEncryption = validEncryptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
