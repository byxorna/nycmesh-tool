// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Vlans1

// register flags to command
func registerModelVlans1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVlans1Interface(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVlans1VlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVlans1Interface(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var interfaceFlagName string
	if cmdPrefix == "" {
		interfaceFlagName = "interface"
	} else {
		interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
	}

	if err := registerModelInterface1Flags(depth+1, interfaceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVlans1VlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: vlanId VlanID map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVlans1Flags(depth int, m *models.Vlans1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, interfaceAdded := retrieveVlans1InterfaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceAdded

	err, vlanIdAdded := retrieveVlans1VlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlanIdAdded

	return nil, retAdded
}

func retrieveVlans1InterfaceFlags(depth int, m *models.Vlans1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceFlagName := fmt.Sprintf("%v.interface", cmdPrefix)
	if cmd.Flags().Changed(interfaceFlagName) {
		// info: complex object interface Interface1 is retrieved outside this Changed() block
	}
	interfaceFlagValue := m.Interface
	if swag.IsZero(interfaceFlagValue) {
		interfaceFlagValue = &models.Interface1{}
	}

	err, interfaceAdded := retrieveModelInterface1Flags(depth+1, interfaceFlagValue, interfaceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceAdded
	if interfaceAdded {
		m.Interface = interfaceFlagValue
	}

	return nil, retAdded
}

func retrieveVlans1VlanIDFlags(depth int, m *models.Vlans1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlanIdFlagName := fmt.Sprintf("%v.vlanId", cmdPrefix)
	if cmd.Flags().Changed(vlanIdFlagName) {
		// warning: vlanId map type VlanID is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
