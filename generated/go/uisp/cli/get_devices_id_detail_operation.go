// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/client/devices"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDevicesGetDevicesIDDetailCmd returns a cmd to handle operation getDevicesIdDetail
func makeOperationDevicesGetDevicesIDDetailCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getDevicesIdDetail",
		Short: ``,
		RunE:  runOperationDevicesGetDevicesIDDetail,
	}

	if err := registerOperationDevicesGetDevicesIDDetailParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDevicesGetDevicesIDDetail uses cmd flags to call endpoint api
func runOperationDevicesGetDevicesIDDetail(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := devices.NewGetDevicesIDDetailParams()
	if err, _ := retrieveOperationDevicesGetDevicesIDDetailIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDevicesGetDevicesIDDetailWithStationsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDevicesGetDevicesIDDetailResult(appCli.Devices.GetDevicesIDDetail(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDevicesGetDevicesIDDetailParamFlags registers all flags needed to fill params
func registerOperationDevicesGetDevicesIDDetailParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDevicesGetDevicesIDDetailIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDevicesGetDevicesIDDetailWithStationsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDevicesGetDevicesIDDetailIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationDevicesGetDevicesIDDetailWithStationsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withStationsDescription := ``

	var withStationsFlagName string
	if cmdPrefix == "" {
		withStationsFlagName = "withStations"
	} else {
		withStationsFlagName = fmt.Sprintf("%v.withStations", cmdPrefix)
	}

	var withStationsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withStationsFlagName, withStationsFlagDefault, withStationsDescription)

	return nil
}

func retrieveOperationDevicesGetDevicesIDDetailIDFlag(m *devices.GetDevicesIDDetailParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDevicesGetDevicesIDDetailWithStationsFlag(m *devices.GetDevicesIDDetailParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("withStations") {

		var withStationsFlagName string
		if cmdPrefix == "" {
			withStationsFlagName = "withStations"
		} else {
			withStationsFlagName = fmt.Sprintf("%v.withStations", cmdPrefix)
		}

		withStationsFlagValue, err := cmd.Flags().GetBool(withStationsFlagName)
		if err != nil {
			return err, false
		}
		m.WithStations = &withStationsFlagValue

	}
	return nil, retAdded
}

// parseOperationDevicesGetDevicesIDDetailResult parses request result and return the string content
func parseOperationDevicesGetDevicesIDDetailResult(resp0 *devices.GetDevicesIDDetailOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*devices.GetDevicesIDDetailOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*devices.GetDevicesIDDetailBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*devices.GetDevicesIDDetailUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*devices.GetDevicesIDDetailForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*devices.GetDevicesIDDetailNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*devices.GetDevicesIDDetailInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
