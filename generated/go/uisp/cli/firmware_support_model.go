// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for FirmwareSupport

// register flags to command
func registerModelFirmwareSupportFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFirmwareSupportUNMS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareSupportAirMaxCustomScripts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFirmwareSupportUNMS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uNMSDescription := ``

	var uNMSFlagName string
	if cmdPrefix == "" {
		uNMSFlagName = "UNMS"
	} else {
		uNMSFlagName = fmt.Sprintf("%v.UNMS", cmdPrefix)
	}

	var uNMSFlagDefault bool

	_ = cmd.PersistentFlags().Bool(uNMSFlagName, uNMSFlagDefault, uNMSDescription)

	return nil
}

func registerFirmwareSupportAirMaxCustomScripts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	airMaxCustomScriptsDescription := ``

	var airMaxCustomScriptsFlagName string
	if cmdPrefix == "" {
		airMaxCustomScriptsFlagName = "airMaxCustomScripts"
	} else {
		airMaxCustomScriptsFlagName = fmt.Sprintf("%v.airMaxCustomScripts", cmdPrefix)
	}

	var airMaxCustomScriptsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(airMaxCustomScriptsFlagName, airMaxCustomScriptsFlagDefault, airMaxCustomScriptsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFirmwareSupportFlags(depth int, m *models.FirmwareSupport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, uNMSAdded := retrieveFirmwareSupportUNMSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uNMSAdded

	err, airMaxCustomScriptsAdded := retrieveFirmwareSupportAirMaxCustomScriptsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || airMaxCustomScriptsAdded

	return nil, retAdded
}

func retrieveFirmwareSupportUNMSFlags(depth int, m *models.FirmwareSupport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uNMSFlagName := fmt.Sprintf("%v.UNMS", cmdPrefix)
	if cmd.Flags().Changed(uNMSFlagName) {

		var uNMSFlagName string
		if cmdPrefix == "" {
			uNMSFlagName = "UNMS"
		} else {
			uNMSFlagName = fmt.Sprintf("%v.UNMS", cmdPrefix)
		}

		uNMSFlagValue, err := cmd.Flags().GetBool(uNMSFlagName)
		if err != nil {
			return err, false
		}
		m.UNMS = uNMSFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareSupportAirMaxCustomScriptsFlags(depth int, m *models.FirmwareSupport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	airMaxCustomScriptsFlagName := fmt.Sprintf("%v.airMaxCustomScripts", cmdPrefix)
	if cmd.Flags().Changed(airMaxCustomScriptsFlagName) {

		var airMaxCustomScriptsFlagName string
		if cmdPrefix == "" {
			airMaxCustomScriptsFlagName = "airMaxCustomScripts"
		} else {
			airMaxCustomScriptsFlagName = fmt.Sprintf("%v.airMaxCustomScripts", cmdPrefix)
		}

		airMaxCustomScriptsFlagValue, err := cmd.Flags().GetBool(airMaxCustomScriptsFlagName)
		if err != nil {
			return err, false
		}
		m.AirMaxCustomScripts = airMaxCustomScriptsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
