// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for SnmpAgent

// register flags to command
func registerModelSnmpAgentFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSnmpAgentCommunity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSnmpAgentContact(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSnmpAgentEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSnmpAgentLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSnmpAgentCommunity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	communityDescription := `User ID or password that allows access to device's statistics.`

	var communityFlagName string
	if cmdPrefix == "" {
		communityFlagName = "community"
	} else {
		communityFlagName = fmt.Sprintf("%v.community", cmdPrefix)
	}

	var communityFlagDefault string

	_ = cmd.PersistentFlags().String(communityFlagName, communityFlagDefault, communityDescription)

	return nil
}

func registerSnmpAgentContact(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contactDescription := `SNMP server's contact person.`

	var contactFlagName string
	if cmdPrefix == "" {
		contactFlagName = "contact"
	} else {
		contactFlagName = fmt.Sprintf("%v.contact", cmdPrefix)
	}

	var contactFlagDefault string

	_ = cmd.PersistentFlags().String(contactFlagName, contactFlagDefault, contactDescription)

	return nil
}

func registerSnmpAgentEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerSnmpAgentLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	locationDescription := `SNMP server's location.`

	var locationFlagName string
	if cmdPrefix == "" {
		locationFlagName = "location"
	} else {
		locationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	var locationFlagDefault string

	_ = cmd.PersistentFlags().String(locationFlagName, locationFlagDefault, locationDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSnmpAgentFlags(depth int, m *models.SnmpAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, communityAdded := retrieveSnmpAgentCommunityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || communityAdded

	err, contactAdded := retrieveSnmpAgentContactFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contactAdded

	err, enabledAdded := retrieveSnmpAgentEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, locationAdded := retrieveSnmpAgentLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded

	return nil, retAdded
}

func retrieveSnmpAgentCommunityFlags(depth int, m *models.SnmpAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	communityFlagName := fmt.Sprintf("%v.community", cmdPrefix)
	if cmd.Flags().Changed(communityFlagName) {

		var communityFlagName string
		if cmdPrefix == "" {
			communityFlagName = "community"
		} else {
			communityFlagName = fmt.Sprintf("%v.community", cmdPrefix)
		}

		communityFlagValue, err := cmd.Flags().GetString(communityFlagName)
		if err != nil {
			return err, false
		}
		m.Community = communityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSnmpAgentContactFlags(depth int, m *models.SnmpAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contactFlagName := fmt.Sprintf("%v.contact", cmdPrefix)
	if cmd.Flags().Changed(contactFlagName) {

		var contactFlagName string
		if cmdPrefix == "" {
			contactFlagName = "contact"
		} else {
			contactFlagName = fmt.Sprintf("%v.contact", cmdPrefix)
		}

		contactFlagValue, err := cmd.Flags().GetString(contactFlagName)
		if err != nil {
			return err, false
		}
		m.Contact = contactFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSnmpAgentEnabledFlags(depth int, m *models.SnmpAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSnmpAgentLocationFlags(depth int, m *models.SnmpAgent, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	locationFlagName := fmt.Sprintf("%v.location", cmdPrefix)
	if cmd.Flags().Changed(locationFlagName) {

		var locationFlagName string
		if cmdPrefix == "" {
			locationFlagName = "location"
		} else {
			locationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
		}

		locationFlagValue, err := cmd.Flags().GetString(locationFlagName)
		if err != nil {
			return err, false
		}
		m.Location = locationFlagValue

		retAdded = true
	}

	return nil, retAdded
}
