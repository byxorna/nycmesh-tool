// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for RouterRoute1

// register flags to command
func registerModelRouterRoute1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRouterRoute1Description(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouterRoute1Destination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouterRoute1Distance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRouterRoute1StaticType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRouterRoute1Description(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerRouterRoute1Destination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	destinationDescription := `Required. `

	var destinationFlagName string
	if cmdPrefix == "" {
		destinationFlagName = "destination"
	} else {
		destinationFlagName = fmt.Sprintf("%v.destination", cmdPrefix)
	}

	var destinationFlagDefault string

	_ = cmd.PersistentFlags().String(destinationFlagName, destinationFlagDefault, destinationDescription)

	return nil
}

func registerRouterRoute1Distance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distanceDescription := ``

	var distanceFlagName string
	if cmdPrefix == "" {
		distanceFlagName = "distance"
	} else {
		distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
	}

	var distanceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(distanceFlagName, distanceFlagDefault, distanceDescription)

	return nil
}

func registerRouterRoute1StaticType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	staticTypeDescription := `Enum: ["interface","blackhole","gateway"]. Required. `

	var staticTypeFlagName string
	if cmdPrefix == "" {
		staticTypeFlagName = "staticType"
	} else {
		staticTypeFlagName = fmt.Sprintf("%v.staticType", cmdPrefix)
	}

	var staticTypeFlagDefault string

	_ = cmd.PersistentFlags().String(staticTypeFlagName, staticTypeFlagDefault, staticTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(staticTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["interface","blackhole","gateway"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRouterRoute1Flags(depth int, m *models.RouterRoute1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveRouterRoute1DescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, destinationAdded := retrieveRouterRoute1DestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || destinationAdded

	err, distanceAdded := retrieveRouterRoute1DistanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distanceAdded

	err, staticTypeAdded := retrieveRouterRoute1StaticTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || staticTypeAdded

	return nil, retAdded
}

func retrieveRouterRoute1DescriptionFlags(depth int, m *models.RouterRoute1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouterRoute1DestinationFlags(depth int, m *models.RouterRoute1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	destinationFlagName := fmt.Sprintf("%v.destination", cmdPrefix)
	if cmd.Flags().Changed(destinationFlagName) {

		var destinationFlagName string
		if cmdPrefix == "" {
			destinationFlagName = "destination"
		} else {
			destinationFlagName = fmt.Sprintf("%v.destination", cmdPrefix)
		}

		destinationFlagValue, err := cmd.Flags().GetString(destinationFlagName)
		if err != nil {
			return err, false
		}
		m.Destination = &destinationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouterRoute1DistanceFlags(depth int, m *models.RouterRoute1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distanceFlagName := fmt.Sprintf("%v.distance", cmdPrefix)
	if cmd.Flags().Changed(distanceFlagName) {

		var distanceFlagName string
		if cmdPrefix == "" {
			distanceFlagName = "distance"
		} else {
			distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
		}

		distanceFlagValue, err := cmd.Flags().GetFloat64(distanceFlagName)
		if err != nil {
			return err, false
		}
		m.Distance = distanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRouterRoute1StaticTypeFlags(depth int, m *models.RouterRoute1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	staticTypeFlagName := fmt.Sprintf("%v.staticType", cmdPrefix)
	if cmd.Flags().Changed(staticTypeFlagName) {

		var staticTypeFlagName string
		if cmdPrefix == "" {
			staticTypeFlagName = "staticType"
		} else {
			staticTypeFlagName = fmt.Sprintf("%v.staticType", cmdPrefix)
		}

		staticTypeFlagValue, err := cmd.Flags().GetString(staticTypeFlagName)
		if err != nil {
			return err, false
		}
		m.StaticType = &staticTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
