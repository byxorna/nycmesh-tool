// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceImport

// register flags to command
func registerModelDeviceImportFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceImportDeviceRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportHTTPSPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportInterfaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportSnmpCommunity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportSSHPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportUbntDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceImportUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceImportDeviceRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceRoleDescription := `Enum: ["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]. Required. `

	var deviceRoleFlagName string
	if cmdPrefix == "" {
		deviceRoleFlagName = "deviceRole"
	} else {
		deviceRoleFlagName = fmt.Sprintf("%v.deviceRole", cmdPrefix)
	}

	var deviceRoleFlagDefault string

	_ = cmd.PersistentFlags().String(deviceRoleFlagName, deviceRoleFlagDefault, deviceRoleDescription)

	if err := cmd.RegisterFlagCompletionFunc(deviceRoleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceImportHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `Required. `

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerDeviceImportHTTPSPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpsPortDescription := ``

	var httpsPortFlagName string
	if cmdPrefix == "" {
		httpsPortFlagName = "httpsPort"
	} else {
		httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
	}

	var httpsPortFlagDefault int64 = 443

	_ = cmd.PersistentFlags().Int64(httpsPortFlagName, httpsPortFlagDefault, httpsPortDescription)

	return nil
}

func registerDeviceImportInterfaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: interfaces DeviceImportInterfaces array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceImportIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipDescription := ``

	var ipFlagName string
	if cmdPrefix == "" {
		ipFlagName = "ip"
	} else {
		ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
	}

	var ipFlagDefault string

	_ = cmd.PersistentFlags().String(ipFlagName, ipFlagDefault, ipDescription)

	return nil
}

func registerDeviceImportMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := ``

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

func registerDeviceImportModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := ``

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	return nil
}

func registerDeviceImportNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noteDescription := ``

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "note"
	} else {
		noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}

func registerDeviceImportPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerDeviceImportSnmpCommunity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snmpCommunityDescription := ``

	var snmpCommunityFlagName string
	if cmdPrefix == "" {
		snmpCommunityFlagName = "snmpCommunity"
	} else {
		snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	}

	var snmpCommunityFlagDefault string = "public"

	_ = cmd.PersistentFlags().String(snmpCommunityFlagName, snmpCommunityFlagDefault, snmpCommunityDescription)

	return nil
}

func registerDeviceImportSSHPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sshPortDescription := ``

	var sshPortFlagName string
	if cmdPrefix == "" {
		sshPortFlagName = "sshPort"
	} else {
		sshPortFlagName = fmt.Sprintf("%v.sshPort", cmdPrefix)
	}

	var sshPortFlagDefault int64 = 22

	_ = cmd.PersistentFlags().Int64(sshPortFlagName, sshPortFlagDefault, sshPortDescription)

	return nil
}

func registerDeviceImportUbntDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ubntDeviceDescription := `Required. `

	var ubntDeviceFlagName string
	if cmdPrefix == "" {
		ubntDeviceFlagName = "ubntDevice"
	} else {
		ubntDeviceFlagName = fmt.Sprintf("%v.ubntDevice", cmdPrefix)
	}

	var ubntDeviceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ubntDeviceFlagName, ubntDeviceFlagDefault, ubntDeviceDescription)

	return nil
}

func registerDeviceImportUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceImportFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceRoleAdded := retrieveDeviceImportDeviceRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceRoleAdded

	err, hostnameAdded := retrieveDeviceImportHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, httpsPortAdded := retrieveDeviceImportHTTPSPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpsPortAdded

	err, interfacesAdded := retrieveDeviceImportInterfacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfacesAdded

	err, ipAdded := retrieveDeviceImportIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAdded

	err, macAdded := retrieveDeviceImportMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	err, modelAdded := retrieveDeviceImportModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, noteAdded := retrieveDeviceImportNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noteAdded

	err, passwordAdded := retrieveDeviceImportPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, snmpCommunityAdded := retrieveDeviceImportSnmpCommunityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snmpCommunityAdded

	err, sshPortAdded := retrieveDeviceImportSSHPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshPortAdded

	err, ubntDeviceAdded := retrieveDeviceImportUbntDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ubntDeviceAdded

	err, usernameAdded := retrieveDeviceImportUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveDeviceImportDeviceRoleFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceRoleFlagName := fmt.Sprintf("%v.deviceRole", cmdPrefix)
	if cmd.Flags().Changed(deviceRoleFlagName) {

		var deviceRoleFlagName string
		if cmdPrefix == "" {
			deviceRoleFlagName = "deviceRole"
		} else {
			deviceRoleFlagName = fmt.Sprintf("%v.deviceRole", cmdPrefix)
		}

		deviceRoleFlagValue, err := cmd.Flags().GetString(deviceRoleFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceRole = &deviceRoleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportHostnameFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = &hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportHTTPSPortFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpsPortFlagName := fmt.Sprintf("%v.httpsPort", cmdPrefix)
	if cmd.Flags().Changed(httpsPortFlagName) {

		var httpsPortFlagName string
		if cmdPrefix == "" {
			httpsPortFlagName = "httpsPort"
		} else {
			httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
		}

		httpsPortFlagValue, err := cmd.Flags().GetInt64(httpsPortFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPSPort = httpsPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportInterfacesFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfacesFlagName := fmt.Sprintf("%v.interfaces", cmdPrefix)
	if cmd.Flags().Changed(interfacesFlagName) {
		// warning: interfaces array type DeviceImportInterfaces is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceImportIPFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipFlagName := fmt.Sprintf("%v.ip", cmdPrefix)
	if cmd.Flags().Changed(ipFlagName) {

		var ipFlagName string
		if cmdPrefix == "" {
			ipFlagName = "ip"
		} else {
			ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
		}

		ipFlagValue, err := cmd.Flags().GetString(ipFlagName)
		if err != nil {
			return err, false
		}
		m.IP = ipFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportMacFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = macFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportModelFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportNoteFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noteFlagName := fmt.Sprintf("%v.note", cmdPrefix)
	if cmd.Flags().Changed(noteFlagName) {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "note"
		} else {
			noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = noteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportPasswordFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportSnmpCommunityFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snmpCommunityFlagName := fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	if cmd.Flags().Changed(snmpCommunityFlagName) {

		var snmpCommunityFlagName string
		if cmdPrefix == "" {
			snmpCommunityFlagName = "snmpCommunity"
		} else {
			snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
		}

		snmpCommunityFlagValue, err := cmd.Flags().GetString(snmpCommunityFlagName)
		if err != nil {
			return err, false
		}
		m.SnmpCommunity = &snmpCommunityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportSSHPortFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshPortFlagName := fmt.Sprintf("%v.sshPort", cmdPrefix)
	if cmd.Flags().Changed(sshPortFlagName) {

		var sshPortFlagName string
		if cmdPrefix == "" {
			sshPortFlagName = "sshPort"
		} else {
			sshPortFlagName = fmt.Sprintf("%v.sshPort", cmdPrefix)
		}

		sshPortFlagValue, err := cmd.Flags().GetInt64(sshPortFlagName)
		if err != nil {
			return err, false
		}
		m.SSHPort = sshPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportUbntDeviceFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ubntDeviceFlagName := fmt.Sprintf("%v.ubntDevice", cmdPrefix)
	if cmd.Flags().Changed(ubntDeviceFlagName) {

		var ubntDeviceFlagName string
		if cmdPrefix == "" {
			ubntDeviceFlagName = "ubntDevice"
		} else {
			ubntDeviceFlagName = fmt.Sprintf("%v.ubntDevice", cmdPrefix)
		}

		ubntDeviceFlagValue, err := cmd.Flags().GetBool(ubntDeviceFlagName)
		if err != nil {
			return err, false
		}
		m.UbntDevice = &ubntDeviceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceImportUsernameFlags(depth int, m *models.DeviceImport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
