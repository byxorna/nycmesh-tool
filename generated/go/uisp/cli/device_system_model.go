// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for DeviceSystem

// register flags to command
func registerModelDeviceSystemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceSystemAccessFromSfp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemAdmin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemClientIsolation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemDhcpOption82(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemDns1(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemDns2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemDNSServers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemDomainName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIgmpSnooping(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemInbandManagementVlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIPV4Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIPV4AddressType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIPV4Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIPV6AddressType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIPV6Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemIPV6SlaacEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemJumboMtu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemMtu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemReadOnlyAccount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemStp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemTimezone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemAccessFromSfp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessFromSfpDescription := `Set to true to allow access from SFP`

	var accessFromSfpFlagName string
	if cmdPrefix == "" {
		accessFromSfpFlagName = "accessFromSfp"
	} else {
		accessFromSfpFlagName = fmt.Sprintf("%v.accessFromSfp", cmdPrefix)
	}

	var accessFromSfpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(accessFromSfpFlagName, accessFromSfpFlagDefault, accessFromSfpDescription)

	return nil
}

func registerDeviceSystemAdmin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var adminFlagName string
	if cmdPrefix == "" {
		adminFlagName = "admin"
	} else {
		adminFlagName = fmt.Sprintf("%v.admin", cmdPrefix)
	}

	if err := registerModelDeviceAdminFlags(depth+1, adminFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemClientIsolation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientIsolationDescription := `Set to true to isolate clients`

	var clientIsolationFlagName string
	if cmdPrefix == "" {
		clientIsolationFlagName = "clientIsolation"
	} else {
		clientIsolationFlagName = fmt.Sprintf("%v.clientIsolation", cmdPrefix)
	}

	var clientIsolationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(clientIsolationFlagName, clientIsolationFlagDefault, clientIsolationDescription)

	return nil
}

func registerDeviceSystemDhcpOption82(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpOption82Description := `Set to true to allow DHCP option 82`

	var dhcpOption82FlagName string
	if cmdPrefix == "" {
		dhcpOption82FlagName = "dhcpOption82"
	} else {
		dhcpOption82FlagName = fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
	}

	var dhcpOption82FlagDefault bool

	_ = cmd.PersistentFlags().Bool(dhcpOption82FlagName, dhcpOption82FlagDefault, dhcpOption82Description)

	return nil
}

func registerDeviceSystemDns1(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dns1Description := `Primary DNS server address`

	var dns1FlagName string
	if cmdPrefix == "" {
		dns1FlagName = "dns1"
	} else {
		dns1FlagName = fmt.Sprintf("%v.dns1", cmdPrefix)
	}

	var dns1FlagDefault string

	_ = cmd.PersistentFlags().String(dns1FlagName, dns1FlagDefault, dns1Description)

	return nil
}

func registerDeviceSystemDns2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dns2Description := `Secondary DNS server address`

	var dns2FlagName string
	if cmdPrefix == "" {
		dns2FlagName = "dns2"
	} else {
		dns2FlagName = fmt.Sprintf("%v.dns2", cmdPrefix)
	}

	var dns2FlagDefault string

	_ = cmd.PersistentFlags().String(dns2FlagName, dns2FlagDefault, dns2Description)

	return nil
}

func registerDeviceSystemDNSServers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dnsServers DNSServers1 array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceSystemDomainName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	domainNameDescription := `Device's domain name`

	var domainNameFlagName string
	if cmdPrefix == "" {
		domainNameFlagName = "domainName"
	} else {
		domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
	}

	var domainNameFlagDefault string

	_ = cmd.PersistentFlags().String(domainNameFlagName, domainNameFlagDefault, domainNameDescription)

	return nil
}

func registerDeviceSystemGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := `Default gateway static address`

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerDeviceSystemIgmpSnooping(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	igmpSnoopingDescription := `Set to true to enable IGMP snooping`

	var igmpSnoopingFlagName string
	if cmdPrefix == "" {
		igmpSnoopingFlagName = "igmpSnooping"
	} else {
		igmpSnoopingFlagName = fmt.Sprintf("%v.igmpSnooping", cmdPrefix)
	}

	var igmpSnoopingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(igmpSnoopingFlagName, igmpSnoopingFlagDefault, igmpSnoopingDescription)

	return nil
}

func registerDeviceSystemInbandManagementVlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inbandManagementVlanDescription := `Inband management VLAN`

	var inbandManagementVlanFlagName string
	if cmdPrefix == "" {
		inbandManagementVlanFlagName = "inbandManagementVlan"
	} else {
		inbandManagementVlanFlagName = fmt.Sprintf("%v.inbandManagementVlan", cmdPrefix)
	}

	var inbandManagementVlanFlagDefault int64

	_ = cmd.PersistentFlags().Int64(inbandManagementVlanFlagName, inbandManagementVlanFlagDefault, inbandManagementVlanDescription)

	return nil
}

func registerDeviceSystemIPV4Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV4AddressDescription := ``

	var ipV4AddressFlagName string
	if cmdPrefix == "" {
		ipV4AddressFlagName = "ipV4Address"
	} else {
		ipV4AddressFlagName = fmt.Sprintf("%v.ipV4Address", cmdPrefix)
	}

	var ipV4AddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipV4AddressFlagName, ipV4AddressFlagDefault, ipV4AddressDescription)

	return nil
}

func registerDeviceSystemIPV4AddressType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV4AddressTypeDescription := `Enum: ["dhcp","static"]. IP address origin`

	var ipV4AddressTypeFlagName string
	if cmdPrefix == "" {
		ipV4AddressTypeFlagName = "ipV4AddressType"
	} else {
		ipV4AddressTypeFlagName = fmt.Sprintf("%v.ipV4AddressType", cmdPrefix)
	}

	var ipV4AddressTypeFlagDefault string

	_ = cmd.PersistentFlags().String(ipV4AddressTypeFlagName, ipV4AddressTypeFlagDefault, ipV4AddressTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(ipV4AddressTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["dhcp","static"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemIPV4Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV4GatewayDescription := ``

	var ipV4GatewayFlagName string
	if cmdPrefix == "" {
		ipV4GatewayFlagName = "ipV4Gateway"
	} else {
		ipV4GatewayFlagName = fmt.Sprintf("%v.ipV4Gateway", cmdPrefix)
	}

	var ipV4GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(ipV4GatewayFlagName, ipV4GatewayFlagDefault, ipV4GatewayDescription)

	return nil
}

func registerDeviceSystemIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6AddressDescription := ``

	var ipV6AddressFlagName string
	if cmdPrefix == "" {
		ipV6AddressFlagName = "ipV6Address"
	} else {
		ipV6AddressFlagName = fmt.Sprintf("%v.ipV6Address", cmdPrefix)
	}

	var ipV6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipV6AddressFlagName, ipV6AddressFlagDefault, ipV6AddressDescription)

	return nil
}

func registerDeviceSystemIPV6AddressType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6AddressTypeDescription := `Enum: ["dhcp","slaac","linkLocal","static"]. IP address origin`

	var ipV6AddressTypeFlagName string
	if cmdPrefix == "" {
		ipV6AddressTypeFlagName = "ipV6AddressType"
	} else {
		ipV6AddressTypeFlagName = fmt.Sprintf("%v.ipV6AddressType", cmdPrefix)
	}

	var ipV6AddressTypeFlagDefault string

	_ = cmd.PersistentFlags().String(ipV6AddressTypeFlagName, ipV6AddressTypeFlagDefault, ipV6AddressTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(ipV6AddressTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["dhcp","slaac","linkLocal","static"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemIPV6Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6GatewayDescription := ``

	var ipV6GatewayFlagName string
	if cmdPrefix == "" {
		ipV6GatewayFlagName = "ipV6Gateway"
	} else {
		ipV6GatewayFlagName = fmt.Sprintf("%v.ipV6Gateway", cmdPrefix)
	}

	var ipV6GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(ipV6GatewayFlagName, ipV6GatewayFlagDefault, ipV6GatewayDescription)

	return nil
}

func registerDeviceSystemIPV6SlaacEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6SlaacEnabledDescription := `Set to true if Edge Switch has a SLAAC IPv6 address.`

	var ipV6SlaacEnabledFlagName string
	if cmdPrefix == "" {
		ipV6SlaacEnabledFlagName = "ipV6SlaacEnabled"
	} else {
		ipV6SlaacEnabledFlagName = fmt.Sprintf("%v.ipV6SlaacEnabled", cmdPrefix)
	}

	var ipV6SlaacEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ipV6SlaacEnabledFlagName, ipV6SlaacEnabledFlagDefault, ipV6SlaacEnabledDescription)

	return nil
}

func registerDeviceSystemJumboMtu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var jumboMtuFlagName string
	if cmdPrefix == "" {
		jumboMtuFlagName = "jumboMtu"
	} else {
		jumboMtuFlagName = fmt.Sprintf("%v.jumboMtu", cmdPrefix)
	}

	if err := registerModelJumboMtuFlags(depth+1, jumboMtuFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemMtu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mtuDescription := `Required. MTU on GPON's ports`

	var mtuFlagName string
	if cmdPrefix == "" {
		mtuFlagName = "mtu"
	} else {
		mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
	}

	var mtuFlagDefault int64

	_ = cmd.PersistentFlags().Int64(mtuFlagName, mtuFlagDefault, mtuDescription)

	return nil
}

func registerDeviceSystemName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Device's hostname`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDeviceSystemReadOnlyAccount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var readOnlyAccountFlagName string
	if cmdPrefix == "" {
		readOnlyAccountFlagName = "readOnlyAccount"
	} else {
		readOnlyAccountFlagName = fmt.Sprintf("%v.readOnlyAccount", cmdPrefix)
	}

	if err := registerModelDeviceReadOnlyAccountFlags(depth+1, readOnlyAccountFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemStp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var stpFlagName string
	if cmdPrefix == "" {
		stpFlagName = "stp"
	} else {
		stpFlagName = fmt.Sprintf("%v.stp", cmdPrefix)
	}

	if err := registerModelSpanningTreeProtocolSchemaFlags(depth+1, stpFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemTimezone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timezoneDescription := `Enum: ["Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Asmera","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Timbuktu","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/ComodRivadavia","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Atka","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Buenos_Aires","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Catamarca","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Coral_Harbour","America/Cordoba","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Ensenada","America/Fort_Nelson","America/Fort_Wayne","America/Fortaleza","America/Glace_Bay","America/Godthab","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Indianapolis","America/Inuvik","America/Iqaluit","America/Jamaica","America/Jujuy","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Knox_IN","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Louisville","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Mendoza","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montreal","America/Montserrat","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Acre","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Rosario","America/Santa_Isabel","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Shiprock","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Virgin","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/South_Pole","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Ashkhabad","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Calcutta","Asia/Chita","Asia/Choibalsan","Asia/Chongqing","Asia/Chungking","Asia/Colombo","Asia/Dacca","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Harbin","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Istanbul","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kashgar","Asia/Kathmandu","Asia/Katmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macao","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qyzylorda","Asia/Rangoon","Asia/Riyadh","Asia/Saigon","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Tel_Aviv","Asia/Thimbu","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ujung_Pandang","Asia/Ulaanbaatar","Asia/Ulan_Bator","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faeroe","Atlantic/Faroe","Atlantic/Jan_Mayen","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/ACT","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Canberra","Australia/Currie","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/LHI","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/NSW","Australia/North","Australia/Perth","Australia/Queensland","Australia/South","Australia/Sydney","Australia/Tasmania","Australia/Victoria","Australia/West","Australia/Yancowinna","Brazil/Acre","Brazil/DeNoronha","Brazil/East","Brazil/West","CET","CST6CDT","Canada/Atlantic","Canada/Central","Canada/Eastern","Canada/Mountain","Canada/Newfoundland","Canada/Pacific","Canada/Saskatchewan","Canada/Yukon","Chile/Continental","Chile/EasterIsland","Cuba","EET","EST","EST5EDT","Egypt","Eire","Etc/GMT","Etc/GMT+0","Etc/GMT+1","Etc/GMT+10","Etc/GMT+11","Etc/GMT+12","Etc/GMT+2","Etc/GMT+3","Etc/GMT+4","Etc/GMT+5","Etc/GMT+6","Etc/GMT+7","Etc/GMT+8","Etc/GMT+9","Etc/GMT-0","Etc/GMT-1","Etc/GMT-10","Etc/GMT-11","Etc/GMT-12","Etc/GMT-13","Etc/GMT-14","Etc/GMT-2","Etc/GMT-3","Etc/GMT-4","Etc/GMT-5","Etc/GMT-6","Etc/GMT-7","Etc/GMT-8","Etc/GMT-9","Etc/GMT0","Etc/Greenwich","Etc/UCT","Etc/UTC","Etc/Universal","Etc/Zulu","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belfast","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Nicosia","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Tiraspol","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zaporozhye","Europe/Zurich","GB","GB-Eire","GMT","GMT+0","GMT-0","GMT0","Greenwich","HST","Hongkong","Iceland","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Iran","Israel","Jamaica","Japan","Kwajalein","Libya","MET","MST","MST7MDT","Mexico/BajaNorte","Mexico/BajaSur","Mexico/General","NZ","NZ-CHAT","Navajo","PRC","PST8PDT","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Johnston","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Ponape","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Samoa","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Truk","Pacific/Wake","Pacific/Wallis","Pacific/Yap","Poland","Portugal","ROC","ROK","Singapore","Turkey","UCT","US/Alaska","US/Aleutian","US/Arizona","US/Central","US/East-Indiana","US/Eastern","US/Hawaii","US/Indiana-Starke","US/Michigan","US/Mountain","US/Pacific","US/Pacific-New","US/Samoa","UTC","Universal","W-SU","WET","Zulu"]. Device's time zone`

	var timezoneFlagName string
	if cmdPrefix == "" {
		timezoneFlagName = "timezone"
	} else {
		timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
	}

	var timezoneFlagDefault string

	_ = cmd.PersistentFlags().String(timezoneFlagName, timezoneFlagDefault, timezoneDescription)

	if err := cmd.RegisterFlagCompletionFunc(timezoneFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Asmera","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Timbuktu","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/ComodRivadavia","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Atka","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Buenos_Aires","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Catamarca","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Coral_Harbour","America/Cordoba","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Ensenada","America/Fort_Nelson","America/Fort_Wayne","America/Fortaleza","America/Glace_Bay","America/Godthab","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Indianapolis","America/Inuvik","America/Iqaluit","America/Jamaica","America/Jujuy","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Knox_IN","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Louisville","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Mendoza","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montreal","America/Montserrat","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Acre","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Rosario","America/Santa_Isabel","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Shiprock","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Virgin","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/South_Pole","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Ashkhabad","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Calcutta","Asia/Chita","Asia/Choibalsan","Asia/Chongqing","Asia/Chungking","Asia/Colombo","Asia/Dacca","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Harbin","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Istanbul","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kashgar","Asia/Kathmandu","Asia/Katmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macao","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qyzylorda","Asia/Rangoon","Asia/Riyadh","Asia/Saigon","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Tel_Aviv","Asia/Thimbu","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ujung_Pandang","Asia/Ulaanbaatar","Asia/Ulan_Bator","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faeroe","Atlantic/Faroe","Atlantic/Jan_Mayen","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/ACT","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Canberra","Australia/Currie","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/LHI","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/NSW","Australia/North","Australia/Perth","Australia/Queensland","Australia/South","Australia/Sydney","Australia/Tasmania","Australia/Victoria","Australia/West","Australia/Yancowinna","Brazil/Acre","Brazil/DeNoronha","Brazil/East","Brazil/West","CET","CST6CDT","Canada/Atlantic","Canada/Central","Canada/Eastern","Canada/Mountain","Canada/Newfoundland","Canada/Pacific","Canada/Saskatchewan","Canada/Yukon","Chile/Continental","Chile/EasterIsland","Cuba","EET","EST","EST5EDT","Egypt","Eire","Etc/GMT","Etc/GMT+0","Etc/GMT+1","Etc/GMT+10","Etc/GMT+11","Etc/GMT+12","Etc/GMT+2","Etc/GMT+3","Etc/GMT+4","Etc/GMT+5","Etc/GMT+6","Etc/GMT+7","Etc/GMT+8","Etc/GMT+9","Etc/GMT-0","Etc/GMT-1","Etc/GMT-10","Etc/GMT-11","Etc/GMT-12","Etc/GMT-13","Etc/GMT-14","Etc/GMT-2","Etc/GMT-3","Etc/GMT-4","Etc/GMT-5","Etc/GMT-6","Etc/GMT-7","Etc/GMT-8","Etc/GMT-9","Etc/GMT0","Etc/Greenwich","Etc/UCT","Etc/UTC","Etc/Universal","Etc/Zulu","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belfast","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Nicosia","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Tiraspol","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zaporozhye","Europe/Zurich","GB","GB-Eire","GMT","GMT+0","GMT-0","GMT0","Greenwich","HST","Hongkong","Iceland","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Iran","Israel","Jamaica","Japan","Kwajalein","Libya","MET","MST","MST7MDT","Mexico/BajaNorte","Mexico/BajaSur","Mexico/General","NZ","NZ-CHAT","Navajo","PRC","PST8PDT","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Johnston","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Ponape","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Samoa","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Truk","Pacific/Wake","Pacific/Wallis","Pacific/Yap","Poland","Portugal","ROC","ROK","Singapore","Turkey","UCT","US/Alaska","US/Aleutian","US/Arizona","US/Central","US/East-Indiana","US/Eastern","US/Hawaii","US/Indiana-Starke","US/Michigan","US/Mountain","US/Pacific","US/Pacific-New","US/Samoa","UTC","Universal","W-SU","WET","Zulu"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceSystemFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessFromSfpAdded := retrieveDeviceSystemAccessFromSfpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessFromSfpAdded

	err, adminAdded := retrieveDeviceSystemAdminFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminAdded

	err, clientIsolationAdded := retrieveDeviceSystemClientIsolationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientIsolationAdded

	err, dhcpOption82Added := retrieveDeviceSystemDhcpOption82Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpOption82Added

	err, dns1Added := retrieveDeviceSystemDns1Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dns1Added

	err, dns2Added := retrieveDeviceSystemDns2Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dns2Added

	err, dnsServersAdded := retrieveDeviceSystemDNSServersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsServersAdded

	err, domainNameAdded := retrieveDeviceSystemDomainNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainNameAdded

	err, gatewayAdded := retrieveDeviceSystemGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, igmpSnoopingAdded := retrieveDeviceSystemIgmpSnoopingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || igmpSnoopingAdded

	err, inbandManagementVlanAdded := retrieveDeviceSystemInbandManagementVlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inbandManagementVlanAdded

	err, ipV4AddressAdded := retrieveDeviceSystemIPV4AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV4AddressAdded

	err, ipV4AddressTypeAdded := retrieveDeviceSystemIPV4AddressTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV4AddressTypeAdded

	err, ipV4GatewayAdded := retrieveDeviceSystemIPV4GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV4GatewayAdded

	err, ipV6AddressAdded := retrieveDeviceSystemIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6AddressAdded

	err, ipV6AddressTypeAdded := retrieveDeviceSystemIPV6AddressTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6AddressTypeAdded

	err, ipV6GatewayAdded := retrieveDeviceSystemIPV6GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6GatewayAdded

	err, ipV6SlaacEnabledAdded := retrieveDeviceSystemIPV6SlaacEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6SlaacEnabledAdded

	err, jumboMtuAdded := retrieveDeviceSystemJumboMtuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jumboMtuAdded

	err, mtuAdded := retrieveDeviceSystemMtuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mtuAdded

	err, nameAdded := retrieveDeviceSystemNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, readOnlyAccountAdded := retrieveDeviceSystemReadOnlyAccountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAccountAdded

	err, stpAdded := retrieveDeviceSystemStpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stpAdded

	err, timezoneAdded := retrieveDeviceSystemTimezoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timezoneAdded

	return nil, retAdded
}

func retrieveDeviceSystemAccessFromSfpFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessFromSfpFlagName := fmt.Sprintf("%v.accessFromSfp", cmdPrefix)
	if cmd.Flags().Changed(accessFromSfpFlagName) {

		var accessFromSfpFlagName string
		if cmdPrefix == "" {
			accessFromSfpFlagName = "accessFromSfp"
		} else {
			accessFromSfpFlagName = fmt.Sprintf("%v.accessFromSfp", cmdPrefix)
		}

		accessFromSfpFlagValue, err := cmd.Flags().GetBool(accessFromSfpFlagName)
		if err != nil {
			return err, false
		}
		m.AccessFromSfp = accessFromSfpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemAdminFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	adminFlagName := fmt.Sprintf("%v.admin", cmdPrefix)
	if cmd.Flags().Changed(adminFlagName) {
		// info: complex object admin DeviceAdmin is retrieved outside this Changed() block
	}
	adminFlagValue := m.Admin
	if swag.IsZero(adminFlagValue) {
		adminFlagValue = &models.DeviceAdmin{}
	}

	err, adminAdded := retrieveModelDeviceAdminFlags(depth+1, adminFlagValue, adminFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminAdded
	if adminAdded {
		m.Admin = adminFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemClientIsolationFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientIsolationFlagName := fmt.Sprintf("%v.clientIsolation", cmdPrefix)
	if cmd.Flags().Changed(clientIsolationFlagName) {

		var clientIsolationFlagName string
		if cmdPrefix == "" {
			clientIsolationFlagName = "clientIsolation"
		} else {
			clientIsolationFlagName = fmt.Sprintf("%v.clientIsolation", cmdPrefix)
		}

		clientIsolationFlagValue, err := cmd.Flags().GetBool(clientIsolationFlagName)
		if err != nil {
			return err, false
		}
		m.ClientIsolation = clientIsolationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemDhcpOption82Flags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpOption82FlagName := fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
	if cmd.Flags().Changed(dhcpOption82FlagName) {

		var dhcpOption82FlagName string
		if cmdPrefix == "" {
			dhcpOption82FlagName = "dhcpOption82"
		} else {
			dhcpOption82FlagName = fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
		}

		dhcpOption82FlagValue, err := cmd.Flags().GetBool(dhcpOption82FlagName)
		if err != nil {
			return err, false
		}
		m.DhcpOption82 = dhcpOption82FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemDns1Flags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dns1FlagName := fmt.Sprintf("%v.dns1", cmdPrefix)
	if cmd.Flags().Changed(dns1FlagName) {

		var dns1FlagName string
		if cmdPrefix == "" {
			dns1FlagName = "dns1"
		} else {
			dns1FlagName = fmt.Sprintf("%v.dns1", cmdPrefix)
		}

		dns1FlagValue, err := cmd.Flags().GetString(dns1FlagName)
		if err != nil {
			return err, false
		}
		m.Dns1 = dns1FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemDns2Flags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dns2FlagName := fmt.Sprintf("%v.dns2", cmdPrefix)
	if cmd.Flags().Changed(dns2FlagName) {

		var dns2FlagName string
		if cmdPrefix == "" {
			dns2FlagName = "dns2"
		} else {
			dns2FlagName = fmt.Sprintf("%v.dns2", cmdPrefix)
		}

		dns2FlagValue, err := cmd.Flags().GetString(dns2FlagName)
		if err != nil {
			return err, false
		}
		m.Dns2 = dns2FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemDNSServersFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsServersFlagName := fmt.Sprintf("%v.dnsServers", cmdPrefix)
	if cmd.Flags().Changed(dnsServersFlagName) {
		// warning: dnsServers array type DNSServers1 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceSystemDomainNameFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainNameFlagName := fmt.Sprintf("%v.domainName", cmdPrefix)
	if cmd.Flags().Changed(domainNameFlagName) {

		var domainNameFlagName string
		if cmdPrefix == "" {
			domainNameFlagName = "domainName"
		} else {
			domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
		}

		domainNameFlagValue, err := cmd.Flags().GetString(domainNameFlagName)
		if err != nil {
			return err, false
		}
		m.DomainName = domainNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemGatewayFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gatewayFlagName := fmt.Sprintf("%v.gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = gatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIgmpSnoopingFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	igmpSnoopingFlagName := fmt.Sprintf("%v.igmpSnooping", cmdPrefix)
	if cmd.Flags().Changed(igmpSnoopingFlagName) {

		var igmpSnoopingFlagName string
		if cmdPrefix == "" {
			igmpSnoopingFlagName = "igmpSnooping"
		} else {
			igmpSnoopingFlagName = fmt.Sprintf("%v.igmpSnooping", cmdPrefix)
		}

		igmpSnoopingFlagValue, err := cmd.Flags().GetBool(igmpSnoopingFlagName)
		if err != nil {
			return err, false
		}
		m.IgmpSnooping = igmpSnoopingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemInbandManagementVlanFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inbandManagementVlanFlagName := fmt.Sprintf("%v.inbandManagementVlan", cmdPrefix)
	if cmd.Flags().Changed(inbandManagementVlanFlagName) {

		var inbandManagementVlanFlagName string
		if cmdPrefix == "" {
			inbandManagementVlanFlagName = "inbandManagementVlan"
		} else {
			inbandManagementVlanFlagName = fmt.Sprintf("%v.inbandManagementVlan", cmdPrefix)
		}

		inbandManagementVlanFlagValue, err := cmd.Flags().GetInt64(inbandManagementVlanFlagName)
		if err != nil {
			return err, false
		}
		m.InbandManagementVlan = inbandManagementVlanFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIPV4AddressFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV4AddressFlagName := fmt.Sprintf("%v.ipV4Address", cmdPrefix)
	if cmd.Flags().Changed(ipV4AddressFlagName) {

		var ipV4AddressFlagName string
		if cmdPrefix == "" {
			ipV4AddressFlagName = "ipV4Address"
		} else {
			ipV4AddressFlagName = fmt.Sprintf("%v.ipV4Address", cmdPrefix)
		}

		ipV4AddressFlagValue, err := cmd.Flags().GetString(ipV4AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Address = ipV4AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIPV4AddressTypeFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV4AddressTypeFlagName := fmt.Sprintf("%v.ipV4AddressType", cmdPrefix)
	if cmd.Flags().Changed(ipV4AddressTypeFlagName) {

		var ipV4AddressTypeFlagName string
		if cmdPrefix == "" {
			ipV4AddressTypeFlagName = "ipV4AddressType"
		} else {
			ipV4AddressTypeFlagName = fmt.Sprintf("%v.ipV4AddressType", cmdPrefix)
		}

		ipV4AddressTypeFlagValue, err := cmd.Flags().GetString(ipV4AddressTypeFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4AddressType = ipV4AddressTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIPV4GatewayFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV4GatewayFlagName := fmt.Sprintf("%v.ipV4Gateway", cmdPrefix)
	if cmd.Flags().Changed(ipV4GatewayFlagName) {

		var ipV4GatewayFlagName string
		if cmdPrefix == "" {
			ipV4GatewayFlagName = "ipV4Gateway"
		} else {
			ipV4GatewayFlagName = fmt.Sprintf("%v.ipV4Gateway", cmdPrefix)
		}

		ipV4GatewayFlagValue, err := cmd.Flags().GetString(ipV4GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Gateway = ipV4GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIPV6AddressFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6AddressFlagName := fmt.Sprintf("%v.ipV6Address", cmdPrefix)
	if cmd.Flags().Changed(ipV6AddressFlagName) {

		var ipV6AddressFlagName string
		if cmdPrefix == "" {
			ipV6AddressFlagName = "ipV6Address"
		} else {
			ipV6AddressFlagName = fmt.Sprintf("%v.ipV6Address", cmdPrefix)
		}

		ipV6AddressFlagValue, err := cmd.Flags().GetString(ipV6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Address = ipV6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIPV6AddressTypeFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6AddressTypeFlagName := fmt.Sprintf("%v.ipV6AddressType", cmdPrefix)
	if cmd.Flags().Changed(ipV6AddressTypeFlagName) {

		var ipV6AddressTypeFlagName string
		if cmdPrefix == "" {
			ipV6AddressTypeFlagName = "ipV6AddressType"
		} else {
			ipV6AddressTypeFlagName = fmt.Sprintf("%v.ipV6AddressType", cmdPrefix)
		}

		ipV6AddressTypeFlagValue, err := cmd.Flags().GetString(ipV6AddressTypeFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6AddressType = ipV6AddressTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIPV6GatewayFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6GatewayFlagName := fmt.Sprintf("%v.ipV6Gateway", cmdPrefix)
	if cmd.Flags().Changed(ipV6GatewayFlagName) {

		var ipV6GatewayFlagName string
		if cmdPrefix == "" {
			ipV6GatewayFlagName = "ipV6Gateway"
		} else {
			ipV6GatewayFlagName = fmt.Sprintf("%v.ipV6Gateway", cmdPrefix)
		}

		ipV6GatewayFlagValue, err := cmd.Flags().GetString(ipV6GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Gateway = ipV6GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemIPV6SlaacEnabledFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6SlaacEnabledFlagName := fmt.Sprintf("%v.ipV6SlaacEnabled", cmdPrefix)
	if cmd.Flags().Changed(ipV6SlaacEnabledFlagName) {

		var ipV6SlaacEnabledFlagName string
		if cmdPrefix == "" {
			ipV6SlaacEnabledFlagName = "ipV6SlaacEnabled"
		} else {
			ipV6SlaacEnabledFlagName = fmt.Sprintf("%v.ipV6SlaacEnabled", cmdPrefix)
		}

		ipV6SlaacEnabledFlagValue, err := cmd.Flags().GetBool(ipV6SlaacEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6SlaacEnabled = ipV6SlaacEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemJumboMtuFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jumboMtuFlagName := fmt.Sprintf("%v.jumboMtu", cmdPrefix)
	if cmd.Flags().Changed(jumboMtuFlagName) {
		// info: complex object jumboMtu JumboMtu is retrieved outside this Changed() block
	}
	jumboMtuFlagValue := m.JumboMtu
	if swag.IsZero(jumboMtuFlagValue) {
		jumboMtuFlagValue = &models.JumboMtu{}
	}

	err, jumboMtuAdded := retrieveModelJumboMtuFlags(depth+1, jumboMtuFlagValue, jumboMtuFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jumboMtuAdded
	if jumboMtuAdded {
		m.JumboMtu = jumboMtuFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemMtuFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mtuFlagName := fmt.Sprintf("%v.mtu", cmdPrefix)
	if cmd.Flags().Changed(mtuFlagName) {

		var mtuFlagName string
		if cmdPrefix == "" {
			mtuFlagName = "mtu"
		} else {
			mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
		}

		mtuFlagValue, err := cmd.Flags().GetInt64(mtuFlagName)
		if err != nil {
			return err, false
		}
		m.Mtu = &mtuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemNameFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemReadOnlyAccountFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyAccountFlagName := fmt.Sprintf("%v.readOnlyAccount", cmdPrefix)
	if cmd.Flags().Changed(readOnlyAccountFlagName) {
		// info: complex object readOnlyAccount DeviceReadOnlyAccount is retrieved outside this Changed() block
	}
	readOnlyAccountFlagValue := m.ReadOnlyAccount
	if swag.IsZero(readOnlyAccountFlagValue) {
		readOnlyAccountFlagValue = &models.DeviceReadOnlyAccount{}
	}

	err, readOnlyAccountAdded := retrieveModelDeviceReadOnlyAccountFlags(depth+1, readOnlyAccountFlagValue, readOnlyAccountFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAccountAdded
	if readOnlyAccountAdded {
		m.ReadOnlyAccount = readOnlyAccountFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemStpFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stpFlagName := fmt.Sprintf("%v.stp", cmdPrefix)
	if cmd.Flags().Changed(stpFlagName) {
		// info: complex object stp SpanningTreeProtocolSchema is retrieved outside this Changed() block
	}
	stpFlagValue := m.Stp
	if swag.IsZero(stpFlagValue) {
		stpFlagValue = &models.SpanningTreeProtocolSchema{}
	}

	err, stpAdded := retrieveModelSpanningTreeProtocolSchemaFlags(depth+1, stpFlagValue, stpFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stpAdded
	if stpAdded {
		m.Stp = stpFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemTimezoneFlags(depth int, m *models.DeviceSystem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timezoneFlagName := fmt.Sprintf("%v.timezone", cmdPrefix)
	if cmd.Flags().Changed(timezoneFlagName) {

		var timezoneFlagName string
		if cmdPrefix == "" {
			timezoneFlagName = "timezone"
		} else {
			timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
		}

		timezoneFlagValue, err := cmd.Flags().GetString(timezoneFlagName)
		if err != nil {
			return err, false
		}
		m.Timezone = timezoneFlagValue

		retAdded = true
	}

	return nil, retAdded
}
