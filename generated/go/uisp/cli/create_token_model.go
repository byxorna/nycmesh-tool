// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for CreateToken

// register flags to command
func registerModelCreateTokenFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCreateTokenMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreateTokenName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCreateTokenMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	metaDescription := `Any token metadata.`

	var metaFlagName string
	if cmdPrefix == "" {
		metaFlagName = "meta"
	} else {
		metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
	}

	var metaFlagDefault string

	_ = cmd.PersistentFlags().String(metaFlagName, metaFlagDefault, metaDescription)

	return nil
}

func registerCreateTokenName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Human readable name of the token.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCreateTokenFlags(depth int, m *models.CreateToken, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, metaAdded := retrieveCreateTokenMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	err, nameAdded := retrieveCreateTokenNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveCreateTokenMetaFlags(depth int, m *models.CreateToken, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {

		var metaFlagName string
		if cmdPrefix == "" {
			metaFlagName = "meta"
		} else {
			metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
		}

		metaFlagValue, err := cmd.Flags().GetString(metaFlagName)
		if err != nil {
			return err, false
		}
		m.Meta = metaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCreateTokenNameFlags(depth int, m *models.CreateToken, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
