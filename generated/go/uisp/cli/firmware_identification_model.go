// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for FirmwareIdentification

// register flags to command
func registerModelFirmwareIdentificationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFirmwareIdentificationFilename(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationLite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationModels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationOrigin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationPlatformID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationPlatformName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationStable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFirmwareIdentificationVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFirmwareIdentificationFilename(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	filenameDescription := ``

	var filenameFlagName string
	if cmdPrefix == "" {
		filenameFlagName = "filename"
	} else {
		filenameFlagName = fmt.Sprintf("%v.filename", cmdPrefix)
	}

	var filenameFlagDefault string

	_ = cmd.PersistentFlags().String(filenameFlagName, filenameFlagDefault, filenameDescription)

	return nil
}

func registerFirmwareIdentificationID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerFirmwareIdentificationLite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	liteDescription := ``

	var liteFlagName string
	if cmdPrefix == "" {
		liteFlagName = "lite"
	} else {
		liteFlagName = fmt.Sprintf("%v.lite", cmdPrefix)
	}

	var liteFlagDefault bool

	_ = cmd.PersistentFlags().Bool(liteFlagName, liteFlagDefault, liteDescription)

	return nil
}

func registerFirmwareIdentificationModels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: models Models array type is not supported by go-swagger cli yet

	return nil
}

func registerFirmwareIdentificationOrigin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	originDescription := ``

	var originFlagName string
	if cmdPrefix == "" {
		originFlagName = "origin"
	} else {
		originFlagName = fmt.Sprintf("%v.origin", cmdPrefix)
	}

	var originFlagDefault string

	_ = cmd.PersistentFlags().String(originFlagName, originFlagDefault, originDescription)

	return nil
}

func registerFirmwareIdentificationPlatformID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformIdDescription := `Enum: ["UF_NANOG","UF_LOCO","UF_WIFI","UF_INSTANT","alpinev2","mt7621","UISPS","UISPSPro","UNMSS","UISPLTE","UISPPLite","e50","e100","e200","e300","e600","e1000","u50","u100","u200","u300","u1000","eswh","esgh","ES","esx","EP","EPX","SW","ACB","WA","2WA","XC","2XC","XW","XM","TI","GBE","AirGW","AirGWP","AF","AF02","AF06","AF07","AF08","AF09","af5xhd","afltu","aflturocket","GP","ltu60","SB","UNKNOWN"]. `

	var platformIdFlagName string
	if cmdPrefix == "" {
		platformIdFlagName = "platformId"
	} else {
		platformIdFlagName = fmt.Sprintf("%v.platformId", cmdPrefix)
	}

	var platformIdFlagDefault string

	_ = cmd.PersistentFlags().String(platformIdFlagName, platformIdFlagDefault, platformIdDescription)

	if err := cmd.RegisterFlagCompletionFunc(platformIdFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UF_NANOG","UF_LOCO","UF_WIFI","UF_INSTANT","alpinev2","mt7621","UISPS","UISPSPro","UNMSS","UISPLTE","UISPPLite","e50","e100","e200","e300","e600","e1000","u50","u100","u200","u300","u1000","eswh","esgh","ES","esx","EP","EPX","SW","ACB","WA","2WA","XC","2XC","XW","XM","TI","GBE","AirGW","AirGWP","AF","AF02","AF06","AF07","AF08","AF09","af5xhd","afltu","aflturocket","GP","ltu60","SB","UNKNOWN"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFirmwareIdentificationPlatformName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformNameDescription := `Enum: ["UFiber NanoG","UFiber Loco","UFiber Wifi","UFiber Instant","UISPRPro","UISPRLite","UISPS","UISPSPro","UNMSS","UISPLTE","UISPPLite","e50","e100","e200","e300","e600","e1000","u50","u100","u200","u300","u1000","ESWH","ESGH","ES","ESX","EP","EPX","SW","ACB","WA","2WA","XC","2XC","XW","XM","TI","GBE","AirGW","AirGWP","AF","AF02","AF06","AF07","AF08","AF09","af5xhd","afltu","lturocket","GP","ltu60","SunMax","UNKNOWN"]. `

	var platformNameFlagName string
	if cmdPrefix == "" {
		platformNameFlagName = "platformName"
	} else {
		platformNameFlagName = fmt.Sprintf("%v.platformName", cmdPrefix)
	}

	var platformNameFlagDefault string

	_ = cmd.PersistentFlags().String(platformNameFlagName, platformNameFlagDefault, platformNameDescription)

	if err := cmd.RegisterFlagCompletionFunc(platformNameFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UFiber NanoG","UFiber Loco","UFiber Wifi","UFiber Instant","UISPRPro","UISPRLite","UISPS","UISPSPro","UNMSS","UISPLTE","UISPPLite","e50","e100","e200","e300","e600","e1000","u50","u100","u200","u300","u1000","ESWH","ESGH","ES","ESX","EP","EPX","SW","ACB","WA","2WA","XC","2XC","XW","XM","TI","GBE","AirGW","AirGWP","AF","AF02","AF06","AF07","AF08","AF09","af5xhd","afltu","lturocket","GP","ltu60","SunMax","UNKNOWN"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFirmwareIdentificationStable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stableDescription := ``

	var stableFlagName string
	if cmdPrefix == "" {
		stableFlagName = "stable"
	} else {
		stableFlagName = fmt.Sprintf("%v.stable", cmdPrefix)
	}

	var stableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stableFlagName, stableFlagDefault, stableDescription)

	return nil
}

func registerFirmwareIdentificationVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFirmwareIdentificationFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, filenameAdded := retrieveFirmwareIdentificationFilenameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filenameAdded

	err, idAdded := retrieveFirmwareIdentificationIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, liteAdded := retrieveFirmwareIdentificationLiteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || liteAdded

	err, modelsAdded := retrieveFirmwareIdentificationModelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelsAdded

	err, originAdded := retrieveFirmwareIdentificationOriginFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || originAdded

	err, platformIdAdded := retrieveFirmwareIdentificationPlatformIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformIdAdded

	err, platformNameAdded := retrieveFirmwareIdentificationPlatformNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformNameAdded

	err, stableAdded := retrieveFirmwareIdentificationStableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stableAdded

	err, versionAdded := retrieveFirmwareIdentificationVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveFirmwareIdentificationFilenameFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filenameFlagName := fmt.Sprintf("%v.filename", cmdPrefix)
	if cmd.Flags().Changed(filenameFlagName) {

		var filenameFlagName string
		if cmdPrefix == "" {
			filenameFlagName = "filename"
		} else {
			filenameFlagName = fmt.Sprintf("%v.filename", cmdPrefix)
		}

		filenameFlagValue, err := cmd.Flags().GetString(filenameFlagName)
		if err != nil {
			return err, false
		}
		m.Filename = filenameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationIDFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationLiteFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	liteFlagName := fmt.Sprintf("%v.lite", cmdPrefix)
	if cmd.Flags().Changed(liteFlagName) {

		var liteFlagName string
		if cmdPrefix == "" {
			liteFlagName = "lite"
		} else {
			liteFlagName = fmt.Sprintf("%v.lite", cmdPrefix)
		}

		liteFlagValue, err := cmd.Flags().GetBool(liteFlagName)
		if err != nil {
			return err, false
		}
		m.Lite = liteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationModelsFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelsFlagName := fmt.Sprintf("%v.models", cmdPrefix)
	if cmd.Flags().Changed(modelsFlagName) {
		// warning: models array type Models is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationOriginFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	originFlagName := fmt.Sprintf("%v.origin", cmdPrefix)
	if cmd.Flags().Changed(originFlagName) {

		var originFlagName string
		if cmdPrefix == "" {
			originFlagName = "origin"
		} else {
			originFlagName = fmt.Sprintf("%v.origin", cmdPrefix)
		}

		originFlagValue, err := cmd.Flags().GetString(originFlagName)
		if err != nil {
			return err, false
		}
		m.Origin = originFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationPlatformIDFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformIdFlagName := fmt.Sprintf("%v.platformId", cmdPrefix)
	if cmd.Flags().Changed(platformIdFlagName) {

		var platformIdFlagName string
		if cmdPrefix == "" {
			platformIdFlagName = "platformId"
		} else {
			platformIdFlagName = fmt.Sprintf("%v.platformId", cmdPrefix)
		}

		platformIdFlagValue, err := cmd.Flags().GetString(platformIdFlagName)
		if err != nil {
			return err, false
		}
		m.PlatformID = platformIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationPlatformNameFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformNameFlagName := fmt.Sprintf("%v.platformName", cmdPrefix)
	if cmd.Flags().Changed(platformNameFlagName) {

		var platformNameFlagName string
		if cmdPrefix == "" {
			platformNameFlagName = "platformName"
		} else {
			platformNameFlagName = fmt.Sprintf("%v.platformName", cmdPrefix)
		}

		platformNameFlagValue, err := cmd.Flags().GetString(platformNameFlagName)
		if err != nil {
			return err, false
		}
		m.PlatformName = platformNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationStableFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stableFlagName := fmt.Sprintf("%v.stable", cmdPrefix)
	if cmd.Flags().Changed(stableFlagName) {

		var stableFlagName string
		if cmdPrefix == "" {
			stableFlagName = "stable"
		} else {
			stableFlagName = fmt.Sprintf("%v.stable", cmdPrefix)
		}

		stableFlagValue, err := cmd.Flags().GetBool(stableFlagName)
		if err != nil {
			return err, false
		}
		m.Stable = stableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFirmwareIdentificationVersionFlags(depth int, m *models.FirmwareIdentification, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
