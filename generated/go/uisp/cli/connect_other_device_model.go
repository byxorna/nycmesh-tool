// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for ConnectOtherDevice

// register flags to command
func registerModelConnectOtherDeviceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConnectOtherDeviceEnablePing(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectOtherDeviceHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectOtherDeviceIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectOtherDeviceRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectOtherDeviceSnmpCommunity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConnectOtherDeviceEnablePing(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enablePingDescription := `Required. `

	var enablePingFlagName string
	if cmdPrefix == "" {
		enablePingFlagName = "enablePing"
	} else {
		enablePingFlagName = fmt.Sprintf("%v.enablePing", cmdPrefix)
	}

	var enablePingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enablePingFlagName, enablePingFlagDefault, enablePingDescription)

	return nil
}

func registerConnectOtherDeviceHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `Required. `

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerConnectOtherDeviceIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipDescription := `Required. `

	var ipFlagName string
	if cmdPrefix == "" {
		ipFlagName = "ip"
	} else {
		ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
	}

	var ipFlagDefault string

	_ = cmd.PersistentFlags().String(ipFlagName, ipFlagDefault, ipDescription)

	return nil
}

func registerConnectOtherDeviceRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := `Enum: ["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]. Required. `

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault string

	_ = cmd.PersistentFlags().String(roleFlagName, roleFlagDefault, roleDescription)

	if err := cmd.RegisterFlagCompletionFunc(roleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerConnectOtherDeviceSnmpCommunity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snmpCommunityDescription := `Required. `

	var snmpCommunityFlagName string
	if cmdPrefix == "" {
		snmpCommunityFlagName = "snmpCommunity"
	} else {
		snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	}

	var snmpCommunityFlagDefault string

	_ = cmd.PersistentFlags().String(snmpCommunityFlagName, snmpCommunityFlagDefault, snmpCommunityDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConnectOtherDeviceFlags(depth int, m *models.ConnectOtherDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enablePingAdded := retrieveConnectOtherDeviceEnablePingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enablePingAdded

	err, hostnameAdded := retrieveConnectOtherDeviceHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, ipAdded := retrieveConnectOtherDeviceIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAdded

	err, roleAdded := retrieveConnectOtherDeviceRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, snmpCommunityAdded := retrieveConnectOtherDeviceSnmpCommunityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snmpCommunityAdded

	return nil, retAdded
}

func retrieveConnectOtherDeviceEnablePingFlags(depth int, m *models.ConnectOtherDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enablePingFlagName := fmt.Sprintf("%v.enablePing", cmdPrefix)
	if cmd.Flags().Changed(enablePingFlagName) {

		var enablePingFlagName string
		if cmdPrefix == "" {
			enablePingFlagName = "enablePing"
		} else {
			enablePingFlagName = fmt.Sprintf("%v.enablePing", cmdPrefix)
		}

		enablePingFlagValue, err := cmd.Flags().GetBool(enablePingFlagName)
		if err != nil {
			return err, false
		}
		m.EnablePing = enablePingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectOtherDeviceHostnameFlags(depth int, m *models.ConnectOtherDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = &hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectOtherDeviceIPFlags(depth int, m *models.ConnectOtherDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipFlagName := fmt.Sprintf("%v.ip", cmdPrefix)
	if cmd.Flags().Changed(ipFlagName) {

		var ipFlagName string
		if cmdPrefix == "" {
			ipFlagName = "ip"
		} else {
			ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
		}

		ipFlagValue, err := cmd.Flags().GetString(ipFlagName)
		if err != nil {
			return err, false
		}
		m.IP = &ipFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectOtherDeviceRoleFlags(depth int, m *models.ConnectOtherDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetString(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = &roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectOtherDeviceSnmpCommunityFlags(depth int, m *models.ConnectOtherDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snmpCommunityFlagName := fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	if cmd.Flags().Changed(snmpCommunityFlagName) {

		var snmpCommunityFlagName string
		if cmdPrefix == "" {
			snmpCommunityFlagName = "snmpCommunity"
		} else {
			snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
		}

		snmpCommunityFlagValue, err := cmd.Flags().GetString(snmpCommunityFlagName)
		if err != nil {
			return err, false
		}
		m.SnmpCommunity = &snmpCommunityFlagValue

		retAdded = true
	}

	return nil, retAdded
}
