// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model98

// register flags to command
func registerModelModel98Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel98DhcpSnooping(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel98ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel98LinkTrap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel98LoadBalance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel98Ports(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel98Static(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel98Stp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel98DhcpSnooping(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpSnoopingDescription := ``

	var dhcpSnoopingFlagName string
	if cmdPrefix == "" {
		dhcpSnoopingFlagName = "dhcpSnooping"
	} else {
		dhcpSnoopingFlagName = fmt.Sprintf("%v.dhcpSnooping", cmdPrefix)
	}

	var dhcpSnoopingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dhcpSnoopingFlagName, dhcpSnoopingFlagDefault, dhcpSnoopingDescription)

	return nil
}

func registerModel98ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel98LinkTrap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	linkTrapDescription := ``

	var linkTrapFlagName string
	if cmdPrefix == "" {
		linkTrapFlagName = "linkTrap"
	} else {
		linkTrapFlagName = fmt.Sprintf("%v.linkTrap", cmdPrefix)
	}

	var linkTrapFlagDefault bool

	_ = cmd.PersistentFlags().Bool(linkTrapFlagName, linkTrapFlagDefault, linkTrapDescription)

	return nil
}

func registerModel98LoadBalance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	loadBalanceDescription := `Enum: ["src_dst_mac","src_mac_l2","dst_mac_l2","src_dst_mac_l2","src_dst_mac_ip","src_ip_port","dst_ip_port","src_dst_ip_port"]. Required. `

	var loadBalanceFlagName string
	if cmdPrefix == "" {
		loadBalanceFlagName = "loadBalance"
	} else {
		loadBalanceFlagName = fmt.Sprintf("%v.loadBalance", cmdPrefix)
	}

	var loadBalanceFlagDefault string

	_ = cmd.PersistentFlags().String(loadBalanceFlagName, loadBalanceFlagDefault, loadBalanceDescription)

	if err := cmd.RegisterFlagCompletionFunc(loadBalanceFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["src_dst_mac","src_mac_l2","dst_mac_l2","src_dst_mac_l2","src_dst_mac_ip","src_ip_port","dst_ip_port","src_dst_ip_port"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel98Ports(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ports Ports array type is not supported by go-swagger cli yet

	return nil
}

func registerModel98Static(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	staticDescription := ``

	var staticFlagName string
	if cmdPrefix == "" {
		staticFlagName = "static"
	} else {
		staticFlagName = fmt.Sprintf("%v.static", cmdPrefix)
	}

	var staticFlagDefault bool

	_ = cmd.PersistentFlags().Bool(staticFlagName, staticFlagDefault, staticDescription)

	return nil
}

func registerModel98Stp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stpDescription := ``

	var stpFlagName string
	if cmdPrefix == "" {
		stpFlagName = "stp"
	} else {
		stpFlagName = fmt.Sprintf("%v.stp", cmdPrefix)
	}

	var stpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stpFlagName, stpFlagDefault, stpDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel98Flags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dhcpSnoopingAdded := retrieveModel98DhcpSnoopingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpSnoopingAdded

	err, idAdded := retrieveModel98IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, linkTrapAdded := retrieveModel98LinkTrapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkTrapAdded

	err, loadBalanceAdded := retrieveModel98LoadBalanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || loadBalanceAdded

	err, portsAdded := retrieveModel98PortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portsAdded

	err, staticAdded := retrieveModel98StaticFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || staticAdded

	err, stpAdded := retrieveModel98StpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stpAdded

	return nil, retAdded
}

func retrieveModel98DhcpSnoopingFlags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpSnoopingFlagName := fmt.Sprintf("%v.dhcpSnooping", cmdPrefix)
	if cmd.Flags().Changed(dhcpSnoopingFlagName) {

		var dhcpSnoopingFlagName string
		if cmdPrefix == "" {
			dhcpSnoopingFlagName = "dhcpSnooping"
		} else {
			dhcpSnoopingFlagName = fmt.Sprintf("%v.dhcpSnooping", cmdPrefix)
		}

		dhcpSnoopingFlagValue, err := cmd.Flags().GetBool(dhcpSnoopingFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpSnooping = dhcpSnoopingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel98IDFlags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel98LinkTrapFlags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linkTrapFlagName := fmt.Sprintf("%v.linkTrap", cmdPrefix)
	if cmd.Flags().Changed(linkTrapFlagName) {

		var linkTrapFlagName string
		if cmdPrefix == "" {
			linkTrapFlagName = "linkTrap"
		} else {
			linkTrapFlagName = fmt.Sprintf("%v.linkTrap", cmdPrefix)
		}

		linkTrapFlagValue, err := cmd.Flags().GetBool(linkTrapFlagName)
		if err != nil {
			return err, false
		}
		m.LinkTrap = linkTrapFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel98LoadBalanceFlags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	loadBalanceFlagName := fmt.Sprintf("%v.loadBalance", cmdPrefix)
	if cmd.Flags().Changed(loadBalanceFlagName) {

		var loadBalanceFlagName string
		if cmdPrefix == "" {
			loadBalanceFlagName = "loadBalance"
		} else {
			loadBalanceFlagName = fmt.Sprintf("%v.loadBalance", cmdPrefix)
		}

		loadBalanceFlagValue, err := cmd.Flags().GetString(loadBalanceFlagName)
		if err != nil {
			return err, false
		}
		m.LoadBalance = &loadBalanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel98PortsFlags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portsFlagName := fmt.Sprintf("%v.ports", cmdPrefix)
	if cmd.Flags().Changed(portsFlagName) {
		// warning: ports array type Ports is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel98StaticFlags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	staticFlagName := fmt.Sprintf("%v.static", cmdPrefix)
	if cmd.Flags().Changed(staticFlagName) {

		var staticFlagName string
		if cmdPrefix == "" {
			staticFlagName = "static"
		} else {
			staticFlagName = fmt.Sprintf("%v.static", cmdPrefix)
		}

		staticFlagValue, err := cmd.Flags().GetBool(staticFlagName)
		if err != nil {
			return err, false
		}
		m.Static = staticFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel98StpFlags(depth int, m *models.Model98, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stpFlagName := fmt.Sprintf("%v.stp", cmdPrefix)
	if cmd.Flags().Changed(stpFlagName) {

		var stpFlagName string
		if cmdPrefix == "" {
			stpFlagName = "stp"
		} else {
			stpFlagName = fmt.Sprintf("%v.stp", cmdPrefix)
		}

		stpFlagValue, err := cmd.Flags().GetBool(stpFlagName)
		if err != nil {
			return err, false
		}
		m.Stp = stpFlagValue

		retAdded = true
	}

	return nil, retAdded
}
