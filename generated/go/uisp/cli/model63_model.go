// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Model63

// register flags to command
func registerModelModel63Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel63Config(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel63Rules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel63UnmatchedBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel63UnmatchedPackets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel63Config(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var configFlagName string
	if cmdPrefix == "" {
		configFlagName = "config"
	} else {
		configFlagName = fmt.Sprintf("%v.config", cmdPrefix)
	}

	if err := registerModelConfig1Flags(depth+1, configFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel63Rules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: rules Rules1 array type is not supported by go-swagger cli yet

	return nil
}

func registerModel63UnmatchedBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unmatchedBytesDescription := `Required. `

	var unmatchedBytesFlagName string
	if cmdPrefix == "" {
		unmatchedBytesFlagName = "unmatchedBytes"
	} else {
		unmatchedBytesFlagName = fmt.Sprintf("%v.unmatchedBytes", cmdPrefix)
	}

	var unmatchedBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(unmatchedBytesFlagName, unmatchedBytesFlagDefault, unmatchedBytesDescription)

	return nil
}

func registerModel63UnmatchedPackets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unmatchedPacketsDescription := `Required. `

	var unmatchedPacketsFlagName string
	if cmdPrefix == "" {
		unmatchedPacketsFlagName = "unmatchedPackets"
	} else {
		unmatchedPacketsFlagName = fmt.Sprintf("%v.unmatchedPackets", cmdPrefix)
	}

	var unmatchedPacketsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(unmatchedPacketsFlagName, unmatchedPacketsFlagDefault, unmatchedPacketsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel63Flags(depth int, m *models.Model63, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, configAdded := retrieveModel63ConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configAdded

	err, rulesAdded := retrieveModel63RulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rulesAdded

	err, unmatchedBytesAdded := retrieveModel63UnmatchedBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unmatchedBytesAdded

	err, unmatchedPacketsAdded := retrieveModel63UnmatchedPacketsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unmatchedPacketsAdded

	return nil, retAdded
}

func retrieveModel63ConfigFlags(depth int, m *models.Model63, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configFlagName := fmt.Sprintf("%v.config", cmdPrefix)
	if cmd.Flags().Changed(configFlagName) {
		// info: complex object config Config1 is retrieved outside this Changed() block
	}
	configFlagValue := m.Config
	if swag.IsZero(configFlagValue) {
		configFlagValue = &models.Config1{}
	}

	err, configAdded := retrieveModelConfig1Flags(depth+1, configFlagValue, configFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configAdded
	if configAdded {
		m.Config = configFlagValue
	}

	return nil, retAdded
}

func retrieveModel63RulesFlags(depth int, m *models.Model63, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rulesFlagName := fmt.Sprintf("%v.rules", cmdPrefix)
	if cmd.Flags().Changed(rulesFlagName) {
		// warning: rules array type Rules1 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel63UnmatchedBytesFlags(depth int, m *models.Model63, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unmatchedBytesFlagName := fmt.Sprintf("%v.unmatchedBytes", cmdPrefix)
	if cmd.Flags().Changed(unmatchedBytesFlagName) {

		var unmatchedBytesFlagName string
		if cmdPrefix == "" {
			unmatchedBytesFlagName = "unmatchedBytes"
		} else {
			unmatchedBytesFlagName = fmt.Sprintf("%v.unmatchedBytes", cmdPrefix)
		}

		unmatchedBytesFlagValue, err := cmd.Flags().GetInt64(unmatchedBytesFlagName)
		if err != nil {
			return err, false
		}
		m.UnmatchedBytes = &unmatchedBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel63UnmatchedPacketsFlags(depth int, m *models.Model63, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unmatchedPacketsFlagName := fmt.Sprintf("%v.unmatchedPackets", cmdPrefix)
	if cmd.Flags().Changed(unmatchedPacketsFlagName) {

		var unmatchedPacketsFlagName string
		if cmdPrefix == "" {
			unmatchedPacketsFlagName = "unmatchedPackets"
		} else {
			unmatchedPacketsFlagName = fmt.Sprintf("%v.unmatchedPackets", cmdPrefix)
		}

		unmatchedPacketsFlagValue, err := cmd.Flags().GetInt64(unmatchedPacketsFlagName)
		if err != nil {
			return err, false
		}
		m.UnmatchedPackets = &unmatchedPacketsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
