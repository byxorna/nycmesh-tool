// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for ImportUserSchema

// register flags to command
func registerModelImportUserSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerImportUserSchemaEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaFirstName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaIsActive(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaIsSuperAdmin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaLastName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaPasswordHash(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaTotpAuthSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaUcrmID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaUcrmRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaUnmsID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImportUserSchemaUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerImportUserSchemaEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := `Required. User's email.`

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerImportUserSchemaFirstName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firstNameDescription := `User's first name.`

	var firstNameFlagName string
	if cmdPrefix == "" {
		firstNameFlagName = "firstName"
	} else {
		firstNameFlagName = fmt.Sprintf("%v.firstName", cmdPrefix)
	}

	var firstNameFlagDefault string

	_ = cmd.PersistentFlags().String(firstNameFlagName, firstNameFlagDefault, firstNameDescription)

	return nil
}

func registerImportUserSchemaIsActive(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isActiveDescription := `Whether user is active or not. Inactive users cannot log in.`

	var isActiveFlagName string
	if cmdPrefix == "" {
		isActiveFlagName = "isActive"
	} else {
		isActiveFlagName = fmt.Sprintf("%v.isActive", cmdPrefix)
	}

	var isActiveFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(isActiveFlagName, isActiveFlagDefault, isActiveDescription)

	return nil
}

func registerImportUserSchemaIsSuperAdmin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isSuperAdminDescription := `Whether user is UCRM super admin or not.`

	var isSuperAdminFlagName string
	if cmdPrefix == "" {
		isSuperAdminFlagName = "isSuperAdmin"
	} else {
		isSuperAdminFlagName = fmt.Sprintf("%v.isSuperAdmin", cmdPrefix)
	}

	var isSuperAdminFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isSuperAdminFlagName, isSuperAdminFlagDefault, isSuperAdminDescription)

	return nil
}

func registerImportUserSchemaLastName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastNameDescription := `User's last name.`

	var lastNameFlagName string
	if cmdPrefix == "" {
		lastNameFlagName = "lastName"
	} else {
		lastNameFlagName = fmt.Sprintf("%v.lastName", cmdPrefix)
	}

	var lastNameFlagDefault string

	_ = cmd.PersistentFlags().String(lastNameFlagName, lastNameFlagDefault, lastNameDescription)

	return nil
}

func registerImportUserSchemaPasswordHash(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordHashDescription := `Required. Bcrypt hashed password.`

	var passwordHashFlagName string
	if cmdPrefix == "" {
		passwordHashFlagName = "passwordHash"
	} else {
		passwordHashFlagName = fmt.Sprintf("%v.passwordHash", cmdPrefix)
	}

	var passwordHashFlagDefault string

	_ = cmd.PersistentFlags().String(passwordHashFlagName, passwordHashFlagDefault, passwordHashDescription)

	return nil
}

func registerImportUserSchemaTotpAuthSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totpAuthSecretDescription := `User's 2FA token if 2FA is enabled.`

	var totpAuthSecretFlagName string
	if cmdPrefix == "" {
		totpAuthSecretFlagName = "totpAuthSecret"
	} else {
		totpAuthSecretFlagName = fmt.Sprintf("%v.totpAuthSecret", cmdPrefix)
	}

	var totpAuthSecretFlagDefault string

	_ = cmd.PersistentFlags().String(totpAuthSecretFlagName, totpAuthSecretFlagDefault, totpAuthSecretDescription)

	return nil
}

func registerImportUserSchemaUcrmID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmIdDescription := `Required. User's ID in CRM.`

	var ucrmIdFlagName string
	if cmdPrefix == "" {
		ucrmIdFlagName = "ucrmId"
	} else {
		ucrmIdFlagName = fmt.Sprintf("%v.ucrmId", cmdPrefix)
	}

	var ucrmIdFlagDefault string

	_ = cmd.PersistentFlags().String(ucrmIdFlagName, ucrmIdFlagDefault, ucrmIdDescription)

	return nil
}

func registerImportUserSchemaUcrmRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmRoleDescription := `Required. Users's role ID in CRM.`

	var ucrmRoleFlagName string
	if cmdPrefix == "" {
		ucrmRoleFlagName = "ucrmRole"
	} else {
		ucrmRoleFlagName = fmt.Sprintf("%v.ucrmRole", cmdPrefix)
	}

	var ucrmRoleFlagDefault string

	_ = cmd.PersistentFlags().String(ucrmRoleFlagName, ucrmRoleFlagDefault, ucrmRoleDescription)

	return nil
}

func registerImportUserSchemaUnmsID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unmsIdDescription := `Optional user's ID in UISP.`

	var unmsIdFlagName string
	if cmdPrefix == "" {
		unmsIdFlagName = "unmsId"
	} else {
		unmsIdFlagName = fmt.Sprintf("%v.unmsId", cmdPrefix)
	}

	var unmsIdFlagDefault string

	_ = cmd.PersistentFlags().String(unmsIdFlagName, unmsIdFlagDefault, unmsIdDescription)

	return nil
}

func registerImportUserSchemaUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. Username used for login.`

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelImportUserSchemaFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, emailAdded := retrieveImportUserSchemaEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, firstNameAdded := retrieveImportUserSchemaFirstNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firstNameAdded

	err, isActiveAdded := retrieveImportUserSchemaIsActiveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isActiveAdded

	err, isSuperAdminAdded := retrieveImportUserSchemaIsSuperAdminFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isSuperAdminAdded

	err, lastNameAdded := retrieveImportUserSchemaLastNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastNameAdded

	err, passwordHashAdded := retrieveImportUserSchemaPasswordHashFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordHashAdded

	err, totpAuthSecretAdded := retrieveImportUserSchemaTotpAuthSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totpAuthSecretAdded

	err, ucrmIdAdded := retrieveImportUserSchemaUcrmIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmIdAdded

	err, ucrmRoleAdded := retrieveImportUserSchemaUcrmRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmRoleAdded

	err, unmsIdAdded := retrieveImportUserSchemaUnmsIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unmsIdAdded

	err, usernameAdded := retrieveImportUserSchemaUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveImportUserSchemaEmailFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = &emailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaFirstNameFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firstNameFlagName := fmt.Sprintf("%v.firstName", cmdPrefix)
	if cmd.Flags().Changed(firstNameFlagName) {

		var firstNameFlagName string
		if cmdPrefix == "" {
			firstNameFlagName = "firstName"
		} else {
			firstNameFlagName = fmt.Sprintf("%v.firstName", cmdPrefix)
		}

		firstNameFlagValue, err := cmd.Flags().GetString(firstNameFlagName)
		if err != nil {
			return err, false
		}
		m.FirstName = firstNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaIsActiveFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isActiveFlagName := fmt.Sprintf("%v.isActive", cmdPrefix)
	if cmd.Flags().Changed(isActiveFlagName) {

		var isActiveFlagName string
		if cmdPrefix == "" {
			isActiveFlagName = "isActive"
		} else {
			isActiveFlagName = fmt.Sprintf("%v.isActive", cmdPrefix)
		}

		isActiveFlagValue, err := cmd.Flags().GetBool(isActiveFlagName)
		if err != nil {
			return err, false
		}
		m.IsActive = &isActiveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaIsSuperAdminFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isSuperAdminFlagName := fmt.Sprintf("%v.isSuperAdmin", cmdPrefix)
	if cmd.Flags().Changed(isSuperAdminFlagName) {

		var isSuperAdminFlagName string
		if cmdPrefix == "" {
			isSuperAdminFlagName = "isSuperAdmin"
		} else {
			isSuperAdminFlagName = fmt.Sprintf("%v.isSuperAdmin", cmdPrefix)
		}

		isSuperAdminFlagValue, err := cmd.Flags().GetBool(isSuperAdminFlagName)
		if err != nil {
			return err, false
		}
		m.IsSuperAdmin = &isSuperAdminFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaLastNameFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastNameFlagName := fmt.Sprintf("%v.lastName", cmdPrefix)
	if cmd.Flags().Changed(lastNameFlagName) {

		var lastNameFlagName string
		if cmdPrefix == "" {
			lastNameFlagName = "lastName"
		} else {
			lastNameFlagName = fmt.Sprintf("%v.lastName", cmdPrefix)
		}

		lastNameFlagValue, err := cmd.Flags().GetString(lastNameFlagName)
		if err != nil {
			return err, false
		}
		m.LastName = lastNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaPasswordHashFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordHashFlagName := fmt.Sprintf("%v.passwordHash", cmdPrefix)
	if cmd.Flags().Changed(passwordHashFlagName) {

		var passwordHashFlagName string
		if cmdPrefix == "" {
			passwordHashFlagName = "passwordHash"
		} else {
			passwordHashFlagName = fmt.Sprintf("%v.passwordHash", cmdPrefix)
		}

		passwordHashFlagValue, err := cmd.Flags().GetString(passwordHashFlagName)
		if err != nil {
			return err, false
		}
		m.PasswordHash = &passwordHashFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaTotpAuthSecretFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totpAuthSecretFlagName := fmt.Sprintf("%v.totpAuthSecret", cmdPrefix)
	if cmd.Flags().Changed(totpAuthSecretFlagName) {

		var totpAuthSecretFlagName string
		if cmdPrefix == "" {
			totpAuthSecretFlagName = "totpAuthSecret"
		} else {
			totpAuthSecretFlagName = fmt.Sprintf("%v.totpAuthSecret", cmdPrefix)
		}

		totpAuthSecretFlagValue, err := cmd.Flags().GetString(totpAuthSecretFlagName)
		if err != nil {
			return err, false
		}
		m.TotpAuthSecret = totpAuthSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaUcrmIDFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmIdFlagName := fmt.Sprintf("%v.ucrmId", cmdPrefix)
	if cmd.Flags().Changed(ucrmIdFlagName) {

		var ucrmIdFlagName string
		if cmdPrefix == "" {
			ucrmIdFlagName = "ucrmId"
		} else {
			ucrmIdFlagName = fmt.Sprintf("%v.ucrmId", cmdPrefix)
		}

		ucrmIdFlagValue, err := cmd.Flags().GetString(ucrmIdFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmID = &ucrmIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaUcrmRoleFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmRoleFlagName := fmt.Sprintf("%v.ucrmRole", cmdPrefix)
	if cmd.Flags().Changed(ucrmRoleFlagName) {

		var ucrmRoleFlagName string
		if cmdPrefix == "" {
			ucrmRoleFlagName = "ucrmRole"
		} else {
			ucrmRoleFlagName = fmt.Sprintf("%v.ucrmRole", cmdPrefix)
		}

		ucrmRoleFlagValue, err := cmd.Flags().GetString(ucrmRoleFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmRole = &ucrmRoleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaUnmsIDFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unmsIdFlagName := fmt.Sprintf("%v.unmsId", cmdPrefix)
	if cmd.Flags().Changed(unmsIdFlagName) {

		var unmsIdFlagName string
		if cmdPrefix == "" {
			unmsIdFlagName = "unmsId"
		} else {
			unmsIdFlagName = fmt.Sprintf("%v.unmsId", cmdPrefix)
		}

		unmsIdFlagValue, err := cmd.Flags().GetString(unmsIdFlagName)
		if err != nil {
			return err, false
		}
		m.UnmsID = unmsIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImportUserSchemaUsernameFlags(depth int, m *models.ImportUserSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = &usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
