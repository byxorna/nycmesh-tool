// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Overview

// register flags to command
func registerModelOverviewFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOverviewAntenna(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOverviewChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOverviewAntenna(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var antennaFlagName string
	if cmdPrefix == "" {
		antennaFlagName = "antenna"
	} else {
		antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
	}

	if err := registerModelAntennaFlags(depth+1, antennaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerOverviewChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := ``

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOverviewFlags(depth int, m *models.Overview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, antennaAdded := retrieveOverviewAntennaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded

	err, channelWidthAdded := retrieveOverviewChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	return nil, retAdded
}

func retrieveOverviewAntennaFlags(depth int, m *models.Overview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaFlagName := fmt.Sprintf("%v.antenna", cmdPrefix)
	if cmd.Flags().Changed(antennaFlagName) {
		// info: complex object antenna Antenna is retrieved outside this Changed() block
	}
	antennaFlagValue := m.Antenna
	if swag.IsZero(antennaFlagValue) {
		antennaFlagValue = &models.Antenna{}
	}

	err, antennaAdded := retrieveModelAntennaFlags(depth+1, antennaFlagValue, antennaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded
	if antennaAdded {
		m.Antenna = antennaFlagValue
	}

	return nil, retAdded
}

func retrieveOverviewChannelWidthFlags(depth int, m *models.Overview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetFloat64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}
