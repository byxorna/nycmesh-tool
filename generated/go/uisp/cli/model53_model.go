// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model53

// register flags to command
func registerModelModel53Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel53Comment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel53IsEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel53Mac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel53Comment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commentDescription := `Required. `

	var commentFlagName string
	if cmdPrefix == "" {
		commentFlagName = "comment"
	} else {
		commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
	}

	var commentFlagDefault string

	_ = cmd.PersistentFlags().String(commentFlagName, commentFlagDefault, commentDescription)

	return nil
}

func registerModel53IsEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isEnabledDescription := `Required. `

	var isEnabledFlagName string
	if cmdPrefix == "" {
		isEnabledFlagName = "isEnabled"
	} else {
		isEnabledFlagName = fmt.Sprintf("%v.isEnabled", cmdPrefix)
	}

	var isEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isEnabledFlagName, isEnabledFlagDefault, isEnabledDescription)

	return nil
}

func registerModel53Mac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := `Required. MAC address`

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel53Flags(depth int, m *models.Model53, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commentAdded := retrieveModel53CommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commentAdded

	err, isEnabledAdded := retrieveModel53IsEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isEnabledAdded

	err, macAdded := retrieveModel53MacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	return nil, retAdded
}

func retrieveModel53CommentFlags(depth int, m *models.Model53, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commentFlagName := fmt.Sprintf("%v.comment", cmdPrefix)
	if cmd.Flags().Changed(commentFlagName) {

		var commentFlagName string
		if cmdPrefix == "" {
			commentFlagName = "comment"
		} else {
			commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
		}

		commentFlagValue, err := cmd.Flags().GetString(commentFlagName)
		if err != nil {
			return err, false
		}
		m.Comment = &commentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel53IsEnabledFlags(depth int, m *models.Model53, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isEnabledFlagName := fmt.Sprintf("%v.isEnabled", cmdPrefix)
	if cmd.Flags().Changed(isEnabledFlagName) {

		var isEnabledFlagName string
		if cmdPrefix == "" {
			isEnabledFlagName = "isEnabled"
		} else {
			isEnabledFlagName = fmt.Sprintf("%v.isEnabled", cmdPrefix)
		}

		isEnabledFlagValue, err := cmd.Flags().GetBool(isEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsEnabled = &isEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel53MacFlags(depth int, m *models.Model53, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = &macFlagValue

		retAdded = true
	}

	return nil, retAdded
}
