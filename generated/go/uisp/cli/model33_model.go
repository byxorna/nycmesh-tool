// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model33

// register flags to command
func registerModelModel33Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel33Connected(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel33DeviceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel33DuplicateOf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel33Error(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel33Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel33Protocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel33SnmpCommunity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel33Status(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel33Connected(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectedDescription := `Required. `

	var connectedFlagName string
	if cmdPrefix == "" {
		connectedFlagName = "connected"
	} else {
		connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
	}

	var connectedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(connectedFlagName, connectedFlagDefault, connectedDescription)

	return nil
}

func registerModel33DeviceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceIdDescription := `Required. `

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}

func registerModel33DuplicateOf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	duplicateOfDescription := `Required. `

	var duplicateOfFlagName string
	if cmdPrefix == "" {
		duplicateOfFlagName = "duplicateOf"
	} else {
		duplicateOfFlagName = fmt.Sprintf("%v.duplicateOf", cmdPrefix)
	}

	var duplicateOfFlagDefault string

	_ = cmd.PersistentFlags().String(duplicateOfFlagName, duplicateOfFlagDefault, duplicateOfDescription)

	return nil
}

func registerModel33Error(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorDescription := `Required. `

	var errorFlagName string
	if cmdPrefix == "" {
		errorFlagName = "error"
	} else {
		errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var errorFlagDefault string

	_ = cmd.PersistentFlags().String(errorFlagName, errorFlagDefault, errorDescription)

	return nil
}

func registerModel33Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerModel33Protocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protocolDescription := `Required. `

	var protocolFlagName string
	if cmdPrefix == "" {
		protocolFlagName = "protocol"
	} else {
		protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var protocolFlagDefault string

	_ = cmd.PersistentFlags().String(protocolFlagName, protocolFlagDefault, protocolDescription)

	return nil
}

func registerModel33SnmpCommunity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snmpCommunityDescription := `Required. `

	var snmpCommunityFlagName string
	if cmdPrefix == "" {
		snmpCommunityFlagName = "snmpCommunity"
	} else {
		snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	}

	var snmpCommunityFlagDefault string

	_ = cmd.PersistentFlags().String(snmpCommunityFlagName, snmpCommunityFlagDefault, snmpCommunityDescription)

	return nil
}

func registerModel33Status(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Required. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel33Flags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, connectedAdded := retrieveModel33ConnectedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectedAdded

	err, deviceIdAdded := retrieveModel33DeviceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdAdded

	err, duplicateOfAdded := retrieveModel33DuplicateOfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || duplicateOfAdded

	err, errorAdded := retrieveModel33ErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorAdded

	err, nameAdded := retrieveModel33NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, protocolAdded := retrieveModel33ProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protocolAdded

	err, snmpCommunityAdded := retrieveModel33SnmpCommunityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snmpCommunityAdded

	err, statusAdded := retrieveModel33StatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveModel33ConnectedFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectedFlagName := fmt.Sprintf("%v.connected", cmdPrefix)
	if cmd.Flags().Changed(connectedFlagName) {

		var connectedFlagName string
		if cmdPrefix == "" {
			connectedFlagName = "connected"
		} else {
			connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
		}

		connectedFlagValue, err := cmd.Flags().GetBool(connectedFlagName)
		if err != nil {
			return err, false
		}
		m.Connected = &connectedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel33DeviceIDFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdFlagName := fmt.Sprintf("%v.deviceId", cmdPrefix)
	if cmd.Flags().Changed(deviceIdFlagName) {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel33DuplicateOfFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	duplicateOfFlagName := fmt.Sprintf("%v.duplicateOf", cmdPrefix)
	if cmd.Flags().Changed(duplicateOfFlagName) {

		var duplicateOfFlagName string
		if cmdPrefix == "" {
			duplicateOfFlagName = "duplicateOf"
		} else {
			duplicateOfFlagName = fmt.Sprintf("%v.duplicateOf", cmdPrefix)
		}

		duplicateOfFlagValue, err := cmd.Flags().GetString(duplicateOfFlagName)
		if err != nil {
			return err, false
		}
		m.DuplicateOf = &duplicateOfFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel33ErrorFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorFlagName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(errorFlagName) {

		var errorFlagName string
		if cmdPrefix == "" {
			errorFlagName = "error"
		} else {
			errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		errorFlagValue, err := cmd.Flags().GetString(errorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = &errorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel33NameFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel33ProtocolFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protocolFlagName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(protocolFlagName) {

		var protocolFlagName string
		if cmdPrefix == "" {
			protocolFlagName = "protocol"
		} else {
			protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		protocolFlagValue, err := cmd.Flags().GetString(protocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = &protocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel33SnmpCommunityFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snmpCommunityFlagName := fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	if cmd.Flags().Changed(snmpCommunityFlagName) {

		var snmpCommunityFlagName string
		if cmdPrefix == "" {
			snmpCommunityFlagName = "snmpCommunity"
		} else {
			snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
		}

		snmpCommunityFlagValue, err := cmd.Flags().GetString(snmpCommunityFlagName)
		if err != nil {
			return err, false
		}
		m.SnmpCommunity = &snmpCommunityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel33StatusFlags(depth int, m *models.Model33, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
