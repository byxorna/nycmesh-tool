// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Attributes

// register flags to command
func registerModelAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAttributesSeries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAttributesSeries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	seriesDescription := ``

	var seriesFlagName string
	if cmdPrefix == "" {
		seriesFlagName = "series"
	} else {
		seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
	}

	var seriesFlagDefault string

	_ = cmd.PersistentFlags().String(seriesFlagName, seriesFlagDefault, seriesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAttributesFlags(depth int, m *models.Attributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, seriesAdded := retrieveAttributesSeriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || seriesAdded

	return nil, retAdded
}

func retrieveAttributesSeriesFlags(depth int, m *models.Attributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	seriesFlagName := fmt.Sprintf("%v.series", cmdPrefix)
	if cmd.Flags().Changed(seriesFlagName) {

		var seriesFlagName string
		if cmdPrefix == "" {
			seriesFlagName = "series"
		} else {
			seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
		}

		seriesFlagValue, err := cmd.Flags().GetString(seriesFlagName)
		if err != nil {
			return err, false
		}
		m.Series = seriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
