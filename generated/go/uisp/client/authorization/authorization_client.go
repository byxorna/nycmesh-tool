// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAccessgroupsSitesGroupid(params *DeleteAccessgroupsSitesGroupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccessgroupsSitesGroupidOK, error)

	DeleteAccessgroupsSitesGroupidSiteid(params *DeleteAccessgroupsSitesGroupidSiteidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccessgroupsSitesGroupidSiteidOK, error)

	GetAccessgroupsSites(params *GetAccessgroupsSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccessgroupsSitesOK, error)

	GetAccessgroupsSitesGroupid(params *GetAccessgroupsSitesGroupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccessgroupsSitesGroupidOK, error)

	GetNmsAccountLoginUbiquiti(params *GetNmsAccountLoginUbiquitiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsAccountLoginUbiquitiOK, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error)

	GetUserTotpauth(params *GetUserTotpauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserTotpauthOK, error)

	PostAccessgroupsSites(params *PostAccessgroupsSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAccessgroupsSitesOK, error)

	PostUserCheckcredentials(params *PostUserCheckcredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserCheckcredentialsOK, error)

	PostUserChecksession(params *PostUserChecksessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserChecksessionOK, error)

	PostUserLastreleasenotesseen(params *PostUserLastreleasenotesseenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserLastreleasenotesseenOK, error)

	PostUserLogin(params *PostUserLoginParams, opts ...ClientOption) (*PostUserLoginOK, *PostUserLoginCreated, error)

	PostUserLoginInviteLocal(params *PostUserLoginInviteLocalParams, opts ...ClientOption) (*PostUserLoginInviteLocalOK, error)

	PostUserLoginInviteUbiquiti(params *PostUserLoginInviteUbiquitiParams, opts ...ClientOption) (*PostUserLoginInviteUbiquitiOK, error)

	PostUserLoginTotpauth(params *PostUserLoginTotpauthParams, opts ...ClientOption) (*PostUserLoginTotpauthOK, error)

	PostUserLoginUbiquiti(params *PostUserLoginUbiquitiParams, opts ...ClientOption) (*PostUserLoginUbiquitiOK, error)

	PostUserLogout(params *PostUserLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserLogoutOK, error)

	PostUserPasswordRequestreset(params *PostUserPasswordRequestresetParams, opts ...ClientOption) (*PostUserPasswordRequestresetOK, error)

	PostUserPasswordReset(params *PostUserPasswordResetParams, opts ...ClientOption) (*PostUserPasswordResetOK, error)

	PostUserPasswordStrength(params *PostUserPasswordStrengthParams, opts ...ClientOption) (*PostUserPasswordStrengthOK, error)

	PostUserSsoVerify(params *PostUserSsoVerifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserSsoVerifyOK, error)

	PutAccessgroupsSitesGroupid(params *PutAccessgroupsSitesGroupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAccessgroupsSitesGroupidOK, error)

	PutAccessgroupsSitesGroupidSiteid(params *PutAccessgroupsSitesGroupidSiteidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAccessgroupsSitesGroupidSiteidOK, error)

	PutUser(params *PutUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserOK, error)

	PutUserDisabledtotpauth(params *PutUserDisabledtotpauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserDisabledtotpauthOK, error)

	PutUserPreferences(params *PutUserPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserPreferencesOK, error)

	PutUserSsoEnable(params *PutUserSsoEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserSsoEnableOK, error)

	PutUserTotpauth(params *PutUserTotpauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserTotpauthOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAccessgroupsSitesGroupid deletes site access group
*/
func (a *Client) DeleteAccessgroupsSitesGroupid(params *DeleteAccessgroupsSitesGroupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccessgroupsSitesGroupidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccessgroupsSitesGroupidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccessgroupsSitesGroupid",
		Method:             "DELETE",
		PathPattern:        "/access-groups/sites/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccessgroupsSitesGroupidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccessgroupsSitesGroupidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccessgroupsSitesGroupid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAccessgroupsSitesGroupidSiteid removes access to single site
*/
func (a *Client) DeleteAccessgroupsSitesGroupidSiteid(params *DeleteAccessgroupsSitesGroupidSiteidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccessgroupsSitesGroupidSiteidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccessgroupsSitesGroupidSiteidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccessgroupsSitesGroupidSiteid",
		Method:             "DELETE",
		PathPattern:        "/access-groups/sites/{groupId}/{siteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccessgroupsSitesGroupidSiteidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccessgroupsSitesGroupidSiteidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccessgroupsSitesGroupidSiteid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccessgroupsSites returns site access groups
*/
func (a *Client) GetAccessgroupsSites(params *GetAccessgroupsSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccessgroupsSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessgroupsSitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccessgroupsSites",
		Method:             "GET",
		PathPattern:        "/access-groups/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccessgroupsSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessgroupsSitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccessgroupsSites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccessgroupsSitesGroupid gets site access group
*/
func (a *Client) GetAccessgroupsSitesGroupid(params *GetAccessgroupsSitesGroupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccessgroupsSitesGroupidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessgroupsSitesGroupidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccessgroupsSitesGroupid",
		Method:             "GET",
		PathPattern:        "/access-groups/sites/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccessgroupsSitesGroupidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessgroupsSitesGroupidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccessgroupsSitesGroupid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsAccountLoginUbiquiti s s o authentication response endpoint
*/
func (a *Client) GetNmsAccountLoginUbiquiti(params *GetNmsAccountLoginUbiquitiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsAccountLoginUbiquitiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsAccountLoginUbiquitiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsAccountLoginUbiquiti",
		Method:             "GET",
		PathPattern:        "/nms/account/login/ubiquiti",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsAccountLoginUbiquitiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsAccountLoginUbiquitiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsAccountLoginUbiquiti: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUser gets the authenticated user
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserTotpauth gets new information for two factor authentication
*/
func (a *Client) GetUserTotpauth(params *GetUserTotpauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserTotpauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTotpauthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserTotpauth",
		Method:             "GET",
		PathPattern:        "/user/totpauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserTotpauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserTotpauthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserTotpauth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAccessgroupsSites creates new site access group
*/
func (a *Client) PostAccessgroupsSites(params *PostAccessgroupsSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAccessgroupsSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccessgroupsSitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postAccessgroupsSites",
		Method:             "POST",
		PathPattern:        "/access-groups/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAccessgroupsSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccessgroupsSitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAccessgroupsSites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserCheckcredentials checks user credentials
*/
func (a *Client) PostUserCheckcredentials(params *PostUserCheckcredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserCheckcredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserCheckcredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserCheckcredentials",
		Method:             "POST",
		PathPattern:        "/user/check-credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserCheckcredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserCheckcredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserCheckcredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserChecksession checks that the session token and cookie are valid
*/
func (a *Client) PostUserChecksession(params *PostUserChecksessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserChecksessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserChecksessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserChecksession",
		Method:             "POST",
		PathPattern:        "/user/check-session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserChecksessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserChecksessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserChecksession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLastreleasenotesseen updates authenticated last release notes seen version
*/
func (a *Client) PostUserLastreleasenotesseen(params *PostUserLastreleasenotesseenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserLastreleasenotesseenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLastreleasenotesseenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLastreleasenotesseen",
		Method:             "POST",
		PathPattern:        "/user/last-release-notes-seen",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLastreleasenotesseenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLastreleasenotesseenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserLastreleasenotesseen: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLogin logins
*/
func (a *Client) PostUserLogin(params *PostUserLoginParams, opts ...ClientOption) (*PostUserLoginOK, *PostUserLoginCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLogin",
		Method:             "POST",
		PathPattern:        "/user/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostUserLoginOK:
		return value, nil, nil
	case *PostUserLoginCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLoginInviteLocal finishes user invitation using local password
*/
func (a *Client) PostUserLoginInviteLocal(params *PostUserLoginInviteLocalParams, opts ...ClientOption) (*PostUserLoginInviteLocalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLoginInviteLocalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLoginInviteLocal",
		Method:             "POST",
		PathPattern:        "/user/login/invite/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLoginInviteLocalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLoginInviteLocalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserLoginInviteLocal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLoginInviteUbiquiti finishes user invitation using ubiquiti s s o
*/
func (a *Client) PostUserLoginInviteUbiquiti(params *PostUserLoginInviteUbiquitiParams, opts ...ClientOption) (*PostUserLoginInviteUbiquitiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLoginInviteUbiquitiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLoginInviteUbiquiti",
		Method:             "POST",
		PathPattern:        "/user/login/invite/ubiquiti",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLoginInviteUbiquitiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLoginInviteUbiquitiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserLoginInviteUbiquiti: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLoginTotpauth twos factor authentication login step 2
*/
func (a *Client) PostUserLoginTotpauth(params *PostUserLoginTotpauthParams, opts ...ClientOption) (*PostUserLoginTotpauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLoginTotpauthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLoginTotpauth",
		Method:             "POST",
		PathPattern:        "/user/login/totpauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLoginTotpauthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLoginTotpauthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserLoginTotpauth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLoginUbiquiti logins using ubiquiti s s o
*/
func (a *Client) PostUserLoginUbiquiti(params *PostUserLoginUbiquitiParams, opts ...ClientOption) (*PostUserLoginUbiquitiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLoginUbiquitiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLoginUbiquiti",
		Method:             "POST",
		PathPattern:        "/user/login/ubiquiti",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLoginUbiquitiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLoginUbiquitiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserLoginUbiquiti: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLogout logouts
*/
func (a *Client) PostUserLogout(params *PostUserLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLogout",
		Method:             "POST",
		PathPattern:        "/user/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserLogout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserPasswordRequestreset requests password reset
*/
func (a *Client) PostUserPasswordRequestreset(params *PostUserPasswordRequestresetParams, opts ...ClientOption) (*PostUserPasswordRequestresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserPasswordRequestresetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserPasswordRequestreset",
		Method:             "POST",
		PathPattern:        "/user/password/requestreset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserPasswordRequestresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserPasswordRequestresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserPasswordRequestreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserPasswordReset resets user password
*/
func (a *Client) PostUserPasswordReset(params *PostUserPasswordResetParams, opts ...ClientOption) (*PostUserPasswordResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserPasswordResetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserPasswordReset",
		Method:             "POST",
		PathPattern:        "/user/password/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserPasswordResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserPasswordResetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserPasswordReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserPasswordStrength checks password strength
*/
func (a *Client) PostUserPasswordStrength(params *PostUserPasswordStrengthParams, opts ...ClientOption) (*PostUserPasswordStrengthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserPasswordStrengthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserPasswordStrength",
		Method:             "POST",
		PathPattern:        "/user/password/strength",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserPasswordStrengthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserPasswordStrengthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserPasswordStrength: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserSsoVerify verifies s s o login result
*/
func (a *Client) PostUserSsoVerify(params *PostUserSsoVerifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserSsoVerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserSsoVerifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserSsoVerify",
		Method:             "POST",
		PathPattern:        "/user/sso/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserSsoVerifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserSsoVerifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserSsoVerify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAccessgroupsSitesGroupid updates site access group
*/
func (a *Client) PutAccessgroupsSitesGroupid(params *PutAccessgroupsSitesGroupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAccessgroupsSitesGroupidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccessgroupsSitesGroupidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putAccessgroupsSitesGroupid",
		Method:             "PUT",
		PathPattern:        "/access-groups/sites/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAccessgroupsSitesGroupidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAccessgroupsSitesGroupidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAccessgroupsSitesGroupid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAccessgroupsSitesGroupidSiteid adds or change access to single site
*/
func (a *Client) PutAccessgroupsSitesGroupidSiteid(params *PutAccessgroupsSitesGroupidSiteidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAccessgroupsSitesGroupidSiteidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccessgroupsSitesGroupidSiteidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putAccessgroupsSitesGroupidSiteid",
		Method:             "PUT",
		PathPattern:        "/access-groups/sites/{groupId}/{siteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAccessgroupsSitesGroupidSiteidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAccessgroupsSitesGroupidSiteidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAccessgroupsSitesGroupidSiteid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUser updates authenticated user
*/
func (a *Client) PutUser(params *PutUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putUser",
		Method:             "PUT",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUserDisabledtotpauth disables two factor authorization for user
*/
func (a *Client) PutUserDisabledtotpauth(params *PutUserDisabledtotpauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserDisabledtotpauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserDisabledtotpauthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putUserDisabledtotpauth",
		Method:             "PUT",
		PathPattern:        "/user/disabledtotpauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUserDisabledtotpauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserDisabledtotpauthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putUserDisabledtotpauth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUserPreferences updates authenticated user s preferences
*/
func (a *Client) PutUserPreferences(params *PutUserPreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserPreferencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putUserPreferences",
		Method:             "PUT",
		PathPattern:        "/user/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUserPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putUserPreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUserSsoEnable enables ubiquiti s s o for current user
*/
func (a *Client) PutUserSsoEnable(params *PutUserSsoEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserSsoEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserSsoEnableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putUserSsoEnable",
		Method:             "PUT",
		PathPattern:        "/user/sso/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUserSsoEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserSsoEnableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putUserSsoEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutUserTotpauth sets two factor authentication for user
*/
func (a *Client) PutUserTotpauth(params *PutUserTotpauthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutUserTotpauthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserTotpauthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putUserTotpauth",
		Method:             "PUT",
		PathPattern:        "/user/totpauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUserTotpauthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserTotpauthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putUserTotpauth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
