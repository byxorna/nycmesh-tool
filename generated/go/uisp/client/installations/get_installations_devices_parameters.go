// Code generated by go-swagger; DO NOT EDIT.

package installations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInstallationsDevicesParams creates a new GetInstallationsDevicesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInstallationsDevicesParams() *GetInstallationsDevicesParams {
	return &GetInstallationsDevicesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstallationsDevicesParamsWithTimeout creates a new GetInstallationsDevicesParams object
// with the ability to set a timeout on a request.
func NewGetInstallationsDevicesParamsWithTimeout(timeout time.Duration) *GetInstallationsDevicesParams {
	return &GetInstallationsDevicesParams{
		timeout: timeout,
	}
}

// NewGetInstallationsDevicesParamsWithContext creates a new GetInstallationsDevicesParams object
// with the ability to set a context for a request.
func NewGetInstallationsDevicesParamsWithContext(ctx context.Context) *GetInstallationsDevicesParams {
	return &GetInstallationsDevicesParams{
		Context: ctx,
	}
}

// NewGetInstallationsDevicesParamsWithHTTPClient creates a new GetInstallationsDevicesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInstallationsDevicesParamsWithHTTPClient(client *http.Client) *GetInstallationsDevicesParams {
	return &GetInstallationsDevicesParams{
		HTTPClient: client,
	}
}

/* GetInstallationsDevicesParams contains all the parameters to send to the API endpoint
   for the get installations devices operation.

   Typically these are written to a http.Request.
*/
type GetInstallationsDevicesParams struct {

	/* Count.

	   How many devices to get.

	   Default: 100
	*/
	Count *float64

	// Latitude.
	Latitude *float64

	// Longitude.
	Longitude *float64

	/* UserID.

	   If specified, get only devices registered by given users.
	*/
	UserID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get installations devices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstallationsDevicesParams) WithDefaults() *GetInstallationsDevicesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get installations devices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstallationsDevicesParams) SetDefaults() {
	var (
		countDefault = float64(100)
	)

	val := GetInstallationsDevicesParams{
		Count: &countDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get installations devices params
func (o *GetInstallationsDevicesParams) WithTimeout(timeout time.Duration) *GetInstallationsDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get installations devices params
func (o *GetInstallationsDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get installations devices params
func (o *GetInstallationsDevicesParams) WithContext(ctx context.Context) *GetInstallationsDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get installations devices params
func (o *GetInstallationsDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get installations devices params
func (o *GetInstallationsDevicesParams) WithHTTPClient(client *http.Client) *GetInstallationsDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get installations devices params
func (o *GetInstallationsDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get installations devices params
func (o *GetInstallationsDevicesParams) WithCount(count *float64) *GetInstallationsDevicesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get installations devices params
func (o *GetInstallationsDevicesParams) SetCount(count *float64) {
	o.Count = count
}

// WithLatitude adds the latitude to the get installations devices params
func (o *GetInstallationsDevicesParams) WithLatitude(latitude *float64) *GetInstallationsDevicesParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the get installations devices params
func (o *GetInstallationsDevicesParams) SetLatitude(latitude *float64) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the get installations devices params
func (o *GetInstallationsDevicesParams) WithLongitude(longitude *float64) *GetInstallationsDevicesParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the get installations devices params
func (o *GetInstallationsDevicesParams) SetLongitude(longitude *float64) {
	o.Longitude = longitude
}

// WithUserID adds the userID to the get installations devices params
func (o *GetInstallationsDevicesParams) WithUserID(userID []string) *GetInstallationsDevicesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get installations devices params
func (o *GetInstallationsDevicesParams) SetUserID(userID []string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstallationsDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount float64

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatFloat64(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float64

		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat64(qrLatitude)
		if qLatitude != "" {

			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}
	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float64

		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat64(qrLongitude)
		if qLongitude != "" {

			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// binding items for userId
		joinedUserID := o.bindParamUserID(reg)

		// query array param userId
		if err := r.SetQueryParam("userId", joinedUserID...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetInstallationsDevices binds the parameter userId
func (o *GetInstallationsDevicesParams) bindParamUserID(formats strfmt.Registry) []string {
	userIDIR := o.UserID

	var userIDIC []string
	for _, userIDIIR := range userIDIR { // explode []string

		userIDIIV := userIDIIR // string as string
		userIDIC = append(userIDIC, userIDIIV)
	}

	// items.CollectionFormat: "multi"
	userIDIS := swag.JoinByFormat(userIDIC, "multi")

	return userIDIS
}
