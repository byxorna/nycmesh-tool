// Code generated by go-swagger; DO NOT EDIT.

package firmware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new firmware API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for firmware API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetFirmwares(params *GetFirmwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFirmwaresOK, error)

	PostFirmwares(params *PostFirmwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFirmwaresOK, error)

	PostFirmwaresDelete(params *PostFirmwaresDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFirmwaresDeleteOK, error)

	PostFirmwaresDownload(params *PostFirmwaresDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFirmwaresDownloadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetFirmwares fetches available firmware
*/
func (a *Client) GetFirmwares(params *GetFirmwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFirmwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirmwaresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFirmwares",
		Method:             "GET",
		PathPattern:        "/firmwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFirmwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirmwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFirmwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostFirmwares uploads new firmware image
*/
func (a *Client) PostFirmwares(params *PostFirmwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFirmwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFirmwaresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postFirmwares",
		Method:             "POST",
		PathPattern:        "/firmwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostFirmwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFirmwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postFirmwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostFirmwaresDelete batches firmware delete
*/
func (a *Client) PostFirmwaresDelete(params *PostFirmwaresDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFirmwaresDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFirmwaresDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postFirmwaresDelete",
		Method:             "POST",
		PathPattern:        "/firmwares/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostFirmwaresDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFirmwaresDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postFirmwaresDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostFirmwaresDownload batches firmware download
*/
func (a *Client) PostFirmwaresDownload(params *PostFirmwaresDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFirmwaresDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFirmwaresDownloadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postFirmwaresDownload",
		Method:             "POST",
		PathPattern:        "/firmwares/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostFirmwaresDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFirmwaresDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postFirmwaresDownload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
