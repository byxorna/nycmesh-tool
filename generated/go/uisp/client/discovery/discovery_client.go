// Code generated by go-swagger; DO NOT EDIT.

package discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new discovery API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for discovery API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDiscoveryScanstatus(params *GetDiscoveryScanstatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiscoveryScanstatusOK, error)

	GetDiscoveryStatusDeviceid(params *GetDiscoveryStatusDeviceidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiscoveryStatusDeviceidOK, error)

	PostDiscoveryConnectOther(params *PostDiscoveryConnectOtherParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryConnectOtherOK, error)

	PostDiscoveryConnectUbnt(params *PostDiscoveryConnectUbntParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryConnectUbntOK, error)

	PostDiscoveryImport(params *PostDiscoveryImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryImportOK, error)

	PostDiscoveryRescan(params *PostDiscoveryRescanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryRescanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDiscoveryScanstatus gets current scan status payload is w IP
*/
func (a *Client) GetDiscoveryScanstatus(params *GetDiscoveryScanstatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiscoveryScanstatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveryScanstatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDiscoveryScanstatus",
		Method:             "GET",
		PathPattern:        "/discovery/scan-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveryScanstatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiscoveryScanstatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiscoveryScanstatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiscoveryStatusDeviceid gets device s discovery status
*/
func (a *Client) GetDiscoveryStatusDeviceid(params *GetDiscoveryStatusDeviceidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiscoveryStatusDeviceidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveryStatusDeviceidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDiscoveryStatusDeviceid",
		Method:             "GET",
		PathPattern:        "/discovery/status/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveryStatusDeviceidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiscoveryStatusDeviceidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiscoveryStatusDeviceid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDiscoveryConnectOther starts connect process for discovered other devices
*/
func (a *Client) PostDiscoveryConnectOther(params *PostDiscoveryConnectOtherParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryConnectOtherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDiscoveryConnectOtherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDiscoveryConnectOther",
		Method:             "POST",
		PathPattern:        "/discovery/connect/other",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDiscoveryConnectOtherReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDiscoveryConnectOtherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDiscoveryConnectOther: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDiscoveryConnectUbnt starts connect process for discovered u b n t devices
*/
func (a *Client) PostDiscoveryConnectUbnt(params *PostDiscoveryConnectUbntParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryConnectUbntOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDiscoveryConnectUbntParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDiscoveryConnectUbnt",
		Method:             "POST",
		PathPattern:        "/discovery/connect/ubnt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDiscoveryConnectUbntReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDiscoveryConnectUbntOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDiscoveryConnectUbnt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDiscoveryImport imports devices to discovery
*/
func (a *Client) PostDiscoveryImport(params *PostDiscoveryImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDiscoveryImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDiscoveryImport",
		Method:             "POST",
		PathPattern:        "/discovery/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDiscoveryImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDiscoveryImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDiscoveryImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDiscoveryRescan restarts scanning process
*/
func (a *Client) PostDiscoveryRescan(params *PostDiscoveryRescanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiscoveryRescanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDiscoveryRescanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDiscoveryRescan",
		Method:             "POST",
		PathPattern:        "/discovery/rescan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDiscoveryRescanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDiscoveryRescanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDiscoveryRescan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
