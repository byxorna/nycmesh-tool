// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
)

// PostDevicesDeviceidBackupsReader is a Reader for the PostDevicesDeviceidBackups structure.
type PostDevicesDeviceidBackupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDevicesDeviceidBackupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDevicesDeviceidBackupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostDevicesDeviceidBackupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostDevicesDeviceidBackupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostDevicesDeviceidBackupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostDevicesDeviceidBackupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDevicesDeviceidBackupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostDevicesDeviceidBackupsOK creates a PostDevicesDeviceidBackupsOK with default headers values
func NewPostDevicesDeviceidBackupsOK() *PostDevicesDeviceidBackupsOK {
	return &PostDevicesDeviceidBackupsOK{}
}

/* PostDevicesDeviceidBackupsOK describes a response with status code 200, with default header values.

Successful
*/
type PostDevicesDeviceidBackupsOK struct {
	Payload *models.DeviceBackup
}

func (o *PostDevicesDeviceidBackupsOK) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/backups][%d] postDevicesDeviceidBackupsOK  %+v", 200, o.Payload)
}
func (o *PostDevicesDeviceidBackupsOK) GetPayload() *models.DeviceBackup {
	return o.Payload
}

func (o *PostDevicesDeviceidBackupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceBackup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDevicesDeviceidBackupsBadRequest creates a PostDevicesDeviceidBackupsBadRequest with default headers values
func NewPostDevicesDeviceidBackupsBadRequest() *PostDevicesDeviceidBackupsBadRequest {
	return &PostDevicesDeviceidBackupsBadRequest{}
}

/* PostDevicesDeviceidBackupsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostDevicesDeviceidBackupsBadRequest struct {
	Payload *models.Error
}

func (o *PostDevicesDeviceidBackupsBadRequest) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/backups][%d] postDevicesDeviceidBackupsBadRequest  %+v", 400, o.Payload)
}
func (o *PostDevicesDeviceidBackupsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostDevicesDeviceidBackupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDevicesDeviceidBackupsUnauthorized creates a PostDevicesDeviceidBackupsUnauthorized with default headers values
func NewPostDevicesDeviceidBackupsUnauthorized() *PostDevicesDeviceidBackupsUnauthorized {
	return &PostDevicesDeviceidBackupsUnauthorized{}
}

/* PostDevicesDeviceidBackupsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostDevicesDeviceidBackupsUnauthorized struct {
	Payload *models.Error
}

func (o *PostDevicesDeviceidBackupsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/backups][%d] postDevicesDeviceidBackupsUnauthorized  %+v", 401, o.Payload)
}
func (o *PostDevicesDeviceidBackupsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostDevicesDeviceidBackupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDevicesDeviceidBackupsForbidden creates a PostDevicesDeviceidBackupsForbidden with default headers values
func NewPostDevicesDeviceidBackupsForbidden() *PostDevicesDeviceidBackupsForbidden {
	return &PostDevicesDeviceidBackupsForbidden{}
}

/* PostDevicesDeviceidBackupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostDevicesDeviceidBackupsForbidden struct {
	Payload *models.Error
}

func (o *PostDevicesDeviceidBackupsForbidden) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/backups][%d] postDevicesDeviceidBackupsForbidden  %+v", 403, o.Payload)
}
func (o *PostDevicesDeviceidBackupsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostDevicesDeviceidBackupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDevicesDeviceidBackupsNotFound creates a PostDevicesDeviceidBackupsNotFound with default headers values
func NewPostDevicesDeviceidBackupsNotFound() *PostDevicesDeviceidBackupsNotFound {
	return &PostDevicesDeviceidBackupsNotFound{}
}

/* PostDevicesDeviceidBackupsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostDevicesDeviceidBackupsNotFound struct {
	Payload *models.Error
}

func (o *PostDevicesDeviceidBackupsNotFound) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/backups][%d] postDevicesDeviceidBackupsNotFound  %+v", 404, o.Payload)
}
func (o *PostDevicesDeviceidBackupsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostDevicesDeviceidBackupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDevicesDeviceidBackupsInternalServerError creates a PostDevicesDeviceidBackupsInternalServerError with default headers values
func NewPostDevicesDeviceidBackupsInternalServerError() *PostDevicesDeviceidBackupsInternalServerError {
	return &PostDevicesDeviceidBackupsInternalServerError{}
}

/* PostDevicesDeviceidBackupsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostDevicesDeviceidBackupsInternalServerError struct {
	Payload *models.Error
}

func (o *PostDevicesDeviceidBackupsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /devices/{deviceId}/backups][%d] postDevicesDeviceidBackupsInternalServerError  %+v", 500, o.Payload)
}
func (o *PostDevicesDeviceidBackupsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostDevicesDeviceidBackupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
