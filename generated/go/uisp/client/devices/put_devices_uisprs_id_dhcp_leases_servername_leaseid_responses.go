// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
)

// PutDevicesUisprsIDDhcpLeasesServernameLeaseidReader is a Reader for the PutDevicesUisprsIDDhcpLeasesServernameLeaseid structure.
type PutDevicesUisprsIDDhcpLeasesServernameLeaseidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidOK creates a PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK with default headers values
func NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidOK() *PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK {
	return &PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK{}
}

/* PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK describes a response with status code 200, with default header values.

Successful
*/
type PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK struct {
	Payload *models.DHCPLease1
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK) Error() string {
	return fmt.Sprintf("[PUT /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesUisprsIdDhcpLeasesServernameLeaseidOK  %+v", 200, o.Payload)
}
func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK) GetPayload() *models.DHCPLease1 {
	return o.Payload
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DHCPLease1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest creates a PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest with default headers values
func NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest() *PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest {
	return &PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest{}
}

/* PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest struct {
	Payload *models.Error
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest) Error() string {
	return fmt.Sprintf("[PUT /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesUisprsIdDhcpLeasesServernameLeaseidBadRequest  %+v", 400, o.Payload)
}
func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized creates a PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized with default headers values
func NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized() *PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized {
	return &PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized{}
}

/* PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized struct {
	Payload *models.Error
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesUisprsIdDhcpLeasesServernameLeaseidUnauthorized  %+v", 401, o.Payload)
}
func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden creates a PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden with default headers values
func NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden() *PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden {
	return &PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden{}
}

/* PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden struct {
	Payload *models.Error
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden) Error() string {
	return fmt.Sprintf("[PUT /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesUisprsIdDhcpLeasesServernameLeaseidForbidden  %+v", 403, o.Payload)
}
func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound creates a PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound with default headers values
func NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound() *PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound {
	return &PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound{}
}

/* PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound struct {
	Payload *models.Error
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound) Error() string {
	return fmt.Sprintf("[PUT /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesUisprsIdDhcpLeasesServernameLeaseidNotFound  %+v", 404, o.Payload)
}
func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError creates a PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError with default headers values
func NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError() *PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError {
	return &PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError{}
}

/* PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError struct {
	Payload *models.Error
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] putDevicesUisprsIdDhcpLeasesServernameLeaseidInternalServerError  %+v", 500, o.Payload)
}
func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
