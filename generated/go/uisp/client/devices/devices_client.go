// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDevicesDeviceidBackupsBackupid(params *DeleteDevicesDeviceidBackupsBackupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidBackupsBackupidOK, error)

	DeleteDevicesDeviceidInterfacesInterfacename(params *DeleteDevicesDeviceidInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidInterfacesInterfacenameOK, error)

	DeleteDevicesDeviceidInterfacesInterfacenameOspf(params *DeleteDevicesDeviceidInterfacesInterfacenameOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidInterfacesInterfacenameOspfOK, error)

	DeleteDevicesDeviceidUdapiVersionUdapiurl(params *DeleteDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidUdapiVersionUdapiurlOK, error)

	DeleteDevicesEroutersIDDhcpLeasesServernameLeaseid(params *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidOK, error)

	DeleteDevicesEroutersIDDhcpServersServername(params *DeleteDevicesEroutersIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesEroutersIDDhcpServersServernameOK, error)

	DeleteDevicesEroutersIDRouterOspfAreasAreaid(params *DeleteDevicesEroutersIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesEroutersIDRouterOspfAreasAreaidOK, error)

	DeleteDevicesID(params *DeleteDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDOK, error)

	DeleteDevicesIDRouterOspfAreasAreaid(params *DeleteDevicesIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDRouterOspfAreasAreaidOK, error)

	DeleteDevicesIDStations(params *DeleteDevicesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDStationsOK, error)

	DeleteDevicesIDVlansVlanid(params *DeleteDevicesIDVlansVlanidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDVlansVlanidOK, error)

	DeleteDevicesOltsIDOnuProfilesProfileid(params *DeleteDevicesOltsIDOnuProfilesProfileidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesOltsIDOnuProfilesProfileidOK, error)

	DeleteDevicesUisprsIDDhcpLeasesServernameLeaseid(params *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK, error)

	DeleteDevicesUisprsIDDhcpServersServername(params *DeleteDevicesUisprsIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDDhcpServersServernameOK, error)

	DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleid(params *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidOK, error)

	DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleid(params *DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleidOK, error)

	DeleteDevicesUisprsIDFirewallNatsRuleRuleid(params *DeleteDevicesUisprsIDFirewallNatsRuleRuleidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallNatsRuleRuleidOK, error)

	DeleteDevicesUisprsIDFirewallSetsSet(params *DeleteDevicesUisprsIDFirewallSetsSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallSetsSetOK, error)

	DeleteDevicesUisprsIDRouterOspfAreasAreaid(params *DeleteDevicesUisprsIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDRouterOspfAreasAreaidOK, error)

	DeleteDevicesUisprsIDRouterOspfInterfacesInterfacename(params *DeleteDevicesUisprsIDRouterOspfInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDRouterOspfInterfacesInterfacenameOK, error)

	DeleteDevicesUnknownIpaddress(params *DeleteDevicesUnknownIpaddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUnknownIpaddressOK, error)

	GetAirlinkProxyAirlinkbe(params *GetAirlinkProxyAirlinkbeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAirlinkProxyAirlinkbeOK, error)

	GetAirlinkProxyCountriesmapgeojson(params *GetAirlinkProxyCountriesmapgeojsonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetAirlinkProxyElevation(params *GetAirlinkProxyElevationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetAirlinkProxyRainfallr001map(params *GetAirlinkProxyRainfallr001mapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetDevices(params *GetDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOK, error)

	GetDevicesAircubesID(params *GetDevicesAircubesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDOK, error)

	GetDevicesAircubesIDConfigNetwork(params *GetDevicesAircubesIDConfigNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDConfigNetworkOK, error)

	GetDevicesAircubesIDConfigSystem(params *GetDevicesAircubesIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDConfigSystemOK, error)

	GetDevicesAircubesIDConfigWireless(params *GetDevicesAircubesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDConfigWirelessOK, error)

	GetDevicesAircubesIDFrequencylists(params *GetDevicesAircubesIDFrequencylistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDFrequencylistsOK, error)

	GetDevicesAircubesIDNetwork(params *GetDevicesAircubesIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDNetworkOK, error)

	GetDevicesAircubesIDStations(params *GetDevicesAircubesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDStationsOK, error)

	GetDevicesAircubesIDSystem(params *GetDevicesAircubesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDSystemOK, error)

	GetDevicesAircubesIDTxpowerlists(params *GetDevicesAircubesIDTxpowerlistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDTxpowerlistsOK, error)

	GetDevicesAircubesIDWireless(params *GetDevicesAircubesIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDWirelessOK, error)

	GetDevicesAirfibersID(params *GetDevicesAirfibersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirfibersIDOK, error)

	GetDevicesAirfibersIDStations(params *GetDevicesAirfibersIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirfibersIDStationsOK, error)

	GetDevicesAirmaxesID(params *GetDevicesAirmaxesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDOK, error)

	GetDevicesAirmaxesIDConfigWireless(params *GetDevicesAirmaxesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDConfigWirelessOK, error)

	GetDevicesAirmaxesIDFrequencybands(params *GetDevicesAirmaxesIDFrequencybandsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDFrequencybandsOK, error)

	GetDevicesAirmaxesIDSitesurvey(params *GetDevicesAirmaxesIDSitesurveyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDSitesurveyOK, error)

	GetDevicesAirmaxesIDStations(params *GetDevicesAirmaxesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDStationsOK, error)

	GetDevicesAirmaxesIDSystem(params *GetDevicesAirmaxesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDSystemOK, error)

	GetDevicesApsProfiles(params *GetDevicesApsProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesApsProfilesOK, error)

	GetDevicesBlackboxesID(params *GetDevicesBlackboxesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesBlackboxesIDOK, error)

	GetDevicesBlackboxesIDConfig(params *GetDevicesBlackboxesIDConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesBlackboxesIDConfigOK, error)

	GetDevicesDeviceidBackups(params *GetDevicesDeviceidBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidBackupsOK, error)

	GetDevicesDeviceidBackupsBackupid(params *GetDevicesDeviceidBackupsBackupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetDevicesDeviceidInterfaces(params *GetDevicesDeviceidInterfacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidInterfacesOK, error)

	GetDevicesDeviceidInterfacesDatalinkAvailable(params *GetDevicesDeviceidInterfacesDatalinkAvailableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidInterfacesDatalinkAvailableOK, error)

	GetDevicesDeviceidInterfacesInterfacename(params *GetDevicesDeviceidInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidInterfacesInterfacenameOK, error)

	GetDevicesDeviceidLocation(params *GetDevicesDeviceidLocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidLocationOK, error)

	GetDevicesDeviceidMactable(params *GetDevicesDeviceidMactableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidMactableOK, error)

	GetDevicesDeviceidMactablerefresh(params *GetDevicesDeviceidMactablerefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidMactablerefreshOK, error)

	GetDevicesDeviceidUdapiVersionUdapiurl(params *GetDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidUdapiVersionUdapiurlOK, error)

	GetDevicesDiscovered(params *GetDevicesDiscoveredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDiscoveredOK, error)

	GetDevicesEpowersID(params *GetDevicesEpowersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetDevicesEpowersIDConfigurationPower(params *GetDevicesEpowersIDConfigurationPowerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetDevicesEroutersID(params *GetDevicesEroutersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDOK, error)

	GetDevicesEroutersIDDhcpLeases(params *GetDevicesEroutersIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDDhcpLeasesOK, error)

	GetDevicesEroutersIDDhcpServers(params *GetDevicesEroutersIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDDhcpServersOK, error)

	GetDevicesEroutersIDDhcpServersServername(params *GetDevicesEroutersIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDDhcpServersServernameOK, error)

	GetDevicesEroutersIDNetflow(params *GetDevicesEroutersIDNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDNetflowOK, error)

	GetDevicesEroutersIDRouterOspf(params *GetDevicesEroutersIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDRouterOspfOK, error)

	GetDevicesEroutersIDRouterOspfAreas(params *GetDevicesEroutersIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDRouterOspfAreasOK, error)

	GetDevicesEroutersIDRouterRoutes(params *GetDevicesEroutersIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDRouterRoutesOK, error)

	GetDevicesEswitchesID(params *GetDevicesEswitchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEswitchesIDOK, error)

	GetDevicesEswitchesIDSystem(params *GetDevicesEswitchesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEswitchesIDSystemOK, error)

	GetDevicesID(params *GetDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDOK, error)

	GetDevicesIDDetail(params *GetDevicesIDDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDDetailOK, error)

	GetDevicesIDNetflow(params *GetDevicesIDNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDNetflowOK, error)

	GetDevicesIDRouterOspf(params *GetDevicesIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDRouterOspfOK, error)

	GetDevicesIDRouterOspfAreas(params *GetDevicesIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDRouterOspfAreasOK, error)

	GetDevicesIDRouterRoutes(params *GetDevicesIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDRouterRoutesOK, error)

	GetDevicesIDServices(params *GetDevicesIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDServicesOK, error)

	GetDevicesIDStatistics(params *GetDevicesIDStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDStatisticsOK, error)

	GetDevicesIDSupportfile(params *GetDevicesIDSupportfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetDevicesIDSystem(params *GetDevicesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDSystemOK, error)

	GetDevicesIDSystemUnms(params *GetDevicesIDSystemUnmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDSystemUnmsOK, error)

	GetDevicesIDVlans(params *GetDevicesIDVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDVlansOK, error)

	GetDevicesImportStatus(params *GetDevicesImportStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesImportStatusOK, error)

	GetDevicesIps(params *GetDevicesIpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIpsOK, error)

	GetDevicesMacMac(params *GetDevicesMacMacParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesMacMacOK, error)

	GetDevicesMacs(params *GetDevicesMacsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesMacsOK, error)

	GetDevicesModels(params *GetDevicesModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesModelsOK, error)

	GetDevicesOltsID(params *GetDevicesOltsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOltsIDOK, error)

	GetDevicesOltsIDOnuPolicies(params *GetDevicesOltsIDOnuPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOltsIDOnuPoliciesOK, error)

	GetDevicesOltsIDOnuProfiles(params *GetDevicesOltsIDOnuProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOltsIDOnuProfilesOK, error)

	GetDevicesOnus(params *GetDevicesOnusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusOK, error)

	GetDevicesOnusID(params *GetDevicesOnusIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDOK, error)

	GetDevicesOnusIDClients(params *GetDevicesOnusIDClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDClientsOK, error)

	GetDevicesOnusIDNetwork(params *GetDevicesOnusIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDNetworkOK, error)

	GetDevicesOnusIDServices(params *GetDevicesOnusIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDServicesOK, error)

	GetDevicesOnusIDSystem(params *GetDevicesOnusIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDSystemOK, error)

	GetDevicesOnusIDVlans(params *GetDevicesOnusIDVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDVlansOK, error)

	GetDevicesOnusIDWireless(params *GetDevicesOnusIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDWirelessOK, error)

	GetDevicesSolarbeamsID(params *GetDevicesSolarbeamsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesSolarbeamsIDOK, error)

	GetDevicesSolarbeamsIDConfigSystem(params *GetDevicesSolarbeamsIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesSolarbeamsIDConfigSystemOK, error)

	GetDevicesSsids(params *GetDevicesSsidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesSsidsOK, error)

	GetDevicesToughswitchesID(params *GetDevicesToughswitchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesToughswitchesIDOK, error)

	GetDevicesToughswitchesIDSystem(params *GetDevicesToughswitchesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesToughswitchesIDSystemOK, error)

	GetDevicesUisprsID(params *GetDevicesUisprsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDOK, error)

	GetDevicesUisprsIDDhcpLeases(params *GetDevicesUisprsIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDDhcpLeasesOK, error)

	GetDevicesUisprsIDDhcpServers(params *GetDevicesUisprsIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDDhcpServersOK, error)

	GetDevicesUisprsIDDhcpServersServername(params *GetDevicesUisprsIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDDhcpServersServernameOK, error)

	GetDevicesUisprsIDFirewallFilters(params *GetDevicesUisprsIDFirewallFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallFiltersOK, error)

	GetDevicesUisprsIDFirewallMangles(params *GetDevicesUisprsIDFirewallManglesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallManglesOK, error)

	GetDevicesUisprsIDFirewallNats(params *GetDevicesUisprsIDFirewallNatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallNatsOK, error)

	GetDevicesUisprsIDFirewallSets(params *GetDevicesUisprsIDFirewallSetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallSetsOK, error)

	GetDevicesUisprsIDFirewallSettings(params *GetDevicesUisprsIDFirewallSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallSettingsOK, error)

	GetDevicesUisprsIDNetflow(params *GetDevicesUisprsIDNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDNetflowOK, error)

	GetDevicesUisprsIDRouterOspf(params *GetDevicesUisprsIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterOspfOK, error)

	GetDevicesUisprsIDRouterOspfAreas(params *GetDevicesUisprsIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterOspfAreasOK, error)

	GetDevicesUisprsIDRouterOspfInterfaces(params *GetDevicesUisprsIDRouterOspfInterfacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterOspfInterfacesOK, error)

	GetDevicesUisprsIDRouterRoutes(params *GetDevicesUisprsIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterRoutesOK, error)

	GetDevicesUispssID(params *GetDevicesUispssIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUispssIDOK, error)

	GetDevicesUispssIDSystem(params *GetDevicesUispssIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUispssIDSystemOK, error)

	GetDevicesUnknown(params *GetDevicesUnknownParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUnknownOK, error)

	GetDevicesWavesID(params *GetDevicesWavesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesWavesIDOK, error)

	GetDevicesWavesIDStations(params *GetDevicesWavesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesWavesIDStationsOK, error)

	PatchDevicesDeviceidUdapiVersionUdapiurl(params *PatchDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDevicesDeviceidUdapiVersionUdapiurlOK, error)

	PatchDevicesOnusID(params *PatchDevicesOnusIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDevicesOnusIDOK, error)

	PostDevicesAirmaxesStations(params *PostDevicesAirmaxesStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesAirmaxesStationsOK, error)

	PostDevicesAuthorize(params *PostDevicesAuthorizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesAuthorizeOK, error)

	PostDevicesAuthorizefirst(params *PostDevicesAuthorizefirstParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesAuthorizefirstOK, error)

	PostDevicesBackups(params *PostDevicesBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	PostDevicesBlackboxesConfig(params *PostDevicesBlackboxesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesBlackboxesConfigCreated, error)

	PostDevicesBulkdelete(params *PostDevicesBulkdeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesBulkdeleteOK, error)

	PostDevicesConnectOther(params *PostDevicesConnectOtherParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesConnectOtherOK, error)

	PostDevicesConnectUbnt(params *PostDevicesConnectUbntParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesConnectUbntOK, error)

	PostDevicesDeviceidBackups(params *PostDevicesDeviceidBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidBackupsOK, error)

	PostDevicesDeviceidBackupsBackupidApply(params *PostDevicesDeviceidBackupsBackupidApplyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidBackupsBackupidApplyOK, error)

	PostDevicesDeviceidInterfacesBridge(params *PostDevicesDeviceidInterfacesBridgeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesBridgeOK, error)

	PostDevicesDeviceidInterfacesDisablelag(params *PostDevicesDeviceidInterfacesDisablelagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesDisablelagOK, error)

	PostDevicesDeviceidInterfacesEnablelag(params *PostDevicesDeviceidInterfacesEnablelagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesEnablelagOK, error)

	PostDevicesDeviceidInterfacesInterfaceidResetstats(params *PostDevicesDeviceidInterfacesInterfaceidResetstatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfaceidResetstatsOK, error)

	PostDevicesDeviceidInterfacesInterfacenameBlock(params *PostDevicesDeviceidInterfacesInterfacenameBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameBlockOK, error)

	PostDevicesDeviceidInterfacesInterfacenameCabletest(params *PostDevicesDeviceidInterfacesInterfacenameCabletestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameCabletestOK, error)

	PostDevicesDeviceidInterfacesInterfacenameReset(params *PostDevicesDeviceidInterfacesInterfacenameResetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameResetOK, error)

	PostDevicesDeviceidInterfacesInterfacenameUnblock(params *PostDevicesDeviceidInterfacesInterfacenameUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameUnblockOK, error)

	PostDevicesDeviceidInterfacesLag(params *PostDevicesDeviceidInterfacesLagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesLagOK, error)

	PostDevicesDeviceidInterfacesPppoe(params *PostDevicesDeviceidInterfacesPppoeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesPppoeOK, error)

	PostDevicesDeviceidInterfacesVlan(params *PostDevicesDeviceidInterfacesVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesVlanOK, error)

	PostDevicesDeviceidUdapiVersionUdapiurl(params *PostDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidUdapiVersionUdapiurlOK, error)

	PostDevicesEroutersIDDhcpLeases(params *PostDevicesEroutersIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpLeasesOK, error)

	PostDevicesEroutersIDDhcpServers(params *PostDevicesEroutersIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpServersOK, error)

	PostDevicesEroutersIDDhcpServersServernameBlock(params *PostDevicesEroutersIDDhcpServersServernameBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpServersServernameBlockOK, error)

	PostDevicesEroutersIDDhcpServersServernameUnblock(params *PostDevicesEroutersIDDhcpServersServernameUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpServersServernameUnblockOK, error)

	PostDevicesEroutersIDRouterOspfAreas(params *PostDevicesEroutersIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterOspfAreasOK, error)

	PostDevicesEroutersIDRouterRoutes(params *PostDevicesEroutersIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesOK, error)

	PostDevicesEroutersIDRouterRoutesBlock(params *PostDevicesEroutersIDRouterRoutesBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesBlockOK, error)

	PostDevicesEroutersIDRouterRoutesDelete(params *PostDevicesEroutersIDRouterRoutesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesDeleteOK, error)

	PostDevicesEroutersIDRouterRoutesUnblock(params *PostDevicesEroutersIDRouterRoutesUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesUnblockOK, error)

	PostDevicesIDAuthorize(params *PostDevicesIDAuthorizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDAuthorizeOK, error)

	PostDevicesIDIplinkRedirect(params *PostDevicesIDIplinkRedirectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDIplinkRedirectOK, error)

	PostDevicesIDLocateStart(params *PostDevicesIDLocateStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDLocateStartOK, error)

	PostDevicesIDLocateStop(params *PostDevicesIDLocateStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDLocateStopOK, error)

	PostDevicesIDRefresh(params *PostDevicesIDRefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRefreshOK, error)

	PostDevicesIDResetlinkscore(params *PostDevicesIDResetlinkscoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDResetlinkscoreOK, error)

	PostDevicesIDRestart(params *PostDevicesIDRestartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRestartOK, error)

	PostDevicesIDRouterOspfAreas(params *PostDevicesIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterOspfAreasOK, error)

	PostDevicesIDRouterRoutes(params *PostDevicesIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesOK, error)

	PostDevicesIDRouterRoutesBlock(params *PostDevicesIDRouterRoutesBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesBlockOK, error)

	PostDevicesIDRouterRoutesDelete(params *PostDevicesIDRouterRoutesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesDeleteOK, error)

	PostDevicesIDRouterRoutesUnblock(params *PostDevicesIDRouterRoutesUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesUnblockOK, error)

	PostDevicesIDSystemUnmsHostnameReachable(params *PostDevicesIDSystemUnmsHostnameReachableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDSystemUnmsHostnameReachableOK, error)

	PostDevicesIDSystemUnmsKeyReachable(params *PostDevicesIDSystemUnmsKeyReachableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDSystemUnmsKeyReachableOK, error)

	PostDevicesIDUnassign(params *PostDevicesIDUnassignParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDUnassignOK, error)

	PostDevicesIDUpdate(params *PostDevicesIDUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDUpdateOK, error)

	PostDevicesIDUpgradetolatest(params *PostDevicesIDUpgradetolatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDUpgradetolatestOK, error)

	PostDevicesIDVlans(params *PostDevicesIDVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDVlansOK, error)

	PostDevicesImport(params *PostDevicesImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesImportOK, error)

	PostDevicesMaintenanceDisable(params *PostDevicesMaintenanceDisableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesMaintenanceDisableOK, error)

	PostDevicesMaintenanceEnable(params *PostDevicesMaintenanceEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesMaintenanceEnableOK, error)

	PostDevicesOltsIDOnuProfiles(params *PostDevicesOltsIDOnuProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOltsIDOnuProfilesOK, error)

	PostDevicesOnusIDBlock(params *PostDevicesOnusIDBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDBlockOK, error)

	PostDevicesOnusIDResetstats(params *PostDevicesOnusIDResetstatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDResetstatsOK, error)

	PostDevicesOnusIDUnblock(params *PostDevicesOnusIDUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDUnblockOK, error)

	PostDevicesOnusIDUpdate(params *PostDevicesOnusIDUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDUpdateOK, error)

	PostDevicesRefresh(params *PostDevicesRefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesRefreshOK, error)

	PostDevicesSystemUnmsHostname(params *PostDevicesSystemUnmsHostnameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesSystemUnmsHostnameOK, error)

	PostDevicesSystemUnmsKey(params *PostDevicesSystemUnmsKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesSystemUnmsKeyOK, error)

	PostDevicesUisprsIDDhcpLeases(params *PostDevicesUisprsIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpLeasesOK, error)

	PostDevicesUisprsIDDhcpServers(params *PostDevicesUisprsIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpServersOK, error)

	PostDevicesUisprsIDDhcpServersServernameBlock(params *PostDevicesUisprsIDDhcpServersServernameBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpServersServernameBlockOK, error)

	PostDevicesUisprsIDDhcpServersServernameUnblock(params *PostDevicesUisprsIDDhcpServersServernameUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpServersServernameUnblockOK, error)

	PostDevicesUisprsIDFirewallFiltersFilternameRule(params *PostDevicesUisprsIDFirewallFiltersFilternameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallFiltersFilternameRuleOK, error)

	PostDevicesUisprsIDFirewallManglesManglenameRule(params *PostDevicesUisprsIDFirewallManglesManglenameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallManglesManglenameRuleOK, error)

	PostDevicesUisprsIDFirewallNatsRule(params *PostDevicesUisprsIDFirewallNatsRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallNatsRuleOK, error)

	PostDevicesUisprsIDFirewallSetsSet(params *PostDevicesUisprsIDFirewallSetsSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallSetsSetOK, error)

	PostDevicesUisprsIDRouterOspfAreas(params *PostDevicesUisprsIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterOspfAreasOK, error)

	PostDevicesUisprsIDRouterOspfInterface(params *PostDevicesUisprsIDRouterOspfInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterOspfInterfaceOK, error)

	PostDevicesUisprsIDRouterRoutes(params *PostDevicesUisprsIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesOK, error)

	PostDevicesUisprsIDRouterRoutesBlock(params *PostDevicesUisprsIDRouterRoutesBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesBlockOK, error)

	PostDevicesUisprsIDRouterRoutesDelete(params *PostDevicesUisprsIDRouterRoutesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesDeleteOK, error)

	PostDevicesUisprsIDRouterRoutesUnblock(params *PostDevicesUisprsIDRouterRoutesUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesUnblockOK, error)

	PutDevicesAircubesIDConfigNetwork(params *PutDevicesAircubesIDConfigNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDConfigNetworkOK, error)

	PutDevicesAircubesIDConfigSystem(params *PutDevicesAircubesIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDConfigSystemOK, error)

	PutDevicesAircubesIDConfigWireless(params *PutDevicesAircubesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDConfigWirelessOK, error)

	PutDevicesAircubesIDNetwork(params *PutDevicesAircubesIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDNetworkOK, error)

	PutDevicesAircubesIDSystem(params *PutDevicesAircubesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDSystemOK, error)

	PutDevicesAircubesIDWireless(params *PutDevicesAircubesIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDWirelessOK, error)

	PutDevicesAirmaxesIDConfigWireless(params *PutDevicesAirmaxesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAirmaxesIDConfigWirelessOK, error)

	PutDevicesAirmaxesIDSystemUsers(params *PutDevicesAirmaxesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAirmaxesIDSystemUsersOK, error)

	PutDevicesBlackboxesIDConfig(params *PutDevicesBlackboxesIDConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesBlackboxesIDConfigOK, error)

	PutDevicesDeviceidBackups(params *PutDevicesDeviceidBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidBackupsOK, error)

	PutDevicesDeviceidBackupsBackupid(params *PutDevicesDeviceidBackupsBackupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	PutDevicesDeviceidInterfacesInterfacename(params *PutDevicesDeviceidInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidInterfacesInterfacenameOK, error)

	PutDevicesDeviceidInterfacesInterfacenameOspf(params *PutDevicesDeviceidInterfacesInterfacenameOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidInterfacesInterfacenameOspfOK, error)

	PutDevicesDeviceidLocation(params *PutDevicesDeviceidLocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidLocationOK, error)

	PutDevicesDeviceidUdapiVersionUdapiurl(params *PutDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidUdapiVersionUdapiurlOK, error)

	PutDevicesEroutersIDDhcpLeasesServernameLeaseid(params *PutDevicesEroutersIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK, error)

	PutDevicesEroutersIDDhcpServersServername(params *PutDevicesEroutersIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDDhcpServersServernameOK, error)

	PutDevicesEroutersIDRouterOspf(params *PutDevicesEroutersIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDRouterOspfOK, error)

	PutDevicesEroutersIDRouterOspfAreasAreaid(params *PutDevicesEroutersIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDRouterOspfAreasAreaidOK, error)

	PutDevicesEroutersIDRouterRoutes(params *PutDevicesEroutersIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDRouterRoutesOK, error)

	PutDevicesEswitchesIDSystemUsers(params *PutDevicesEswitchesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEswitchesIDSystemUsersOK, error)

	PutDevicesIDRouterOspf(params *PutDevicesIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDRouterOspfOK, error)

	PutDevicesIDRouterOspfAreasAreaid(params *PutDevicesIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDRouterOspfAreasAreaidOK, error)

	PutDevicesIDRouterRoutes(params *PutDevicesIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDRouterRoutesOK, error)

	PutDevicesIDServices(params *PutDevicesIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDServicesOK, error)

	PutDevicesIDSystem(params *PutDevicesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDSystemOK, error)

	PutDevicesIDSystemUnms(params *PutDevicesIDSystemUnmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDSystemUnmsOK, error)

	PutDevicesIDSystemUsers(params *PutDevicesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDSystemUsersOK, error)

	PutDevicesOltsIDOnuPolicies(params *PutDevicesOltsIDOnuPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOltsIDOnuPoliciesOK, error)

	PutDevicesOltsIDOnuProfilesProfileid(params *PutDevicesOltsIDOnuProfilesProfileidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOltsIDOnuProfilesProfileidOK, error)

	PutDevicesOnusIDNetwork(params *PutDevicesOnusIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOnusIDNetworkOK, error)

	PutDevicesOnusIDSystem(params *PutDevicesOnusIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOnusIDSystemOK, error)

	PutDevicesOnusIDWireless(params *PutDevicesOnusIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOnusIDWirelessOK, error)

	PutDevicesSolarbeamsIDConfigSystem(params *PutDevicesSolarbeamsIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesSolarbeamsIDConfigSystemOK, error)

	PutDevicesToughswitchesIDSystemUsers(params *PutDevicesToughswitchesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesToughswitchesIDSystemUsersOK, error)

	PutDevicesUisprsIDDhcpLeasesServernameLeaseid(params *PutDevicesUisprsIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK, error)

	PutDevicesUisprsIDDhcpServersServername(params *PutDevicesUisprsIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDDhcpServersServernameOK, error)

	PutDevicesUisprsIDFirewallFilterChain(params *PutDevicesUisprsIDFirewallFilterChainParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallFilterChainOK, error)

	PutDevicesUisprsIDFirewallFiltersFilternameRule(params *PutDevicesUisprsIDFirewallFiltersFilternameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallFiltersFilternameRuleOK, error)

	PutDevicesUisprsIDFirewallManglesManglenameRule(params *PutDevicesUisprsIDFirewallManglesManglenameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallManglesManglenameRuleOK, error)

	PutDevicesUisprsIDFirewallNatsRule(params *PutDevicesUisprsIDFirewallNatsRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallNatsRuleOK, error)

	PutDevicesUisprsIDFirewallNatsRules(params *PutDevicesUisprsIDFirewallNatsRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallNatsRulesOK, error)

	PutDevicesUisprsIDFirewallSetsSet(params *PutDevicesUisprsIDFirewallSetsSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallSetsSetOK, error)

	PutDevicesUisprsIDFirewallSettings(params *PutDevicesUisprsIDFirewallSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallSettingsOK, error)

	PutDevicesUisprsIDRouterOspf(params *PutDevicesUisprsIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterOspfOK, error)

	PutDevicesUisprsIDRouterOspfAreasAreaid(params *PutDevicesUisprsIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterOspfAreasAreaidOK, error)

	PutDevicesUisprsIDRouterOspfInterface(params *PutDevicesUisprsIDRouterOspfInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterOspfInterfaceOK, error)

	PutDevicesUisprsIDRouterRoutes(params *PutDevicesUisprsIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterRoutesOK, error)

	PutDevicesUispssIDSystemUsers(params *PutDevicesUispssIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUispssIDSystemUsersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDevicesDeviceidBackupsBackupid deletes backup
*/
func (a *Client) DeleteDevicesDeviceidBackupsBackupid(params *DeleteDevicesDeviceidBackupsBackupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidBackupsBackupidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesDeviceidBackupsBackupidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesDeviceidBackupsBackupid",
		Method:             "DELETE",
		PathPattern:        "/devices/{deviceId}/backups/{backupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesDeviceidBackupsBackupidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesDeviceidBackupsBackupidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesDeviceidBackupsBackupid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesDeviceidInterfacesInterfacename deletes interface
*/
func (a *Client) DeleteDevicesDeviceidInterfacesInterfacename(params *DeleteDevicesDeviceidInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidInterfacesInterfacenameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesDeviceidInterfacesInterfacenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesDeviceidInterfacesInterfacename",
		Method:             "DELETE",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesDeviceidInterfacesInterfacenameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesDeviceidInterfacesInterfacenameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesDeviceidInterfacesInterfacename: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesDeviceidInterfacesInterfacenameOspf unsets interface o s p f config
*/
func (a *Client) DeleteDevicesDeviceidInterfacesInterfacenameOspf(params *DeleteDevicesDeviceidInterfacesInterfacenameOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidInterfacesInterfacenameOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesDeviceidInterfacesInterfacenameOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesDeviceidInterfacesInterfacenameOspf",
		Method:             "DELETE",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesDeviceidInterfacesInterfacenameOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesDeviceidInterfacesInterfacenameOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesDeviceidInterfacesInterfacenameOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesDeviceidUdapiVersionUdapiurl udapis device request
*/
func (a *Client) DeleteDevicesDeviceidUdapiVersionUdapiurl(params *DeleteDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesDeviceidUdapiVersionUdapiurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesDeviceidUdapiVersionUdapiurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesDeviceidUdapiVersionUdapiurl",
		Method:             "DELETE",
		PathPattern:        "/devices/{deviceId}/udapi/{version}/{udapiUrl*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesDeviceidUdapiVersionUdapiurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesDeviceidUdapiVersionUdapiurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesDeviceidUdapiVersionUdapiurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesEroutersIDDhcpLeasesServernameLeaseid updates d h c p IP lease
*/
func (a *Client) DeleteDevicesEroutersIDDhcpLeasesServernameLeaseid(params *DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesEroutersIDDhcpLeasesServernameLeaseidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesEroutersIdDhcpLeasesServernameLeaseid",
		Method:             "DELETE",
		PathPattern:        "/devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesEroutersIDDhcpLeasesServernameLeaseidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesEroutersIdDhcpLeasesServernameLeaseid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesEroutersIDDhcpServersServername deletes d h c p server
*/
func (a *Client) DeleteDevicesEroutersIDDhcpServersServername(params *DeleteDevicesEroutersIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesEroutersIDDhcpServersServernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesEroutersIDDhcpServersServernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesEroutersIdDhcpServersServername",
		Method:             "DELETE",
		PathPattern:        "/devices/erouters/{id}/dhcp/servers/{serverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesEroutersIDDhcpServersServernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesEroutersIDDhcpServersServernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesEroutersIdDhcpServersServername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesEroutersIDRouterOspfAreasAreaid deletes o s p f area deprecated in favor of route d e l e t e nms api v2 1 devices id router ospf areas area Id
*/
func (a *Client) DeleteDevicesEroutersIDRouterOspfAreasAreaid(params *DeleteDevicesEroutersIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesEroutersIDRouterOspfAreasAreaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesEroutersIDRouterOspfAreasAreaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesEroutersIdRouterOspfAreasAreaid",
		Method:             "DELETE",
		PathPattern:        "/devices/erouters/{id}/router/ospf/areas/{areaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesEroutersIDRouterOspfAreasAreaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesEroutersIDRouterOspfAreasAreaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesEroutersIdRouterOspfAreasAreaid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesID deletes device
*/
func (a *Client) DeleteDevicesID(params *DeleteDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesId",
		Method:             "DELETE",
		PathPattern:        "/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesIDRouterOspfAreasAreaid deletes o s p f area
*/
func (a *Client) DeleteDevicesIDRouterOspfAreasAreaid(params *DeleteDevicesIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDRouterOspfAreasAreaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesIDRouterOspfAreasAreaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesIdRouterOspfAreasAreaid",
		Method:             "DELETE",
		PathPattern:        "/devices/{id}/router/ospf/areas/{areaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesIDRouterOspfAreasAreaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesIDRouterOspfAreasAreaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesIdRouterOspfAreasAreaid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesIDStations deletes station from this device
*/
func (a *Client) DeleteDevicesIDStations(params *DeleteDevicesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDStationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesIDStationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesIdStations",
		Method:             "DELETE",
		PathPattern:        "/devices/{id}/stations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesIDStationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesIDStationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesIdStations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesIDVlansVlanid deletes a device s v l a n
*/
func (a *Client) DeleteDevicesIDVlansVlanid(params *DeleteDevicesIDVlansVlanidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesIDVlansVlanidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesIDVlansVlanidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesIdVlansVlanid",
		Method:             "DELETE",
		PathPattern:        "/devices/{id}/vlans/{vlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesIDVlansVlanidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesIDVlansVlanidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesIdVlansVlanid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesOltsIDOnuProfilesProfileid deletes o n u profile
*/
func (a *Client) DeleteDevicesOltsIDOnuProfilesProfileid(params *DeleteDevicesOltsIDOnuProfilesProfileidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesOltsIDOnuProfilesProfileidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesOltsIDOnuProfilesProfileidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesOltsIdOnuProfilesProfileid",
		Method:             "DELETE",
		PathPattern:        "/devices/olts/{id}/onu/profiles/{profileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesOltsIDOnuProfilesProfileidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesOltsIDOnuProfilesProfileidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesOltsIdOnuProfilesProfileid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDDhcpLeasesServernameLeaseid deletes d h c p IP lease
*/
func (a *Client) DeleteDevicesUisprsIDDhcpLeasesServernameLeaseid(params *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdDhcpLeasesServernameLeaseid",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdDhcpLeasesServernameLeaseid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDDhcpServersServername deletes d h c p server
*/
func (a *Client) DeleteDevicesUisprsIDDhcpServersServername(params *DeleteDevicesUisprsIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDDhcpServersServernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDDhcpServersServernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdDhcpServersServername",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/dhcp/servers/{serverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDDhcpServersServernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDDhcpServersServernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdDhcpServersServername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleid deletes firewall filter rule
*/
func (a *Client) DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleid(params *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdFirewallFiltersFilternameRuleRuleid",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/firewall/filters/{filterName}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdFirewallFiltersFilternameRuleRuleid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleid deletes firewall mangle rule
*/
func (a *Client) DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleid(params *DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdFirewallManglesManglenameRuleRuleid",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/firewall/mangles/{mangleName}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDFirewallManglesManglenameRuleRuleidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdFirewallManglesManglenameRuleRuleid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDFirewallNatsRuleRuleid deletes firewall n a t rule
*/
func (a *Client) DeleteDevicesUisprsIDFirewallNatsRuleRuleid(params *DeleteDevicesUisprsIDFirewallNatsRuleRuleidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallNatsRuleRuleidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDFirewallNatsRuleRuleidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdFirewallNatsRuleRuleid",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/firewall/nats/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDFirewallNatsRuleRuleidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDFirewallNatsRuleRuleidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdFirewallNatsRuleRuleid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDFirewallSetsSet deletes firewall set
*/
func (a *Client) DeleteDevicesUisprsIDFirewallSetsSet(params *DeleteDevicesUisprsIDFirewallSetsSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDFirewallSetsSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDFirewallSetsSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdFirewallSetsSet",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/firewall/sets/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDFirewallSetsSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDFirewallSetsSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdFirewallSetsSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDRouterOspfAreasAreaid deletes o s p f area deprecated in favor of route d e l e t e nms api v2 1 devices id router ospf areas area Id
*/
func (a *Client) DeleteDevicesUisprsIDRouterOspfAreasAreaid(params *DeleteDevicesUisprsIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDRouterOspfAreasAreaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDRouterOspfAreasAreaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdRouterOspfAreasAreaid",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/areas/{areaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDRouterOspfAreasAreaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDRouterOspfAreasAreaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdRouterOspfAreasAreaid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUisprsIDRouterOspfInterfacesInterfacename deletes o s p f interface deprecated in favor of route d e l e t e nms api v2 1 devices device Id interfaces interface name ospf
*/
func (a *Client) DeleteDevicesUisprsIDRouterOspfInterfacesInterfacename(params *DeleteDevicesUisprsIDRouterOspfInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUisprsIDRouterOspfInterfacesInterfacenameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUisprsIDRouterOspfInterfacesInterfacenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUisprsIdRouterOspfInterfacesInterfacename",
		Method:             "DELETE",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/interfaces/{interfaceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUisprsIDRouterOspfInterfacesInterfacenameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUisprsIDRouterOspfInterfacesInterfacenameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUisprsIdRouterOspfInterfacesInterfacename: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesUnknownIpaddress deletes unknown client devices based on detected network traffic
*/
func (a *Client) DeleteDevicesUnknownIpaddress(params *DeleteDevicesUnknownIpaddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDevicesUnknownIpaddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesUnknownIpaddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDevicesUnknownIpaddress",
		Method:             "DELETE",
		PathPattern:        "/devices/unknown/{ipAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDevicesUnknownIpaddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesUnknownIpaddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesUnknownIpaddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAirlinkProxyAirlinkbe gets elevation data between two points
*/
func (a *Client) GetAirlinkProxyAirlinkbe(params *GetAirlinkProxyAirlinkbeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAirlinkProxyAirlinkbeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAirlinkProxyAirlinkbeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAirlinkProxyAirlinkbe",
		Method:             "GET",
		PathPattern:        "/airlink/proxy/airlink-be",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAirlinkProxyAirlinkbeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAirlinkProxyAirlinkbeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAirlinkProxyAirlinkbe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAirlinkProxyCountriesmapgeojson gets countries map data file
*/
func (a *Client) GetAirlinkProxyCountriesmapgeojson(params *GetAirlinkProxyCountriesmapgeojsonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAirlinkProxyCountriesmapgeojsonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAirlinkProxyCountriesmapgeojson",
		Method:             "GET",
		PathPattern:        "/airlink/proxy/countries-map.geo.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAirlinkProxyCountriesmapgeojsonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAirlinkProxyElevation gets elevation data file
*/
func (a *Client) GetAirlinkProxyElevation(params *GetAirlinkProxyElevationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAirlinkProxyElevationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAirlinkProxyElevation",
		Method:             "GET",
		PathPattern:        "/airlink/proxy/elevation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAirlinkProxyElevationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAirlinkProxyRainfallr001map gets rainfall map data file
*/
func (a *Client) GetAirlinkProxyRainfallr001map(params *GetAirlinkProxyRainfallr001mapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAirlinkProxyRainfallr001mapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAirlinkProxyRainfallr001map",
		Method:             "GET",
		PathPattern:        "/airlink/proxy/rainfall-r001.map",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAirlinkProxyRainfallr001mapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetDevices lists of all devices in UI s p
*/
func (a *Client) GetDevices(params *GetDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevices",
		Method:             "GET",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesID returns air cube detail
*/
func (a *Client) GetDevicesAircubesID(params *GetDevicesAircubesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesId",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDConfigNetwork gets air cube network config this API endpoint is d e p r e c a t e d please refer to nms api v2 1 devices aircubes id network instead
*/
func (a *Client) GetDevicesAircubesIDConfigNetwork(params *GetDevicesAircubesIDConfigNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDConfigNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDConfigNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdConfigNetwork",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/config/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDConfigNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDConfigNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdConfigNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDConfigSystem gets air cube system config this API endpoint is d e p r e c a t e d please refer to nms api v2 1 devices aircubes id system instead
*/
func (a *Client) GetDevicesAircubesIDConfigSystem(params *GetDevicesAircubesIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDConfigSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDConfigSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdConfigSystem",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/config/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDConfigSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDConfigSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdConfigSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDConfigWireless gets air cube wireless config this API endpoint is d e p r e c a t e d please refer to nms api v2 1 devices aircubes id wireless instead
*/
func (a *Client) GetDevicesAircubesIDConfigWireless(params *GetDevicesAircubesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDConfigWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDConfigWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdConfigWireless",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/config/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDConfigWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDConfigWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdConfigWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDFrequencylists returns air cube frequency lists
*/
func (a *Client) GetDevicesAircubesIDFrequencylists(params *GetDevicesAircubesIDFrequencylistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDFrequencylistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDFrequencylistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdFrequencylists",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/frequency-lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDFrequencylistsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDFrequencylistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdFrequencylists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDNetwork gets air cube network configuration
*/
func (a *Client) GetDevicesAircubesIDNetwork(params *GetDevicesAircubesIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdNetwork",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDStations returns air cube station list
*/
func (a *Client) GetDevicesAircubesIDStations(params *GetDevicesAircubesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDStationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDStationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdStations",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/stations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDStationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDStationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdStations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDSystem gets air cube system configuration
*/
func (a *Client) GetDevicesAircubesIDSystem(params *GetDevicesAircubesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdSystem",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDTxpowerlists returns air cube tx power lists
*/
func (a *Client) GetDevicesAircubesIDTxpowerlists(params *GetDevicesAircubesIDTxpowerlistsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDTxpowerlistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDTxpowerlistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdTxpowerlists",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/tx-power-lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDTxpowerlistsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDTxpowerlistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdTxpowerlists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAircubesIDWireless gets air cube wireless config
*/
func (a *Client) GetDevicesAircubesIDWireless(params *GetDevicesAircubesIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAircubesIDWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAircubesIDWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAircubesIdWireless",
		Method:             "GET",
		PathPattern:        "/devices/aircubes/{id}/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAircubesIDWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAircubesIDWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAircubesIdWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirfibersID returns air fiber detail
*/
func (a *Client) GetDevicesAirfibersID(params *GetDevicesAirfibersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirfibersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirfibersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirfibersId",
		Method:             "GET",
		PathPattern:        "/devices/airfibers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirfibersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirfibersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirfibersId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirfibersIDStations returns air fiber station list
*/
func (a *Client) GetDevicesAirfibersIDStations(params *GetDevicesAirfibersIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirfibersIDStationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirfibersIDStationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirfibersIdStations",
		Method:             "GET",
		PathPattern:        "/devices/airfibers/{id}/stations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirfibersIDStationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirfibersIDStationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirfibersIdStations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirmaxesID returns air max detail
*/
func (a *Client) GetDevicesAirmaxesID(params *GetDevicesAirmaxesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirmaxesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirmaxesId",
		Method:             "GET",
		PathPattern:        "/devices/airmaxes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirmaxesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirmaxesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirmaxesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirmaxesIDConfigWireless gets air max wireless config
*/
func (a *Client) GetDevicesAirmaxesIDConfigWireless(params *GetDevicesAirmaxesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDConfigWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirmaxesIDConfigWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirmaxesIdConfigWireless",
		Method:             "GET",
		PathPattern:        "/devices/airmaxes/{id}/config/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirmaxesIDConfigWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirmaxesIDConfigWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirmaxesIdConfigWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirmaxesIDFrequencybands gets air max stations frequency bands
*/
func (a *Client) GetDevicesAirmaxesIDFrequencybands(params *GetDevicesAirmaxesIDFrequencybandsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDFrequencybandsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirmaxesIDFrequencybandsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirmaxesIdFrequencybands",
		Method:             "GET",
		PathPattern:        "/devices/airmaxes/{id}/frequency-bands",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirmaxesIDFrequencybandsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirmaxesIDFrequencybandsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirmaxesIdFrequencybands: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirmaxesIDSitesurvey scans sites
*/
func (a *Client) GetDevicesAirmaxesIDSitesurvey(params *GetDevicesAirmaxesIDSitesurveyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDSitesurveyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirmaxesIDSitesurveyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirmaxesIdSitesurvey",
		Method:             "GET",
		PathPattern:        "/devices/airmaxes/{id}/site-survey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirmaxesIDSitesurveyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirmaxesIDSitesurveyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirmaxesIdSitesurvey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirmaxesIDStations returns air max station list
*/
func (a *Client) GetDevicesAirmaxesIDStations(params *GetDevicesAirmaxesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDStationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirmaxesIDStationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirmaxesIdStations",
		Method:             "GET",
		PathPattern:        "/devices/airmaxes/{id}/stations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirmaxesIDStationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirmaxesIDStationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirmaxesIdStations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAirmaxesIDSystem gets air max system config deprecated in favor of route g e t nms api v2 1 devices id system
*/
func (a *Client) GetDevicesAirmaxesIDSystem(params *GetDevicesAirmaxesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesAirmaxesIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAirmaxesIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesAirmaxesIdSystem",
		Method:             "GET",
		PathPattern:        "/devices/airmaxes/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesAirmaxesIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAirmaxesIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAirmaxesIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesApsProfiles lists of all access points and their connection profiles
*/
func (a *Client) GetDevicesApsProfiles(params *GetDevicesApsProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesApsProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesApsProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesApsProfiles",
		Method:             "GET",
		PathPattern:        "/devices/aps/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesApsProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesApsProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesApsProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesBlackboxesID returns blackbox device
*/
func (a *Client) GetDevicesBlackboxesID(params *GetDevicesBlackboxesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesBlackboxesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesBlackboxesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesBlackboxesId",
		Method:             "GET",
		PathPattern:        "/devices/blackboxes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesBlackboxesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesBlackboxesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesBlackboxesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesBlackboxesIDConfig returns black box device config
*/
func (a *Client) GetDevicesBlackboxesIDConfig(params *GetDevicesBlackboxesIDConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesBlackboxesIDConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesBlackboxesIDConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesBlackboxesIdConfig",
		Method:             "GET",
		PathPattern:        "/devices/blackboxes/{id}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesBlackboxesIDConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesBlackboxesIDConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesBlackboxesIdConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidBackups returns list of device backups
*/
func (a *Client) GetDevicesDeviceidBackups(params *GetDevicesDeviceidBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidBackups",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidBackups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidBackupsBackupid returns device configuration backup file
*/
func (a *Client) GetDevicesDeviceidBackupsBackupid(params *GetDevicesDeviceidBackupsBackupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidBackupsBackupidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidBackupsBackupid",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/backups/{backupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidBackupsBackupidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetDevicesDeviceidInterfaces returns list of device interfaces
*/
func (a *Client) GetDevicesDeviceidInterfaces(params *GetDevicesDeviceidInterfacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidInterfacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidInterfaces",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidInterfacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidInterfaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidInterfacesDatalinkAvailable returns list of interfaces available to create data link
*/
func (a *Client) GetDevicesDeviceidInterfacesDatalinkAvailable(params *GetDevicesDeviceidInterfacesDatalinkAvailableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidInterfacesDatalinkAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidInterfacesDatalinkAvailableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidInterfacesDatalinkAvailable",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/interfaces/data-link/available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidInterfacesDatalinkAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidInterfacesDatalinkAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidInterfacesDatalinkAvailable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidInterfacesInterfacename gets interface configuration
*/
func (a *Client) GetDevicesDeviceidInterfacesInterfacename(params *GetDevicesDeviceidInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidInterfacesInterfacenameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidInterfacesInterfacenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidInterfacesInterfacename",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidInterfacesInterfacenameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidInterfacesInterfacenameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidInterfacesInterfacename: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidLocation returns location of the device
*/
func (a *Client) GetDevicesDeviceidLocation(params *GetDevicesDeviceidLocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidLocation",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/location",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidLocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidMactable returns mac table of device edge switch edge router air max air fiber
*/
func (a *Client) GetDevicesDeviceidMactable(params *GetDevicesDeviceidMactableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidMactableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidMactableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidMactable",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/mac-table",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidMactableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidMactableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidMactable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidMactablerefresh fetches mac table from device and save to UI s p edge switch edge router air max UI s p router UI s p switch air fiber
*/
func (a *Client) GetDevicesDeviceidMactablerefresh(params *GetDevicesDeviceidMactablerefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidMactablerefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidMactablerefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidMactablerefresh",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/mac-table-refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidMactablerefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidMactablerefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidMactablerefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDeviceidUdapiVersionUdapiurl udapis device request
*/
func (a *Client) GetDevicesDeviceidUdapiVersionUdapiurl(params *GetDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDeviceidUdapiVersionUdapiurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDeviceidUdapiVersionUdapiurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDeviceidUdapiVersionUdapiurl",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/udapi/{version}/{udapiUrl*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDeviceidUdapiVersionUdapiurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDeviceidUdapiVersionUdapiurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDeviceidUdapiVersionUdapiurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesDiscovered lists of discovered devices
*/
func (a *Client) GetDevicesDiscovered(params *GetDevicesDiscoveredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesDiscoveredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDiscoveredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesDiscovered",
		Method:             "GET",
		PathPattern:        "/devices/discovered",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDiscoveredReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesDiscoveredOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesDiscovered: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEpowersID gets epower device
*/
func (a *Client) GetDevicesEpowersID(params *GetDevicesEpowersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEpowersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEpowersId",
		Method:             "GET",
		PathPattern:        "/devices/epowers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEpowersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetDevicesEpowersIDConfigurationPower gets epower configuration u d API system edgepower configuration power
*/
func (a *Client) GetDevicesEpowersIDConfigurationPower(params *GetDevicesEpowersIDConfigurationPowerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEpowersIDConfigurationPowerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEpowersIdConfigurationPower",
		Method:             "GET",
		PathPattern:        "/devices/epowers/{id}/configuration/power",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEpowersIDConfigurationPowerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetDevicesEroutersID returns edge router detail deprecated in favor of route g e t nms api v2 1 devices id detail
*/
func (a *Client) GetDevicesEroutersID(params *GetDevicesEroutersIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersId",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEroutersIDDhcpLeases ds h c p IP address leases
*/
func (a *Client) GetDevicesEroutersIDDhcpLeases(params *GetDevicesEroutersIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDDhcpLeasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDDhcpLeasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersIdDhcpLeases",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}/dhcp/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDDhcpLeasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDDhcpLeasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersIdDhcpLeases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEroutersIDDhcpServers devices d h c p servers
*/
func (a *Client) GetDevicesEroutersIDDhcpServers(params *GetDevicesEroutersIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDDhcpServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDDhcpServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersIdDhcpServers",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}/dhcp/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDDhcpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDDhcpServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersIdDhcpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEroutersIDDhcpServersServername gets d h c p server configuration
*/
func (a *Client) GetDevicesEroutersIDDhcpServersServername(params *GetDevicesEroutersIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDDhcpServersServernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDDhcpServersServernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersIdDhcpServersServername",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}/dhcp/servers/{serverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDDhcpServersServernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDDhcpServersServernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersIdDhcpServersServername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEroutersIDNetflow gets information on device s flow accounting status
*/
func (a *Client) GetDevicesEroutersIDNetflow(params *GetDevicesEroutersIDNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDNetflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDNetflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersIdNetflow",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}/netflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDNetflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDNetflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersIdNetflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEroutersIDRouterOspf gets o s p f configuration deprecated in favor of route g e t nms api v2 1 devices id router ospf
*/
func (a *Client) GetDevicesEroutersIDRouterOspf(params *GetDevicesEroutersIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDRouterOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDRouterOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersIdRouterOspf",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}/router/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDRouterOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDRouterOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersIdRouterOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEroutersIDRouterOspfAreas alls o s p f areas deprecated in favor of route g e t nms api v2 1 devices id router ospf areas
*/
func (a *Client) GetDevicesEroutersIDRouterOspfAreas(params *GetDevicesEroutersIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDRouterOspfAreasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDRouterOspfAreasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersIdRouterOspfAreas",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}/router/ospf/areas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDRouterOspfAreasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDRouterOspfAreasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersIdRouterOspfAreas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEroutersIDRouterRoutes gets all routes deprecated in favor of route g e t nms api v2 1 devices id router routes
*/
func (a *Client) GetDevicesEroutersIDRouterRoutes(params *GetDevicesEroutersIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEroutersIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEroutersIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEroutersIdRouterRoutes",
		Method:             "GET",
		PathPattern:        "/devices/erouters/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEroutersIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEroutersIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEroutersIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEswitchesID returns edge switch detail
*/
func (a *Client) GetDevicesEswitchesID(params *GetDevicesEswitchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEswitchesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEswitchesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEswitchesId",
		Method:             "GET",
		PathPattern:        "/devices/eswitches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEswitchesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEswitchesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEswitchesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesEswitchesIDSystem gets edge switch system configuration deprecated in favor of route g e t nms api v2 1 devices id system
*/
func (a *Client) GetDevicesEswitchesIDSystem(params *GetDevicesEswitchesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesEswitchesIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesEswitchesIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesEswitchesIdSystem",
		Method:             "GET",
		PathPattern:        "/devices/eswitches/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesEswitchesIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesEswitchesIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesEswitchesIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesID devices status overview
*/
func (a *Client) GetDevicesID(params *GetDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesId",
		Method:             "GET",
		PathPattern:        "/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDDetail gets device detail with interfaces and or stations
*/
func (a *Client) GetDevicesIDDetail(params *GetDevicesIDDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdDetail",
		Method:             "GET",
		PathPattern:        "/devices/{id}/detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDNetflow gets information on device s flow accounting status
*/
func (a *Client) GetDevicesIDNetflow(params *GetDevicesIDNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDNetflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDNetflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdNetflow",
		Method:             "GET",
		PathPattern:        "/devices/{id}/netflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDNetflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDNetflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdNetflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDRouterOspf gets o s p f configuration
*/
func (a *Client) GetDevicesIDRouterOspf(params *GetDevicesIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDRouterOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDRouterOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdRouterOspf",
		Method:             "GET",
		PathPattern:        "/devices/{id}/router/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDRouterOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDRouterOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdRouterOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDRouterOspfAreas alls o s p f areas
*/
func (a *Client) GetDevicesIDRouterOspfAreas(params *GetDevicesIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDRouterOspfAreasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDRouterOspfAreasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdRouterOspfAreas",
		Method:             "GET",
		PathPattern:        "/devices/{id}/router/ospf/areas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDRouterOspfAreasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDRouterOspfAreasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdRouterOspfAreas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDRouterRoutes gets all routes
*/
func (a *Client) GetDevicesIDRouterRoutes(params *GetDevicesIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdRouterRoutes",
		Method:             "GET",
		PathPattern:        "/devices/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDServices devices services
*/
func (a *Client) GetDevicesIDServices(params *GetDevicesIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdServices",
		Method:             "GET",
		PathPattern:        "/devices/{id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDStatistics returns device statistics
*/
func (a *Client) GetDevicesIDStatistics(params *GetDevicesIDStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdStatistics",
		Method:             "GET",
		PathPattern:        "/devices/{id}/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDSupportfile gets device s support file
*/
func (a *Client) GetDevicesIDSupportfile(params *GetDevicesIDSupportfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDSupportfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdSupportfile",
		Method:             "GET",
		PathPattern:        "/devices/{id}/supportfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDSupportfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetDevicesIDSystem devices system configuration
*/
func (a *Client) GetDevicesIDSystem(params *GetDevicesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdSystem",
		Method:             "GET",
		PathPattern:        "/devices/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDSystemUnms devices specific UI s p settings
*/
func (a *Client) GetDevicesIDSystemUnms(params *GetDevicesIDSystemUnmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDSystemUnmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDSystemUnmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdSystemUnms",
		Method:             "GET",
		PathPattern:        "/devices/{id}/system/unms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDSystemUnmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDSystemUnmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdSystemUnms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIDVlans gets device s v l a ns
*/
func (a *Client) GetDevicesIDVlans(params *GetDevicesIDVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIDVlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDVlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIdVlans",
		Method:             "GET",
		PathPattern:        "/devices/{id}/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIDVlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDVlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIdVlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesImportStatus statuses of devices import process
*/
func (a *Client) GetDevicesImportStatus(params *GetDevicesImportStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesImportStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesImportStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesImportStatus",
		Method:             "GET",
		PathPattern:        "/devices/import/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesImportStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesImportStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesImportStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesIps returns a list of devices i ps which are in UI s p monitored IP ranges
*/
func (a *Client) GetDevicesIps(params *GetDevicesIpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesIps",
		Method:             "GET",
		PathPattern:        "/devices/ips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesIpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesIps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesMacMac gets info on device by mac address
*/
func (a *Client) GetDevicesMacMac(params *GetDevicesMacMacParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesMacMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesMacMacParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesMacMac",
		Method:             "GET",
		PathPattern:        "/devices/mac/{mac}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesMacMacReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesMacMacOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesMacMac: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesMacs returns a list of all devices m a c address except for o n us
*/
func (a *Client) GetDevicesMacs(params *GetDevicesMacsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesMacsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesMacsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesMacs",
		Method:             "GET",
		PathPattern:        "/devices/macs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesMacsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesMacsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesMacs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesModels returns list of all UI devices model info
*/
func (a *Client) GetDevicesModels(params *GetDevicesModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesModelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesModels",
		Method:             "GET",
		PathPattern:        "/devices/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesModels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOltsID returns o l t detail
*/
func (a *Client) GetDevicesOltsID(params *GetDevicesOltsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOltsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOltsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOltsId",
		Method:             "GET",
		PathPattern:        "/devices/olts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOltsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOltsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOltsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOltsIDOnuPolicies gets o n u policies
*/
func (a *Client) GetDevicesOltsIDOnuPolicies(params *GetDevicesOltsIDOnuPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOltsIDOnuPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOltsIDOnuPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOltsIdOnuPolicies",
		Method:             "GET",
		PathPattern:        "/devices/olts/{id}/onu/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOltsIDOnuPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOltsIDOnuPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOltsIdOnuPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOltsIDOnuProfiles lists of all o n u profiles
*/
func (a *Client) GetDevicesOltsIDOnuProfiles(params *GetDevicesOltsIDOnuProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOltsIDOnuProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOltsIDOnuProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOltsIdOnuProfiles",
		Method:             "GET",
		PathPattern:        "/devices/olts/{id}/onu/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOltsIDOnuProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOltsIDOnuProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOltsIdOnuProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnus lists of o n u in UI s p
*/
func (a *Client) GetDevicesOnus(params *GetDevicesOnusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnus",
		Method:             "GET",
		PathPattern:        "/devices/onus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnusID returns o n u detail
*/
func (a *Client) GetDevicesOnusID(params *GetDevicesOnusIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnusId",
		Method:             "GET",
		PathPattern:        "/devices/onus/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnusId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnusIDClients gets an onu s connected devices m a c addressees
*/
func (a *Client) GetDevicesOnusIDClients(params *GetDevicesOnusIDClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusIDClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnusIdClients",
		Method:             "GET",
		PathPattern:        "/devices/onus/{id}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusIDClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusIDClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnusIdClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnusIDNetwork gets an onu s network settings
*/
func (a *Client) GetDevicesOnusIDNetwork(params *GetDevicesOnusIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusIDNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnusIdNetwork",
		Method:             "GET",
		PathPattern:        "/devices/onus/{id}/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusIDNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusIDNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnusIdNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnusIDServices gets an onu s services
*/
func (a *Client) GetDevicesOnusIDServices(params *GetDevicesOnusIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusIDServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnusIdServices",
		Method:             "GET",
		PathPattern:        "/devices/onus/{id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusIDServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnusIdServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnusIDSystem gets an onu s system settings
*/
func (a *Client) GetDevicesOnusIDSystem(params *GetDevicesOnusIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnusIdSystem",
		Method:             "GET",
		PathPattern:        "/devices/onus/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnusIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnusIDVlans gets list of o l t s v l a ns
*/
func (a *Client) GetDevicesOnusIDVlans(params *GetDevicesOnusIDVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDVlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusIDVlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnusIdVlans",
		Method:             "GET",
		PathPattern:        "/devices/onus/{id}/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusIDVlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusIDVlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnusIdVlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesOnusIDWireless gets an onu s wireless settings
*/
func (a *Client) GetDevicesOnusIDWireless(params *GetDevicesOnusIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesOnusIDWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesOnusIDWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesOnusIdWireless",
		Method:             "GET",
		PathPattern:        "/devices/onus/{id}/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesOnusIDWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOnusIDWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesOnusIdWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesSolarbeamsID returns solar beam detail
*/
func (a *Client) GetDevicesSolarbeamsID(params *GetDevicesSolarbeamsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesSolarbeamsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesSolarbeamsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesSolarbeamsId",
		Method:             "GET",
		PathPattern:        "/devices/solarbeams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesSolarbeamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesSolarbeamsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesSolarbeamsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesSolarbeamsIDConfigSystem gets solar beam system configuration
*/
func (a *Client) GetDevicesSolarbeamsIDConfigSystem(params *GetDevicesSolarbeamsIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesSolarbeamsIDConfigSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesSolarbeamsIDConfigSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesSolarbeamsIdConfigSystem",
		Method:             "GET",
		PathPattern:        "/devices/solarbeams/{id}/config/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesSolarbeamsIDConfigSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesSolarbeamsIDConfigSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesSolarbeamsIdConfigSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesSsids gets devices wireless configuration
*/
func (a *Client) GetDevicesSsids(params *GetDevicesSsidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesSsidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesSsidsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesSsids",
		Method:             "GET",
		PathPattern:        "/devices/ssids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesSsidsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesSsidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesSsids: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesToughswitchesID returns tough switch detail
*/
func (a *Client) GetDevicesToughswitchesID(params *GetDevicesToughswitchesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesToughswitchesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesToughswitchesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesToughswitchesId",
		Method:             "GET",
		PathPattern:        "/devices/toughswitches/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesToughswitchesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesToughswitchesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesToughswitchesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesToughswitchesIDSystem gets tough switch system configuration deprecated in favor of route g e t nms api v2 1 devices id system
*/
func (a *Client) GetDevicesToughswitchesIDSystem(params *GetDevicesToughswitchesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesToughswitchesIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesToughswitchesIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesToughswitchesIdSystem",
		Method:             "GET",
		PathPattern:        "/devices/toughswitches/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesToughswitchesIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesToughswitchesIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesToughswitchesIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsID returns UI s p r detail deprecated in favor of route g e t nms api v2 1 devices id detail
*/
func (a *Client) GetDevicesUisprsID(params *GetDevicesUisprsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsId",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDDhcpLeases ds h c p IP address leases
*/
func (a *Client) GetDevicesUisprsIDDhcpLeases(params *GetDevicesUisprsIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDDhcpLeasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDDhcpLeasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdDhcpLeases",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/dhcp/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDDhcpLeasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDDhcpLeasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdDhcpLeases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDDhcpServers devices d h c p servers
*/
func (a *Client) GetDevicesUisprsIDDhcpServers(params *GetDevicesUisprsIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDDhcpServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDDhcpServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdDhcpServers",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/dhcp/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDDhcpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDDhcpServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdDhcpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDDhcpServersServername gets d h c p server configuration
*/
func (a *Client) GetDevicesUisprsIDDhcpServersServername(params *GetDevicesUisprsIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDDhcpServersServernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDDhcpServersServernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdDhcpServersServername",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/dhcp/servers/{serverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDDhcpServersServernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDDhcpServersServernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdDhcpServersServername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDFirewallFilters gets information on device s firewall filter chains
*/
func (a *Client) GetDevicesUisprsIDFirewallFilters(params *GetDevicesUisprsIDFirewallFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDFirewallFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdFirewallFilters",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/firewall/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDFirewallFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDFirewallFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdFirewallFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDFirewallMangles gets information on device s firewall mangles chains
*/
func (a *Client) GetDevicesUisprsIDFirewallMangles(params *GetDevicesUisprsIDFirewallManglesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallManglesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDFirewallManglesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdFirewallMangles",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/firewall/mangles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDFirewallManglesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDFirewallManglesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdFirewallMangles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDFirewallNats gets information on device s firewall n a ts
*/
func (a *Client) GetDevicesUisprsIDFirewallNats(params *GetDevicesUisprsIDFirewallNatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallNatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDFirewallNatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdFirewallNats",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/firewall/nats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDFirewallNatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDFirewallNatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdFirewallNats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDFirewallSets gets information on device s firewall sets
*/
func (a *Client) GetDevicesUisprsIDFirewallSets(params *GetDevicesUisprsIDFirewallSetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDFirewallSetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdFirewallSets",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/firewall/sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDFirewallSetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDFirewallSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdFirewallSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDFirewallSettings gets information on device s firewall settings
*/
func (a *Client) GetDevicesUisprsIDFirewallSettings(params *GetDevicesUisprsIDFirewallSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDFirewallSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDFirewallSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdFirewallSettings",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/firewall/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDFirewallSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDFirewallSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdFirewallSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDNetflow gets information on device s flow accounting status
*/
func (a *Client) GetDevicesUisprsIDNetflow(params *GetDevicesUisprsIDNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDNetflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDNetflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdNetflow",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/netflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDNetflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDNetflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdNetflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDRouterOspf gets o s p f configuration deprecated in favor of route g e t nms api v2 1 devices id router ospf
*/
func (a *Client) GetDevicesUisprsIDRouterOspf(params *GetDevicesUisprsIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDRouterOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdRouterOspf",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/router/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDRouterOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDRouterOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdRouterOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDRouterOspfAreas alls o s p f areas deprecated in favor of route g e t nms api v2 1 devices id router ospf areas
*/
func (a *Client) GetDevicesUisprsIDRouterOspfAreas(params *GetDevicesUisprsIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterOspfAreasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDRouterOspfAreasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdRouterOspfAreas",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/areas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDRouterOspfAreasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDRouterOspfAreasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdRouterOspfAreas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDRouterOspfInterfaces alls o s p f interface deprecated in favor of route g e t nms api v2 1 devices device Id interfaces
*/
func (a *Client) GetDevicesUisprsIDRouterOspfInterfaces(params *GetDevicesUisprsIDRouterOspfInterfacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterOspfInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDRouterOspfInterfacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdRouterOspfInterfaces",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDRouterOspfInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDRouterOspfInterfacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdRouterOspfInterfaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUisprsIDRouterRoutes gets all routes deprecated in favor of route g e t nms api v2 1 devices id router routes
*/
func (a *Client) GetDevicesUisprsIDRouterRoutes(params *GetDevicesUisprsIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUisprsIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUisprsIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUisprsIdRouterRoutes",
		Method:             "GET",
		PathPattern:        "/devices/uisprs/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUisprsIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUisprsIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUisprsIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUispssID returns UI s p switch detail
*/
func (a *Client) GetDevicesUispssID(params *GetDevicesUispssIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUispssIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUispssIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUispssId",
		Method:             "GET",
		PathPattern:        "/devices/uispss/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUispssIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUispssIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUispssId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUispssIDSystem gets UI s p switch system configuration deprecated in favor of route g e t nms api v2 1 devices id system
*/
func (a *Client) GetDevicesUispssIDSystem(params *GetDevicesUispssIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUispssIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUispssIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUispssIdSystem",
		Method:             "GET",
		PathPattern:        "/devices/uispss/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUispssIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUispssIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUispssIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesUnknown gets unknown client devices based on detected network traffic ordered by total traffic
*/
func (a *Client) GetDevicesUnknown(params *GetDevicesUnknownParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesUnknownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesUnknownParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesUnknown",
		Method:             "GET",
		PathPattern:        "/devices/unknown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesUnknownReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesUnknownOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesUnknown: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesWavesID returns wave detail
*/
func (a *Client) GetDevicesWavesID(params *GetDevicesWavesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesWavesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesWavesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesWavesId",
		Method:             "GET",
		PathPattern:        "/devices/waves/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesWavesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesWavesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesWavesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesWavesIDStations returns wave station list
*/
func (a *Client) GetDevicesWavesIDStations(params *GetDevicesWavesIDStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDevicesWavesIDStationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesWavesIDStationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDevicesWavesIdStations",
		Method:             "GET",
		PathPattern:        "/devices/waves/{id}/stations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesWavesIDStationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesWavesIDStationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesWavesIdStations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchDevicesDeviceidUdapiVersionUdapiurl udapis device request
*/
func (a *Client) PatchDevicesDeviceidUdapiVersionUdapiurl(params *PatchDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDevicesDeviceidUdapiVersionUdapiurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDevicesDeviceidUdapiVersionUdapiurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchDevicesDeviceidUdapiVersionUdapiurl",
		Method:             "PATCH",
		PathPattern:        "/devices/{deviceId}/udapi/{version}/{udapiUrl*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchDevicesDeviceidUdapiVersionUdapiurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDevicesDeviceidUdapiVersionUdapiurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchDevicesDeviceidUdapiVersionUdapiurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchDevicesOnusID updates o n u configuration
*/
func (a *Client) PatchDevicesOnusID(params *PatchDevicesOnusIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDevicesOnusIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDevicesOnusIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchDevicesOnusId",
		Method:             "PATCH",
		PathPattern:        "/devices/onus/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchDevicesOnusIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDevicesOnusIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchDevicesOnusId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesAirmaxesStations returns air max stations for air max access points
*/
func (a *Client) PostDevicesAirmaxesStations(params *PostDevicesAirmaxesStationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesAirmaxesStationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesAirmaxesStationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesAirmaxesStations",
		Method:             "POST",
		PathPattern:        "/devices/airmaxes/stations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesAirmaxesStationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesAirmaxesStationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesAirmaxesStations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesAuthorize authorizes single or multiple devices
*/
func (a *Client) PostDevicesAuthorize(params *PostDevicesAuthorizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesAuthorizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesAuthorizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesAuthorize",
		Method:             "POST",
		PathPattern:        "/devices/authorize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesAuthorizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesAuthorizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesAuthorize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesAuthorizefirst authorizes first device in cloud setup
*/
func (a *Client) PostDevicesAuthorizefirst(params *PostDevicesAuthorizefirstParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesAuthorizefirstOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesAuthorizefirstParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesAuthorizefirst",
		Method:             "POST",
		PathPattern:        "/devices/authorizefirst",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesAuthorizefirstReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesAuthorizefirstOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesAuthorizefirst: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesBackups creates and download a new multi device backup
*/
func (a *Client) PostDevicesBackups(params *PostDevicesBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesBackups",
		Method:             "POST",
		PathPattern:        "/devices/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  PostDevicesBlackboxesConfig creates new black box device config
*/
func (a *Client) PostDevicesBlackboxesConfig(params *PostDevicesBlackboxesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesBlackboxesConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesBlackboxesConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesBlackboxesConfig",
		Method:             "POST",
		PathPattern:        "/devices/blackboxes/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesBlackboxesConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesBlackboxesConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesBlackboxesConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesBulkdelete deletes devices
*/
func (a *Client) PostDevicesBulkdelete(params *PostDevicesBulkdeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesBulkdeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesBulkdeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesBulkdelete",
		Method:             "POST",
		PathPattern:        "/devices/bulkdelete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesBulkdeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesBulkdeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesBulkdelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesConnectOther finds and connect other device using IP address
*/
func (a *Client) PostDevicesConnectOther(params *PostDevicesConnectOtherParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesConnectOtherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesConnectOtherParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesConnectOther",
		Method:             "POST",
		PathPattern:        "/devices/connect/other",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesConnectOtherReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesConnectOtherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesConnectOther: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesConnectUbnt finds and connect u b n t device using IP and provided credentials
*/
func (a *Client) PostDevicesConnectUbnt(params *PostDevicesConnectUbntParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesConnectUbntOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesConnectUbntParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesConnectUbnt",
		Method:             "POST",
		PathPattern:        "/devices/connect/ubnt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesConnectUbntReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesConnectUbntOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesConnectUbnt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidBackups creates new device backup
*/
func (a *Client) PostDevicesDeviceidBackups(params *PostDevicesDeviceidBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidBackups",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidBackups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidBackupsBackupidApply updates device configuration from backup file
*/
func (a *Client) PostDevicesDeviceidBackupsBackupidApply(params *PostDevicesDeviceidBackupsBackupidApplyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidBackupsBackupidApplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidBackupsBackupidApplyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidBackupsBackupidApply",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/backups/{backupId}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidBackupsBackupidApplyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidBackupsBackupidApplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidBackupsBackupidApply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesBridge creates new bridge interface
*/
func (a *Client) PostDevicesDeviceidInterfacesBridge(params *PostDevicesDeviceidInterfacesBridgeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesBridgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesBridgeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesBridge",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/bridge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesBridgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesBridgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesBridge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesDisablelag disables link aggregation
*/
func (a *Client) PostDevicesDeviceidInterfacesDisablelag(params *PostDevicesDeviceidInterfacesDisablelagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesDisablelagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesDisablelagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesDisablelag",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/disablelag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesDisablelagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesDisablelagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesDisablelag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesEnablelag enables link aggregation
*/
func (a *Client) PostDevicesDeviceidInterfacesEnablelag(params *PostDevicesDeviceidInterfacesEnablelagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesEnablelagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesEnablelagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesEnablelag",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/enablelag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesEnablelagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesEnablelagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesEnablelag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesInterfaceidResetstats resets interface statistics
*/
func (a *Client) PostDevicesDeviceidInterfacesInterfaceidResetstats(params *PostDevicesDeviceidInterfacesInterfaceidResetstatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfaceidResetstatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesInterfaceidResetstatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesInterfaceidResetstats",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceId}/resetstats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesInterfaceidResetstatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesInterfaceidResetstatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesInterfaceidResetstats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesInterfacenameBlock blocks interface
*/
func (a *Client) PostDevicesDeviceidInterfacesInterfacenameBlock(params *PostDevicesDeviceidInterfacesInterfacenameBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesInterfacenameBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesInterfacenameBlock",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesInterfacenameBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesInterfacenameBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesInterfacenameBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesInterfacenameCabletest cables test port
*/
func (a *Client) PostDevicesDeviceidInterfacesInterfacenameCabletest(params *PostDevicesDeviceidInterfacesInterfacenameCabletestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameCabletestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesInterfacenameCabletestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesInterfacenameCabletest",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}/cable-test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesInterfacenameCabletestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesInterfacenameCabletestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesInterfacenameCabletest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesInterfacenameReset resets port
*/
func (a *Client) PostDevicesDeviceidInterfacesInterfacenameReset(params *PostDevicesDeviceidInterfacesInterfacenameResetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesInterfacenameResetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesInterfacenameReset",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesInterfacenameResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesInterfacenameResetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesInterfacenameReset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesInterfacenameUnblock unblocks interface
*/
func (a *Client) PostDevicesDeviceidInterfacesInterfacenameUnblock(params *PostDevicesDeviceidInterfacesInterfacenameUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesInterfacenameUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesInterfacenameUnblockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesInterfacenameUnblock",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesInterfacenameUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesInterfacenameUnblockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesInterfacenameUnblock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesLag creates new lag interface
*/
func (a *Client) PostDevicesDeviceidInterfacesLag(params *PostDevicesDeviceidInterfacesLagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesLagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesLagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesLag",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/lag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesLagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesLagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesLag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesPppoe creates new p p po e interface
*/
func (a *Client) PostDevicesDeviceidInterfacesPppoe(params *PostDevicesDeviceidInterfacesPppoeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesPppoeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesPppoeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesPppoe",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/pppoe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesPppoeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesPppoeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesPppoe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidInterfacesVlan creates new v l a n interface
*/
func (a *Client) PostDevicesDeviceidInterfacesVlan(params *PostDevicesDeviceidInterfacesVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidInterfacesVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidInterfacesVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidInterfacesVlan",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/interfaces/vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidInterfacesVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidInterfacesVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidInterfacesVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesDeviceidUdapiVersionUdapiurl udapis device request
*/
func (a *Client) PostDevicesDeviceidUdapiVersionUdapiurl(params *PostDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesDeviceidUdapiVersionUdapiurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesDeviceidUdapiVersionUdapiurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesDeviceidUdapiVersionUdapiurl",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/udapi/{version}/{udapiUrl*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesDeviceidUdapiVersionUdapiurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesDeviceidUdapiVersionUdapiurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesDeviceidUdapiVersionUdapiurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDDhcpLeases creates d h c p IP address lease
*/
func (a *Client) PostDevicesEroutersIDDhcpLeases(params *PostDevicesEroutersIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpLeasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDDhcpLeasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdDhcpLeases",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/dhcp/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDDhcpLeasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDDhcpLeasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdDhcpLeases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDDhcpServers creates new d h c p server
*/
func (a *Client) PostDevicesEroutersIDDhcpServers(params *PostDevicesEroutersIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDDhcpServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdDhcpServers",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/dhcp/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDDhcpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDDhcpServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdDhcpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDDhcpServersServernameBlock blocks d h c p server
*/
func (a *Client) PostDevicesEroutersIDDhcpServersServernameBlock(params *PostDevicesEroutersIDDhcpServersServernameBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpServersServernameBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDDhcpServersServernameBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdDhcpServersServernameBlock",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/dhcp/servers/{serverName}/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDDhcpServersServernameBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDDhcpServersServernameBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdDhcpServersServernameBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDDhcpServersServernameUnblock unblocks d h c p server
*/
func (a *Client) PostDevicesEroutersIDDhcpServersServernameUnblock(params *PostDevicesEroutersIDDhcpServersServernameUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDDhcpServersServernameUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDDhcpServersServernameUnblockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdDhcpServersServernameUnblock",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/dhcp/servers/{serverName}/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDDhcpServersServernameUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDDhcpServersServernameUnblockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdDhcpServersServernameUnblock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDRouterOspfAreas creates new o s p f area deprecated in favor of route p o s t nms api v2 1 devices id router ospf areas
*/
func (a *Client) PostDevicesEroutersIDRouterOspfAreas(params *PostDevicesEroutersIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterOspfAreasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDRouterOspfAreasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdRouterOspfAreas",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/router/ospf/areas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDRouterOspfAreasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDRouterOspfAreasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdRouterOspfAreas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDRouterRoutes creates new static route deprecated in favor of route p o s t nms api v2 1 devices id router routes
*/
func (a *Client) PostDevicesEroutersIDRouterRoutes(params *PostDevicesEroutersIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdRouterRoutes",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDRouterRoutesBlock blocks static route deprecated in favor of route p o s t nms api v2 1 devices id router routes block
*/
func (a *Client) PostDevicesEroutersIDRouterRoutesBlock(params *PostDevicesEroutersIDRouterRoutesBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDRouterRoutesBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdRouterRoutesBlock",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/router/routes/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDRouterRoutesBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDRouterRoutesBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdRouterRoutesBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDRouterRoutesDelete deletes route deprecated in favor of route p o s t nms api v2 1 devices id router routes delete
*/
func (a *Client) PostDevicesEroutersIDRouterRoutesDelete(params *PostDevicesEroutersIDRouterRoutesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDRouterRoutesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdRouterRoutesDelete",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/router/routes/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDRouterRoutesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDRouterRoutesDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdRouterRoutesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesEroutersIDRouterRoutesUnblock unblocks static route deprecated in favor of route p o s t nms api v2 1 devices id router routes unblock
*/
func (a *Client) PostDevicesEroutersIDRouterRoutesUnblock(params *PostDevicesEroutersIDRouterRoutesUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesEroutersIDRouterRoutesUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesEroutersIDRouterRoutesUnblockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesEroutersIdRouterRoutesUnblock",
		Method:             "POST",
		PathPattern:        "/devices/erouters/{id}/router/routes/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesEroutersIDRouterRoutesUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesEroutersIDRouterRoutesUnblockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesEroutersIdRouterRoutesUnblock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDAuthorize authorizes device deprecated in favor of route p o s t nms api v2 1 devices authorize
*/
func (a *Client) PostDevicesIDAuthorize(params *PostDevicesIDAuthorizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDAuthorizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDAuthorizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdAuthorize",
		Method:             "POST",
		PathPattern:        "/devices/{id}/authorize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDAuthorizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDAuthorizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdAuthorize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDIplinkRedirect performs device authorization before opening a devices UI
*/
func (a *Client) PostDevicesIDIplinkRedirect(params *PostDevicesIDIplinkRedirectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDIplinkRedirectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDIplinkRedirectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdIplinkRedirect",
		Method:             "POST",
		PathPattern:        "/devices/{id}/iplink/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDIplinkRedirectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDIplinkRedirectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdIplinkRedirect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDLocateStart starts locating indication on device
*/
func (a *Client) PostDevicesIDLocateStart(params *PostDevicesIDLocateStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDLocateStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDLocateStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdLocateStart",
		Method:             "POST",
		PathPattern:        "/devices/{id}/locate/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDLocateStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDLocateStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdLocateStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDLocateStop stops locating indication on device
*/
func (a *Client) PostDevicesIDLocateStop(params *PostDevicesIDLocateStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDLocateStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDLocateStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdLocateStop",
		Method:             "POST",
		PathPattern:        "/devices/{id}/locate/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDLocateStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDLocateStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdLocateStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDRefresh resets device specific a e s key to universal a e s key
*/
func (a *Client) PostDevicesIDRefresh(params *PostDevicesIDRefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdRefresh",
		Method:             "POST",
		PathPattern:        "/devices/{id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDRefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDResetlinkscore resets link score
*/
func (a *Client) PostDevicesIDResetlinkscore(params *PostDevicesIDResetlinkscoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDResetlinkscoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDResetlinkscoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdResetlinkscore",
		Method:             "POST",
		PathPattern:        "/devices/{id}/reset-link-score",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDResetlinkscoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDResetlinkscoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdResetlinkscore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDRestart restarts device device action reboot
*/
func (a *Client) PostDevicesIDRestart(params *PostDevicesIDRestartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRestartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDRestartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdRestart",
		Method:             "POST",
		PathPattern:        "/devices/{id}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDRestartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDRestartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdRestart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDRouterOspfAreas creates new o s p f area
*/
func (a *Client) PostDevicesIDRouterOspfAreas(params *PostDevicesIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterOspfAreasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDRouterOspfAreasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdRouterOspfAreas",
		Method:             "POST",
		PathPattern:        "/devices/{id}/router/ospf/areas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDRouterOspfAreasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDRouterOspfAreasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdRouterOspfAreas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDRouterRoutes creates new static route
*/
func (a *Client) PostDevicesIDRouterRoutes(params *PostDevicesIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdRouterRoutes",
		Method:             "POST",
		PathPattern:        "/devices/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDRouterRoutesBlock blocks static route
*/
func (a *Client) PostDevicesIDRouterRoutesBlock(params *PostDevicesIDRouterRoutesBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDRouterRoutesBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdRouterRoutesBlock",
		Method:             "POST",
		PathPattern:        "/devices/{id}/router/routes/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDRouterRoutesBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDRouterRoutesBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdRouterRoutesBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDRouterRoutesDelete deletes route
*/
func (a *Client) PostDevicesIDRouterRoutesDelete(params *PostDevicesIDRouterRoutesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDRouterRoutesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdRouterRoutesDelete",
		Method:             "POST",
		PathPattern:        "/devices/{id}/router/routes/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDRouterRoutesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDRouterRoutesDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdRouterRoutesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDRouterRoutesUnblock unblocks static route
*/
func (a *Client) PostDevicesIDRouterRoutesUnblock(params *PostDevicesIDRouterRoutesUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDRouterRoutesUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDRouterRoutesUnblockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdRouterRoutesUnblock",
		Method:             "POST",
		PathPattern:        "/devices/{id}/router/routes/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDRouterRoutesUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDRouterRoutesUnblockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdRouterRoutesUnblock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDSystemUnmsHostnameReachable checks if the hostname and port is reachable from the device
*/
func (a *Client) PostDevicesIDSystemUnmsHostnameReachable(params *PostDevicesIDSystemUnmsHostnameReachableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDSystemUnmsHostnameReachableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDSystemUnmsHostnameReachableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdSystemUnmsHostnameReachable",
		Method:             "POST",
		PathPattern:        "/devices/{id}/system/unms/hostname/reachable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDSystemUnmsHostnameReachableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDSystemUnmsHostnameReachableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdSystemUnmsHostnameReachable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDSystemUnmsKeyReachable checks if the UI s p key is reachable from the device
*/
func (a *Client) PostDevicesIDSystemUnmsKeyReachable(params *PostDevicesIDSystemUnmsKeyReachableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDSystemUnmsKeyReachableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDSystemUnmsKeyReachableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdSystemUnmsKeyReachable",
		Method:             "POST",
		PathPattern:        "/devices/{id}/system/unms/key/reachable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDSystemUnmsKeyReachableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDSystemUnmsKeyReachableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdSystemUnmsKeyReachable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDUnassign unassigns device
*/
func (a *Client) PostDevicesIDUnassign(params *PostDevicesIDUnassignParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDUnassignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDUnassignParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdUnassign",
		Method:             "POST",
		PathPattern:        "/devices/{id}/unassign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDUnassignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDUnassignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdUnassign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDUpdate sets update of device to realtime profile
*/
func (a *Client) PostDevicesIDUpdate(params *PostDevicesIDUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdUpdate",
		Method:             "POST",
		PathPattern:        "/devices/{id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDUpgradetolatest upgrades device f w to the latest f w version in UI s p it s possible to track upgrade process via tasks API
*/
func (a *Client) PostDevicesIDUpgradetolatest(params *PostDevicesIDUpgradetolatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDUpgradetolatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDUpgradetolatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdUpgradetolatest",
		Method:             "POST",
		PathPattern:        "/devices/{id}/upgrade-to-latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDUpgradetolatestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDUpgradetolatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdUpgradetolatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesIDVlans updates device s v l a ns
*/
func (a *Client) PostDevicesIDVlans(params *PostDevicesIDVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesIDVlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesIDVlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesIdVlans",
		Method:             "POST",
		PathPattern:        "/devices/{id}/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesIDVlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesIDVlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesIdVlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesImport complexes devices import which internally use discovery and creates blackboxes for unreachable and non u b n t devices
*/
func (a *Client) PostDevicesImport(params *PostDevicesImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesImport",
		Method:             "POST",
		PathPattern:        "/devices/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesMaintenanceDisable disables maintenance mode on one or more devices
*/
func (a *Client) PostDevicesMaintenanceDisable(params *PostDevicesMaintenanceDisableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesMaintenanceDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesMaintenanceDisableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesMaintenanceDisable",
		Method:             "POST",
		PathPattern:        "/devices/maintenance/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesMaintenanceDisableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesMaintenanceDisableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesMaintenanceDisable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesMaintenanceEnable enables maintenance mode on one or more devices
*/
func (a *Client) PostDevicesMaintenanceEnable(params *PostDevicesMaintenanceEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesMaintenanceEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesMaintenanceEnableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesMaintenanceEnable",
		Method:             "POST",
		PathPattern:        "/devices/maintenance/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesMaintenanceEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesMaintenanceEnableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesMaintenanceEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesOltsIDOnuProfiles creates o n u profile
*/
func (a *Client) PostDevicesOltsIDOnuProfiles(params *PostDevicesOltsIDOnuProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOltsIDOnuProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesOltsIDOnuProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesOltsIdOnuProfiles",
		Method:             "POST",
		PathPattern:        "/devices/olts/{id}/onu/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesOltsIDOnuProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesOltsIDOnuProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesOltsIdOnuProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesOnusIDBlock deletes o n u g p o n password and set status to blocked
*/
func (a *Client) PostDevicesOnusIDBlock(params *PostDevicesOnusIDBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesOnusIDBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesOnusIdBlock",
		Method:             "POST",
		PathPattern:        "/devices/onus/{id}/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesOnusIDBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesOnusIDBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesOnusIdBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesOnusIDResetstats resets onu data statistics
*/
func (a *Client) PostDevicesOnusIDResetstats(params *PostDevicesOnusIDResetstatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDResetstatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesOnusIDResetstatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesOnusIdResetstats",
		Method:             "POST",
		PathPattern:        "/devices/onus/{id}/resetstats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesOnusIDResetstatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesOnusIDResetstatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesOnusIdResetstats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesOnusIDUnblock unblocks o n u device
*/
func (a *Client) PostDevicesOnusIDUnblock(params *PostDevicesOnusIDUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesOnusIDUnblockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesOnusIdUnblock",
		Method:             "POST",
		PathPattern:        "/devices/onus/{id}/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesOnusIDUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesOnusIDUnblockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesOnusIdUnblock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesOnusIDUpdate sets update of o n u to realtime profile
*/
func (a *Client) PostDevicesOnusIDUpdate(params *PostDevicesOnusIDUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesOnusIDUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesOnusIDUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesOnusIdUpdate",
		Method:             "POST",
		PathPattern:        "/devices/onus/{id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesOnusIDUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesOnusIDUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesOnusIdUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesRefresh resets devices specific a e s keys to universal a e s keys
*/
func (a *Client) PostDevicesRefresh(params *PostDevicesRefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesRefresh",
		Method:             "POST",
		PathPattern:        "/devices/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesRefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesSystemUnmsHostname updates devices UI s p key hostname and port
*/
func (a *Client) PostDevicesSystemUnmsHostname(params *PostDevicesSystemUnmsHostnameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesSystemUnmsHostnameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesSystemUnmsHostnameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesSystemUnmsHostname",
		Method:             "POST",
		PathPattern:        "/devices/system/unms/hostname",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesSystemUnmsHostnameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesSystemUnmsHostnameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesSystemUnmsHostname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesSystemUnmsKey updates devices UI s p key
*/
func (a *Client) PostDevicesSystemUnmsKey(params *PostDevicesSystemUnmsKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesSystemUnmsKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesSystemUnmsKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesSystemUnmsKey",
		Method:             "POST",
		PathPattern:        "/devices/system/unms/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesSystemUnmsKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesSystemUnmsKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesSystemUnmsKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDDhcpLeases creates d h c p IP address lease


        Request does accept payload with "leaseId" property, to match api,
        but the id is ignored and it will be created from mac and ip.

*/
func (a *Client) PostDevicesUisprsIDDhcpLeases(params *PostDevicesUisprsIDDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpLeasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDDhcpLeasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdDhcpLeases",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/dhcp/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDDhcpLeasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDDhcpLeasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdDhcpLeases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDDhcpServers creates new d h c p server

  If no "name" property in payload specified, it will be create from uuid.
*/
func (a *Client) PostDevicesUisprsIDDhcpServers(params *PostDevicesUisprsIDDhcpServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDDhcpServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdDhcpServers",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/dhcp/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDDhcpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDDhcpServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdDhcpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDDhcpServersServernameBlock blocks d h c p server
*/
func (a *Client) PostDevicesUisprsIDDhcpServersServernameBlock(params *PostDevicesUisprsIDDhcpServersServernameBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpServersServernameBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDDhcpServersServernameBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdDhcpServersServernameBlock",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/dhcp/servers/{serverName}/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDDhcpServersServernameBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDDhcpServersServernameBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdDhcpServersServernameBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDDhcpServersServernameUnblock unblocks d h c p server
*/
func (a *Client) PostDevicesUisprsIDDhcpServersServernameUnblock(params *PostDevicesUisprsIDDhcpServersServernameUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDDhcpServersServernameUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDDhcpServersServernameUnblockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdDhcpServersServernameUnblock",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/dhcp/servers/{serverName}/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDDhcpServersServernameUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDDhcpServersServernameUnblockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdDhcpServersServernameUnblock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDFirewallFiltersFilternameRule creates firewall filter rule
*/
func (a *Client) PostDevicesUisprsIDFirewallFiltersFilternameRule(params *PostDevicesUisprsIDFirewallFiltersFilternameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallFiltersFilternameRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDFirewallFiltersFilternameRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdFirewallFiltersFilternameRule",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/firewall/filters/{filterName}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDFirewallFiltersFilternameRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDFirewallFiltersFilternameRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdFirewallFiltersFilternameRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDFirewallManglesManglenameRule creates firewall mangles rule
*/
func (a *Client) PostDevicesUisprsIDFirewallManglesManglenameRule(params *PostDevicesUisprsIDFirewallManglesManglenameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallManglesManglenameRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDFirewallManglesManglenameRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdFirewallManglesManglenameRule",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/firewall/mangles/{mangleName}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDFirewallManglesManglenameRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDFirewallManglesManglenameRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdFirewallManglesManglenameRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDFirewallNatsRule creates firewall n a t rule
*/
func (a *Client) PostDevicesUisprsIDFirewallNatsRule(params *PostDevicesUisprsIDFirewallNatsRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallNatsRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDFirewallNatsRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdFirewallNatsRule",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/firewall/nats/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDFirewallNatsRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDFirewallNatsRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdFirewallNatsRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDFirewallSetsSet creates firewall set
*/
func (a *Client) PostDevicesUisprsIDFirewallSetsSet(params *PostDevicesUisprsIDFirewallSetsSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDFirewallSetsSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDFirewallSetsSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdFirewallSetsSet",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/firewall/sets/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDFirewallSetsSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDFirewallSetsSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdFirewallSetsSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDRouterOspfAreas creates new o s p f area deprecated in favor of route p o s t nms api v2 1 devices id router ospf areas
*/
func (a *Client) PostDevicesUisprsIDRouterOspfAreas(params *PostDevicesUisprsIDRouterOspfAreasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterOspfAreasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDRouterOspfAreasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdRouterOspfAreas",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/areas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDRouterOspfAreasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDRouterOspfAreasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdRouterOspfAreas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDRouterOspfInterface creates new o s p f interface deprecated in favor of route p u t nms api v2 1 devices device Id interfaces interface name ospf
*/
func (a *Client) PostDevicesUisprsIDRouterOspfInterface(params *PostDevicesUisprsIDRouterOspfInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterOspfInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDRouterOspfInterfaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdRouterOspfInterface",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/interface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDRouterOspfInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDRouterOspfInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdRouterOspfInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDRouterRoutes creates new static route deprecated in favor of route p o s t nms api v2 1 devices id router routes
*/
func (a *Client) PostDevicesUisprsIDRouterRoutes(params *PostDevicesUisprsIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdRouterRoutes",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDRouterRoutesBlock blocks static route deprecated in favor of route p o s t nms api v2 1 devices id router routes block
*/
func (a *Client) PostDevicesUisprsIDRouterRoutesBlock(params *PostDevicesUisprsIDRouterRoutesBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDRouterRoutesBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdRouterRoutesBlock",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/router/routes/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDRouterRoutesBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDRouterRoutesBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdRouterRoutesBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDRouterRoutesDelete deletes route deprecated in favor of route p o s t nms api v2 1 devices id router routes delete
*/
func (a *Client) PostDevicesUisprsIDRouterRoutesDelete(params *PostDevicesUisprsIDRouterRoutesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDRouterRoutesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdRouterRoutesDelete",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/router/routes/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDRouterRoutesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDRouterRoutesDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdRouterRoutesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevicesUisprsIDRouterRoutesUnblock unblocks static route deprecated in favor of route p o s t nms api v2 1 devices id router routes unblock
*/
func (a *Client) PostDevicesUisprsIDRouterRoutesUnblock(params *PostDevicesUisprsIDRouterRoutesUnblockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDevicesUisprsIDRouterRoutesUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDevicesUisprsIDRouterRoutesUnblockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDevicesUisprsIdRouterRoutesUnblock",
		Method:             "POST",
		PathPattern:        "/devices/uisprs/{id}/router/routes/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDevicesUisprsIDRouterRoutesUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDevicesUisprsIDRouterRoutesUnblockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevicesUisprsIdRouterRoutesUnblock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAircubesIDConfigNetwork updates air cube network config this API endpoint is d e p r e c a t e d please refer to nms api v2 1 devices aircubes id network instead
*/
func (a *Client) PutDevicesAircubesIDConfigNetwork(params *PutDevicesAircubesIDConfigNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDConfigNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAircubesIDConfigNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAircubesIdConfigNetwork",
		Method:             "PUT",
		PathPattern:        "/devices/aircubes/{id}/config/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAircubesIDConfigNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAircubesIDConfigNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAircubesIdConfigNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAircubesIDConfigSystem updates air cube system settings this API endpoint is d e p r e c a t e d please refer to nms api v2 1 devices aircubes id system instead
*/
func (a *Client) PutDevicesAircubesIDConfigSystem(params *PutDevicesAircubesIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDConfigSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAircubesIDConfigSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAircubesIdConfigSystem",
		Method:             "PUT",
		PathPattern:        "/devices/aircubes/{id}/config/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAircubesIDConfigSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAircubesIDConfigSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAircubesIdConfigSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAircubesIDConfigWireless updates air cube wireless config this API endpoint is d e p r e c a t e d please refer to nms api v2 1 devices aircubes id wireless instead
*/
func (a *Client) PutDevicesAircubesIDConfigWireless(params *PutDevicesAircubesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDConfigWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAircubesIDConfigWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAircubesIdConfigWireless",
		Method:             "PUT",
		PathPattern:        "/devices/aircubes/{id}/config/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAircubesIDConfigWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAircubesIDConfigWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAircubesIdConfigWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAircubesIDNetwork updates air cube network configuration
*/
func (a *Client) PutDevicesAircubesIDNetwork(params *PutDevicesAircubesIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAircubesIDNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAircubesIdNetwork",
		Method:             "PUT",
		PathPattern:        "/devices/aircubes/{id}/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAircubesIDNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAircubesIDNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAircubesIdNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAircubesIDSystem updates air cube system configuration
*/
func (a *Client) PutDevicesAircubesIDSystem(params *PutDevicesAircubesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAircubesIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAircubesIdSystem",
		Method:             "PUT",
		PathPattern:        "/devices/aircubes/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAircubesIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAircubesIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAircubesIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAircubesIDWireless updates air cube wireless configuration
*/
func (a *Client) PutDevicesAircubesIDWireless(params *PutDevicesAircubesIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAircubesIDWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAircubesIDWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAircubesIdWireless",
		Method:             "PUT",
		PathPattern:        "/devices/aircubes/{id}/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAircubesIDWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAircubesIDWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAircubesIdWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAirmaxesIDConfigWireless updates air max wireless config
*/
func (a *Client) PutDevicesAirmaxesIDConfigWireless(params *PutDevicesAirmaxesIDConfigWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAirmaxesIDConfigWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAirmaxesIDConfigWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAirmaxesIdConfigWireless",
		Method:             "PUT",
		PathPattern:        "/devices/airmaxes/{id}/config/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAirmaxesIDConfigWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAirmaxesIDConfigWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAirmaxesIdConfigWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesAirmaxesIDSystemUsers updates air max system users deprecated in favor of route p u t nms api v2 1 devices id system
*/
func (a *Client) PutDevicesAirmaxesIDSystemUsers(params *PutDevicesAirmaxesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesAirmaxesIDSystemUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesAirmaxesIDSystemUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesAirmaxesIdSystemUsers",
		Method:             "PUT",
		PathPattern:        "/devices/airmaxes/{id}/system/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesAirmaxesIDSystemUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesAirmaxesIDSystemUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesAirmaxesIdSystemUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesBlackboxesIDConfig updates black box device config
*/
func (a *Client) PutDevicesBlackboxesIDConfig(params *PutDevicesBlackboxesIDConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesBlackboxesIDConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesBlackboxesIDConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesBlackboxesIdConfig",
		Method:             "PUT",
		PathPattern:        "/devices/blackboxes/{id}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesBlackboxesIDConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesBlackboxesIDConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesBlackboxesIdConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesDeviceidBackups uploads device backup
*/
func (a *Client) PutDevicesDeviceidBackups(params *PutDevicesDeviceidBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesDeviceidBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesDeviceidBackups",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesDeviceidBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesDeviceidBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesDeviceidBackups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesDeviceidBackupsBackupid updates backup
*/
func (a *Client) PutDevicesDeviceidBackupsBackupid(params *PutDevicesDeviceidBackupsBackupidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesDeviceidBackupsBackupidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesDeviceidBackupsBackupid",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/backups/{backupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesDeviceidBackupsBackupidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  PutDevicesDeviceidInterfacesInterfacename updates interface configuration
*/
func (a *Client) PutDevicesDeviceidInterfacesInterfacename(params *PutDevicesDeviceidInterfacesInterfacenameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidInterfacesInterfacenameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesDeviceidInterfacesInterfacenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesDeviceidInterfacesInterfacename",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesDeviceidInterfacesInterfacenameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesDeviceidInterfacesInterfacenameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesDeviceidInterfacesInterfacename: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesDeviceidInterfacesInterfacenameOspf sets interface o s p f config
*/
func (a *Client) PutDevicesDeviceidInterfacesInterfacenameOspf(params *PutDevicesDeviceidInterfacesInterfacenameOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidInterfacesInterfacenameOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesDeviceidInterfacesInterfacenameOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesDeviceidInterfacesInterfacenameOspf",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/interfaces/{interfaceName}/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesDeviceidInterfacesInterfacenameOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesDeviceidInterfacesInterfacenameOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesDeviceidInterfacesInterfacenameOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesDeviceidLocation updates location of the device
*/
func (a *Client) PutDevicesDeviceidLocation(params *PutDevicesDeviceidLocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesDeviceidLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesDeviceidLocation",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/location",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesDeviceidLocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesDeviceidLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesDeviceidLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesDeviceidUdapiVersionUdapiurl udapis device request
*/
func (a *Client) PutDevicesDeviceidUdapiVersionUdapiurl(params *PutDevicesDeviceidUdapiVersionUdapiurlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesDeviceidUdapiVersionUdapiurlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesDeviceidUdapiVersionUdapiurlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesDeviceidUdapiVersionUdapiurl",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/udapi/{version}/{udapiUrl*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesDeviceidUdapiVersionUdapiurlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesDeviceidUdapiVersionUdapiurlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesDeviceidUdapiVersionUdapiurl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesEroutersIDDhcpLeasesServernameLeaseid updates d h c p IP lease
*/
func (a *Client) PutDevicesEroutersIDDhcpLeasesServernameLeaseid(params *PutDevicesEroutersIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesEroutersIDDhcpLeasesServernameLeaseidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesEroutersIdDhcpLeasesServernameLeaseid",
		Method:             "PUT",
		PathPattern:        "/devices/erouters/{id}/dhcp/leases/{serverName}/{leaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesEroutersIDDhcpLeasesServernameLeaseidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesEroutersIDDhcpLeasesServernameLeaseidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesEroutersIdDhcpLeasesServernameLeaseid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesEroutersIDDhcpServersServername updates d h c p server configuration
*/
func (a *Client) PutDevicesEroutersIDDhcpServersServername(params *PutDevicesEroutersIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDDhcpServersServernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesEroutersIDDhcpServersServernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesEroutersIdDhcpServersServername",
		Method:             "PUT",
		PathPattern:        "/devices/erouters/{id}/dhcp/servers/{serverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesEroutersIDDhcpServersServernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesEroutersIDDhcpServersServernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesEroutersIdDhcpServersServername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesEroutersIDRouterOspf updates o s p f configuration deprecated in favor of route p u t nms api v2 1 devices id router ospf
*/
func (a *Client) PutDevicesEroutersIDRouterOspf(params *PutDevicesEroutersIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDRouterOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesEroutersIDRouterOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesEroutersIdRouterOspf",
		Method:             "PUT",
		PathPattern:        "/devices/erouters/{id}/router/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesEroutersIDRouterOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesEroutersIDRouterOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesEroutersIdRouterOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesEroutersIDRouterOspfAreasAreaid updates o s p f area deprecated in favor of route p u t nms api v2 1 devices id router ospf areas area Id
*/
func (a *Client) PutDevicesEroutersIDRouterOspfAreasAreaid(params *PutDevicesEroutersIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDRouterOspfAreasAreaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesEroutersIDRouterOspfAreasAreaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesEroutersIdRouterOspfAreasAreaid",
		Method:             "PUT",
		PathPattern:        "/devices/erouters/{id}/router/ospf/areas/{areaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesEroutersIDRouterOspfAreasAreaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesEroutersIDRouterOspfAreasAreaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesEroutersIdRouterOspfAreasAreaid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesEroutersIDRouterRoutes edits static route deprecated in favor of route p u t nms api v2 1 devices id router routes
*/
func (a *Client) PutDevicesEroutersIDRouterRoutes(params *PutDevicesEroutersIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEroutersIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesEroutersIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesEroutersIdRouterRoutes",
		Method:             "PUT",
		PathPattern:        "/devices/erouters/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesEroutersIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesEroutersIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesEroutersIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesEswitchesIDSystemUsers updates edge switch system users deprecated in favor of route p u t nms api v2 1 devices id system
*/
func (a *Client) PutDevicesEswitchesIDSystemUsers(params *PutDevicesEswitchesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesEswitchesIDSystemUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesEswitchesIDSystemUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesEswitchesIdSystemUsers",
		Method:             "PUT",
		PathPattern:        "/devices/eswitches/{id}/system/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesEswitchesIDSystemUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesEswitchesIDSystemUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesEswitchesIdSystemUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesIDRouterOspf updates o s p f configuration
*/
func (a *Client) PutDevicesIDRouterOspf(params *PutDevicesIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDRouterOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesIDRouterOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesIdRouterOspf",
		Method:             "PUT",
		PathPattern:        "/devices/{id}/router/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesIDRouterOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesIDRouterOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesIdRouterOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesIDRouterOspfAreasAreaid updates o s p f area
*/
func (a *Client) PutDevicesIDRouterOspfAreasAreaid(params *PutDevicesIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDRouterOspfAreasAreaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesIDRouterOspfAreasAreaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesIdRouterOspfAreasAreaid",
		Method:             "PUT",
		PathPattern:        "/devices/{id}/router/ospf/areas/{areaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesIDRouterOspfAreasAreaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesIDRouterOspfAreasAreaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesIdRouterOspfAreasAreaid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesIDRouterRoutes edits static route
*/
func (a *Client) PutDevicesIDRouterRoutes(params *PutDevicesIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesIdRouterRoutes",
		Method:             "PUT",
		PathPattern:        "/devices/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesIDServices updates device services
*/
func (a *Client) PutDevicesIDServices(params *PutDevicesIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesIDServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesIdServices",
		Method:             "PUT",
		PathPattern:        "/devices/{id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesIDServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesIdServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesIDSystem updates a device s system settings
*/
func (a *Client) PutDevicesIDSystem(params *PutDevicesIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesIdSystem",
		Method:             "PUT",
		PathPattern:        "/devices/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesIDSystemUnms updates device specific UI s p settings
*/
func (a *Client) PutDevicesIDSystemUnms(params *PutDevicesIDSystemUnmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDSystemUnmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesIDSystemUnmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesIdSystemUnms",
		Method:             "PUT",
		PathPattern:        "/devices/{id}/system/unms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesIDSystemUnmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesIDSystemUnmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesIdSystemUnms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesIDSystemUsers updates device system users
*/
func (a *Client) PutDevicesIDSystemUsers(params *PutDevicesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesIDSystemUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesIDSystemUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesIdSystemUsers",
		Method:             "PUT",
		PathPattern:        "/devices/{id}/system/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesIDSystemUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesIDSystemUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesIdSystemUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesOltsIDOnuPolicies updates o n u policies
*/
func (a *Client) PutDevicesOltsIDOnuPolicies(params *PutDevicesOltsIDOnuPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOltsIDOnuPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesOltsIDOnuPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesOltsIdOnuPolicies",
		Method:             "PUT",
		PathPattern:        "/devices/olts/{id}/onu/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesOltsIDOnuPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesOltsIDOnuPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesOltsIdOnuPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesOltsIDOnuProfilesProfileid updates o n u profile
*/
func (a *Client) PutDevicesOltsIDOnuProfilesProfileid(params *PutDevicesOltsIDOnuProfilesProfileidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOltsIDOnuProfilesProfileidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesOltsIDOnuProfilesProfileidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesOltsIdOnuProfilesProfileid",
		Method:             "PUT",
		PathPattern:        "/devices/olts/{id}/onu/profiles/{profileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesOltsIDOnuProfilesProfileidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesOltsIDOnuProfilesProfileidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesOltsIdOnuProfilesProfileid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesOnusIDNetwork updates an onu s network settings
*/
func (a *Client) PutDevicesOnusIDNetwork(params *PutDevicesOnusIDNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOnusIDNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesOnusIDNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesOnusIdNetwork",
		Method:             "PUT",
		PathPattern:        "/devices/onus/{id}/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesOnusIDNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesOnusIDNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesOnusIdNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesOnusIDSystem updates an onu s system settings
*/
func (a *Client) PutDevicesOnusIDSystem(params *PutDevicesOnusIDSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOnusIDSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesOnusIDSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesOnusIdSystem",
		Method:             "PUT",
		PathPattern:        "/devices/onus/{id}/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesOnusIDSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesOnusIDSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesOnusIdSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesOnusIDWireless updates an onu s wireless settings
*/
func (a *Client) PutDevicesOnusIDWireless(params *PutDevicesOnusIDWirelessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesOnusIDWirelessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesOnusIDWirelessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesOnusIdWireless",
		Method:             "PUT",
		PathPattern:        "/devices/onus/{id}/wireless",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesOnusIDWirelessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesOnusIDWirelessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesOnusIdWireless: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesSolarbeamsIDConfigSystem updates solar beam system settings
*/
func (a *Client) PutDevicesSolarbeamsIDConfigSystem(params *PutDevicesSolarbeamsIDConfigSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesSolarbeamsIDConfigSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesSolarbeamsIDConfigSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesSolarbeamsIdConfigSystem",
		Method:             "PUT",
		PathPattern:        "/devices/solarbeams/{id}/config/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesSolarbeamsIDConfigSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesSolarbeamsIDConfigSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesSolarbeamsIdConfigSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesToughswitchesIDSystemUsers updates tough switch system users deprecated in favor of route p u t nms api v2 1 devices id system
*/
func (a *Client) PutDevicesToughswitchesIDSystemUsers(params *PutDevicesToughswitchesIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesToughswitchesIDSystemUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesToughswitchesIDSystemUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesToughswitchesIdSystemUsers",
		Method:             "PUT",
		PathPattern:        "/devices/toughswitches/{id}/system/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesToughswitchesIDSystemUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesToughswitchesIDSystemUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesToughswitchesIdSystemUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDDhcpLeasesServernameLeaseid updates d h c p IP lease


        Request does accept payload with "leaseId" property, to match api,
        but the id is ignored and it will be changed when mac or ip is updated.

*/
func (a *Client) PutDevicesUisprsIDDhcpLeasesServernameLeaseid(params *PutDevicesUisprsIDDhcpLeasesServernameLeaseidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDDhcpLeasesServernameLeaseidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdDhcpLeasesServernameLeaseid",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDDhcpLeasesServernameLeaseidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDDhcpLeasesServernameLeaseidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdDhcpLeasesServernameLeaseid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDDhcpServersServername updates d h c p server configuration
*/
func (a *Client) PutDevicesUisprsIDDhcpServersServername(params *PutDevicesUisprsIDDhcpServersServernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDDhcpServersServernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDDhcpServersServernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdDhcpServersServername",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/dhcp/servers/{serverName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDDhcpServersServernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDDhcpServersServernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdDhcpServersServername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDFirewallFilterChain updates firewall filter chain useful for changing rules order
*/
func (a *Client) PutDevicesUisprsIDFirewallFilterChain(params *PutDevicesUisprsIDFirewallFilterChainParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallFilterChainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDFirewallFilterChainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdFirewallFilterChain",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/firewall/filter/chain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDFirewallFilterChainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDFirewallFilterChainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdFirewallFilterChain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDFirewallFiltersFilternameRule updates firewall filter rule
*/
func (a *Client) PutDevicesUisprsIDFirewallFiltersFilternameRule(params *PutDevicesUisprsIDFirewallFiltersFilternameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallFiltersFilternameRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDFirewallFiltersFilternameRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdFirewallFiltersFilternameRule",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/firewall/filters/{filterName}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDFirewallFiltersFilternameRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDFirewallFiltersFilternameRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdFirewallFiltersFilternameRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDFirewallManglesManglenameRule updates firewall mangle rule
*/
func (a *Client) PutDevicesUisprsIDFirewallManglesManglenameRule(params *PutDevicesUisprsIDFirewallManglesManglenameRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallManglesManglenameRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDFirewallManglesManglenameRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdFirewallManglesManglenameRule",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/firewall/mangles/{mangleName}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDFirewallManglesManglenameRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDFirewallManglesManglenameRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdFirewallManglesManglenameRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDFirewallNatsRule updates firewall n a t rule
*/
func (a *Client) PutDevicesUisprsIDFirewallNatsRule(params *PutDevicesUisprsIDFirewallNatsRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallNatsRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDFirewallNatsRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdFirewallNatsRule",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/firewall/nats/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDFirewallNatsRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDFirewallNatsRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdFirewallNatsRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDFirewallNatsRules updates firewall n a t rules useful for changing rules order
*/
func (a *Client) PutDevicesUisprsIDFirewallNatsRules(params *PutDevicesUisprsIDFirewallNatsRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallNatsRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDFirewallNatsRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdFirewallNatsRules",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/firewall/nats/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDFirewallNatsRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDFirewallNatsRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdFirewallNatsRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDFirewallSetsSet updates firewall set
*/
func (a *Client) PutDevicesUisprsIDFirewallSetsSet(params *PutDevicesUisprsIDFirewallSetsSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallSetsSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDFirewallSetsSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdFirewallSetsSet",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/firewall/sets/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDFirewallSetsSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDFirewallSetsSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdFirewallSetsSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDFirewallSettings sets firewall settings on the device
*/
func (a *Client) PutDevicesUisprsIDFirewallSettings(params *PutDevicesUisprsIDFirewallSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDFirewallSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDFirewallSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdFirewallSettings",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/firewall/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDFirewallSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDFirewallSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdFirewallSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDRouterOspf updates o s p f configuration deprecated in favor of route p u t nms api v2 1 devices id router ospf
*/
func (a *Client) PutDevicesUisprsIDRouterOspf(params *PutDevicesUisprsIDRouterOspfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterOspfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDRouterOspfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdRouterOspf",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/router/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDRouterOspfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDRouterOspfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdRouterOspf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDRouterOspfAreasAreaid updates o s p f area deprecated in favor of route p u t nms api v2 1 devices id router ospf areas area Id
*/
func (a *Client) PutDevicesUisprsIDRouterOspfAreasAreaid(params *PutDevicesUisprsIDRouterOspfAreasAreaidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterOspfAreasAreaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDRouterOspfAreasAreaidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdRouterOspfAreasAreaid",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/areas/{areaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDRouterOspfAreasAreaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDRouterOspfAreasAreaidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdRouterOspfAreasAreaid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDRouterOspfInterface updates o s p f interface deprecated in favor of route p u t nms api v2 1 devices device Id interfaces interface name ospf
*/
func (a *Client) PutDevicesUisprsIDRouterOspfInterface(params *PutDevicesUisprsIDRouterOspfInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterOspfInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDRouterOspfInterfaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdRouterOspfInterface",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/router/ospf/interface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDRouterOspfInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDRouterOspfInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdRouterOspfInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUisprsIDRouterRoutes edits static route deprecated in favor of route p u t nms api v2 1 devices id router routes
*/
func (a *Client) PutDevicesUisprsIDRouterRoutes(params *PutDevicesUisprsIDRouterRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUisprsIDRouterRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUisprsIDRouterRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUisprsIdRouterRoutes",
		Method:             "PUT",
		PathPattern:        "/devices/uisprs/{id}/router/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUisprsIDRouterRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUisprsIDRouterRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUisprsIdRouterRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevicesUispssIDSystemUsers updates UI s p switch system users deprecated in favor of route p u t nms api v2 1 devices id system
*/
func (a *Client) PutDevicesUispssIDSystemUsers(params *PutDevicesUispssIDSystemUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDevicesUispssIDSystemUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDevicesUispssIDSystemUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putDevicesUispssIdSystemUsers",
		Method:             "PUT",
		PathPattern:        "/devices/uispss/{id}/system/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDevicesUispssIDSystemUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDevicesUispssIDSystemUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevicesUispssIdSystemUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
