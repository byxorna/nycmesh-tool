// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
)

// GetDevicesDeviceidMactableReader is a Reader for the GetDevicesDeviceidMactable structure.
type GetDevicesDeviceidMactableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesDeviceidMactableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDevicesDeviceidMactableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDevicesDeviceidMactableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDevicesDeviceidMactableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDevicesDeviceidMactableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDevicesDeviceidMactableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDevicesDeviceidMactableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDevicesDeviceidMactableOK creates a GetDevicesDeviceidMactableOK with default headers values
func NewGetDevicesDeviceidMactableOK() *GetDevicesDeviceidMactableOK {
	return &GetDevicesDeviceidMactableOK{}
}

/* GetDevicesDeviceidMactableOK describes a response with status code 200, with default header values.

Successful
*/
type GetDevicesDeviceidMactableOK struct {
	Payload *models.MacTableSchema
}

func (o *GetDevicesDeviceidMactableOK) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/mac-table][%d] getDevicesDeviceidMactableOK  %+v", 200, o.Payload)
}
func (o *GetDevicesDeviceidMactableOK) GetPayload() *models.MacTableSchema {
	return o.Payload
}

func (o *GetDevicesDeviceidMactableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MacTableSchema)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesDeviceidMactableBadRequest creates a GetDevicesDeviceidMactableBadRequest with default headers values
func NewGetDevicesDeviceidMactableBadRequest() *GetDevicesDeviceidMactableBadRequest {
	return &GetDevicesDeviceidMactableBadRequest{}
}

/* GetDevicesDeviceidMactableBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDevicesDeviceidMactableBadRequest struct {
	Payload *models.Error
}

func (o *GetDevicesDeviceidMactableBadRequest) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/mac-table][%d] getDevicesDeviceidMactableBadRequest  %+v", 400, o.Payload)
}
func (o *GetDevicesDeviceidMactableBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesDeviceidMactableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesDeviceidMactableUnauthorized creates a GetDevicesDeviceidMactableUnauthorized with default headers values
func NewGetDevicesDeviceidMactableUnauthorized() *GetDevicesDeviceidMactableUnauthorized {
	return &GetDevicesDeviceidMactableUnauthorized{}
}

/* GetDevicesDeviceidMactableUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDevicesDeviceidMactableUnauthorized struct {
	Payload *models.Error
}

func (o *GetDevicesDeviceidMactableUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/mac-table][%d] getDevicesDeviceidMactableUnauthorized  %+v", 401, o.Payload)
}
func (o *GetDevicesDeviceidMactableUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesDeviceidMactableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesDeviceidMactableForbidden creates a GetDevicesDeviceidMactableForbidden with default headers values
func NewGetDevicesDeviceidMactableForbidden() *GetDevicesDeviceidMactableForbidden {
	return &GetDevicesDeviceidMactableForbidden{}
}

/* GetDevicesDeviceidMactableForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDevicesDeviceidMactableForbidden struct {
	Payload *models.Error
}

func (o *GetDevicesDeviceidMactableForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/mac-table][%d] getDevicesDeviceidMactableForbidden  %+v", 403, o.Payload)
}
func (o *GetDevicesDeviceidMactableForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesDeviceidMactableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesDeviceidMactableNotFound creates a GetDevicesDeviceidMactableNotFound with default headers values
func NewGetDevicesDeviceidMactableNotFound() *GetDevicesDeviceidMactableNotFound {
	return &GetDevicesDeviceidMactableNotFound{}
}

/* GetDevicesDeviceidMactableNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDevicesDeviceidMactableNotFound struct {
	Payload *models.Error
}

func (o *GetDevicesDeviceidMactableNotFound) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/mac-table][%d] getDevicesDeviceidMactableNotFound  %+v", 404, o.Payload)
}
func (o *GetDevicesDeviceidMactableNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesDeviceidMactableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesDeviceidMactableInternalServerError creates a GetDevicesDeviceidMactableInternalServerError with default headers values
func NewGetDevicesDeviceidMactableInternalServerError() *GetDevicesDeviceidMactableInternalServerError {
	return &GetDevicesDeviceidMactableInternalServerError{}
}

/* GetDevicesDeviceidMactableInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDevicesDeviceidMactableInternalServerError struct {
	Payload *models.Error
}

func (o *GetDevicesDeviceidMactableInternalServerError) Error() string {
	return fmt.Sprintf("[GET /devices/{deviceId}/mac-table][%d] getDevicesDeviceidMactableInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDevicesDeviceidMactableInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDevicesDeviceidMactableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
