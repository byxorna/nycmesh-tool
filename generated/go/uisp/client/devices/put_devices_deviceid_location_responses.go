// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/generated/go/uisp/models"
)

// PutDevicesDeviceidLocationReader is a Reader for the PutDevicesDeviceidLocation structure.
type PutDevicesDeviceidLocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDevicesDeviceidLocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDevicesDeviceidLocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDevicesDeviceidLocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDevicesDeviceidLocationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDevicesDeviceidLocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDevicesDeviceidLocationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDevicesDeviceidLocationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutDevicesDeviceidLocationOK creates a PutDevicesDeviceidLocationOK with default headers values
func NewPutDevicesDeviceidLocationOK() *PutDevicesDeviceidLocationOK {
	return &PutDevicesDeviceidLocationOK{}
}

/* PutDevicesDeviceidLocationOK describes a response with status code 200, with default header values.

Successful
*/
type PutDevicesDeviceidLocationOK struct {
	Payload *models.DeviceLocation
}

func (o *PutDevicesDeviceidLocationOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/location][%d] putDevicesDeviceidLocationOK  %+v", 200, o.Payload)
}
func (o *PutDevicesDeviceidLocationOK) GetPayload() *models.DeviceLocation {
	return o.Payload
}

func (o *PutDevicesDeviceidLocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceLocation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidLocationBadRequest creates a PutDevicesDeviceidLocationBadRequest with default headers values
func NewPutDevicesDeviceidLocationBadRequest() *PutDevicesDeviceidLocationBadRequest {
	return &PutDevicesDeviceidLocationBadRequest{}
}

/* PutDevicesDeviceidLocationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutDevicesDeviceidLocationBadRequest struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidLocationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/location][%d] putDevicesDeviceidLocationBadRequest  %+v", 400, o.Payload)
}
func (o *PutDevicesDeviceidLocationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidLocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidLocationUnauthorized creates a PutDevicesDeviceidLocationUnauthorized with default headers values
func NewPutDevicesDeviceidLocationUnauthorized() *PutDevicesDeviceidLocationUnauthorized {
	return &PutDevicesDeviceidLocationUnauthorized{}
}

/* PutDevicesDeviceidLocationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutDevicesDeviceidLocationUnauthorized struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidLocationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/location][%d] putDevicesDeviceidLocationUnauthorized  %+v", 401, o.Payload)
}
func (o *PutDevicesDeviceidLocationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidLocationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidLocationForbidden creates a PutDevicesDeviceidLocationForbidden with default headers values
func NewPutDevicesDeviceidLocationForbidden() *PutDevicesDeviceidLocationForbidden {
	return &PutDevicesDeviceidLocationForbidden{}
}

/* PutDevicesDeviceidLocationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutDevicesDeviceidLocationForbidden struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidLocationForbidden) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/location][%d] putDevicesDeviceidLocationForbidden  %+v", 403, o.Payload)
}
func (o *PutDevicesDeviceidLocationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidLocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidLocationNotFound creates a PutDevicesDeviceidLocationNotFound with default headers values
func NewPutDevicesDeviceidLocationNotFound() *PutDevicesDeviceidLocationNotFound {
	return &PutDevicesDeviceidLocationNotFound{}
}

/* PutDevicesDeviceidLocationNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutDevicesDeviceidLocationNotFound struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidLocationNotFound) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/location][%d] putDevicesDeviceidLocationNotFound  %+v", 404, o.Payload)
}
func (o *PutDevicesDeviceidLocationNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidLocationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDevicesDeviceidLocationInternalServerError creates a PutDevicesDeviceidLocationInternalServerError with default headers values
func NewPutDevicesDeviceidLocationInternalServerError() *PutDevicesDeviceidLocationInternalServerError {
	return &PutDevicesDeviceidLocationInternalServerError{}
}

/* PutDevicesDeviceidLocationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PutDevicesDeviceidLocationInternalServerError struct {
	Payload *models.Error
}

func (o *PutDevicesDeviceidLocationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /devices/{deviceId}/location][%d] putDevicesDeviceidLocationInternalServerError  %+v", 500, o.Payload)
}
func (o *PutDevicesDeviceidLocationInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDevicesDeviceidLocationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
