// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNmsStatisticsParams creates a new GetNmsStatisticsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNmsStatisticsParams() *GetNmsStatisticsParams {
	return &GetNmsStatisticsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNmsStatisticsParamsWithTimeout creates a new GetNmsStatisticsParams object
// with the ability to set a timeout on a request.
func NewGetNmsStatisticsParamsWithTimeout(timeout time.Duration) *GetNmsStatisticsParams {
	return &GetNmsStatisticsParams{
		timeout: timeout,
	}
}

// NewGetNmsStatisticsParamsWithContext creates a new GetNmsStatisticsParams object
// with the ability to set a context for a request.
func NewGetNmsStatisticsParamsWithContext(ctx context.Context) *GetNmsStatisticsParams {
	return &GetNmsStatisticsParams{
		Context: ctx,
	}
}

// NewGetNmsStatisticsParamsWithHTTPClient creates a new GetNmsStatisticsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNmsStatisticsParamsWithHTTPClient(client *http.Client) *GetNmsStatisticsParams {
	return &GetNmsStatisticsParams{
		HTTPClient: client,
	}
}

/* GetNmsStatisticsParams contains all the parameters to send to the API endpoint
   for the get nms statistics operation.

   Typically these are written to a http.Request.
*/
type GetNmsStatisticsParams struct {

	// Interval.
	Interval string

	// Siri.
	Siri *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get nms statistics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNmsStatisticsParams) WithDefaults() *GetNmsStatisticsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get nms statistics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNmsStatisticsParams) SetDefaults() {
	var (
		siriDefault = bool(false)
	)

	val := GetNmsStatisticsParams{
		Siri: &siriDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get nms statistics params
func (o *GetNmsStatisticsParams) WithTimeout(timeout time.Duration) *GetNmsStatisticsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nms statistics params
func (o *GetNmsStatisticsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nms statistics params
func (o *GetNmsStatisticsParams) WithContext(ctx context.Context) *GetNmsStatisticsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nms statistics params
func (o *GetNmsStatisticsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nms statistics params
func (o *GetNmsStatisticsParams) WithHTTPClient(client *http.Client) *GetNmsStatisticsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nms statistics params
func (o *GetNmsStatisticsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInterval adds the interval to the get nms statistics params
func (o *GetNmsStatisticsParams) WithInterval(interval string) *GetNmsStatisticsParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get nms statistics params
func (o *GetNmsStatisticsParams) SetInterval(interval string) {
	o.Interval = interval
}

// WithSiri adds the siri to the get nms statistics params
func (o *GetNmsStatisticsParams) WithSiri(siri *bool) *GetNmsStatisticsParams {
	o.SetSiri(siri)
	return o
}

// SetSiri adds the siri to the get nms statistics params
func (o *GetNmsStatisticsParams) SetSiri(siri *bool) {
	o.Siri = siri
}

// WriteToRequest writes these params to a swagger request
func (o *GetNmsStatisticsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param interval
	qrInterval := o.Interval
	qInterval := qrInterval
	if qInterval != "" {

		if err := r.SetQueryParam("interval", qInterval); err != nil {
			return err
		}
	}

	if o.Siri != nil {

		// query param siri
		var qrSiri bool

		if o.Siri != nil {
			qrSiri = *o.Siri
		}
		qSiri := swag.FormatBool(qrSiri)
		if qSiri != "" {

			if err := r.SetQueryParam("siri", qSiri); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
