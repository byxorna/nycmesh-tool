// Code generated by go-swagger; DO NOT EDIT.

package simulation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new simulation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for simulation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSimulationDevicesID(params *DeleteSimulationDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSimulationDevicesIDOK, error)

	GetSimulation(params *GetSimulationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSimulationOK, error)

	GetSimulationDevices(params *GetSimulationDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSimulationDevicesOK, error)

	GetSimulationLinks(params *GetSimulationLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSimulationLinksOK, error)

	PatchSimulationDevicesID(params *PatchSimulationDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSimulationDevicesIDOK, error)

	PatchSimulationLinksID(params *PatchSimulationLinksIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSimulationLinksIDOK, error)

	PostSimulationDevices(params *PostSimulationDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostSimulationDevicesOK, error)

	PutSimulationDevicesID(params *PutSimulationDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutSimulationDevicesIDOK, error)

	PutSimulationLinksID(params *PutSimulationLinksIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutSimulationLinksIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSimulationDevicesID deletes simulation device
*/
func (a *Client) DeleteSimulationDevicesID(params *DeleteSimulationDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSimulationDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSimulationDevicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSimulationDevicesId",
		Method:             "DELETE",
		PathPattern:        "/simulation/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSimulationDevicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSimulationDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSimulationDevicesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSimulation gets simulation devices and links
*/
func (a *Client) GetSimulation(params *GetSimulationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSimulationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSimulation",
		Method:             "GET",
		PathPattern:        "/simulation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSimulationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSimulationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSimulation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSimulationDevices gets simulation devices
*/
func (a *Client) GetSimulationDevices(params *GetSimulationDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSimulationDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSimulationDevices",
		Method:             "GET",
		PathPattern:        "/simulation/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSimulationDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSimulationDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSimulationDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSimulationLinks gets simulation links
*/
func (a *Client) GetSimulationLinks(params *GetSimulationLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSimulationLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimulationLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSimulationLinks",
		Method:             "GET",
		PathPattern:        "/simulation/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSimulationLinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSimulationLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSimulationLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSimulationDevicesID patches simulation device
*/
func (a *Client) PatchSimulationDevicesID(params *PatchSimulationDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSimulationDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSimulationDevicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchSimulationDevicesId",
		Method:             "PATCH",
		PathPattern:        "/simulation/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSimulationDevicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSimulationDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSimulationDevicesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSimulationLinksID patches simulation link
*/
func (a *Client) PatchSimulationLinksID(params *PatchSimulationLinksIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSimulationLinksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSimulationLinksIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchSimulationLinksId",
		Method:             "PATCH",
		PathPattern:        "/simulation/links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSimulationLinksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSimulationLinksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSimulationLinksId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSimulationDevices creates simulation device
*/
func (a *Client) PostSimulationDevices(params *PostSimulationDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostSimulationDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSimulationDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postSimulationDevices",
		Method:             "POST",
		PathPattern:        "/simulation/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSimulationDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSimulationDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postSimulationDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSimulationDevicesID updates simulation device
*/
func (a *Client) PutSimulationDevicesID(params *PutSimulationDevicesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutSimulationDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSimulationDevicesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putSimulationDevicesId",
		Method:             "PUT",
		PathPattern:        "/simulation/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSimulationDevicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSimulationDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putSimulationDevicesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSimulationLinksID updates simulation link
*/
func (a *Client) PutSimulationLinksID(params *PutSimulationLinksIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutSimulationLinksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSimulationLinksIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putSimulationLinksId",
		Method:             "PUT",
		PathPattern:        "/simulation/links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSimulationLinksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSimulationLinksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putSimulationLinksId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
