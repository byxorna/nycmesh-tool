// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UispSetting uisp setting
//
// swagger:model UispSetting
type UispSetting struct {

	// In milliseconds.
	DeviceGracePeriodOutage float64 `json:"deviceGracePeriodOutage,omitempty"`

	// Address for device to ping.
	DevicePingAddress string `json:"devicePingAddress,omitempty"`

	// In milliseconds.
	DevicePingIntervalNormal float64 `json:"devicePingIntervalNormal,omitempty"`

	// In milliseconds.
	DevicePingIntervalOutage float64 `json:"devicePingIntervalOutage,omitempty"`

	// device transmission frequency
	// Enum: [minimal low medium high realtime]
	DeviceTransmissionFrequency string `json:"deviceTransmissionFrequency,omitempty"`

	// Transmission frequency with device.
	// Example: auto
	// Enum: [auto custom]
	DeviceTransmissionProfile string `json:"deviceTransmissionProfile,omitempty"`

	// meta
	Meta *UispSettingMeta `json:"meta,omitempty"`

	//
	//     If TRUE during update of UISP global settings this device settings will not update if FALSE then yes.
	//
	OverrideGlobal bool `json:"overrideGlobal,omitempty"`
}

// Validate validates this uisp setting
func (m *UispSetting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceTransmissionFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceTransmissionProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var uispSettingTypeDeviceTransmissionFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		uispSettingTypeDeviceTransmissionFrequencyPropEnum = append(uispSettingTypeDeviceTransmissionFrequencyPropEnum, v)
	}
}

const (

	// UispSettingDeviceTransmissionFrequencyMinimal captures enum value "minimal"
	UispSettingDeviceTransmissionFrequencyMinimal string = "minimal"

	// UispSettingDeviceTransmissionFrequencyLow captures enum value "low"
	UispSettingDeviceTransmissionFrequencyLow string = "low"

	// UispSettingDeviceTransmissionFrequencyMedium captures enum value "medium"
	UispSettingDeviceTransmissionFrequencyMedium string = "medium"

	// UispSettingDeviceTransmissionFrequencyHigh captures enum value "high"
	UispSettingDeviceTransmissionFrequencyHigh string = "high"

	// UispSettingDeviceTransmissionFrequencyRealtime captures enum value "realtime"
	UispSettingDeviceTransmissionFrequencyRealtime string = "realtime"
)

// prop value enum
func (m *UispSetting) validateDeviceTransmissionFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, uispSettingTypeDeviceTransmissionFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UispSetting) validateDeviceTransmissionFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceTransmissionFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceTransmissionFrequencyEnum("deviceTransmissionFrequency", "body", m.DeviceTransmissionFrequency); err != nil {
		return err
	}

	return nil
}

var uispSettingTypeDeviceTransmissionProfilePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		uispSettingTypeDeviceTransmissionProfilePropEnum = append(uispSettingTypeDeviceTransmissionProfilePropEnum, v)
	}
}

const (

	// UispSettingDeviceTransmissionProfileAuto captures enum value "auto"
	UispSettingDeviceTransmissionProfileAuto string = "auto"

	// UispSettingDeviceTransmissionProfileCustom captures enum value "custom"
	UispSettingDeviceTransmissionProfileCustom string = "custom"
)

// prop value enum
func (m *UispSetting) validateDeviceTransmissionProfileEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, uispSettingTypeDeviceTransmissionProfilePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UispSetting) validateDeviceTransmissionProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceTransmissionProfile) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceTransmissionProfileEnum("deviceTransmissionProfile", "body", m.DeviceTransmissionProfile); err != nil {
		return err
	}

	return nil
}

func (m *UispSetting) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this uisp setting based on the context it is used
func (m *UispSetting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UispSetting) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UispSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UispSetting) UnmarshalBinary(b []byte) error {
	var res UispSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
