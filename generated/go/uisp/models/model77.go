// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model77 model 77
//
// swagger:model Model 77
type Model77 struct {

	// coverage
	Coverage Coverage `json:"coverage,omitempty"`

	// Max capacity of requested configuration in Mbps
	// Example: 447
	// Required: true
	// Minimum: 0
	MaxCapacity *float64 `json:"maxCapacity"`

	// north west corner
	// Required: true
	NorthWestCorner *NorthWestCorner `json:"northWestCorner"`

	// south east corner
	// Required: true
	SouthEastCorner *SouthEastCorner `json:"southEastCorner"`
}

// Validate validates this model 77
func (m *Model77) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNorthWestCorner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSouthEastCorner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model77) validateCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.Coverage) { // not required
		return nil
	}

	if err := m.Coverage.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("coverage")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("coverage")
		}
		return err
	}

	return nil
}

func (m *Model77) validateMaxCapacity(formats strfmt.Registry) error {

	if err := validate.Required("maxCapacity", "body", m.MaxCapacity); err != nil {
		return err
	}

	if err := validate.Minimum("maxCapacity", "body", *m.MaxCapacity, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Model77) validateNorthWestCorner(formats strfmt.Registry) error {

	if err := validate.Required("northWestCorner", "body", m.NorthWestCorner); err != nil {
		return err
	}

	if m.NorthWestCorner != nil {
		if err := m.NorthWestCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("northWestCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("northWestCorner")
			}
			return err
		}
	}

	return nil
}

func (m *Model77) validateSouthEastCorner(formats strfmt.Registry) error {

	if err := validate.Required("southEastCorner", "body", m.SouthEastCorner); err != nil {
		return err
	}

	if m.SouthEastCorner != nil {
		if err := m.SouthEastCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("southEastCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("southEastCorner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this model 77 based on the context it is used
func (m *Model77) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCoverage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNorthWestCorner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSouthEastCorner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model77) contextValidateCoverage(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Coverage.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("coverage")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("coverage")
		}
		return err
	}

	return nil
}

func (m *Model77) contextValidateNorthWestCorner(ctx context.Context, formats strfmt.Registry) error {

	if m.NorthWestCorner != nil {
		if err := m.NorthWestCorner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("northWestCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("northWestCorner")
			}
			return err
		}
	}

	return nil
}

func (m *Model77) contextValidateSouthEastCorner(ctx context.Context, formats strfmt.Registry) error {

	if m.SouthEastCorner != nil {
		if err := m.SouthEastCorner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("southEastCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("southEastCorner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model77) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model77) UnmarshalBinary(b []byte) error {
	var res Model77
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
