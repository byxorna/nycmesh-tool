// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Site3 site 3
//
// swagger:model site 3
type Site3 struct {

	// Number of sites with read access.
	// Example: 4
	// Required: true
	All *float64 `json:"all"`

	// Number of sites with read-only access.
	// Example: 1
	// Required: true
	ReadOnly *float64 `json:"readOnly"`

	// Number of sites with read-write access.
	// Example: 3
	// Required: true
	ReadWrite *float64 `json:"readWrite"`
}

// Validate validates this site 3
func (m *Site3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadWrite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Site3) validateAll(formats strfmt.Registry) error {

	if err := validate.Required("all", "body", m.All); err != nil {
		return err
	}

	return nil
}

func (m *Site3) validateReadOnly(formats strfmt.Registry) error {

	if err := validate.Required("readOnly", "body", m.ReadOnly); err != nil {
		return err
	}

	return nil
}

func (m *Site3) validateReadWrite(formats strfmt.Registry) error {

	if err := validate.Required("readWrite", "body", m.ReadWrite); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this site 3 based on context it is used
func (m *Site3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Site3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Site3) UnmarshalBinary(b []byte) error {
	var res Site3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
