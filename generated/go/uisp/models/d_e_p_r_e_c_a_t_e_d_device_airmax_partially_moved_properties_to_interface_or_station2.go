// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2 d e p r e c a t e d device airmax partially moved properties to interface or station 2
//
// swagger:model [DEPRECATED]DeviceAirmax - partially moved properties to interface or station. 2
type DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2 struct {

	// antenna
	Antenna string `json:"antenna,omitempty"`

	// ap device
	ApDevice *ApDevice `json:"apDevice,omitempty"`

	// ap mac
	ApMac string `json:"apMac,omitempty"`

	// authentication
	// Required: true
	// Enum: [psk psk2 ent none]
	Authentication *string `json:"authentication"`

	// available tx power range
	AvailableTxPowerRange *AvailableTxPowerRange `json:"availableTxPowerRange,omitempty"`

	// Cable Length from eth0 interface in meters. When below values is null cable is long less then 20m.
	CableLength float64 `json:"cableLength,omitempty"`

	// Average signal-to-noise ratio on eth0 interface in dB
	CableSnr float64 `json:"cableSnr,omitempty"`

	// ccq
	Ccq float64 `json:"ccq,omitempty"`

	// channel width
	// Required: true
	// Minimum: 0
	ChannelWidth *int64 `json:"channelWidth"`

	// country code
	// Required: true
	// Minimum: 0
	CountryCode *int64 `json:"countryCode"`

	// frequency
	// Example: 5400
	// Minimum: 0
	Frequency *float64 `json:"frequency,omitempty"`

	// frequency bands
	FrequencyBands FrequencyBands5 `json:"frequencyBands,omitempty"`

	// frequency center
	FrequencyCenter string `json:"frequencyCenter,omitempty"`

	// gps signal
	// Maximum: 1
	// Minimum: 0
	GpsSignal *float64 `json:"gpsSignal,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// noise floor
	NoiseFloor string `json:"noiseFloor,omitempty"`

	// polling
	Polling *Polling `json:"polling,omitempty"`

	// receive chains
	ReceiveChains float64 `json:"receiveChains,omitempty"`

	// remote signal
	RemoteSignal float64 `json:"remoteSignal,omitempty"`

	// remote signal60g
	RemoteSignal60g float64 `json:"remoteSignal60g,omitempty"`

	// Carrier to Interference-plus-Noise Ratio in dB on wireless
	RxCinr float64 `json:"rxCinr,omitempty"`

	// security
	// Required: true
	// Enum: [wep wpa wpa-psk wpa2 enabled none]
	Security *string `json:"security"`

	// series
	// Required: true
	// Enum: [AC M G60]
	Series *string `json:"series"`

	// signal chain
	SignalChain SignalChain `json:"signalChain,omitempty"`

	// signal remote chain
	SignalRemoteChain SignalRemoteChain `json:"signalRemoteChain,omitempty"`

	// SSID
	Ssid string `json:"ssid,omitempty"`

	// station name
	StationName string `json:"stationName,omitempty"`

	// stations count
	StationsCount float64 `json:"stationsCount,omitempty"`

	// tdd framing
	TddFraming string `json:"tddFraming,omitempty"`

	// transmit chains
	TransmitChains float64 `json:"transmitChains,omitempty"`

	// transmit power
	TransmitPower float64 `json:"transmitPower,omitempty"`

	// wds
	Wds bool `json:"wds,omitempty"`

	// wireless mode
	// Enum: [ap ap-ptp ap-ptmp ap-ptmp-airmax ap-ptmp-airmax-mixed ap-ptmp-airmax-ac sta sta-ptp sta-ptmp aprepeater repeater mesh]
	WirelessMode string `json:"wirelessMode,omitempty"`

	// wlan rx bytes
	WlanRxBytes float64 `json:"wlanRxBytes,omitempty"`

	// wlan tx bytes
	WlanTxBytes float64 `json:"wlanTxBytes,omitempty"`
}

// Validate validates this d e p r e c a t e d device airmax partially moved properties to interface or station 2
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableTxPowerRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequencyBands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpsSignal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalRemoteChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWirelessMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateApDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.ApDevice) { // not required
		return nil
	}

	if m.ApDevice != nil {
		if err := m.ApDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apDevice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apDevice")
			}
			return err
		}
	}

	return nil
}

var dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeAuthenticationPropEnum = append(dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeAuthenticationPropEnum, v)
	}
}

const (

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationPsk captures enum value "psk"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationPsk string = "psk"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationPsk2 captures enum value "psk2"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationPsk2 string = "psk2"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationEnt captures enum value "ent"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationEnt string = "ent"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationNone captures enum value "none"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2AuthenticationNone string = "none"
)

// prop value enum
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeAuthenticationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("authentication", "body", m.Authentication); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthenticationEnum("authentication", "body", *m.Authentication); err != nil {
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateAvailableTxPowerRange(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableTxPowerRange) { // not required
		return nil
	}

	if m.AvailableTxPowerRange != nil {
		if err := m.AvailableTxPowerRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availableTxPowerRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availableTxPowerRange")
			}
			return err
		}
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateChannelWidth(formats strfmt.Registry) error {

	if err := validate.Required("channelWidth", "body", m.ChannelWidth); err != nil {
		return err
	}

	if err := validate.MinimumInt("channelWidth", "body", *m.ChannelWidth, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	if err := validate.MinimumInt("countryCode", "body", *m.CountryCode, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := validate.Minimum("frequency", "body", *m.Frequency, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateFrequencyBands(formats strfmt.Registry) error {
	if swag.IsZero(m.FrequencyBands) { // not required
		return nil
	}

	if err := m.FrequencyBands.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("frequencyBands")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("frequencyBands")
		}
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateGpsSignal(formats strfmt.Registry) error {
	if swag.IsZero(m.GpsSignal) { // not required
		return nil
	}

	if err := validate.Minimum("gpsSignal", "body", *m.GpsSignal, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("gpsSignal", "body", *m.GpsSignal, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validatePolling(formats strfmt.Registry) error {
	if swag.IsZero(m.Polling) { // not required
		return nil
	}

	if m.Polling != nil {
		if err := m.Polling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polling")
			}
			return err
		}
	}

	return nil
}

var dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSecurityPropEnum = append(dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSecurityPropEnum, v)
	}
}

const (

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWep captures enum value "wep"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWep string = "wep"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWpa captures enum value "wpa"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWpa string = "wpa"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWpaDashPsk captures enum value "wpa-psk"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWpaDashPsk string = "wpa-psk"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWpa2 captures enum value "wpa2"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityWpa2 string = "wpa2"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityEnabled captures enum value "enabled"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityEnabled string = "enabled"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityNone captures enum value "none"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SecurityNone string = "none"
)

// prop value enum
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateSecurityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSecurityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	// value enum
	if err := m.validateSecurityEnum("security", "body", *m.Security); err != nil {
		return err
	}

	return nil
}

var dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSeriesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AC","M","G60"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSeriesPropEnum = append(dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSeriesPropEnum, v)
	}
}

const (

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SeriesAC captures enum value "AC"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SeriesAC string = "AC"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SeriesM captures enum value "M"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SeriesM string = "M"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SeriesG60 captures enum value "G60"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2SeriesG60 string = "G60"
)

// prop value enum
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateSeriesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeSeriesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("series", "body", m.Series); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeriesEnum("series", "body", *m.Series); err != nil {
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateSignalChain(formats strfmt.Registry) error {
	if swag.IsZero(m.SignalChain) { // not required
		return nil
	}

	if err := m.SignalChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalChain")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signalChain")
		}
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateSignalRemoteChain(formats strfmt.Registry) error {
	if swag.IsZero(m.SignalRemoteChain) { // not required
		return nil
	}

	if err := m.SignalRemoteChain.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalRemoteChain")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signalRemoteChain")
		}
		return err
	}

	return nil
}

var dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeWirelessModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeWirelessModePropEnum = append(dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeWirelessModePropEnum, v)
	}
}

const (

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeAp captures enum value "ap"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeAp string = "ap"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtp captures enum value "ap-ptp"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtp string = "ap-ptp"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmp captures enum value "ap-ptmp"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmp string = "ap-ptmp"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmpDashAirmax captures enum value "ap-ptmp-airmax"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmpDashAirmax string = "ap-ptmp-airmax"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmpDashAirmaxDashMixed captures enum value "ap-ptmp-airmax-mixed"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmpDashAirmaxDashMixed string = "ap-ptmp-airmax-mixed"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmpDashAirmaxDashAc captures enum value "ap-ptmp-airmax-ac"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeApDashPtmpDashAirmaxDashAc string = "ap-ptmp-airmax-ac"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeSta captures enum value "sta"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeSta string = "sta"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeStaDashPtp captures enum value "sta-ptp"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeStaDashPtp string = "sta-ptp"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeStaDashPtmp captures enum value "sta-ptmp"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeStaDashPtmp string = "sta-ptmp"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeAprepeater captures enum value "aprepeater"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeAprepeater string = "aprepeater"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeRepeater captures enum value "repeater"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeRepeater string = "repeater"

	// DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeMesh captures enum value "mesh"
	DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2WirelessModeMesh string = "mesh"
)

// prop value enum
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateWirelessModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2TypeWirelessModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) validateWirelessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.WirelessMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWirelessModeEnum("wirelessMode", "body", m.WirelessMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this d e p r e c a t e d device airmax partially moved properties to interface or station 2 based on the context it is used
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableTxPowerRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrequencyBands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignalChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignalRemoteChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) contextValidateApDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.ApDevice != nil {
		if err := m.ApDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apDevice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apDevice")
			}
			return err
		}
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) contextValidateAvailableTxPowerRange(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailableTxPowerRange != nil {
		if err := m.AvailableTxPowerRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availableTxPowerRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availableTxPowerRange")
			}
			return err
		}
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) contextValidateFrequencyBands(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FrequencyBands.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("frequencyBands")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("frequencyBands")
		}
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) contextValidatePolling(ctx context.Context, formats strfmt.Registry) error {

	if m.Polling != nil {
		if err := m.Polling.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polling")
			}
			return err
		}
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) contextValidateSignalChain(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SignalChain.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalChain")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signalChain")
		}
		return err
	}

	return nil
}

func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) contextValidateSignalRemoteChain(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SignalRemoteChain.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalRemoteChain")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signalRemoteChain")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2) UnmarshalBinary(b []byte) error {
	var res DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
