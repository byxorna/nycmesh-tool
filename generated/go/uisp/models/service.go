// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Service service
//
// swagger:model service
type Service struct {

	// Time when the service was activated.
	// Example: 2018-11-14T15:20:32.004Z
	// Required: true
	// Format: date-time
	ActiveFrom *strfmt.DateTime `json:"activeFrom"`

	// id
	// Example: 123
	// Required: true
	ID *string `json:"id"`

	// Service name.
	// Example: Building B
	// Required: true
	Name *string `json:"name"`

	// Service status.
	// Example: 7
	// Required: true
	// Enum: [0 1 2 3 4 5 6 7]
	Status *float64 `json:"status"`

	// ID of the tariff (service plan) used for this service.
	// Example: 1
	// Required: true
	TariffID *string `json:"tariffId"`

	// Whether traffic shaping is overridden for this client.
	// Example: false
	// Required: true
	TrafficShapingOverrideEnabled *bool `json:"trafficShapingOverrideEnabled"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTariffID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficShapingOverrideEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateActiveFrom(formats strfmt.Registry) error {

	if err := validate.Required("activeFrom", "body", m.ActiveFrom); err != nil {
		return err
	}

	if err := validate.FormatOf("activeFrom", "body", "date-time", m.ActiveFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var serviceTypeStatusPropEnum []interface{}

func init() {
	var res []float64
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5,6,7]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceTypeStatusPropEnum = append(serviceTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *Service) validateStatusEnum(path, location string, value float64) error {
	if err := validate.EnumCase(path, location, value, serviceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Service) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateTariffID(formats strfmt.Registry) error {

	if err := validate.Required("tariffId", "body", m.TariffID); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateTrafficShapingOverrideEnabled(formats strfmt.Registry) error {

	if err := validate.Required("trafficShapingOverrideEnabled", "body", m.TrafficShapingOverrideEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service based on context it is used
func (m *Service) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
