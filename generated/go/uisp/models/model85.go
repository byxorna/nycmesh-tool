// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model85 model 85
//
// swagger:model Model 85
type Model85 struct {

	// smtp
	SMTP *SMTP `json:"smtp,omitempty"`

	// to
	// Required: true
	To *string `json:"to"`
}

// Validate validates this model 85
func (m *Model85) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSMTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model85) validateSMTP(formats strfmt.Registry) error {
	if swag.IsZero(m.SMTP) { // not required
		return nil
	}

	if m.SMTP != nil {
		if err := m.SMTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtp")
			}
			return err
		}
	}

	return nil
}

func (m *Model85) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 85 based on the context it is used
func (m *Model85) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSMTP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model85) contextValidateSMTP(ctx context.Context, formats strfmt.Registry) error {

	if m.SMTP != nil {
		if err := m.SMTP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model85) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model85) UnmarshalBinary(b []byte) error {
	var res Model85
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
