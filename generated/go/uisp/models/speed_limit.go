// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SpeedLimit speed limit
//
// swagger:model speedLimit
type SpeedLimit struct {

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// rx
	// Maximum: 1e+06
	// Minimum: 0
	Rx *float64 `json:"rx,omitempty"`

	// tx
	// Maximum: 1e+06
	// Minimum: 0
	Tx *float64 `json:"tx,omitempty"`
}

// Validate validates this speed limit
func (m *SpeedLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpeedLimit) validateRx(formats strfmt.Registry) error {
	if swag.IsZero(m.Rx) { // not required
		return nil
	}

	if err := validate.Minimum("rx", "body", *m.Rx, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("rx", "body", *m.Rx, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *SpeedLimit) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(m.Tx) { // not required
		return nil
	}

	if err := validate.Minimum("tx", "body", *m.Tx, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("tx", "body", *m.Tx, 1e+06, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this speed limit based on context it is used
func (m *SpeedLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SpeedLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpeedLimit) UnmarshalBinary(b []byte) error {
	var res SpeedLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
