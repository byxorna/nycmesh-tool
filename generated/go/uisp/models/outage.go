// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Outage outage
//
// swagger:model Outage
type Outage struct {

	// aggregated time
	// Required: true
	// Minimum: 1
	AggregatedTime *float64 `json:"aggregatedTime"`

	// device
	Device *DeviceOutage `json:"device,omitempty"`

	// device metadata
	DeviceMetadata *OutageDeviceMetadata `json:"deviceMetadata,omitempty"`

	// end timestamp
	// Required: true
	EndTimestamp *string `json:"endTimestamp"`

	// id
	// Required: true
	ID *string `json:"id"`

	// in progress
	// Required: true
	InProgress *bool `json:"inProgress"`

	// ongoing
	// Required: true
	Ongoing *bool `json:"ongoing"`

	// site
	Site *SiteIdentification `json:"site,omitempty"`

	// start timestamp
	// Required: true
	StartTimestamp *string `json:"startTimestamp"`

	// type
	// Enum: [outage unreachable]
	Type string `json:"type,omitempty"`
}

// Validate validates this outage
func (m *Outage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOngoing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Outage) validateAggregatedTime(formats strfmt.Registry) error {

	if err := validate.Required("aggregatedTime", "body", m.AggregatedTime); err != nil {
		return err
	}

	if err := validate.Minimum("aggregatedTime", "body", *m.AggregatedTime, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Outage) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Outage) validateDeviceMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceMetadata) { // not required
		return nil
	}

	if m.DeviceMetadata != nil {
		if err := m.DeviceMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Outage) validateEndTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("endTimestamp", "body", m.EndTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Outage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Outage) validateInProgress(formats strfmt.Registry) error {

	if err := validate.Required("inProgress", "body", m.InProgress); err != nil {
		return err
	}

	return nil
}

func (m *Outage) validateOngoing(formats strfmt.Registry) error {

	if err := validate.Required("ongoing", "body", m.Ongoing); err != nil {
		return err
	}

	return nil
}

func (m *Outage) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *Outage) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("startTimestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	return nil
}

var outageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["outage","unreachable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		outageTypeTypePropEnum = append(outageTypeTypePropEnum, v)
	}
}

const (

	// OutageTypeOutage captures enum value "outage"
	OutageTypeOutage string = "outage"

	// OutageTypeUnreachable captures enum value "unreachable"
	OutageTypeUnreachable string = "unreachable"
)

// prop value enum
func (m *Outage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, outageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Outage) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this outage based on the context it is used
func (m *Outage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Outage) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {
		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Outage) contextValidateDeviceMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceMetadata != nil {
		if err := m.DeviceMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Outage) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {
		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Outage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Outage) UnmarshalBinary(b []byte) error {
	var res Outage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
