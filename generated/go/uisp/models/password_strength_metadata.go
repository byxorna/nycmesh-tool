// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordStrengthMetadata password strength metadata
//
// swagger:model PasswordStrengthMetadata
type PasswordStrengthMetadata struct {

	// calc time
	// Required: true
	CalcTime *float64 `json:"calc_time"`

	// crack times display
	CrackTimesDisplay *CrackTimesDisplay `json:"crack_times_display,omitempty"`

	// crack times seconds
	CrackTimesSeconds *CrackTimesSeconds `json:"crack_times_seconds,omitempty"`

	// feedback
	Feedback *Feedback `json:"feedback,omitempty"`

	// guesses
	// Required: true
	Guesses *float64 `json:"guesses"`

	// guesses log10
	// Required: true
	GuessesLog10 *float64 `json:"guesses_log10"`

	// password
	// Required: true
	Password *string `json:"password"`

	// score
	// Required: true
	Score *float64 `json:"score"`

	// sequence
	Sequence Sequence `json:"sequence,omitempty"`
}

// Validate validates this password strength metadata
func (m *PasswordStrengthMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalcTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrackTimesDisplay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrackTimesSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuessesLog10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordStrengthMetadata) validateCalcTime(formats strfmt.Registry) error {

	if err := validate.Required("calc_time", "body", m.CalcTime); err != nil {
		return err
	}

	return nil
}

func (m *PasswordStrengthMetadata) validateCrackTimesDisplay(formats strfmt.Registry) error {
	if swag.IsZero(m.CrackTimesDisplay) { // not required
		return nil
	}

	if m.CrackTimesDisplay != nil {
		if err := m.CrackTimesDisplay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crack_times_display")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crack_times_display")
			}
			return err
		}
	}

	return nil
}

func (m *PasswordStrengthMetadata) validateCrackTimesSeconds(formats strfmt.Registry) error {
	if swag.IsZero(m.CrackTimesSeconds) { // not required
		return nil
	}

	if m.CrackTimesSeconds != nil {
		if err := m.CrackTimesSeconds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crack_times_seconds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crack_times_seconds")
			}
			return err
		}
	}

	return nil
}

func (m *PasswordStrengthMetadata) validateFeedback(formats strfmt.Registry) error {
	if swag.IsZero(m.Feedback) { // not required
		return nil
	}

	if m.Feedback != nil {
		if err := m.Feedback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feedback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feedback")
			}
			return err
		}
	}

	return nil
}

func (m *PasswordStrengthMetadata) validateGuesses(formats strfmt.Registry) error {

	if err := validate.Required("guesses", "body", m.Guesses); err != nil {
		return err
	}

	return nil
}

func (m *PasswordStrengthMetadata) validateGuessesLog10(formats strfmt.Registry) error {

	if err := validate.Required("guesses_log10", "body", m.GuessesLog10); err != nil {
		return err
	}

	return nil
}

func (m *PasswordStrengthMetadata) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *PasswordStrengthMetadata) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *PasswordStrengthMetadata) validateSequence(formats strfmt.Registry) error {
	if swag.IsZero(m.Sequence) { // not required
		return nil
	}

	if err := m.Sequence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sequence")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sequence")
		}
		return err
	}

	return nil
}

// ContextValidate validate this password strength metadata based on the context it is used
func (m *PasswordStrengthMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCrackTimesDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCrackTimesSeconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeedback(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSequence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordStrengthMetadata) contextValidateCrackTimesDisplay(ctx context.Context, formats strfmt.Registry) error {

	if m.CrackTimesDisplay != nil {
		if err := m.CrackTimesDisplay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crack_times_display")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crack_times_display")
			}
			return err
		}
	}

	return nil
}

func (m *PasswordStrengthMetadata) contextValidateCrackTimesSeconds(ctx context.Context, formats strfmt.Registry) error {

	if m.CrackTimesSeconds != nil {
		if err := m.CrackTimesSeconds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crack_times_seconds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crack_times_seconds")
			}
			return err
		}
	}

	return nil
}

func (m *PasswordStrengthMetadata) contextValidateFeedback(ctx context.Context, formats strfmt.Registry) error {

	if m.Feedback != nil {
		if err := m.Feedback.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feedback")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feedback")
			}
			return err
		}
	}

	return nil
}

func (m *PasswordStrengthMetadata) contextValidateSequence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Sequence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sequence")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sequence")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PasswordStrengthMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordStrengthMetadata) UnmarshalBinary(b []byte) error {
	var res PasswordStrengthMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
