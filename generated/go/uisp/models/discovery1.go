// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Discovery1 discovery 1
//
// swagger:model discovery 1
type Discovery1 struct {

	// responder
	// Required: true
	Responder *Responder `json:"responder"`

	// scanner
	// Required: true
	Scanner *Scanner `json:"scanner"`
}

// Validate validates this discovery 1
func (m *Discovery1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Discovery1) validateResponder(formats strfmt.Registry) error {

	if err := validate.Required("responder", "body", m.Responder); err != nil {
		return err
	}

	if m.Responder != nil {
		if err := m.Responder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responder")
			}
			return err
		}
	}

	return nil
}

func (m *Discovery1) validateScanner(formats strfmt.Registry) error {

	if err := validate.Required("scanner", "body", m.Scanner); err != nil {
		return err
	}

	if m.Scanner != nil {
		if err := m.Scanner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scanner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this discovery 1 based on the context it is used
func (m *Discovery1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResponder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Discovery1) contextValidateResponder(ctx context.Context, formats strfmt.Registry) error {

	if m.Responder != nil {
		if err := m.Responder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responder")
			}
			return err
		}
	}

	return nil
}

func (m *Discovery1) contextValidateScanner(ctx context.Context, formats strfmt.Registry) error {

	if m.Scanner != nil {
		if err := m.Scanner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scanner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Discovery1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Discovery1) UnmarshalBinary(b []byte) error {
	var res Discovery1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
