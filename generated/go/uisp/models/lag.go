// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Lag lag
//
// swagger:model lag
type Lag struct {

	// dhcp snooping
	DhcpSnooping bool `json:"dhcpSnooping,omitempty"`

	// include vlans
	IncludeVlans string `json:"includeVlans,omitempty"`

	// link trap
	LinkTrap bool `json:"linkTrap,omitempty"`

	// load balance
	LoadBalance string `json:"loadBalance,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// ports
	Ports Ports `json:"ports,omitempty"`

	// static
	Static bool `json:"static,omitempty"`

	// stp
	Stp *Stp `json:"stp,omitempty"`

	// vlan native
	VlanNative float64 `json:"vlanNative,omitempty"`
}

// Validate validates this lag
func (m *Lag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lag) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	if err := m.Ports.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ports")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ports")
		}
		return err
	}

	return nil
}

func (m *Lag) validateStp(formats strfmt.Registry) error {
	if swag.IsZero(m.Stp) { // not required
		return nil
	}

	if m.Stp != nil {
		if err := m.Stp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this lag based on the context it is used
func (m *Lag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lag) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Ports.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ports")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ports")
		}
		return err
	}

	return nil
}

func (m *Lag) contextValidateStp(ctx context.Context, formats strfmt.Registry) error {

	if m.Stp != nil {
		if err := m.Stp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lag) UnmarshalBinary(b []byte) error {
	var res Lag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
