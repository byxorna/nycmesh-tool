// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstallationResponse New installation.
//
// swagger:model InstallationResponse
type InstallationResponse struct {

	// chat
	Chat Chat `json:"chat,omitempty"`

	// Time when the installation was created.
	// Example: 2020-01-14T15:20:32.004Z
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// devices
	Devices Devices `json:"devices,omitempty"`

	// Time when the installation was finished. Null if the installation is not finished yet.
	// Example: 2020-01-14T15:20:32.004Z
	// Required: true
	// Format: date-time
	Finished *strfmt.DateTime `json:"finished"`

	// Id of the installation.
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	ID *string `json:"id"`

	// Time when the installation was updated.
	// Example: 2020-01-14T15:20:32.004Z
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated"`

	// users
	// Required: true
	Users Users1 `json:"users"`
}

// Validate validates this installation response
func (m *InstallationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallationResponse) validateChat(formats strfmt.Registry) error {
	if swag.IsZero(m.Chat) { // not required
		return nil
	}

	if err := m.Chat.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("chat")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("chat")
		}
		return err
	}

	return nil
}

func (m *InstallationResponse) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstallationResponse) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	if err := m.Devices.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("devices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("devices")
		}
		return err
	}

	return nil
}

func (m *InstallationResponse) validateFinished(formats strfmt.Registry) error {

	if err := validate.Required("finished", "body", m.Finished); err != nil {
		return err
	}

	if err := validate.FormatOf("finished", "body", "date-time", m.Finished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstallationResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InstallationResponse) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstallationResponse) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	if err := m.Users.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("users")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("users")
		}
		return err
	}

	return nil
}

// ContextValidate validate this installation response based on the context it is used
func (m *InstallationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallationResponse) contextValidateChat(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Chat.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("chat")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("chat")
		}
		return err
	}

	return nil
}

func (m *InstallationResponse) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Devices.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("devices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("devices")
		}
		return err
	}

	return nil
}

func (m *InstallationResponse) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Users.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("users")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("users")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstallationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallationResponse) UnmarshalBinary(b []byte) error {
	var res InstallationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
