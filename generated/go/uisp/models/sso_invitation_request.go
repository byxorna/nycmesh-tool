// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SsoInvitationRequest sso invitation request
//
// swagger:model SsoInvitationRequest
type SsoInvitationRequest struct {

	// Code from successful SSO authentication.
	// Required: true
	Code *string `json:"code"`

	// User invitation token.
	InvitationToken string `json:"invitationToken,omitempty"`

	// State previously sent to SSO. Same value must be in nms-sso-login cookie.
	// Required: true
	State *string `json:"state"`
}

// Validate validates this sso invitation request
func (m *SsoInvitationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SsoInvitationRequest) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *SsoInvitationRequest) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sso invitation request based on context it is used
func (m *SsoInvitationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SsoInvitationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SsoInvitationRequest) UnmarshalBinary(b []byte) error {
	var res SsoInvitationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
