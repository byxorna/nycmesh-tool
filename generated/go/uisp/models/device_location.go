// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceLocation device location
//
// swagger:model DeviceLocation
type DeviceLocation struct {

	// Meters above the ground.
	// Example: 240
	// Required: true
	Altitude *float64 `json:"altitude"`

	// Meters above the sea level.
	// Example: 20
	// Required: true
	Elevation *float64 `json:"elevation"`

	//
	//     Value in degrees. The value is based on map, e.g. without magnetic declination.
	//     Ignored on udpate when magneticHeading is present. North is 0 degrees, East is 90, South is 180, West is 270.
	//
	// Example: 88
	Heading float64 `json:"heading,omitempty"`

	// latitude
	// Example: 49.83455844211215
	// Required: true
	// Maximum: 90
	// Minimum: -90
	Latitude *float64 `json:"latitude"`

	// longitude
	// Example: 13.463579999999956
	// Required: true
	// Maximum: 180
	// Minimum: -180
	Longitude *float64 `json:"longitude"`

	//
	//     Value in degrees. Compass heading (magnetic north).
	//     It’s what you’re changing when you spin the dish around on a mast.
	//     North is 0 degrees, East is 90, South is 180, West is 270.
	//
	// Example: 90
	// Required: true
	MagneticHeading *float64 `json:"magneticHeading"`

	//
	//     Value in degrees. How low one side of the dish is compared to the other.
	//     0 degrees no rotation, 90 rotation to the left, -90 rotation to the right and -180 upside down.
	//
	// Example: 0
	// Required: true
	// Maximum: 180
	// Minimum: -180
	Roll *float64 `json:"roll"`

	//
	//     Value in degrees. How high in the sky the dish is pointing.
	//     0 degrees has the dish pointing straight ahead, 90 has the dish pointing straight up
	//     and -90 has the dish pointing straight down.
	//
	// Example: 20
	// Required: true
	// Maximum: 90
	// Minimum: -90
	Tilt *float64 `json:"tilt"`
}

// Validate validates this device location
func (m *DeviceLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAltitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElevation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMagneticHeading(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTilt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceLocation) validateAltitude(formats strfmt.Registry) error {

	if err := validate.Required("altitude", "body", m.Altitude); err != nil {
		return err
	}

	return nil
}

func (m *DeviceLocation) validateElevation(formats strfmt.Registry) error {

	if err := validate.Required("elevation", "body", m.Elevation); err != nil {
		return err
	}

	return nil
}

func (m *DeviceLocation) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("latitude", "body", m.Latitude); err != nil {
		return err
	}

	if err := validate.Minimum("latitude", "body", *m.Latitude, -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("latitude", "body", *m.Latitude, 90, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceLocation) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("longitude", "body", m.Longitude); err != nil {
		return err
	}

	if err := validate.Minimum("longitude", "body", *m.Longitude, -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("longitude", "body", *m.Longitude, 180, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceLocation) validateMagneticHeading(formats strfmt.Registry) error {

	if err := validate.Required("magneticHeading", "body", m.MagneticHeading); err != nil {
		return err
	}

	return nil
}

func (m *DeviceLocation) validateRoll(formats strfmt.Registry) error {

	if err := validate.Required("roll", "body", m.Roll); err != nil {
		return err
	}

	if err := validate.Minimum("roll", "body", *m.Roll, -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("roll", "body", *m.Roll, 180, false); err != nil {
		return err
	}

	return nil
}

func (m *DeviceLocation) validateTilt(formats strfmt.Registry) error {

	if err := validate.Required("tilt", "body", m.Tilt); err != nil {
		return err
	}

	if err := validate.Minimum("tilt", "body", *m.Tilt, -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("tilt", "body", *m.Tilt, 90, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device location based on context it is used
func (m *DeviceLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLocation) UnmarshalBinary(b []byte) error {
	var res DeviceLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
