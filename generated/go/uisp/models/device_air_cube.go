// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceAirCube device air cube
//
// swagger:model DeviceAirCube
type DeviceAirCube struct {

	// ap device
	ApDevice *ApDevice3 `json:"apDevice,omitempty"`

	// Lan IP address.
	// Example: 192.168.1.22
	LanIP string `json:"lanIp,omitempty"`

	// Management IP address.
	// Example: 192.168.1.22
	MgmtIP string `json:"mgmtIp,omitempty"`

	// poe
	Poe bool `json:"poe,omitempty"`

	// Wan IP address.
	// Example: 192.168.1.22
	WanIP string `json:"wanIp,omitempty"`

	// wifi2 ghz
	Wifi2Ghz *Wifi `json:"wifi2Ghz,omitempty"`

	// wifi5 ghz
	Wifi5Ghz *Wifi `json:"wifi5Ghz,omitempty"`

	// wifi mode
	// Enum: [ap mesh]
	WifiMode string `json:"wifiMode,omitempty"`
}

// Validate validates this device air cube
func (m *DeviceAirCube) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifi2Ghz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifi5Ghz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceAirCube) validateApDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.ApDevice) { // not required
		return nil
	}

	if m.ApDevice != nil {
		if err := m.ApDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apDevice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apDevice")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceAirCube) validateWifi2Ghz(formats strfmt.Registry) error {
	if swag.IsZero(m.Wifi2Ghz) { // not required
		return nil
	}

	if m.Wifi2Ghz != nil {
		if err := m.Wifi2Ghz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi2Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi2Ghz")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceAirCube) validateWifi5Ghz(formats strfmt.Registry) error {
	if swag.IsZero(m.Wifi5Ghz) { // not required
		return nil
	}

	if m.Wifi5Ghz != nil {
		if err := m.Wifi5Ghz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi5Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi5Ghz")
			}
			return err
		}
	}

	return nil
}

var deviceAirCubeTypeWifiModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAirCubeTypeWifiModePropEnum = append(deviceAirCubeTypeWifiModePropEnum, v)
	}
}

const (

	// DeviceAirCubeWifiModeAp captures enum value "ap"
	DeviceAirCubeWifiModeAp string = "ap"

	// DeviceAirCubeWifiModeMesh captures enum value "mesh"
	DeviceAirCubeWifiModeMesh string = "mesh"
)

// prop value enum
func (m *DeviceAirCube) validateWifiModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceAirCubeTypeWifiModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAirCube) validateWifiMode(formats strfmt.Registry) error {
	if swag.IsZero(m.WifiMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWifiModeEnum("wifiMode", "body", m.WifiMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this device air cube based on the context it is used
func (m *DeviceAirCube) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifi2Ghz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifi5Ghz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceAirCube) contextValidateApDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.ApDevice != nil {
		if err := m.ApDevice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apDevice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apDevice")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceAirCube) contextValidateWifi2Ghz(ctx context.Context, formats strfmt.Registry) error {

	if m.Wifi2Ghz != nil {
		if err := m.Wifi2Ghz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi2Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi2Ghz")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceAirCube) contextValidateWifi5Ghz(ctx context.Context, formats strfmt.Registry) error {

	if m.Wifi5Ghz != nil {
		if err := m.Wifi5Ghz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi5Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi5Ghz")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAirCube) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAirCube) UnmarshalBinary(b []byte) error {
	var res DeviceAirCube
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
