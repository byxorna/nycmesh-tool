// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Site1 Log respective site.
//
// swagger:model site 1
type Site1 struct {

	// Log respective site id
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	ID *string `json:"id"`

	// Log respective site name
	// Example: Site name
	// Required: true
	Name *string `json:"name"`

	// parent
	// Required: true
	Parent Interface `json:"parent"`

	// Site current status
	// Example: active
	// Enum: [active disconnected inactive]
	Status string `json:"status,omitempty"`

	// Type of site.
	// Example: client
	// Enum: [site endpoint client]
	Type string `json:"type,omitempty"`
}

// Validate validates this site 1
func (m *Site1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Site1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Site1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Site1) validateParent(formats strfmt.Registry) error {

	if m.Parent == nil {
		return errors.Required("parent", "body", nil)
	}

	return nil
}

var site1TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","disconnected","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		site1TypeStatusPropEnum = append(site1TypeStatusPropEnum, v)
	}
}

const (

	// Site1StatusActive captures enum value "active"
	Site1StatusActive string = "active"

	// Site1StatusDisconnected captures enum value "disconnected"
	Site1StatusDisconnected string = "disconnected"

	// Site1StatusInactive captures enum value "inactive"
	Site1StatusInactive string = "inactive"
)

// prop value enum
func (m *Site1) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, site1TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Site1) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var site1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["site","endpoint","client"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		site1TypeTypePropEnum = append(site1TypeTypePropEnum, v)
	}
}

const (

	// Site1TypeSite captures enum value "site"
	Site1TypeSite string = "site"

	// Site1TypeEndpoint captures enum value "endpoint"
	Site1TypeEndpoint string = "endpoint"

	// Site1TypeClient captures enum value "client"
	Site1TypeClient string = "client"
)

// prop value enum
func (m *Site1) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, site1TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Site1) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this site 1 based on context it is used
func (m *Site1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Site1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Site1) UnmarshalBinary(b []byte) error {
	var res Site1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
