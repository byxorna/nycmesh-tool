// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUser create user
//
// swagger:model CreateUser
type CreateUser struct {

	// User's email.
	// Example: admin@example.com
	// Required: true
	Email *string `json:"email"`

	// Whether user is allowed to login or not.
	// Example: true
	Enabled bool `json:"enabled,omitempty"`

	// User's first name.
	// Example: John
	FirstName string `json:"firstName,omitempty"`

	// home screen
	// Example: /nms
	// Enum: [/nms /crm]
	HomeScreen string `json:"homeScreen,omitempty"`

	// User's last name.
	// Example: Doe
	LastName string `json:"lastName,omitempty"`

	// User's password.
	// Example: d4ab472281aeb116
	// Required: true
	// Max Length: 64
	// Min Length: 4
	Password *string `json:"password"`

	// Users's role in Network.
	// Example: admin
	// Required: true
	// Enum: [superadmin admin guest anonymous installer]
	Role *string `json:"role"`

	// Users's role ID in CRM.
	UcrmRole string `json:"ucrmRole,omitempty"`

	// Username used for login.
	// Example: admin
	// Required: true
	// Max Length: 320
	// Min Length: 1
	// Pattern: ^[a-zA-Z0-9_]*$
	Username *string `json:"username"`
}

// Validate validates this create user
func (m *CreateUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeScreen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUser) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

var createUserTypeHomeScreenPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["/nms","/crm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createUserTypeHomeScreenPropEnum = append(createUserTypeHomeScreenPropEnum, v)
	}
}

const (

	// CreateUserHomeScreenNms captures enum value "/nms"
	CreateUserHomeScreenNms string = "/nms"

	// CreateUserHomeScreenCrm captures enum value "/crm"
	CreateUserHomeScreenCrm string = "/crm"
)

// prop value enum
func (m *CreateUser) validateHomeScreenEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createUserTypeHomeScreenPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateUser) validateHomeScreen(formats strfmt.Registry) error {
	if swag.IsZero(m.HomeScreen) { // not required
		return nil
	}

	// value enum
	if err := m.validateHomeScreenEnum("homeScreen", "body", m.HomeScreen); err != nil {
		return err
	}

	return nil
}

func (m *CreateUser) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 64); err != nil {
		return err
	}

	return nil
}

var createUserTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["superadmin","admin","guest","anonymous","installer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createUserTypeRolePropEnum = append(createUserTypeRolePropEnum, v)
	}
}

const (

	// CreateUserRoleSuperadmin captures enum value "superadmin"
	CreateUserRoleSuperadmin string = "superadmin"

	// CreateUserRoleAdmin captures enum value "admin"
	CreateUserRoleAdmin string = "admin"

	// CreateUserRoleGuest captures enum value "guest"
	CreateUserRoleGuest string = "guest"

	// CreateUserRoleAnonymous captures enum value "anonymous"
	CreateUserRoleAnonymous string = "anonymous"

	// CreateUserRoleInstaller captures enum value "installer"
	CreateUserRoleInstaller string = "installer"
)

// prop value enum
func (m *CreateUser) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createUserTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateUser) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

func (m *CreateUser) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 320); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", *m.Username, `^[a-zA-Z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create user based on context it is used
func (m *CreateUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUser) UnmarshalBinary(b []byte) error {
	var res CreateUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
