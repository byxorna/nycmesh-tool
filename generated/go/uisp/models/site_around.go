// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteAround site around
//
// swagger:model SiteAround
type SiteAround struct {

	// airmax mode
	AirmaxMode string `json:"airmaxMode,omitempty"`

	// band string
	BandString string `json:"bandString,omitempty"`

	// encryption
	// Enum: [wep wpa wpa-psk wpa2 enabled none]
	Encryption string `json:"encryption,omitempty"`

	// frequency
	Frequency float64 `json:"frequency,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// id
	// Example: F2:9F:C2:6E:AB:AEguest-wifiwpa2
	ID string `json:"id,omitempty"`

	// is airmax enabled
	IsAirmaxEnabled bool `json:"isAirmaxEnabled,omitempty"`

	// is wireless mode valid
	IsWirelessModeValid bool `json:"isWirelessModeValid,omitempty"`

	// mac
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac string `json:"mac,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// noise level
	NoiseLevel float64 `json:"noiseLevel,omitempty"`

	// signal level
	SignalLevel float64 `json:"signalLevel,omitempty"`

	// SSID
	Ssid string `json:"ssid,omitempty"`

	// valid encryption
	ValidEncryption bool `json:"validEncryption,omitempty"`
}

// Validate validates this site around
func (m *SiteAround) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var siteAroundTypeEncryptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteAroundTypeEncryptionPropEnum = append(siteAroundTypeEncryptionPropEnum, v)
	}
}

const (

	// SiteAroundEncryptionWep captures enum value "wep"
	SiteAroundEncryptionWep string = "wep"

	// SiteAroundEncryptionWpa captures enum value "wpa"
	SiteAroundEncryptionWpa string = "wpa"

	// SiteAroundEncryptionWpaDashPsk captures enum value "wpa-psk"
	SiteAroundEncryptionWpaDashPsk string = "wpa-psk"

	// SiteAroundEncryptionWpa2 captures enum value "wpa2"
	SiteAroundEncryptionWpa2 string = "wpa2"

	// SiteAroundEncryptionEnabled captures enum value "enabled"
	SiteAroundEncryptionEnabled string = "enabled"

	// SiteAroundEncryptionNone captures enum value "none"
	SiteAroundEncryptionNone string = "none"
)

// prop value enum
func (m *SiteAround) validateEncryptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, siteAroundTypeEncryptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SiteAround) validateEncryption(formats strfmt.Registry) error {
	if swag.IsZero(m.Encryption) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncryptionEnum("encryption", "body", m.Encryption); err != nil {
		return err
	}

	return nil
}

func (m *SiteAround) validateMac(formats strfmt.Registry) error {
	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", m.Mac, `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this site around based on context it is used
func (m *SiteAround) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SiteAround) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteAround) UnmarshalBinary(b []byte) error {
	var res SiteAround
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
