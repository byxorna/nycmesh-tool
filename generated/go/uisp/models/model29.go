// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model29 model 29
//
// swagger:model Model 29
type Model29 struct {

	// dynamic
	Dynamic bool `json:"dynamic,omitempty"`

	// VLAN id
	// Example: 1
	// Required: true
	// Minimum: 1
	ID *int64 `json:"id"`

	// VLAN name
	// Example: default
	// Required: true
	Name *string `json:"name"`

	// participation
	Participation Participation `json:"participation,omitempty"`

	// VLAN type
	// Example: single
	// Required: true
	// Enum: [single]
	Type *string `json:"type"`
}

// Validate validates this model 29
func (m *Model29) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model29) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", *m.ID, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Model29) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Model29) validateParticipation(formats strfmt.Registry) error {
	if swag.IsZero(m.Participation) { // not required
		return nil
	}

	if err := m.Participation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("participation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("participation")
		}
		return err
	}

	return nil
}

var model29TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["single"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model29TypeTypePropEnum = append(model29TypeTypePropEnum, v)
	}
}

const (

	// Model29TypeSingle captures enum value "single"
	Model29TypeSingle string = "single"
)

// prop value enum
func (m *Model29) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model29TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model29) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 29 based on the context it is used
func (m *Model29) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParticipation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model29) contextValidateParticipation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Participation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("participation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("participation")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model29) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model29) UnmarshalBinary(b []byte) error {
	var res Model29
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
