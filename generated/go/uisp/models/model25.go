// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model25 model 25
//
// swagger:model Model 25
type Model25 struct {

	// id
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	ID *string `json:"id"`

	// series
	// Required: true
	Series *string `json:"series"`

	// Device type
	// Example: erouter
	// Required: true
	// Enum: [onu olt uispp uispr uisps uispLte erouter eswitch epower airCube airMax airFiber toughSwitch solarBeam wave blackBox]
	Type *string `json:"type"`
}

// Validate validates this model 25
func (m *Model25) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model25) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Model25) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("series", "body", m.Series); err != nil {
		return err
	}

	return nil
}

var model25TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["onu","olt","uispp","uispr","uisps","uispLte","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","wave","blackBox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model25TypeTypePropEnum = append(model25TypeTypePropEnum, v)
	}
}

const (

	// Model25TypeOnu captures enum value "onu"
	Model25TypeOnu string = "onu"

	// Model25TypeOlt captures enum value "olt"
	Model25TypeOlt string = "olt"

	// Model25TypeUispp captures enum value "uispp"
	Model25TypeUispp string = "uispp"

	// Model25TypeUispr captures enum value "uispr"
	Model25TypeUispr string = "uispr"

	// Model25TypeUisps captures enum value "uisps"
	Model25TypeUisps string = "uisps"

	// Model25TypeUispLte captures enum value "uispLte"
	Model25TypeUispLte string = "uispLte"

	// Model25TypeErouter captures enum value "erouter"
	Model25TypeErouter string = "erouter"

	// Model25TypeEswitch captures enum value "eswitch"
	Model25TypeEswitch string = "eswitch"

	// Model25TypeEpower captures enum value "epower"
	Model25TypeEpower string = "epower"

	// Model25TypeAirCube captures enum value "airCube"
	Model25TypeAirCube string = "airCube"

	// Model25TypeAirMax captures enum value "airMax"
	Model25TypeAirMax string = "airMax"

	// Model25TypeAirFiber captures enum value "airFiber"
	Model25TypeAirFiber string = "airFiber"

	// Model25TypeToughSwitch captures enum value "toughSwitch"
	Model25TypeToughSwitch string = "toughSwitch"

	// Model25TypeSolarBeam captures enum value "solarBeam"
	Model25TypeSolarBeam string = "solarBeam"

	// Model25TypeWave captures enum value "wave"
	Model25TypeWave string = "wave"

	// Model25TypeBlackBox captures enum value "blackBox"
	Model25TypeBlackBox string = "blackBox"
)

// prop value enum
func (m *Model25) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model25TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model25) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model 25 based on context it is used
func (m *Model25) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Model25) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model25) UnmarshalBinary(b []byte) error {
	var res Model25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
