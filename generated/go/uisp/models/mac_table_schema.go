// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MacTableSchema mac table schema
//
// swagger:model MacTableSchema
type MacTableSchema struct {

	// device Id
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	DeviceID *string `json:"deviceId"`

	// mac table
	MacTable MacTable `json:"macTable,omitempty"`

	// pagination
	Pagination *Pagination1 `json:"pagination,omitempty"`
}

// Validate validates this mac table schema
func (m *MacTableSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MacTableSchema) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *MacTableSchema) validateMacTable(formats strfmt.Registry) error {
	if swag.IsZero(m.MacTable) { // not required
		return nil
	}

	if err := m.MacTable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("macTable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("macTable")
		}
		return err
	}

	return nil
}

func (m *MacTableSchema) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mac table schema based on the context it is used
func (m *MacTableSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMacTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MacTableSchema) contextValidateMacTable(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MacTable.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("macTable")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("macTable")
		}
		return err
	}

	return nil
}

func (m *MacTableSchema) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MacTableSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MacTableSchema) UnmarshalBinary(b []byte) error {
	var res MacTableSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
