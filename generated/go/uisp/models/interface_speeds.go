// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterfaceSpeeds interface speeds
//
// swagger:model InterfaceSpeeds
type InterfaceSpeeds struct {

	// capacities
	Capacities Capacities1 `json:"capacities,omitempty"`

	// speed
	// Example: auto
	// Pattern: ^autodetect|auto|\d+-(half|full)$
	Speed string `json:"speed,omitempty"`
}

// Validate validates this interface speeds
func (m *InterfaceSpeeds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceSpeeds) validateCapacities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacities) { // not required
		return nil
	}

	if err := m.Capacities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacities")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacities")
		}
		return err
	}

	return nil
}

func (m *InterfaceSpeeds) validateSpeed(formats strfmt.Registry) error {
	if swag.IsZero(m.Speed) { // not required
		return nil
	}

	if err := validate.Pattern("speed", "body", m.Speed, `^autodetect|auto|\d+-(half|full)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this interface speeds based on the context it is used
func (m *InterfaceSpeeds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfaceSpeeds) contextValidateCapacities(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Capacities.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacities")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacities")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfaceSpeeds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfaceSpeeds) UnmarshalBinary(b []byte) error {
	var res InterfaceSpeeds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
