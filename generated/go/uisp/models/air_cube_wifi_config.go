// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AirCubeWifiConfig air cube wifi config
//
// swagger:model AirCubeWifiConfig
type AirCubeWifiConfig struct {

	// wifi2 ghz
	Wifi2Ghz *Wifi2Ghz `json:"wifi2Ghz,omitempty"`

	// wifi5 ghz
	Wifi5Ghz *Wifi5Ghz `json:"wifi5Ghz,omitempty"`

	// wifi mode
	// Enum: [ap ap-ptp ap-ptmp ap-ptmp-airmax ap-ptmp-airmax-mixed ap-ptmp-airmax-ac sta sta-ptp sta-ptmp aprepeater repeater mesh]
	WifiMode string `json:"wifiMode,omitempty"`
}

// Validate validates this air cube wifi config
func (m *AirCubeWifiConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWifi2Ghz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifi5Ghz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirCubeWifiConfig) validateWifi2Ghz(formats strfmt.Registry) error {
	if swag.IsZero(m.Wifi2Ghz) { // not required
		return nil
	}

	if m.Wifi2Ghz != nil {
		if err := m.Wifi2Ghz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi2Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi2Ghz")
			}
			return err
		}
	}

	return nil
}

func (m *AirCubeWifiConfig) validateWifi5Ghz(formats strfmt.Registry) error {
	if swag.IsZero(m.Wifi5Ghz) { // not required
		return nil
	}

	if m.Wifi5Ghz != nil {
		if err := m.Wifi5Ghz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi5Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi5Ghz")
			}
			return err
		}
	}

	return nil
}

var airCubeWifiConfigTypeWifiModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		airCubeWifiConfigTypeWifiModePropEnum = append(airCubeWifiConfigTypeWifiModePropEnum, v)
	}
}

const (

	// AirCubeWifiConfigWifiModeAp captures enum value "ap"
	AirCubeWifiConfigWifiModeAp string = "ap"

	// AirCubeWifiConfigWifiModeApDashPtp captures enum value "ap-ptp"
	AirCubeWifiConfigWifiModeApDashPtp string = "ap-ptp"

	// AirCubeWifiConfigWifiModeApDashPtmp captures enum value "ap-ptmp"
	AirCubeWifiConfigWifiModeApDashPtmp string = "ap-ptmp"

	// AirCubeWifiConfigWifiModeApDashPtmpDashAirmax captures enum value "ap-ptmp-airmax"
	AirCubeWifiConfigWifiModeApDashPtmpDashAirmax string = "ap-ptmp-airmax"

	// AirCubeWifiConfigWifiModeApDashPtmpDashAirmaxDashMixed captures enum value "ap-ptmp-airmax-mixed"
	AirCubeWifiConfigWifiModeApDashPtmpDashAirmaxDashMixed string = "ap-ptmp-airmax-mixed"

	// AirCubeWifiConfigWifiModeApDashPtmpDashAirmaxDashAc captures enum value "ap-ptmp-airmax-ac"
	AirCubeWifiConfigWifiModeApDashPtmpDashAirmaxDashAc string = "ap-ptmp-airmax-ac"

	// AirCubeWifiConfigWifiModeSta captures enum value "sta"
	AirCubeWifiConfigWifiModeSta string = "sta"

	// AirCubeWifiConfigWifiModeStaDashPtp captures enum value "sta-ptp"
	AirCubeWifiConfigWifiModeStaDashPtp string = "sta-ptp"

	// AirCubeWifiConfigWifiModeStaDashPtmp captures enum value "sta-ptmp"
	AirCubeWifiConfigWifiModeStaDashPtmp string = "sta-ptmp"

	// AirCubeWifiConfigWifiModeAprepeater captures enum value "aprepeater"
	AirCubeWifiConfigWifiModeAprepeater string = "aprepeater"

	// AirCubeWifiConfigWifiModeRepeater captures enum value "repeater"
	AirCubeWifiConfigWifiModeRepeater string = "repeater"

	// AirCubeWifiConfigWifiModeMesh captures enum value "mesh"
	AirCubeWifiConfigWifiModeMesh string = "mesh"
)

// prop value enum
func (m *AirCubeWifiConfig) validateWifiModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, airCubeWifiConfigTypeWifiModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AirCubeWifiConfig) validateWifiMode(formats strfmt.Registry) error {
	if swag.IsZero(m.WifiMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWifiModeEnum("wifiMode", "body", m.WifiMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this air cube wifi config based on the context it is used
func (m *AirCubeWifiConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWifi2Ghz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifi5Ghz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirCubeWifiConfig) contextValidateWifi2Ghz(ctx context.Context, formats strfmt.Registry) error {

	if m.Wifi2Ghz != nil {
		if err := m.Wifi2Ghz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi2Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi2Ghz")
			}
			return err
		}
	}

	return nil
}

func (m *AirCubeWifiConfig) contextValidateWifi5Ghz(ctx context.Context, formats strfmt.Registry) error {

	if m.Wifi5Ghz != nil {
		if err := m.Wifi5Ghz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifi5Ghz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifi5Ghz")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AirCubeWifiConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AirCubeWifiConfig) UnmarshalBinary(b []byte) error {
	var res AirCubeWifiConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
