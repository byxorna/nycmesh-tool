// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Model32 model 32
//
// swagger:model Model 32
type Model32 struct {

	// id
	// Example: eth0
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// priority
	Priority float64 `json:"priority,omitempty"`

	// receive
	Receive ListOfCoordinates `json:"receive,omitempty"`

	// transmit
	Transmit ListOfCoordinates `json:"transmit,omitempty"`
}

// Validate validates this model 32
func (m *Model32) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReceive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransmit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model32) validateReceive(formats strfmt.Registry) error {
	if swag.IsZero(m.Receive) { // not required
		return nil
	}

	if err := m.Receive.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receive")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receive")
		}
		return err
	}

	return nil
}

func (m *Model32) validateTransmit(formats strfmt.Registry) error {
	if swag.IsZero(m.Transmit) { // not required
		return nil
	}

	if err := m.Transmit.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transmit")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("transmit")
		}
		return err
	}

	return nil
}

// ContextValidate validate this model 32 based on the context it is used
func (m *Model32) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReceive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransmit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model32) contextValidateReceive(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Receive.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receive")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receive")
		}
		return err
	}

	return nil
}

func (m *Model32) contextValidateTransmit(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Transmit.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transmit")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("transmit")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model32) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model32) UnmarshalBinary(b []byte) error {
	var res Model32
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
