// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteAccessGroup site access group
//
// swagger:model SiteAccessGroup
type SiteAccessGroup struct {

	// counts
	Counts *Counts `json:"counts,omitempty"`

	// Access group id.
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	ID string `json:"id,omitempty"`

	// If true the access group is automatically generated and cannot be edited.
	// Example: false
	// Required: true
	IsAuto *bool `json:"isAuto"`

	// If true the access group is internal. User should not be able to select it
	// Example: false
	// Required: true
	IsInternal *bool `json:"isInternal"`

	// name
	// Example: Section 1
	// Required: true
	// Max Length: 100
	Name *string `json:"name"`

	// whitelist
	Whitelist Whitelist `json:"whitelist,omitempty"`
}

// Validate validates this site access group
func (m *SiteAccessGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAuto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsInternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteAccessGroup) validateCounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Counts) { // not required
		return nil
	}

	if m.Counts != nil {
		if err := m.Counts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counts")
			}
			return err
		}
	}

	return nil
}

func (m *SiteAccessGroup) validateIsAuto(formats strfmt.Registry) error {

	if err := validate.Required("isAuto", "body", m.IsAuto); err != nil {
		return err
	}

	return nil
}

func (m *SiteAccessGroup) validateIsInternal(formats strfmt.Registry) error {

	if err := validate.Required("isInternal", "body", m.IsInternal); err != nil {
		return err
	}

	return nil
}

func (m *SiteAccessGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *SiteAccessGroup) validateWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.Whitelist) { // not required
		return nil
	}

	if err := m.Whitelist.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("whitelist")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("whitelist")
		}
		return err
	}

	return nil
}

// ContextValidate validate this site access group based on the context it is used
func (m *SiteAccessGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteAccessGroup) contextValidateCounts(ctx context.Context, formats strfmt.Registry) error {

	if m.Counts != nil {
		if err := m.Counts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counts")
			}
			return err
		}
	}

	return nil
}

func (m *SiteAccessGroup) contextValidateWhitelist(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Whitelist.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("whitelist")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("whitelist")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteAccessGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteAccessGroup) UnmarshalBinary(b []byte) error {
	var res SiteAccessGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
