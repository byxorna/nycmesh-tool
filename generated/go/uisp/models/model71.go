// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model71 model 71
//
// swagger:model Model 71
type Model71 struct {

	// device ids
	DeviceIds DeviceIds `json:"deviceIds,omitempty"`

	// site Id
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	SiteID *string `json:"siteId"`
}

// Validate validates this model 71
func (m *Model71) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model71) validateDeviceIds(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceIds) { // not required
		return nil
	}

	if err := m.DeviceIds.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceIds")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceIds")
		}
		return err
	}

	return nil
}

func (m *Model71) validateSiteID(formats strfmt.Registry) error {

	if err := validate.Required("siteId", "body", m.SiteID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 71 based on the context it is used
func (m *Model71) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model71) contextValidateDeviceIds(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceIds.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceIds")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceIds")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model71) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model71) UnmarshalBinary(b []byte) error {
	var res Model71
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
