// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OspfConfig ospf config
//
// swagger:model ospfConfig
type OspfConfig struct {

	// auth
	Auth string `json:"auth,omitempty"`

	// auth key
	AuthKey string `json:"authKey,omitempty"`

	// auth keys m d5
	AuthKeysMD5 AuthKeysMD5 `json:"authKeysMD5,omitempty"`

	// cost
	Cost string `json:"cost,omitempty"`

	// enabled
	// Example: false
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this ospf config
func (m *OspfConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthKeysMD5(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OspfConfig) validateAuthKeysMD5(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthKeysMD5) { // not required
		return nil
	}

	if err := m.AuthKeysMD5.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authKeysMD5")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authKeysMD5")
		}
		return err
	}

	return nil
}

// ContextValidate validate this ospf config based on the context it is used
func (m *OspfConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthKeysMD5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OspfConfig) contextValidateAuthKeysMD5(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AuthKeysMD5.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authKeysMD5")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authKeysMD5")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OspfConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OspfConfig) UnmarshalBinary(b []byte) error {
	var res OspfConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
