// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model55 model 55
//
// swagger:model Model 55
type Model55 struct {

	// device name
	// Required: true
	DeviceName *string `json:"deviceName"`

	// new password
	NewPassword string `json:"newPassword,omitempty"`

	// timezone
	// Required: true
	Timezone *string `json:"timezone"`

	// username
	// Required: true
	Username *string `json:"username"`

	// zonename
	// Required: true
	Zonename *string `json:"zonename"`
}

// Validate validates this model 55
func (m *Model55) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonename(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model55) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("deviceName", "body", m.DeviceName); err != nil {
		return err
	}

	return nil
}

func (m *Model55) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

func (m *Model55) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *Model55) validateZonename(formats strfmt.Registry) error {

	if err := validate.Required("zonename", "body", m.Zonename); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model 55 based on context it is used
func (m *Model55) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Model55) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model55) UnmarshalBinary(b []byte) error {
	var res Model55
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
