// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficStatus traffic status
//
// swagger:model TrafficStatus
type TrafficStatus struct {

	// is active
	// Example: true
	// Required: true
	IsActive *bool `json:"isActive"`

	// sources
	// Required: true
	Sources Sources `json:"sources"`
}

// Validate validates this traffic status
func (m *TrafficStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficStatus) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("isActive", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *TrafficStatus) validateSources(formats strfmt.Registry) error {

	if err := validate.Required("sources", "body", m.Sources); err != nil {
		return err
	}

	if err := m.Sources.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sources")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sources")
		}
		return err
	}

	return nil
}

// ContextValidate validate this traffic status based on the context it is used
func (m *TrafficStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficStatus) contextValidateSources(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Sources.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sources")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sources")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficStatus) UnmarshalBinary(b []byte) error {
	var res TrafficStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
