// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouterRoute3 router route 3
//
// swagger:model RouterRoute 3
type RouterRoute3 struct {

	// description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// destination
	// Required: true
	Destination *string `json:"destination"`

	// distance
	// Maximum: 256
	// Minimum: 0
	Distance *float64 `json:"distance,omitempty"`

	// static type
	// Required: true
	// Enum: [interface blackhole gateway]
	StaticType *string `json:"staticType"`
}

// Validate validates this router route 3
func (m *RouterRoute3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouterRoute3) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

func (m *RouterRoute3) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *RouterRoute3) validateDistance(formats strfmt.Registry) error {
	if swag.IsZero(m.Distance) { // not required
		return nil
	}

	if err := validate.Minimum("distance", "body", *m.Distance, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("distance", "body", *m.Distance, 256, false); err != nil {
		return err
	}

	return nil
}

var routerRoute3TypeStaticTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["interface","blackhole","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routerRoute3TypeStaticTypePropEnum = append(routerRoute3TypeStaticTypePropEnum, v)
	}
}

const (

	// RouterRoute3StaticTypeInterface captures enum value "interface"
	RouterRoute3StaticTypeInterface string = "interface"

	// RouterRoute3StaticTypeBlackhole captures enum value "blackhole"
	RouterRoute3StaticTypeBlackhole string = "blackhole"

	// RouterRoute3StaticTypeGateway captures enum value "gateway"
	RouterRoute3StaticTypeGateway string = "gateway"
)

// prop value enum
func (m *RouterRoute3) validateStaticTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routerRoute3TypeStaticTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RouterRoute3) validateStaticType(formats strfmt.Registry) error {

	if err := validate.Required("staticType", "body", m.StaticType); err != nil {
		return err
	}

	// value enum
	if err := m.validateStaticTypeEnum("staticType", "body", *m.StaticType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this router route 3 based on context it is used
func (m *RouterRoute3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RouterRoute3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouterRoute3) UnmarshalBinary(b []byte) error {
	var res RouterRoute3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
