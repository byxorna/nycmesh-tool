// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model43 model 43
//
// swagger:model Model 43
type Model43 struct {

	// Identification of port
	// Example: 1
	// Required: true
	ID *string `json:"id"`

	// Interface link speed
	// Example: auto
	// Required: true
	// Enum: [auto-auto auto autodetect 10000-full 1000-full 2500-full 1000-half 100-full 100-half 10-full 10-half]
	Speed *string `json:"speed"`
}

// Validate validates this model 43
func (m *Model43) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model43) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var model43TypeSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto-auto","auto","autodetect","10000-full","1000-full","2500-full","1000-half","100-full","100-half","10-full","10-half"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model43TypeSpeedPropEnum = append(model43TypeSpeedPropEnum, v)
	}
}

const (

	// Model43SpeedAutoDashAuto captures enum value "auto-auto"
	Model43SpeedAutoDashAuto string = "auto-auto"

	// Model43SpeedAuto captures enum value "auto"
	Model43SpeedAuto string = "auto"

	// Model43SpeedAutodetect captures enum value "autodetect"
	Model43SpeedAutodetect string = "autodetect"

	// Model43SpeedNr10000DashFull captures enum value "10000-full"
	Model43SpeedNr10000DashFull string = "10000-full"

	// Model43SpeedNr1000DashFull captures enum value "1000-full"
	Model43SpeedNr1000DashFull string = "1000-full"

	// Model43SpeedNr2500DashFull captures enum value "2500-full"
	Model43SpeedNr2500DashFull string = "2500-full"

	// Model43SpeedNr1000DashHalf captures enum value "1000-half"
	Model43SpeedNr1000DashHalf string = "1000-half"

	// Model43SpeedNr100DashFull captures enum value "100-full"
	Model43SpeedNr100DashFull string = "100-full"

	// Model43SpeedNr100DashHalf captures enum value "100-half"
	Model43SpeedNr100DashHalf string = "100-half"

	// Model43SpeedNr10DashFull captures enum value "10-full"
	Model43SpeedNr10DashFull string = "10-full"

	// Model43SpeedNr10DashHalf captures enum value "10-half"
	Model43SpeedNr10DashHalf string = "10-half"
)

// prop value enum
func (m *Model43) validateSpeedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model43TypeSpeedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model43) validateSpeed(formats strfmt.Registry) error {

	if err := validate.Required("speed", "body", m.Speed); err != nil {
		return err
	}

	// value enum
	if err := m.validateSpeedEnum("speed", "body", *m.Speed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model 43 based on context it is used
func (m *Model43) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Model43) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model43) UnmarshalBinary(b []byte) error {
	var res Model43
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
