// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model98 model 98
//
// swagger:model Model 98
type Model98 struct {

	// dhcp snooping
	DhcpSnooping bool `json:"dhcpSnooping,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// link trap
	LinkTrap bool `json:"linkTrap,omitempty"`

	// load balance
	// Required: true
	// Enum: [src_dst_mac src_mac_l2 dst_mac_l2 src_dst_mac_l2 src_dst_mac_ip src_ip_port dst_ip_port src_dst_ip_port]
	LoadBalance *string `json:"loadBalance"`

	// ports
	// Required: true
	Ports Ports `json:"ports"`

	// static
	Static bool `json:"static,omitempty"`

	// stp
	Stp bool `json:"stp,omitempty"`
}

// Validate validates this model 98
func (m *Model98) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model98) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var model98TypeLoadBalancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["src_dst_mac","src_mac_l2","dst_mac_l2","src_dst_mac_l2","src_dst_mac_ip","src_ip_port","dst_ip_port","src_dst_ip_port"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model98TypeLoadBalancePropEnum = append(model98TypeLoadBalancePropEnum, v)
	}
}

const (

	// Model98LoadBalanceSrcDstMac captures enum value "src_dst_mac"
	Model98LoadBalanceSrcDstMac string = "src_dst_mac"

	// Model98LoadBalanceSrcMacL2 captures enum value "src_mac_l2"
	Model98LoadBalanceSrcMacL2 string = "src_mac_l2"

	// Model98LoadBalanceDstMacL2 captures enum value "dst_mac_l2"
	Model98LoadBalanceDstMacL2 string = "dst_mac_l2"

	// Model98LoadBalanceSrcDstMacL2 captures enum value "src_dst_mac_l2"
	Model98LoadBalanceSrcDstMacL2 string = "src_dst_mac_l2"

	// Model98LoadBalanceSrcDstMacIP captures enum value "src_dst_mac_ip"
	Model98LoadBalanceSrcDstMacIP string = "src_dst_mac_ip"

	// Model98LoadBalanceSrcIPPort captures enum value "src_ip_port"
	Model98LoadBalanceSrcIPPort string = "src_ip_port"

	// Model98LoadBalanceDstIPPort captures enum value "dst_ip_port"
	Model98LoadBalanceDstIPPort string = "dst_ip_port"

	// Model98LoadBalanceSrcDstIPPort captures enum value "src_dst_ip_port"
	Model98LoadBalanceSrcDstIPPort string = "src_dst_ip_port"
)

// prop value enum
func (m *Model98) validateLoadBalanceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model98TypeLoadBalancePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model98) validateLoadBalance(formats strfmt.Registry) error {

	if err := validate.Required("loadBalance", "body", m.LoadBalance); err != nil {
		return err
	}

	// value enum
	if err := m.validateLoadBalanceEnum("loadBalance", "body", *m.LoadBalance); err != nil {
		return err
	}

	return nil
}

func (m *Model98) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	if err := m.Ports.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ports")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ports")
		}
		return err
	}

	return nil
}

// ContextValidate validate this model 98 based on the context it is used
func (m *Model98) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model98) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Ports.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ports")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ports")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model98) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model98) UnmarshalBinary(b []byte) error {
	var res Model98
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
