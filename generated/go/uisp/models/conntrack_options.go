// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConntrackOptions conntrack options
//
// swagger:model conntrackOptions
type ConntrackOptions struct {

	// expect table size
	// Required: true
	// Maximum: 1e+07
	// Minimum: 1
	ExpectTableSize *int64 `json:"expectTableSize"`

	// table size
	// Required: true
	// Maximum: 1e+07
	// Minimum: 1000
	TableSize *int64 `json:"tableSize"`

	// tcp loose
	// Required: true
	TCPLoose *bool `json:"tcpLoose"`

	// tcp max retrans
	// Required: true
	// Maximum: 100
	// Minimum: 1
	TCPMaxRetrans *int64 `json:"tcpMaxRetrans"`
}

// Validate validates this conntrack options
func (m *ConntrackOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpectTableSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPLoose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPMaxRetrans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConntrackOptions) validateExpectTableSize(formats strfmt.Registry) error {

	if err := validate.Required("expectTableSize", "body", m.ExpectTableSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("expectTableSize", "body", *m.ExpectTableSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("expectTableSize", "body", *m.ExpectTableSize, 1e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *ConntrackOptions) validateTableSize(formats strfmt.Registry) error {

	if err := validate.Required("tableSize", "body", m.TableSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("tableSize", "body", *m.TableSize, 1000, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("tableSize", "body", *m.TableSize, 1e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *ConntrackOptions) validateTCPLoose(formats strfmt.Registry) error {

	if err := validate.Required("tcpLoose", "body", m.TCPLoose); err != nil {
		return err
	}

	return nil
}

func (m *ConntrackOptions) validateTCPMaxRetrans(formats strfmt.Registry) error {

	if err := validate.Required("tcpMaxRetrans", "body", m.TCPMaxRetrans); err != nil {
		return err
	}

	if err := validate.MinimumInt("tcpMaxRetrans", "body", *m.TCPMaxRetrans, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("tcpMaxRetrans", "body", *m.TCPMaxRetrans, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this conntrack options based on context it is used
func (m *ConntrackOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConntrackOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConntrackOptions) UnmarshalBinary(b []byte) error {
	var res ConntrackOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
