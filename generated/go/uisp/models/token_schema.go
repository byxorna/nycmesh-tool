// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenSchema Information about token.
//
// swagger:model TokenSchema
type TokenSchema struct {

	// Time when this token was created.
	// Example: 2011-10-03T14:48:00.000Z
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// If true than this token was used in this request.
	// Example: false
	// Required: true
	CurrentSession *bool `json:"currentSession"`

	// Time when this token will expire unless it is renewed. If null than it will never expire.
	// Example: 2011-10-05T14:48:00.000Z
	// Required: true
	// Format: date-time
	ExpiresAt *strfmt.DateTime `json:"expiresAt"`

	// Token ID, not the token itself.
	// Example: d37ecad9-2643-4555-981a-23ee30086807
	// Required: true
	ID *string `json:"id"`

	// Time when this token was last used. If null then it has not been used yet.
	// Example: 2011-10-04T14:48:00.000Z
	// Required: true
	// Format: date-time
	LastUsed *strfmt.DateTime `json:"lastUsed"`

	// Latest time when the token will expire. If null then it will never expire.
	// Example: 2011-11-05T14:48:00.000Z
	// Required: true
	// Format: date-time
	MaxExpiresAt *strfmt.DateTime `json:"maxExpiresAt"`

	// Token metadata.
	Meta string `json:"meta,omitempty"`

	// Human readable token name.
	// Example: Mobile App
	// Required: true
	Name *string `json:"name"`

	// scope
	// Required: true
	Scope Scope `json:"scope"`

	// If true then the token will be deleted when server restarts.
	// Example: false
	// Required: true
	Transient *bool `json:"transient"`

	// user
	User *User `json:"user,omitempty"`

	// Id of the user this token represents. Null if the token is not bound to any user.
	// Example: 261aa95a-0270-4416-894a-616a0cecedbb
	UserID string `json:"userId,omitempty"`
}

// Validate validates this token schema
func (m *TokenSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSession(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenSchema) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateCurrentSession(formats strfmt.Registry) error {

	if err := validate.Required("currentSession", "body", m.CurrentSession); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expiresAt", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("expiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateLastUsed(formats strfmt.Registry) error {

	if err := validate.Required("lastUsed", "body", m.LastUsed); err != nil {
		return err
	}

	if err := validate.FormatOf("lastUsed", "body", "date-time", m.LastUsed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateMaxExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("maxExpiresAt", "body", m.MaxExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("maxExpiresAt", "body", "date-time", m.MaxExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	if err := m.Scope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *TokenSchema) validateTransient(formats strfmt.Registry) error {

	if err := validate.Required("transient", "body", m.Transient); err != nil {
		return err
	}

	return nil
}

func (m *TokenSchema) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this token schema based on the context it is used
func (m *TokenSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenSchema) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Scope.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scope")
		}
		return err
	}

	return nil
}

func (m *TokenSchema) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenSchema) UnmarshalBinary(b []byte) error {
	var res TokenSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
