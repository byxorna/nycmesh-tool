// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkStatistics network statistics
//
// swagger:model NetworkStatistics
type NetworkStatistics struct {

	// all clients
	AllClients AllClients `json:"allClients,omitempty"`

	// all sites
	AllSites AllSites `json:"allSites,omitempty"`

	// data links utilization score
	DataLinksUtilizationScore DataLinksUtilizationScore `json:"dataLinksUtilizationScore,omitempty"`

	// downlink utilization mean
	DownlinkUtilizationMean DownlinkUtilizationMean `json:"downlinkUtilizationMean,omitempty"`

	// firmware up to dateness
	FirmwareUpToDateness FirmwareUpToDateness `json:"firmwareUpToDateness,omitempty"`

	// gateways
	Gateways Gateways `json:"gateways,omitempty"`

	// interval
	Interval *NetworkStatisticInterval `json:"interval,omitempty"`

	// isp score
	IspScore IspScore `json:"ispScore,omitempty"`

	// link score
	LinkScore LinkScore1 `json:"linkScore,omitempty"`

	// live clients
	LiveClients LiveClients `json:"liveClients,omitempty"`

	// live sites
	LiveSites LiveSites `json:"liveSites,omitempty"`

	// network design score
	NetworkDesignScore NetworkDesignScore `json:"networkDesignScore,omitempty"`

	// network health
	NetworkHealth NetworkHealth `json:"networkHealth,omitempty"`

	// outages
	Outages Outages `json:"outages,omitempty"`

	// period
	Period int64 `json:"period,omitempty"`

	// signal score
	SignalScore SignalScore `json:"signalScore,omitempty"`

	// uplink utilization mean
	UplinkUtilizationMean UplinkUtilizationMean `json:"uplinkUtilizationMean,omitempty"`
}

// Validate validates this network statistics
func (m *NetworkStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataLinksUtilizationScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownlinkUtilizationMean(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwareUpToDateness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIspScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiveClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiveSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkDesignScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUplinkUtilizationMean(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkStatistics) validateAllClients(formats strfmt.Registry) error {
	if swag.IsZero(m.AllClients) { // not required
		return nil
	}

	if err := m.AllClients.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("allClients")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("allClients")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateAllSites(formats strfmt.Registry) error {
	if swag.IsZero(m.AllSites) { // not required
		return nil
	}

	if err := m.AllSites.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("allSites")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("allSites")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateDataLinksUtilizationScore(formats strfmt.Registry) error {
	if swag.IsZero(m.DataLinksUtilizationScore) { // not required
		return nil
	}

	if err := m.DataLinksUtilizationScore.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataLinksUtilizationScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dataLinksUtilizationScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateDownlinkUtilizationMean(formats strfmt.Registry) error {
	if swag.IsZero(m.DownlinkUtilizationMean) { // not required
		return nil
	}

	if err := m.DownlinkUtilizationMean.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("downlinkUtilizationMean")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("downlinkUtilizationMean")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateFirmwareUpToDateness(formats strfmt.Registry) error {
	if swag.IsZero(m.FirmwareUpToDateness) { // not required
		return nil
	}

	if err := m.FirmwareUpToDateness.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("firmwareUpToDateness")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("firmwareUpToDateness")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if m.Interval != nil {
		if err := m.Interval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interval")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkStatistics) validateIspScore(formats strfmt.Registry) error {
	if swag.IsZero(m.IspScore) { // not required
		return nil
	}

	if err := m.IspScore.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ispScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ispScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateLinkScore(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkScore) { // not required
		return nil
	}

	if err := m.LinkScore.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("linkScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("linkScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateLiveClients(formats strfmt.Registry) error {
	if swag.IsZero(m.LiveClients) { // not required
		return nil
	}

	if err := m.LiveClients.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("liveClients")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("liveClients")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateLiveSites(formats strfmt.Registry) error {
	if swag.IsZero(m.LiveSites) { // not required
		return nil
	}

	if err := m.LiveSites.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("liveSites")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("liveSites")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateNetworkDesignScore(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkDesignScore) { // not required
		return nil
	}

	if err := m.NetworkDesignScore.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkDesignScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networkDesignScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateNetworkHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkHealth) { // not required
		return nil
	}

	if err := m.NetworkHealth.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkHealth")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networkHealth")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateOutages(formats strfmt.Registry) error {
	if swag.IsZero(m.Outages) { // not required
		return nil
	}

	if err := m.Outages.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("outages")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("outages")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateSignalScore(formats strfmt.Registry) error {
	if swag.IsZero(m.SignalScore) { // not required
		return nil
	}

	if err := m.SignalScore.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signalScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) validateUplinkUtilizationMean(formats strfmt.Registry) error {
	if swag.IsZero(m.UplinkUtilizationMean) { // not required
		return nil
	}

	if err := m.UplinkUtilizationMean.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uplinkUtilizationMean")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uplinkUtilizationMean")
		}
		return err
	}

	return nil
}

// ContextValidate validate this network statistics based on the context it is used
func (m *NetworkStatistics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllClients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAllSites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataLinksUtilizationScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDownlinkUtilizationMean(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmwareUpToDateness(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIspScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinkScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLiveClients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLiveSites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkDesignScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignalScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUplinkUtilizationMean(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkStatistics) contextValidateAllClients(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AllClients.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("allClients")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("allClients")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateAllSites(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AllSites.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("allSites")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("allSites")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateDataLinksUtilizationScore(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DataLinksUtilizationScore.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataLinksUtilizationScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dataLinksUtilizationScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateDownlinkUtilizationMean(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DownlinkUtilizationMean.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("downlinkUtilizationMean")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("downlinkUtilizationMean")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateFirmwareUpToDateness(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FirmwareUpToDateness.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("firmwareUpToDateness")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("firmwareUpToDateness")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.Interval != nil {
		if err := m.Interval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interval")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkStatistics) contextValidateIspScore(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IspScore.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ispScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ispScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateLinkScore(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LinkScore.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("linkScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("linkScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateLiveClients(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LiveClients.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("liveClients")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("liveClients")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateLiveSites(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LiveSites.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("liveSites")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("liveSites")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateNetworkDesignScore(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NetworkDesignScore.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkDesignScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networkDesignScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateNetworkHealth(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NetworkHealth.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkHealth")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("networkHealth")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateOutages(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Outages.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("outages")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("outages")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateSignalScore(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SignalScore.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("signalScore")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("signalScore")
		}
		return err
	}

	return nil
}

func (m *NetworkStatistics) contextValidateUplinkUtilizationMean(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UplinkUtilizationMean.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uplinkUtilizationMean")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uplinkUtilizationMean")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkStatistics) UnmarshalBinary(b []byte) error {
	var res NetworkStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
