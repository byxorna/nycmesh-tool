// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Port Properties specific for ports on ES and TS devices.
//
// swagger:model port
type Port struct {

	// dhcp snooping
	DhcpSnooping bool `json:"dhcpSnooping,omitempty"`

	// flow control
	FlowControl bool `json:"flowControl,omitempty"`

	// isolated
	Isolated bool `json:"isolated,omitempty"`

	// ping watchdog
	PingWatchdog *PingWatchdog `json:"pingWatchdog,omitempty"`

	// routed
	Routed bool `json:"routed,omitempty"`

	// speed limit
	SpeedLimit *SpeedLimit `json:"speedLimit,omitempty"`

	// stp
	Stp *Stp1 `json:"stp,omitempty"`
}

// Validate validates this port
func (m *Port) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePingWatchdog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Port) validatePingWatchdog(formats strfmt.Registry) error {
	if swag.IsZero(m.PingWatchdog) { // not required
		return nil
	}

	if m.PingWatchdog != nil {
		if err := m.PingWatchdog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pingWatchdog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pingWatchdog")
			}
			return err
		}
	}

	return nil
}

func (m *Port) validateSpeedLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.SpeedLimit) { // not required
		return nil
	}

	if m.SpeedLimit != nil {
		if err := m.SpeedLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("speedLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("speedLimit")
			}
			return err
		}
	}

	return nil
}

func (m *Port) validateStp(formats strfmt.Registry) error {
	if swag.IsZero(m.Stp) { // not required
		return nil
	}

	if m.Stp != nil {
		if err := m.Stp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this port based on the context it is used
func (m *Port) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePingWatchdog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpeedLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Port) contextValidatePingWatchdog(ctx context.Context, formats strfmt.Registry) error {

	if m.PingWatchdog != nil {
		if err := m.PingWatchdog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pingWatchdog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pingWatchdog")
			}
			return err
		}
	}

	return nil
}

func (m *Port) contextValidateSpeedLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.SpeedLimit != nil {
		if err := m.SpeedLimit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("speedLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("speedLimit")
			}
			return err
		}
	}

	return nil
}

func (m *Port) contextValidateStp(ctx context.Context, formats strfmt.Registry) error {

	if m.Stp != nil {
		if err := m.Stp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Port) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Port) UnmarshalBinary(b []byte) error {
	var res Port
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
