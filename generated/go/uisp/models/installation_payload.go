// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstallationPayload New installation.
//
// swagger:model InstallationPayload
type InstallationPayload struct {

	// MAC address of the first installation device.
	// Example: 44:d9:e7:3d:b1:47
	// Required: true
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac1 *string `json:"mac1"`

	// MAC address of the second installation device.
	// Example: 44:d9:e7:3d:b1:48
	// Required: true
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac2 *string `json:"mac2"`
}

// Validate validates this installation payload
func (m *InstallationPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMac1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallationPayload) validateMac1(formats strfmt.Registry) error {

	if err := validate.Required("mac1", "body", m.Mac1); err != nil {
		return err
	}

	if err := validate.Pattern("mac1", "body", *m.Mac1, `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

func (m *InstallationPayload) validateMac2(formats strfmt.Registry) error {

	if err := validate.Required("mac2", "body", m.Mac2); err != nil {
		return err
	}

	if err := validate.Pattern("mac2", "body", *m.Mac2, `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this installation payload based on context it is used
func (m *InstallationPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InstallationPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallationPayload) UnmarshalBinary(b []byte) error {
	var res InstallationPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
