// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceIdentification Read-only identification attributes.
//
// swagger:model DeviceIdentification
type DeviceIdentification struct {

	// Device is added to UISP.
	Authorized bool `json:"authorized,omitempty"`

	// category
	// Enum: [optical wired wireless accessories]
	Category string `json:"category,omitempty"`

	// UISP device alias or real name.
	DisplayName string `json:"displayName,omitempty"`

	// In SemVer format.
	FirmwareVersion string `json:"firmwareVersion,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// Device ID.
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	ID *string `json:"id"`

	// Custom IP address in IPv4 or IPv6 format.
	// Example: 192.168.1.22
	IP string `json:"ip,omitempty"`

	// mac
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac string `json:"mac,omitempty"`

	// Short names, for example UF-OLT.
	// Enum: [UF-Nano UF-Loco UF-Wifi UF-Instant UF-OLT UF-OLT4 UISP-R-Pro UISP-R-Lite UNMS-S-Lite UISP-S-Lite UISP-S-Pro UISP-P-Lite UISP-LTE ER-X ER-X-SFP ERLite-3 ERPoe-5 ERPro-8 ER-8 ER-8-XG ER-4 ER-6P ER-12 ER-12P ER-10X EP-R8 EP-R6 EP-S16 ES-12F ES-16-150W ES-24-250W ES-24-500W ES-24-Lite ES-48-500W ES-48-750W ES-48-Lite ES-8-150W ES-16-XG ES-10XP ES-10X ES-18X ES-26X EP-54V-150W EP-24V-72W EP-54V-72W TSW-PoE TSW-PoE PRO ACB-AC ACB-ISP ACB-LOCO AF11FX AF24 AF24HD AF2X AF3X AF4X AF5 AF5U AF5X AF-5XHD AF-LTU LTU-LITE AF-LTU5 LTU-Rocket AFLTULR AF60 AF60-LR WaveAP WaveCPE GBE-LR GBE GBE-Plus GBE-AP R2N R2T R5N R6N R36-GPS RM3-GPS R2N-GPS R5N-GPS R9N-GPS R5T-GPS RM3 R36 R9N N2N N5N N6N NS3 N36 N9N N9S LM2 LM5 B2N B2T B5N B5T BAC AG2 AG2-HP AG5 AG5-HP p2N p5N M25 P2B-400 P5B-300 P5B-300-ISO P5B-400 P5B-400-ISO P5B-620 LB5-120 LB5 N5B N5B-16 N5B-19 N5B-300 N5B-400 N5B-Client N2B N2B-13 N2B-400 PAP LAP-HP LAP AGW AGW-LR AGW-Pro AGW-Installer PB5 PB3 P36 PBM10 NB5 NB2 NB3 B36 NB9 SM5 WM5 IS-M5 Loco5AC NS-5AC R5AC-PTMP R5AC-PTP R5AC-Lite R5AC-PRISM R2AC-Prism R2AC-Gen2 RP-5AC-Gen2 NBE-2AC-13 NBE-5AC-16 NBE-5AC-19 NBE-5AC-Gen2 PBE-5AC-300 PBE-5AC-300-ISO PBE-5AC-400 PBE-5AC-400-ISO PBE-5AC-500 PBE-5AC-500-ISO PBE-5AC-620 PBE-5AC-620-ISO PBE-2AC-400 PBE-2AC-400-ISO PBE-5AC-X-Gen2 PBE-5AC-Gen2 PBE-5AC-ISO-Gen2 PBE-5AC-400-ISO-Gen2 LBE-5AC-16-120 LAP-120 LBE-5AC-23 LBE-5AC-Gen2 LBE-5AC-LR LAP-GPS IS-5AC PS-5AC SolarSwitch SolarPoint BulletAC-IP67 B-DB-AC UNKNOWN]
	Model string `json:"model,omitempty"`

	// Full names, for example UFiber OLT.
	ModelName string `json:"modelName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Short name, for example e600.
	PlatformID string `json:"platformId,omitempty"`

	// platform name
	// Enum: [UFiber NanoG UFiber Loco UFiber Wifi UFiber Instant UISPRPro UISPRLite UISPS UISPSPro UNMSS UISPLTE UISPPLite e50 e100 e200 e300 e600 e1000 u50 u100 u200 u300 u1000 ESWH ESGH ES ESX EP EPX SW ACB WA 2WA XC 2XC XW XM TI GBE AirGW AirGWP AF AF02 AF06 AF07 AF08 AF09 af5xhd afltu lturocket GP ltu60 SunMax UNKNOWN]
	PlatformName string `json:"platformName,omitempty"`

	// role
	// Enum: [router switch gpon ap station other ups server wireless convertor gateway]
	Role string `json:"role,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// site
	Site *Site `json:"site,omitempty"`

	// started
	// Format: date-time
	Started strfmt.DateTime `json:"started,omitempty"`

	// Status of the station.
	// Example: active
	// Enum: [active connecting discovered inactive disabled disconnected unauthorized proposed unknown unplaced custom]
	Status string `json:"status,omitempty"`

	// type
	// Enum: [onu olt uispp uispr uisps uispLte erouter eswitch epower airCube airMax airFiber toughSwitch solarBeam wave blackBox]
	Type string `json:"type,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// wan interface Id
	WanInterfaceID string `json:"wanInterfaceId,omitempty"`
}

// Validate validates this device identification
func (m *DeviceIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceIdentificationTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["optical","wired","wireless","accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeCategoryPropEnum = append(deviceIdentificationTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceIdentificationCategoryOptical captures enum value "optical"
	DeviceIdentificationCategoryOptical string = "optical"

	// DeviceIdentificationCategoryWired captures enum value "wired"
	DeviceIdentificationCategoryWired string = "wired"

	// DeviceIdentificationCategoryWireless captures enum value "wireless"
	DeviceIdentificationCategoryWireless string = "wireless"

	// DeviceIdentificationCategoryAccessories captures enum value "accessories"
	DeviceIdentificationCategoryAccessories string = "accessories"
)

// prop value enum
func (m *DeviceIdentification) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateMac(formats strfmt.Registry) error {
	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", m.Mac, `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UF-Nano","UF-Loco","UF-Wifi","UF-Instant","UF-OLT","UF-OLT4","UISP-R-Pro","UISP-R-Lite","UNMS-S-Lite","UISP-S-Lite","UISP-S-Pro","UISP-P-Lite","UISP-LTE","ER-X","ER-X-SFP","ERLite-3","ERPoe-5","ERPro-8","ER-8","ER-8-XG","ER-4","ER-6P","ER-12","ER-12P","ER-10X","EP-R8","EP-R6","EP-S16","ES-12F","ES-16-150W","ES-24-250W","ES-24-500W","ES-24-Lite","ES-48-500W","ES-48-750W","ES-48-Lite","ES-8-150W","ES-16-XG","ES-10XP","ES-10X","ES-18X","ES-26X","EP-54V-150W","EP-24V-72W","EP-54V-72W","TSW-PoE","TSW-PoE PRO","ACB-AC","ACB-ISP","ACB-LOCO","AF11FX","AF24","AF24HD","AF2X","AF3X","AF4X","AF5","AF5U","AF5X","AF-5XHD","AF-LTU","LTU-LITE","AF-LTU5","LTU-Rocket","AFLTULR","AF60","AF60-LR","WaveAP","WaveCPE","GBE-LR","GBE","GBE-Plus","GBE-AP","R2N","R2T","R5N","R6N","R36-GPS","RM3-GPS","R2N-GPS","R5N-GPS","R9N-GPS","R5T-GPS","RM3","R36","R9N","N2N","N5N","N6N","NS3","N36","N9N","N9S","LM2","LM5","B2N","B2T","B5N","B5T","BAC","AG2","AG2-HP","AG5","AG5-HP","p2N","p5N","M25","P2B-400","P5B-300","P5B-300-ISO","P5B-400","P5B-400-ISO","P5B-620","LB5-120","LB5","N5B","N5B-16","N5B-19","N5B-300","N5B-400","N5B-Client","N2B","N2B-13","N2B-400","PAP","LAP-HP","LAP","AGW","AGW-LR","AGW-Pro","AGW-Installer","PB5","PB3","P36","PBM10","NB5","NB2","NB3","B36","NB9","SM5","WM5","IS-M5","Loco5AC","NS-5AC","R5AC-PTMP","R5AC-PTP","R5AC-Lite","R5AC-PRISM","R2AC-Prism","R2AC-Gen2","RP-5AC-Gen2","NBE-2AC-13","NBE-5AC-16","NBE-5AC-19","NBE-5AC-Gen2","PBE-5AC-300","PBE-5AC-300-ISO","PBE-5AC-400","PBE-5AC-400-ISO","PBE-5AC-500","PBE-5AC-500-ISO","PBE-5AC-620","PBE-5AC-620-ISO","PBE-2AC-400","PBE-2AC-400-ISO","PBE-5AC-X-Gen2","PBE-5AC-Gen2","PBE-5AC-ISO-Gen2","PBE-5AC-400-ISO-Gen2","LBE-5AC-16-120","LAP-120","LBE-5AC-23","LBE-5AC-Gen2","LBE-5AC-LR","LAP-GPS","IS-5AC","PS-5AC","SolarSwitch","SolarPoint","BulletAC-IP67","B-DB-AC","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeModelPropEnum = append(deviceIdentificationTypeModelPropEnum, v)
	}
}

const (

	// DeviceIdentificationModelUFDashNano captures enum value "UF-Nano"
	DeviceIdentificationModelUFDashNano string = "UF-Nano"

	// DeviceIdentificationModelUFDashLoco captures enum value "UF-Loco"
	DeviceIdentificationModelUFDashLoco string = "UF-Loco"

	// DeviceIdentificationModelUFDashWifi captures enum value "UF-Wifi"
	DeviceIdentificationModelUFDashWifi string = "UF-Wifi"

	// DeviceIdentificationModelUFDashInstant captures enum value "UF-Instant"
	DeviceIdentificationModelUFDashInstant string = "UF-Instant"

	// DeviceIdentificationModelUFDashOLT captures enum value "UF-OLT"
	DeviceIdentificationModelUFDashOLT string = "UF-OLT"

	// DeviceIdentificationModelUFDashOLT4 captures enum value "UF-OLT4"
	DeviceIdentificationModelUFDashOLT4 string = "UF-OLT4"

	// DeviceIdentificationModelUISPDashRDashPro captures enum value "UISP-R-Pro"
	DeviceIdentificationModelUISPDashRDashPro string = "UISP-R-Pro"

	// DeviceIdentificationModelUISPDashRDashLite captures enum value "UISP-R-Lite"
	DeviceIdentificationModelUISPDashRDashLite string = "UISP-R-Lite"

	// DeviceIdentificationModelUNMSDashSDashLite captures enum value "UNMS-S-Lite"
	DeviceIdentificationModelUNMSDashSDashLite string = "UNMS-S-Lite"

	// DeviceIdentificationModelUISPDashSDashLite captures enum value "UISP-S-Lite"
	DeviceIdentificationModelUISPDashSDashLite string = "UISP-S-Lite"

	// DeviceIdentificationModelUISPDashSDashPro captures enum value "UISP-S-Pro"
	DeviceIdentificationModelUISPDashSDashPro string = "UISP-S-Pro"

	// DeviceIdentificationModelUISPDashPDashLite captures enum value "UISP-P-Lite"
	DeviceIdentificationModelUISPDashPDashLite string = "UISP-P-Lite"

	// DeviceIdentificationModelUISPDashLTE captures enum value "UISP-LTE"
	DeviceIdentificationModelUISPDashLTE string = "UISP-LTE"

	// DeviceIdentificationModelERDashX captures enum value "ER-X"
	DeviceIdentificationModelERDashX string = "ER-X"

	// DeviceIdentificationModelERDashXDashSFP captures enum value "ER-X-SFP"
	DeviceIdentificationModelERDashXDashSFP string = "ER-X-SFP"

	// DeviceIdentificationModelERLiteDash3 captures enum value "ERLite-3"
	DeviceIdentificationModelERLiteDash3 string = "ERLite-3"

	// DeviceIdentificationModelERPoeDash5 captures enum value "ERPoe-5"
	DeviceIdentificationModelERPoeDash5 string = "ERPoe-5"

	// DeviceIdentificationModelERProDash8 captures enum value "ERPro-8"
	DeviceIdentificationModelERProDash8 string = "ERPro-8"

	// DeviceIdentificationModelERDash8 captures enum value "ER-8"
	DeviceIdentificationModelERDash8 string = "ER-8"

	// DeviceIdentificationModelERDash8DashXG captures enum value "ER-8-XG"
	DeviceIdentificationModelERDash8DashXG string = "ER-8-XG"

	// DeviceIdentificationModelERDash4 captures enum value "ER-4"
	DeviceIdentificationModelERDash4 string = "ER-4"

	// DeviceIdentificationModelERDash6P captures enum value "ER-6P"
	DeviceIdentificationModelERDash6P string = "ER-6P"

	// DeviceIdentificationModelERDash12 captures enum value "ER-12"
	DeviceIdentificationModelERDash12 string = "ER-12"

	// DeviceIdentificationModelERDash12P captures enum value "ER-12P"
	DeviceIdentificationModelERDash12P string = "ER-12P"

	// DeviceIdentificationModelERDash10X captures enum value "ER-10X"
	DeviceIdentificationModelERDash10X string = "ER-10X"

	// DeviceIdentificationModelEPDashR8 captures enum value "EP-R8"
	DeviceIdentificationModelEPDashR8 string = "EP-R8"

	// DeviceIdentificationModelEPDashR6 captures enum value "EP-R6"
	DeviceIdentificationModelEPDashR6 string = "EP-R6"

	// DeviceIdentificationModelEPDashS16 captures enum value "EP-S16"
	DeviceIdentificationModelEPDashS16 string = "EP-S16"

	// DeviceIdentificationModelESDash12F captures enum value "ES-12F"
	DeviceIdentificationModelESDash12F string = "ES-12F"

	// DeviceIdentificationModelESDash16Dash150W captures enum value "ES-16-150W"
	DeviceIdentificationModelESDash16Dash150W string = "ES-16-150W"

	// DeviceIdentificationModelESDash24Dash250W captures enum value "ES-24-250W"
	DeviceIdentificationModelESDash24Dash250W string = "ES-24-250W"

	// DeviceIdentificationModelESDash24Dash500W captures enum value "ES-24-500W"
	DeviceIdentificationModelESDash24Dash500W string = "ES-24-500W"

	// DeviceIdentificationModelESDash24DashLite captures enum value "ES-24-Lite"
	DeviceIdentificationModelESDash24DashLite string = "ES-24-Lite"

	// DeviceIdentificationModelESDash48Dash500W captures enum value "ES-48-500W"
	DeviceIdentificationModelESDash48Dash500W string = "ES-48-500W"

	// DeviceIdentificationModelESDash48Dash750W captures enum value "ES-48-750W"
	DeviceIdentificationModelESDash48Dash750W string = "ES-48-750W"

	// DeviceIdentificationModelESDash48DashLite captures enum value "ES-48-Lite"
	DeviceIdentificationModelESDash48DashLite string = "ES-48-Lite"

	// DeviceIdentificationModelESDash8Dash150W captures enum value "ES-8-150W"
	DeviceIdentificationModelESDash8Dash150W string = "ES-8-150W"

	// DeviceIdentificationModelESDash16DashXG captures enum value "ES-16-XG"
	DeviceIdentificationModelESDash16DashXG string = "ES-16-XG"

	// DeviceIdentificationModelESDash10XP captures enum value "ES-10XP"
	DeviceIdentificationModelESDash10XP string = "ES-10XP"

	// DeviceIdentificationModelESDash10X captures enum value "ES-10X"
	DeviceIdentificationModelESDash10X string = "ES-10X"

	// DeviceIdentificationModelESDash18X captures enum value "ES-18X"
	DeviceIdentificationModelESDash18X string = "ES-18X"

	// DeviceIdentificationModelESDash26X captures enum value "ES-26X"
	DeviceIdentificationModelESDash26X string = "ES-26X"

	// DeviceIdentificationModelEPDash54VDash150W captures enum value "EP-54V-150W"
	DeviceIdentificationModelEPDash54VDash150W string = "EP-54V-150W"

	// DeviceIdentificationModelEPDash24VDash72W captures enum value "EP-24V-72W"
	DeviceIdentificationModelEPDash24VDash72W string = "EP-24V-72W"

	// DeviceIdentificationModelEPDash54VDash72W captures enum value "EP-54V-72W"
	DeviceIdentificationModelEPDash54VDash72W string = "EP-54V-72W"

	// DeviceIdentificationModelTSWDashPoE captures enum value "TSW-PoE"
	DeviceIdentificationModelTSWDashPoE string = "TSW-PoE"

	// DeviceIdentificationModelTSWDashPoEPRO captures enum value "TSW-PoE PRO"
	DeviceIdentificationModelTSWDashPoEPRO string = "TSW-PoE PRO"

	// DeviceIdentificationModelACBDashAC captures enum value "ACB-AC"
	DeviceIdentificationModelACBDashAC string = "ACB-AC"

	// DeviceIdentificationModelACBDashISP captures enum value "ACB-ISP"
	DeviceIdentificationModelACBDashISP string = "ACB-ISP"

	// DeviceIdentificationModelACBDashLOCO captures enum value "ACB-LOCO"
	DeviceIdentificationModelACBDashLOCO string = "ACB-LOCO"

	// DeviceIdentificationModelAF11FX captures enum value "AF11FX"
	DeviceIdentificationModelAF11FX string = "AF11FX"

	// DeviceIdentificationModelAF24 captures enum value "AF24"
	DeviceIdentificationModelAF24 string = "AF24"

	// DeviceIdentificationModelAF24HD captures enum value "AF24HD"
	DeviceIdentificationModelAF24HD string = "AF24HD"

	// DeviceIdentificationModelAF2X captures enum value "AF2X"
	DeviceIdentificationModelAF2X string = "AF2X"

	// DeviceIdentificationModelAF3X captures enum value "AF3X"
	DeviceIdentificationModelAF3X string = "AF3X"

	// DeviceIdentificationModelAF4X captures enum value "AF4X"
	DeviceIdentificationModelAF4X string = "AF4X"

	// DeviceIdentificationModelAF5 captures enum value "AF5"
	DeviceIdentificationModelAF5 string = "AF5"

	// DeviceIdentificationModelAF5U captures enum value "AF5U"
	DeviceIdentificationModelAF5U string = "AF5U"

	// DeviceIdentificationModelAF5X captures enum value "AF5X"
	DeviceIdentificationModelAF5X string = "AF5X"

	// DeviceIdentificationModelAFDash5XHD captures enum value "AF-5XHD"
	DeviceIdentificationModelAFDash5XHD string = "AF-5XHD"

	// DeviceIdentificationModelAFDashLTU captures enum value "AF-LTU"
	DeviceIdentificationModelAFDashLTU string = "AF-LTU"

	// DeviceIdentificationModelLTUDashLITE captures enum value "LTU-LITE"
	DeviceIdentificationModelLTUDashLITE string = "LTU-LITE"

	// DeviceIdentificationModelAFDashLTU5 captures enum value "AF-LTU5"
	DeviceIdentificationModelAFDashLTU5 string = "AF-LTU5"

	// DeviceIdentificationModelLTUDashRocket captures enum value "LTU-Rocket"
	DeviceIdentificationModelLTUDashRocket string = "LTU-Rocket"

	// DeviceIdentificationModelAFLTULR captures enum value "AFLTULR"
	DeviceIdentificationModelAFLTULR string = "AFLTULR"

	// DeviceIdentificationModelAF60 captures enum value "AF60"
	DeviceIdentificationModelAF60 string = "AF60"

	// DeviceIdentificationModelAF60DashLR captures enum value "AF60-LR"
	DeviceIdentificationModelAF60DashLR string = "AF60-LR"

	// DeviceIdentificationModelWaveAP captures enum value "WaveAP"
	DeviceIdentificationModelWaveAP string = "WaveAP"

	// DeviceIdentificationModelWaveCPE captures enum value "WaveCPE"
	DeviceIdentificationModelWaveCPE string = "WaveCPE"

	// DeviceIdentificationModelGBEDashLR captures enum value "GBE-LR"
	DeviceIdentificationModelGBEDashLR string = "GBE-LR"

	// DeviceIdentificationModelGBE captures enum value "GBE"
	DeviceIdentificationModelGBE string = "GBE"

	// DeviceIdentificationModelGBEDashPlus captures enum value "GBE-Plus"
	DeviceIdentificationModelGBEDashPlus string = "GBE-Plus"

	// DeviceIdentificationModelGBEDashAP captures enum value "GBE-AP"
	DeviceIdentificationModelGBEDashAP string = "GBE-AP"

	// DeviceIdentificationModelR2N captures enum value "R2N"
	DeviceIdentificationModelR2N string = "R2N"

	// DeviceIdentificationModelR2T captures enum value "R2T"
	DeviceIdentificationModelR2T string = "R2T"

	// DeviceIdentificationModelR5N captures enum value "R5N"
	DeviceIdentificationModelR5N string = "R5N"

	// DeviceIdentificationModelR6N captures enum value "R6N"
	DeviceIdentificationModelR6N string = "R6N"

	// DeviceIdentificationModelR36DashGPS captures enum value "R36-GPS"
	DeviceIdentificationModelR36DashGPS string = "R36-GPS"

	// DeviceIdentificationModelRM3DashGPS captures enum value "RM3-GPS"
	DeviceIdentificationModelRM3DashGPS string = "RM3-GPS"

	// DeviceIdentificationModelR2NDashGPS captures enum value "R2N-GPS"
	DeviceIdentificationModelR2NDashGPS string = "R2N-GPS"

	// DeviceIdentificationModelR5NDashGPS captures enum value "R5N-GPS"
	DeviceIdentificationModelR5NDashGPS string = "R5N-GPS"

	// DeviceIdentificationModelR9NDashGPS captures enum value "R9N-GPS"
	DeviceIdentificationModelR9NDashGPS string = "R9N-GPS"

	// DeviceIdentificationModelR5TDashGPS captures enum value "R5T-GPS"
	DeviceIdentificationModelR5TDashGPS string = "R5T-GPS"

	// DeviceIdentificationModelRM3 captures enum value "RM3"
	DeviceIdentificationModelRM3 string = "RM3"

	// DeviceIdentificationModelR36 captures enum value "R36"
	DeviceIdentificationModelR36 string = "R36"

	// DeviceIdentificationModelR9N captures enum value "R9N"
	DeviceIdentificationModelR9N string = "R9N"

	// DeviceIdentificationModelN2N captures enum value "N2N"
	DeviceIdentificationModelN2N string = "N2N"

	// DeviceIdentificationModelN5N captures enum value "N5N"
	DeviceIdentificationModelN5N string = "N5N"

	// DeviceIdentificationModelN6N captures enum value "N6N"
	DeviceIdentificationModelN6N string = "N6N"

	// DeviceIdentificationModelNS3 captures enum value "NS3"
	DeviceIdentificationModelNS3 string = "NS3"

	// DeviceIdentificationModelN36 captures enum value "N36"
	DeviceIdentificationModelN36 string = "N36"

	// DeviceIdentificationModelN9N captures enum value "N9N"
	DeviceIdentificationModelN9N string = "N9N"

	// DeviceIdentificationModelN9S captures enum value "N9S"
	DeviceIdentificationModelN9S string = "N9S"

	// DeviceIdentificationModelLM2 captures enum value "LM2"
	DeviceIdentificationModelLM2 string = "LM2"

	// DeviceIdentificationModelLM5 captures enum value "LM5"
	DeviceIdentificationModelLM5 string = "LM5"

	// DeviceIdentificationModelB2N captures enum value "B2N"
	DeviceIdentificationModelB2N string = "B2N"

	// DeviceIdentificationModelB2T captures enum value "B2T"
	DeviceIdentificationModelB2T string = "B2T"

	// DeviceIdentificationModelB5N captures enum value "B5N"
	DeviceIdentificationModelB5N string = "B5N"

	// DeviceIdentificationModelB5T captures enum value "B5T"
	DeviceIdentificationModelB5T string = "B5T"

	// DeviceIdentificationModelBAC captures enum value "BAC"
	DeviceIdentificationModelBAC string = "BAC"

	// DeviceIdentificationModelAG2 captures enum value "AG2"
	DeviceIdentificationModelAG2 string = "AG2"

	// DeviceIdentificationModelAG2DashHP captures enum value "AG2-HP"
	DeviceIdentificationModelAG2DashHP string = "AG2-HP"

	// DeviceIdentificationModelAG5 captures enum value "AG5"
	DeviceIdentificationModelAG5 string = "AG5"

	// DeviceIdentificationModelAG5DashHP captures enum value "AG5-HP"
	DeviceIdentificationModelAG5DashHP string = "AG5-HP"

	// DeviceIdentificationModelP2N captures enum value "p2N"
	DeviceIdentificationModelP2N string = "p2N"

	// DeviceIdentificationModelP5N captures enum value "p5N"
	DeviceIdentificationModelP5N string = "p5N"

	// DeviceIdentificationModelM25 captures enum value "M25"
	DeviceIdentificationModelM25 string = "M25"

	// DeviceIdentificationModelP2BDash400 captures enum value "P2B-400"
	DeviceIdentificationModelP2BDash400 string = "P2B-400"

	// DeviceIdentificationModelP5BDash300 captures enum value "P5B-300"
	DeviceIdentificationModelP5BDash300 string = "P5B-300"

	// DeviceIdentificationModelP5BDash300DashISO captures enum value "P5B-300-ISO"
	DeviceIdentificationModelP5BDash300DashISO string = "P5B-300-ISO"

	// DeviceIdentificationModelP5BDash400 captures enum value "P5B-400"
	DeviceIdentificationModelP5BDash400 string = "P5B-400"

	// DeviceIdentificationModelP5BDash400DashISO captures enum value "P5B-400-ISO"
	DeviceIdentificationModelP5BDash400DashISO string = "P5B-400-ISO"

	// DeviceIdentificationModelP5BDash620 captures enum value "P5B-620"
	DeviceIdentificationModelP5BDash620 string = "P5B-620"

	// DeviceIdentificationModelLB5Dash120 captures enum value "LB5-120"
	DeviceIdentificationModelLB5Dash120 string = "LB5-120"

	// DeviceIdentificationModelLB5 captures enum value "LB5"
	DeviceIdentificationModelLB5 string = "LB5"

	// DeviceIdentificationModelN5B captures enum value "N5B"
	DeviceIdentificationModelN5B string = "N5B"

	// DeviceIdentificationModelN5BDash16 captures enum value "N5B-16"
	DeviceIdentificationModelN5BDash16 string = "N5B-16"

	// DeviceIdentificationModelN5BDash19 captures enum value "N5B-19"
	DeviceIdentificationModelN5BDash19 string = "N5B-19"

	// DeviceIdentificationModelN5BDash300 captures enum value "N5B-300"
	DeviceIdentificationModelN5BDash300 string = "N5B-300"

	// DeviceIdentificationModelN5BDash400 captures enum value "N5B-400"
	DeviceIdentificationModelN5BDash400 string = "N5B-400"

	// DeviceIdentificationModelN5BDashClient captures enum value "N5B-Client"
	DeviceIdentificationModelN5BDashClient string = "N5B-Client"

	// DeviceIdentificationModelN2B captures enum value "N2B"
	DeviceIdentificationModelN2B string = "N2B"

	// DeviceIdentificationModelN2BDash13 captures enum value "N2B-13"
	DeviceIdentificationModelN2BDash13 string = "N2B-13"

	// DeviceIdentificationModelN2BDash400 captures enum value "N2B-400"
	DeviceIdentificationModelN2BDash400 string = "N2B-400"

	// DeviceIdentificationModelPAP captures enum value "PAP"
	DeviceIdentificationModelPAP string = "PAP"

	// DeviceIdentificationModelLAPDashHP captures enum value "LAP-HP"
	DeviceIdentificationModelLAPDashHP string = "LAP-HP"

	// DeviceIdentificationModelLAP captures enum value "LAP"
	DeviceIdentificationModelLAP string = "LAP"

	// DeviceIdentificationModelAGW captures enum value "AGW"
	DeviceIdentificationModelAGW string = "AGW"

	// DeviceIdentificationModelAGWDashLR captures enum value "AGW-LR"
	DeviceIdentificationModelAGWDashLR string = "AGW-LR"

	// DeviceIdentificationModelAGWDashPro captures enum value "AGW-Pro"
	DeviceIdentificationModelAGWDashPro string = "AGW-Pro"

	// DeviceIdentificationModelAGWDashInstaller captures enum value "AGW-Installer"
	DeviceIdentificationModelAGWDashInstaller string = "AGW-Installer"

	// DeviceIdentificationModelPB5 captures enum value "PB5"
	DeviceIdentificationModelPB5 string = "PB5"

	// DeviceIdentificationModelPB3 captures enum value "PB3"
	DeviceIdentificationModelPB3 string = "PB3"

	// DeviceIdentificationModelP36 captures enum value "P36"
	DeviceIdentificationModelP36 string = "P36"

	// DeviceIdentificationModelPBM10 captures enum value "PBM10"
	DeviceIdentificationModelPBM10 string = "PBM10"

	// DeviceIdentificationModelNB5 captures enum value "NB5"
	DeviceIdentificationModelNB5 string = "NB5"

	// DeviceIdentificationModelNB2 captures enum value "NB2"
	DeviceIdentificationModelNB2 string = "NB2"

	// DeviceIdentificationModelNB3 captures enum value "NB3"
	DeviceIdentificationModelNB3 string = "NB3"

	// DeviceIdentificationModelB36 captures enum value "B36"
	DeviceIdentificationModelB36 string = "B36"

	// DeviceIdentificationModelNB9 captures enum value "NB9"
	DeviceIdentificationModelNB9 string = "NB9"

	// DeviceIdentificationModelSM5 captures enum value "SM5"
	DeviceIdentificationModelSM5 string = "SM5"

	// DeviceIdentificationModelWM5 captures enum value "WM5"
	DeviceIdentificationModelWM5 string = "WM5"

	// DeviceIdentificationModelISDashM5 captures enum value "IS-M5"
	DeviceIdentificationModelISDashM5 string = "IS-M5"

	// DeviceIdentificationModelLoco5AC captures enum value "Loco5AC"
	DeviceIdentificationModelLoco5AC string = "Loco5AC"

	// DeviceIdentificationModelNSDash5AC captures enum value "NS-5AC"
	DeviceIdentificationModelNSDash5AC string = "NS-5AC"

	// DeviceIdentificationModelR5ACDashPTMP captures enum value "R5AC-PTMP"
	DeviceIdentificationModelR5ACDashPTMP string = "R5AC-PTMP"

	// DeviceIdentificationModelR5ACDashPTP captures enum value "R5AC-PTP"
	DeviceIdentificationModelR5ACDashPTP string = "R5AC-PTP"

	// DeviceIdentificationModelR5ACDashLite captures enum value "R5AC-Lite"
	DeviceIdentificationModelR5ACDashLite string = "R5AC-Lite"

	// DeviceIdentificationModelR5ACDashPRISM captures enum value "R5AC-PRISM"
	DeviceIdentificationModelR5ACDashPRISM string = "R5AC-PRISM"

	// DeviceIdentificationModelR2ACDashPrism captures enum value "R2AC-Prism"
	DeviceIdentificationModelR2ACDashPrism string = "R2AC-Prism"

	// DeviceIdentificationModelR2ACDashGen2 captures enum value "R2AC-Gen2"
	DeviceIdentificationModelR2ACDashGen2 string = "R2AC-Gen2"

	// DeviceIdentificationModelRPDash5ACDashGen2 captures enum value "RP-5AC-Gen2"
	DeviceIdentificationModelRPDash5ACDashGen2 string = "RP-5AC-Gen2"

	// DeviceIdentificationModelNBEDash2ACDash13 captures enum value "NBE-2AC-13"
	DeviceIdentificationModelNBEDash2ACDash13 string = "NBE-2AC-13"

	// DeviceIdentificationModelNBEDash5ACDash16 captures enum value "NBE-5AC-16"
	DeviceIdentificationModelNBEDash5ACDash16 string = "NBE-5AC-16"

	// DeviceIdentificationModelNBEDash5ACDash19 captures enum value "NBE-5AC-19"
	DeviceIdentificationModelNBEDash5ACDash19 string = "NBE-5AC-19"

	// DeviceIdentificationModelNBEDash5ACDashGen2 captures enum value "NBE-5AC-Gen2"
	DeviceIdentificationModelNBEDash5ACDashGen2 string = "NBE-5AC-Gen2"

	// DeviceIdentificationModelPBEDash5ACDash300 captures enum value "PBE-5AC-300"
	DeviceIdentificationModelPBEDash5ACDash300 string = "PBE-5AC-300"

	// DeviceIdentificationModelPBEDash5ACDash300DashISO captures enum value "PBE-5AC-300-ISO"
	DeviceIdentificationModelPBEDash5ACDash300DashISO string = "PBE-5AC-300-ISO"

	// DeviceIdentificationModelPBEDash5ACDash400 captures enum value "PBE-5AC-400"
	DeviceIdentificationModelPBEDash5ACDash400 string = "PBE-5AC-400"

	// DeviceIdentificationModelPBEDash5ACDash400DashISO captures enum value "PBE-5AC-400-ISO"
	DeviceIdentificationModelPBEDash5ACDash400DashISO string = "PBE-5AC-400-ISO"

	// DeviceIdentificationModelPBEDash5ACDash500 captures enum value "PBE-5AC-500"
	DeviceIdentificationModelPBEDash5ACDash500 string = "PBE-5AC-500"

	// DeviceIdentificationModelPBEDash5ACDash500DashISO captures enum value "PBE-5AC-500-ISO"
	DeviceIdentificationModelPBEDash5ACDash500DashISO string = "PBE-5AC-500-ISO"

	// DeviceIdentificationModelPBEDash5ACDash620 captures enum value "PBE-5AC-620"
	DeviceIdentificationModelPBEDash5ACDash620 string = "PBE-5AC-620"

	// DeviceIdentificationModelPBEDash5ACDash620DashISO captures enum value "PBE-5AC-620-ISO"
	DeviceIdentificationModelPBEDash5ACDash620DashISO string = "PBE-5AC-620-ISO"

	// DeviceIdentificationModelPBEDash2ACDash400 captures enum value "PBE-2AC-400"
	DeviceIdentificationModelPBEDash2ACDash400 string = "PBE-2AC-400"

	// DeviceIdentificationModelPBEDash2ACDash400DashISO captures enum value "PBE-2AC-400-ISO"
	DeviceIdentificationModelPBEDash2ACDash400DashISO string = "PBE-2AC-400-ISO"

	// DeviceIdentificationModelPBEDash5ACDashXDashGen2 captures enum value "PBE-5AC-X-Gen2"
	DeviceIdentificationModelPBEDash5ACDashXDashGen2 string = "PBE-5AC-X-Gen2"

	// DeviceIdentificationModelPBEDash5ACDashGen2 captures enum value "PBE-5AC-Gen2"
	DeviceIdentificationModelPBEDash5ACDashGen2 string = "PBE-5AC-Gen2"

	// DeviceIdentificationModelPBEDash5ACDashISODashGen2 captures enum value "PBE-5AC-ISO-Gen2"
	DeviceIdentificationModelPBEDash5ACDashISODashGen2 string = "PBE-5AC-ISO-Gen2"

	// DeviceIdentificationModelPBEDash5ACDash400DashISODashGen2 captures enum value "PBE-5AC-400-ISO-Gen2"
	DeviceIdentificationModelPBEDash5ACDash400DashISODashGen2 string = "PBE-5AC-400-ISO-Gen2"

	// DeviceIdentificationModelLBEDash5ACDash16Dash120 captures enum value "LBE-5AC-16-120"
	DeviceIdentificationModelLBEDash5ACDash16Dash120 string = "LBE-5AC-16-120"

	// DeviceIdentificationModelLAPDash120 captures enum value "LAP-120"
	DeviceIdentificationModelLAPDash120 string = "LAP-120"

	// DeviceIdentificationModelLBEDash5ACDash23 captures enum value "LBE-5AC-23"
	DeviceIdentificationModelLBEDash5ACDash23 string = "LBE-5AC-23"

	// DeviceIdentificationModelLBEDash5ACDashGen2 captures enum value "LBE-5AC-Gen2"
	DeviceIdentificationModelLBEDash5ACDashGen2 string = "LBE-5AC-Gen2"

	// DeviceIdentificationModelLBEDash5ACDashLR captures enum value "LBE-5AC-LR"
	DeviceIdentificationModelLBEDash5ACDashLR string = "LBE-5AC-LR"

	// DeviceIdentificationModelLAPDashGPS captures enum value "LAP-GPS"
	DeviceIdentificationModelLAPDashGPS string = "LAP-GPS"

	// DeviceIdentificationModelISDash5AC captures enum value "IS-5AC"
	DeviceIdentificationModelISDash5AC string = "IS-5AC"

	// DeviceIdentificationModelPSDash5AC captures enum value "PS-5AC"
	DeviceIdentificationModelPSDash5AC string = "PS-5AC"

	// DeviceIdentificationModelSolarSwitch captures enum value "SolarSwitch"
	DeviceIdentificationModelSolarSwitch string = "SolarSwitch"

	// DeviceIdentificationModelSolarPoint captures enum value "SolarPoint"
	DeviceIdentificationModelSolarPoint string = "SolarPoint"

	// DeviceIdentificationModelBulletACDashIP67 captures enum value "BulletAC-IP67"
	DeviceIdentificationModelBulletACDashIP67 string = "BulletAC-IP67"

	// DeviceIdentificationModelBDashDBDashAC captures enum value "B-DB-AC"
	DeviceIdentificationModelBDashDBDashAC string = "B-DB-AC"

	// DeviceIdentificationModelUNKNOWN captures enum value "UNKNOWN"
	DeviceIdentificationModelUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *DeviceIdentification) validateModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	// value enum
	if err := m.validateModelEnum("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypePlatformNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UFiber NanoG","UFiber Loco","UFiber Wifi","UFiber Instant","UISPRPro","UISPRLite","UISPS","UISPSPro","UNMSS","UISPLTE","UISPPLite","e50","e100","e200","e300","e600","e1000","u50","u100","u200","u300","u1000","ESWH","ESGH","ES","ESX","EP","EPX","SW","ACB","WA","2WA","XC","2XC","XW","XM","TI","GBE","AirGW","AirGWP","AF","AF02","AF06","AF07","AF08","AF09","af5xhd","afltu","lturocket","GP","ltu60","SunMax","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypePlatformNamePropEnum = append(deviceIdentificationTypePlatformNamePropEnum, v)
	}
}

const (

	// DeviceIdentificationPlatformNameUFiberNanoG captures enum value "UFiber NanoG"
	DeviceIdentificationPlatformNameUFiberNanoG string = "UFiber NanoG"

	// DeviceIdentificationPlatformNameUFiberLoco captures enum value "UFiber Loco"
	DeviceIdentificationPlatformNameUFiberLoco string = "UFiber Loco"

	// DeviceIdentificationPlatformNameUFiberWifi captures enum value "UFiber Wifi"
	DeviceIdentificationPlatformNameUFiberWifi string = "UFiber Wifi"

	// DeviceIdentificationPlatformNameUFiberInstant captures enum value "UFiber Instant"
	DeviceIdentificationPlatformNameUFiberInstant string = "UFiber Instant"

	// DeviceIdentificationPlatformNameUISPRPro captures enum value "UISPRPro"
	DeviceIdentificationPlatformNameUISPRPro string = "UISPRPro"

	// DeviceIdentificationPlatformNameUISPRLite captures enum value "UISPRLite"
	DeviceIdentificationPlatformNameUISPRLite string = "UISPRLite"

	// DeviceIdentificationPlatformNameUISPS captures enum value "UISPS"
	DeviceIdentificationPlatformNameUISPS string = "UISPS"

	// DeviceIdentificationPlatformNameUISPSPro captures enum value "UISPSPro"
	DeviceIdentificationPlatformNameUISPSPro string = "UISPSPro"

	// DeviceIdentificationPlatformNameUNMSS captures enum value "UNMSS"
	DeviceIdentificationPlatformNameUNMSS string = "UNMSS"

	// DeviceIdentificationPlatformNameUISPLTE captures enum value "UISPLTE"
	DeviceIdentificationPlatformNameUISPLTE string = "UISPLTE"

	// DeviceIdentificationPlatformNameUISPPLite captures enum value "UISPPLite"
	DeviceIdentificationPlatformNameUISPPLite string = "UISPPLite"

	// DeviceIdentificationPlatformNameE50 captures enum value "e50"
	DeviceIdentificationPlatformNameE50 string = "e50"

	// DeviceIdentificationPlatformNameE100 captures enum value "e100"
	DeviceIdentificationPlatformNameE100 string = "e100"

	// DeviceIdentificationPlatformNameE200 captures enum value "e200"
	DeviceIdentificationPlatformNameE200 string = "e200"

	// DeviceIdentificationPlatformNameE300 captures enum value "e300"
	DeviceIdentificationPlatformNameE300 string = "e300"

	// DeviceIdentificationPlatformNameE600 captures enum value "e600"
	DeviceIdentificationPlatformNameE600 string = "e600"

	// DeviceIdentificationPlatformNameE1000 captures enum value "e1000"
	DeviceIdentificationPlatformNameE1000 string = "e1000"

	// DeviceIdentificationPlatformNameU50 captures enum value "u50"
	DeviceIdentificationPlatformNameU50 string = "u50"

	// DeviceIdentificationPlatformNameU100 captures enum value "u100"
	DeviceIdentificationPlatformNameU100 string = "u100"

	// DeviceIdentificationPlatformNameU200 captures enum value "u200"
	DeviceIdentificationPlatformNameU200 string = "u200"

	// DeviceIdentificationPlatformNameU300 captures enum value "u300"
	DeviceIdentificationPlatformNameU300 string = "u300"

	// DeviceIdentificationPlatformNameU1000 captures enum value "u1000"
	DeviceIdentificationPlatformNameU1000 string = "u1000"

	// DeviceIdentificationPlatformNameESWH captures enum value "ESWH"
	DeviceIdentificationPlatformNameESWH string = "ESWH"

	// DeviceIdentificationPlatformNameESGH captures enum value "ESGH"
	DeviceIdentificationPlatformNameESGH string = "ESGH"

	// DeviceIdentificationPlatformNameES captures enum value "ES"
	DeviceIdentificationPlatformNameES string = "ES"

	// DeviceIdentificationPlatformNameESX captures enum value "ESX"
	DeviceIdentificationPlatformNameESX string = "ESX"

	// DeviceIdentificationPlatformNameEP captures enum value "EP"
	DeviceIdentificationPlatformNameEP string = "EP"

	// DeviceIdentificationPlatformNameEPX captures enum value "EPX"
	DeviceIdentificationPlatformNameEPX string = "EPX"

	// DeviceIdentificationPlatformNameSW captures enum value "SW"
	DeviceIdentificationPlatformNameSW string = "SW"

	// DeviceIdentificationPlatformNameACB captures enum value "ACB"
	DeviceIdentificationPlatformNameACB string = "ACB"

	// DeviceIdentificationPlatformNameWA captures enum value "WA"
	DeviceIdentificationPlatformNameWA string = "WA"

	// DeviceIdentificationPlatformNameNr2WA captures enum value "2WA"
	DeviceIdentificationPlatformNameNr2WA string = "2WA"

	// DeviceIdentificationPlatformNameXC captures enum value "XC"
	DeviceIdentificationPlatformNameXC string = "XC"

	// DeviceIdentificationPlatformNameNr2XC captures enum value "2XC"
	DeviceIdentificationPlatformNameNr2XC string = "2XC"

	// DeviceIdentificationPlatformNameXW captures enum value "XW"
	DeviceIdentificationPlatformNameXW string = "XW"

	// DeviceIdentificationPlatformNameXM captures enum value "XM"
	DeviceIdentificationPlatformNameXM string = "XM"

	// DeviceIdentificationPlatformNameTI captures enum value "TI"
	DeviceIdentificationPlatformNameTI string = "TI"

	// DeviceIdentificationPlatformNameGBE captures enum value "GBE"
	DeviceIdentificationPlatformNameGBE string = "GBE"

	// DeviceIdentificationPlatformNameAirGW captures enum value "AirGW"
	DeviceIdentificationPlatformNameAirGW string = "AirGW"

	// DeviceIdentificationPlatformNameAirGWP captures enum value "AirGWP"
	DeviceIdentificationPlatformNameAirGWP string = "AirGWP"

	// DeviceIdentificationPlatformNameAF captures enum value "AF"
	DeviceIdentificationPlatformNameAF string = "AF"

	// DeviceIdentificationPlatformNameAF02 captures enum value "AF02"
	DeviceIdentificationPlatformNameAF02 string = "AF02"

	// DeviceIdentificationPlatformNameAF06 captures enum value "AF06"
	DeviceIdentificationPlatformNameAF06 string = "AF06"

	// DeviceIdentificationPlatformNameAF07 captures enum value "AF07"
	DeviceIdentificationPlatformNameAF07 string = "AF07"

	// DeviceIdentificationPlatformNameAF08 captures enum value "AF08"
	DeviceIdentificationPlatformNameAF08 string = "AF08"

	// DeviceIdentificationPlatformNameAF09 captures enum value "AF09"
	DeviceIdentificationPlatformNameAF09 string = "AF09"

	// DeviceIdentificationPlatformNameAf5xhd captures enum value "af5xhd"
	DeviceIdentificationPlatformNameAf5xhd string = "af5xhd"

	// DeviceIdentificationPlatformNameAfltu captures enum value "afltu"
	DeviceIdentificationPlatformNameAfltu string = "afltu"

	// DeviceIdentificationPlatformNameLturocket captures enum value "lturocket"
	DeviceIdentificationPlatformNameLturocket string = "lturocket"

	// DeviceIdentificationPlatformNameGP captures enum value "GP"
	DeviceIdentificationPlatformNameGP string = "GP"

	// DeviceIdentificationPlatformNameLtu60 captures enum value "ltu60"
	DeviceIdentificationPlatformNameLtu60 string = "ltu60"

	// DeviceIdentificationPlatformNameSunMax captures enum value "SunMax"
	DeviceIdentificationPlatformNameSunMax string = "SunMax"

	// DeviceIdentificationPlatformNameUNKNOWN captures enum value "UNKNOWN"
	DeviceIdentificationPlatformNameUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *DeviceIdentification) validatePlatformNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypePlatformNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validatePlatformName(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformName) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformNameEnum("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeRolePropEnum = append(deviceIdentificationTypeRolePropEnum, v)
	}
}

const (

	// DeviceIdentificationRoleRouter captures enum value "router"
	DeviceIdentificationRoleRouter string = "router"

	// DeviceIdentificationRoleSwitch captures enum value "switch"
	DeviceIdentificationRoleSwitch string = "switch"

	// DeviceIdentificationRoleGpon captures enum value "gpon"
	DeviceIdentificationRoleGpon string = "gpon"

	// DeviceIdentificationRoleAp captures enum value "ap"
	DeviceIdentificationRoleAp string = "ap"

	// DeviceIdentificationRoleStation captures enum value "station"
	DeviceIdentificationRoleStation string = "station"

	// DeviceIdentificationRoleOther captures enum value "other"
	DeviceIdentificationRoleOther string = "other"

	// DeviceIdentificationRoleUps captures enum value "ups"
	DeviceIdentificationRoleUps string = "ups"

	// DeviceIdentificationRoleServer captures enum value "server"
	DeviceIdentificationRoleServer string = "server"

	// DeviceIdentificationRoleWireless captures enum value "wireless"
	DeviceIdentificationRoleWireless string = "wireless"

	// DeviceIdentificationRoleConvertor captures enum value "convertor"
	DeviceIdentificationRoleConvertor string = "convertor"

	// DeviceIdentificationRoleGateway captures enum value "gateway"
	DeviceIdentificationRoleGateway string = "gateway"
)

// prop value enum
func (m *DeviceIdentification) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceIdentification) validateStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","connecting","discovered","inactive","disabled","disconnected","unauthorized","proposed","unknown","unplaced","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeStatusPropEnum = append(deviceIdentificationTypeStatusPropEnum, v)
	}
}

const (

	// DeviceIdentificationStatusActive captures enum value "active"
	DeviceIdentificationStatusActive string = "active"

	// DeviceIdentificationStatusConnecting captures enum value "connecting"
	DeviceIdentificationStatusConnecting string = "connecting"

	// DeviceIdentificationStatusDiscovered captures enum value "discovered"
	DeviceIdentificationStatusDiscovered string = "discovered"

	// DeviceIdentificationStatusInactive captures enum value "inactive"
	DeviceIdentificationStatusInactive string = "inactive"

	// DeviceIdentificationStatusDisabled captures enum value "disabled"
	DeviceIdentificationStatusDisabled string = "disabled"

	// DeviceIdentificationStatusDisconnected captures enum value "disconnected"
	DeviceIdentificationStatusDisconnected string = "disconnected"

	// DeviceIdentificationStatusUnauthorized captures enum value "unauthorized"
	DeviceIdentificationStatusUnauthorized string = "unauthorized"

	// DeviceIdentificationStatusProposed captures enum value "proposed"
	DeviceIdentificationStatusProposed string = "proposed"

	// DeviceIdentificationStatusUnknown captures enum value "unknown"
	DeviceIdentificationStatusUnknown string = "unknown"

	// DeviceIdentificationStatusUnplaced captures enum value "unplaced"
	DeviceIdentificationStatusUnplaced string = "unplaced"

	// DeviceIdentificationStatusCustom captures enum value "custom"
	DeviceIdentificationStatusCustom string = "custom"
)

// prop value enum
func (m *DeviceIdentification) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["onu","olt","uispp","uispr","uisps","uispLte","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","wave","blackBox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeTypePropEnum = append(deviceIdentificationTypeTypePropEnum, v)
	}
}

const (

	// DeviceIdentificationTypeOnu captures enum value "onu"
	DeviceIdentificationTypeOnu string = "onu"

	// DeviceIdentificationTypeOlt captures enum value "olt"
	DeviceIdentificationTypeOlt string = "olt"

	// DeviceIdentificationTypeUispp captures enum value "uispp"
	DeviceIdentificationTypeUispp string = "uispp"

	// DeviceIdentificationTypeUispr captures enum value "uispr"
	DeviceIdentificationTypeUispr string = "uispr"

	// DeviceIdentificationTypeUisps captures enum value "uisps"
	DeviceIdentificationTypeUisps string = "uisps"

	// DeviceIdentificationTypeUispLte captures enum value "uispLte"
	DeviceIdentificationTypeUispLte string = "uispLte"

	// DeviceIdentificationTypeErouter captures enum value "erouter"
	DeviceIdentificationTypeErouter string = "erouter"

	// DeviceIdentificationTypeEswitch captures enum value "eswitch"
	DeviceIdentificationTypeEswitch string = "eswitch"

	// DeviceIdentificationTypeEpower captures enum value "epower"
	DeviceIdentificationTypeEpower string = "epower"

	// DeviceIdentificationTypeAirCube captures enum value "airCube"
	DeviceIdentificationTypeAirCube string = "airCube"

	// DeviceIdentificationTypeAirMax captures enum value "airMax"
	DeviceIdentificationTypeAirMax string = "airMax"

	// DeviceIdentificationTypeAirFiber captures enum value "airFiber"
	DeviceIdentificationTypeAirFiber string = "airFiber"

	// DeviceIdentificationTypeToughSwitch captures enum value "toughSwitch"
	DeviceIdentificationTypeToughSwitch string = "toughSwitch"

	// DeviceIdentificationTypeSolarBeam captures enum value "solarBeam"
	DeviceIdentificationTypeSolarBeam string = "solarBeam"

	// DeviceIdentificationTypeWave captures enum value "wave"
	DeviceIdentificationTypeWave string = "wave"

	// DeviceIdentificationTypeBlackBox captures enum value "blackBox"
	DeviceIdentificationTypeBlackBox string = "blackBox"
)

// prop value enum
func (m *DeviceIdentification) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this device identification based on the context it is used
func (m *DeviceIdentification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceIdentification) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {
		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceIdentification) UnmarshalBinary(b []byte) error {
	var res DeviceIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
