// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model84 model 84
//
// swagger:model Model 84
type Model84 struct {

	// device ids
	// Required: true
	DeviceIds DeviceIds5 `json:"deviceIds"`

	// https port
	// Maximum: 65535
	// Minimum: 0
	HTTPSPort *int64 `json:"httpsPort,omitempty"`

	// password
	// Required: true
	Password *string `json:"password"`

	// replace existing black box
	ReplaceExistingBlackBox *bool `json:"replaceExistingBlackBox,omitempty"`

	// use unstable firmware
	UseUnstableFirmware *bool `json:"useUnstableFirmware,omitempty"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this model 84
func (m *Model84) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model84) validateDeviceIds(formats strfmt.Registry) error {

	if err := validate.Required("deviceIds", "body", m.DeviceIds); err != nil {
		return err
	}

	if err := m.DeviceIds.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceIds")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceIds")
		}
		return err
	}

	return nil
}

func (m *Model84) validateHTTPSPort(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPSPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("httpsPort", "body", *m.HTTPSPort, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("httpsPort", "body", *m.HTTPSPort, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *Model84) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *Model84) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 84 based on the context it is used
func (m *Model84) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model84) contextValidateDeviceIds(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceIds.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceIds")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceIds")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model84) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model84) UnmarshalBinary(b []byte) error {
	var res Model84
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
