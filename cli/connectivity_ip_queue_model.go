// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for ConnectivityIPQueue

// register flags to command
func registerModelConnectivityIPQueueFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConnectivityIPQueueClientsDownloadSpeedSum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectivityIPQueueClientsUploadSpeedSum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectivityIPQueueDownloadSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectivityIPQueueInterfaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConnectivityIPQueueUploadSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConnectivityIPQueueClientsDownloadSpeedSum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientsDownloadSpeedSumDescription := `Sum of all client sites traffic shaping download values in kbps.`

	var clientsDownloadSpeedSumFlagName string
	if cmdPrefix == "" {
		clientsDownloadSpeedSumFlagName = "clientsDownloadSpeedSum"
	} else {
		clientsDownloadSpeedSumFlagName = fmt.Sprintf("%v.clientsDownloadSpeedSum", cmdPrefix)
	}

	var clientsDownloadSpeedSumFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clientsDownloadSpeedSumFlagName, clientsDownloadSpeedSumFlagDefault, clientsDownloadSpeedSumDescription)

	return nil
}

func registerConnectivityIPQueueClientsUploadSpeedSum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientsUploadSpeedSumDescription := `Sum of all client sites traffic shaping upload values in kbps.`

	var clientsUploadSpeedSumFlagName string
	if cmdPrefix == "" {
		clientsUploadSpeedSumFlagName = "clientsUploadSpeedSum"
	} else {
		clientsUploadSpeedSumFlagName = fmt.Sprintf("%v.clientsUploadSpeedSum", cmdPrefix)
	}

	var clientsUploadSpeedSumFlagDefault int64

	_ = cmd.PersistentFlags().Int64(clientsUploadSpeedSumFlagName, clientsUploadSpeedSumFlagDefault, clientsUploadSpeedSumDescription)

	return nil
}

func registerConnectivityIPQueueDownloadSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downloadSpeedDescription := `Required. Max speed given in kbps. If 0 value is configured then ingress traffic for this tariff is blocked. If null, no maximum speed is assumed.`

	var downloadSpeedFlagName string
	if cmdPrefix == "" {
		downloadSpeedFlagName = "downloadSpeed"
	} else {
		downloadSpeedFlagName = fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
	}

	var downloadSpeedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downloadSpeedFlagName, downloadSpeedFlagDefault, downloadSpeedDescription)

	return nil
}

func registerConnectivityIPQueueInterfaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceIdDescription := `Required. Interface name, for example eth0 which handles connectivity to WAN network. If null, speed limits are applied on all interfaces.`

	var interfaceIdFlagName string
	if cmdPrefix == "" {
		interfaceIdFlagName = "interfaceId"
	} else {
		interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
	}

	var interfaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceIdFlagName, interfaceIdFlagDefault, interfaceIdDescription)

	return nil
}

func registerConnectivityIPQueueUploadSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uploadSpeedDescription := `Required. Max speed given in kbps. If 0 value is configured then egress traffic for this tariff is blocked. If null, no maximum speed is assumed.`

	var uploadSpeedFlagName string
	if cmdPrefix == "" {
		uploadSpeedFlagName = "uploadSpeed"
	} else {
		uploadSpeedFlagName = fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
	}

	var uploadSpeedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uploadSpeedFlagName, uploadSpeedFlagDefault, uploadSpeedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConnectivityIPQueueFlags(depth int, m *models.ConnectivityIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clientsDownloadSpeedSumAdded := retrieveConnectivityIPQueueClientsDownloadSpeedSumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientsDownloadSpeedSumAdded

	err, clientsUploadSpeedSumAdded := retrieveConnectivityIPQueueClientsUploadSpeedSumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientsUploadSpeedSumAdded

	err, downloadSpeedAdded := retrieveConnectivityIPQueueDownloadSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downloadSpeedAdded

	err, interfaceIdAdded := retrieveConnectivityIPQueueInterfaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceIdAdded

	err, uploadSpeedAdded := retrieveConnectivityIPQueueUploadSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadSpeedAdded

	return nil, retAdded
}

func retrieveConnectivityIPQueueClientsDownloadSpeedSumFlags(depth int, m *models.ConnectivityIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientsDownloadSpeedSumFlagName := fmt.Sprintf("%v.clientsDownloadSpeedSum", cmdPrefix)
	if cmd.Flags().Changed(clientsDownloadSpeedSumFlagName) {

		var clientsDownloadSpeedSumFlagName string
		if cmdPrefix == "" {
			clientsDownloadSpeedSumFlagName = "clientsDownloadSpeedSum"
		} else {
			clientsDownloadSpeedSumFlagName = fmt.Sprintf("%v.clientsDownloadSpeedSum", cmdPrefix)
		}

		clientsDownloadSpeedSumFlagValue, err := cmd.Flags().GetInt64(clientsDownloadSpeedSumFlagName)
		if err != nil {
			return err, false
		}
		m.ClientsDownloadSpeedSum = &clientsDownloadSpeedSumFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectivityIPQueueClientsUploadSpeedSumFlags(depth int, m *models.ConnectivityIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientsUploadSpeedSumFlagName := fmt.Sprintf("%v.clientsUploadSpeedSum", cmdPrefix)
	if cmd.Flags().Changed(clientsUploadSpeedSumFlagName) {

		var clientsUploadSpeedSumFlagName string
		if cmdPrefix == "" {
			clientsUploadSpeedSumFlagName = "clientsUploadSpeedSum"
		} else {
			clientsUploadSpeedSumFlagName = fmt.Sprintf("%v.clientsUploadSpeedSum", cmdPrefix)
		}

		clientsUploadSpeedSumFlagValue, err := cmd.Flags().GetInt64(clientsUploadSpeedSumFlagName)
		if err != nil {
			return err, false
		}
		m.ClientsUploadSpeedSum = &clientsUploadSpeedSumFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectivityIPQueueDownloadSpeedFlags(depth int, m *models.ConnectivityIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downloadSpeedFlagName := fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
	if cmd.Flags().Changed(downloadSpeedFlagName) {

		var downloadSpeedFlagName string
		if cmdPrefix == "" {
			downloadSpeedFlagName = "downloadSpeed"
		} else {
			downloadSpeedFlagName = fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
		}

		downloadSpeedFlagValue, err := cmd.Flags().GetInt64(downloadSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.DownloadSpeed = &downloadSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectivityIPQueueInterfaceIDFlags(depth int, m *models.ConnectivityIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceIdFlagName := fmt.Sprintf("%v.interfaceId", cmdPrefix)
	if cmd.Flags().Changed(interfaceIdFlagName) {

		var interfaceIdFlagName string
		if cmdPrefix == "" {
			interfaceIdFlagName = "interfaceId"
		} else {
			interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
		}

		interfaceIdFlagValue, err := cmd.Flags().GetString(interfaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.InterfaceID = &interfaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConnectivityIPQueueUploadSpeedFlags(depth int, m *models.ConnectivityIPQueue, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadSpeedFlagName := fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
	if cmd.Flags().Changed(uploadSpeedFlagName) {

		var uploadSpeedFlagName string
		if cmdPrefix == "" {
			uploadSpeedFlagName = "uploadSpeed"
		} else {
			uploadSpeedFlagName = fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
		}

		uploadSpeedFlagValue, err := cmd.Flags().GetInt64(uploadSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.UploadSpeed = &uploadSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
