// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Site3

// register flags to command
func registerModelSite3Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSite3All(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSite3ReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSite3ReadWrite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSite3All(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allDescription := `Required. Number of sites with read access.`

	var allFlagName string
	if cmdPrefix == "" {
		allFlagName = "all"
	} else {
		allFlagName = fmt.Sprintf("%v.all", cmdPrefix)
	}

	var allFlagDefault float64

	_ = cmd.PersistentFlags().Float64(allFlagName, allFlagDefault, allDescription)

	return nil
}

func registerSite3ReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readOnlyDescription := `Required. Number of sites with read-only access.`

	var readOnlyFlagName string
	if cmdPrefix == "" {
		readOnlyFlagName = "readOnly"
	} else {
		readOnlyFlagName = fmt.Sprintf("%v.readOnly", cmdPrefix)
	}

	var readOnlyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(readOnlyFlagName, readOnlyFlagDefault, readOnlyDescription)

	return nil
}

func registerSite3ReadWrite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readWriteDescription := `Required. Number of sites with read-write access.`

	var readWriteFlagName string
	if cmdPrefix == "" {
		readWriteFlagName = "readWrite"
	} else {
		readWriteFlagName = fmt.Sprintf("%v.readWrite", cmdPrefix)
	}

	var readWriteFlagDefault float64

	_ = cmd.PersistentFlags().Float64(readWriteFlagName, readWriteFlagDefault, readWriteDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSite3Flags(depth int, m *models.Site3, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allAdded := retrieveSite3AllFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allAdded

	err, readOnlyAdded := retrieveSite3ReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded

	err, readWriteAdded := retrieveSite3ReadWriteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readWriteAdded

	return nil, retAdded
}

func retrieveSite3AllFlags(depth int, m *models.Site3, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allFlagName := fmt.Sprintf("%v.all", cmdPrefix)
	if cmd.Flags().Changed(allFlagName) {

		var allFlagName string
		if cmdPrefix == "" {
			allFlagName = "all"
		} else {
			allFlagName = fmt.Sprintf("%v.all", cmdPrefix)
		}

		allFlagValue, err := cmd.Flags().GetFloat64(allFlagName)
		if err != nil {
			return err, false
		}
		m.All = &allFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSite3ReadOnlyFlags(depth int, m *models.Site3, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyFlagName := fmt.Sprintf("%v.readOnly", cmdPrefix)
	if cmd.Flags().Changed(readOnlyFlagName) {

		var readOnlyFlagName string
		if cmdPrefix == "" {
			readOnlyFlagName = "readOnly"
		} else {
			readOnlyFlagName = fmt.Sprintf("%v.readOnly", cmdPrefix)
		}

		readOnlyFlagValue, err := cmd.Flags().GetFloat64(readOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = &readOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSite3ReadWriteFlags(depth int, m *models.Site3, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readWriteFlagName := fmt.Sprintf("%v.readWrite", cmdPrefix)
	if cmd.Flags().Changed(readWriteFlagName) {

		var readWriteFlagName string
		if cmdPrefix == "" {
			readWriteFlagName = "readWrite"
		} else {
			readWriteFlagName = fmt.Sprintf("%v.readWrite", cmdPrefix)
		}

		readWriteFlagValue, err := cmd.Flags().GetFloat64(readWriteFlagName)
		if err != nil {
			return err, false
		}
		m.ReadWrite = &readWriteFlagValue

		retAdded = true
	}

	return nil, retAdded
}
