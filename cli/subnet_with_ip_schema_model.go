// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for SubnetWithIPSchema

// register flags to command
func registerModelSubnetWithIPSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSubnetWithIPSchemaIps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubnetWithIPSchemaSubnet(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSubnetWithIPSchemaIps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ips Ips array type is not supported by go-swagger cli yet

	return nil
}

func registerSubnetWithIPSchemaSubnet(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subnetDescription := `IP subnet in cidr notation`

	var subnetFlagName string
	if cmdPrefix == "" {
		subnetFlagName = "subnet"
	} else {
		subnetFlagName = fmt.Sprintf("%v.subnet", cmdPrefix)
	}

	var subnetFlagDefault string

	_ = cmd.PersistentFlags().String(subnetFlagName, subnetFlagDefault, subnetDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSubnetWithIPSchemaFlags(depth int, m *models.SubnetWithIPSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ipsAdded := retrieveSubnetWithIPSchemaIpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipsAdded

	err, subnetAdded := retrieveSubnetWithIPSchemaSubnetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subnetAdded

	return nil, retAdded
}

func retrieveSubnetWithIPSchemaIpsFlags(depth int, m *models.SubnetWithIPSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipsFlagName := fmt.Sprintf("%v.ips", cmdPrefix)
	if cmd.Flags().Changed(ipsFlagName) {
		// warning: ips array type Ips is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSubnetWithIPSchemaSubnetFlags(depth int, m *models.SubnetWithIPSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subnetFlagName := fmt.Sprintf("%v.subnet", cmdPrefix)
	if cmd.Flags().Changed(subnetFlagName) {

		var subnetFlagName string
		if cmdPrefix == "" {
			subnetFlagName = "subnet"
		} else {
			subnetFlagName = fmt.Sprintf("%v.subnet", cmdPrefix)
		}

		subnetFlagValue, err := cmd.Flags().GetString(subnetFlagName)
		if err != nil {
			return err, false
		}
		m.Subnet = subnetFlagValue

		retAdded = true
	}

	return nil, retAdded
}
