// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Aggregation1

// register flags to command
func registerModelAggregation1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAggregation1AllCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAggregation1OutageCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAggregation1UnreachableCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAggregation1AllCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allCountDescription := ``

	var allCountFlagName string
	if cmdPrefix == "" {
		allCountFlagName = "allCount"
	} else {
		allCountFlagName = fmt.Sprintf("%v.allCount", cmdPrefix)
	}

	var allCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(allCountFlagName, allCountFlagDefault, allCountDescription)

	return nil
}

func registerAggregation1OutageCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	outageCountDescription := ``

	var outageCountFlagName string
	if cmdPrefix == "" {
		outageCountFlagName = "outageCount"
	} else {
		outageCountFlagName = fmt.Sprintf("%v.outageCount", cmdPrefix)
	}

	var outageCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(outageCountFlagName, outageCountFlagDefault, outageCountDescription)

	return nil
}

func registerAggregation1UnreachableCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unreachableCountDescription := ``

	var unreachableCountFlagName string
	if cmdPrefix == "" {
		unreachableCountFlagName = "unreachableCount"
	} else {
		unreachableCountFlagName = fmt.Sprintf("%v.unreachableCount", cmdPrefix)
	}

	var unreachableCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(unreachableCountFlagName, unreachableCountFlagDefault, unreachableCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAggregation1Flags(depth int, m *models.Aggregation1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allCountAdded := retrieveAggregation1AllCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allCountAdded

	err, outageCountAdded := retrieveAggregation1OutageCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outageCountAdded

	err, unreachableCountAdded := retrieveAggregation1UnreachableCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unreachableCountAdded

	return nil, retAdded
}

func retrieveAggregation1AllCountFlags(depth int, m *models.Aggregation1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allCountFlagName := fmt.Sprintf("%v.allCount", cmdPrefix)
	if cmd.Flags().Changed(allCountFlagName) {

		var allCountFlagName string
		if cmdPrefix == "" {
			allCountFlagName = "allCount"
		} else {
			allCountFlagName = fmt.Sprintf("%v.allCount", cmdPrefix)
		}

		allCountFlagValue, err := cmd.Flags().GetFloat64(allCountFlagName)
		if err != nil {
			return err, false
		}
		m.AllCount = allCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAggregation1OutageCountFlags(depth int, m *models.Aggregation1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outageCountFlagName := fmt.Sprintf("%v.outageCount", cmdPrefix)
	if cmd.Flags().Changed(outageCountFlagName) {

		var outageCountFlagName string
		if cmdPrefix == "" {
			outageCountFlagName = "outageCount"
		} else {
			outageCountFlagName = fmt.Sprintf("%v.outageCount", cmdPrefix)
		}

		outageCountFlagValue, err := cmd.Flags().GetFloat64(outageCountFlagName)
		if err != nil {
			return err, false
		}
		m.OutageCount = outageCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAggregation1UnreachableCountFlags(depth int, m *models.Aggregation1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unreachableCountFlagName := fmt.Sprintf("%v.unreachableCount", cmdPrefix)
	if cmd.Flags().Changed(unreachableCountFlagName) {

		var unreachableCountFlagName string
		if cmdPrefix == "" {
			unreachableCountFlagName = "unreachableCount"
		} else {
			unreachableCountFlagName = fmt.Sprintf("%v.unreachableCount", cmdPrefix)
		}

		unreachableCountFlagValue, err := cmd.Flags().GetFloat64(unreachableCountFlagName)
		if err != nil {
			return err, false
		}
		m.UnreachableCount = unreachableCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
