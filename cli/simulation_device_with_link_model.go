// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for SimulationDeviceWithLink

// register flags to command
func registerModelSimulationDeviceWithLinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSimulationDeviceWithLinkAltitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkAntenna(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkApType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkColor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkCoverageCpeHeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkDeviceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkDeviceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkEirp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkHeading(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkHeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkLatitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkLink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkLongitude(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkRadius(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSimulationDeviceWithLinkUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkAltitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	altitudeDescription := `Required. `

	var altitudeFlagName string
	if cmdPrefix == "" {
		altitudeFlagName = "altitude"
	} else {
		altitudeFlagName = fmt.Sprintf("%v.altitude", cmdPrefix)
	}

	var altitudeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(altitudeFlagName, altitudeFlagDefault, altitudeDescription)

	return nil
}

func registerSimulationDeviceWithLinkAntenna(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var antennaFlagName string
	if cmdPrefix == "" {
		antennaFlagName = "antenna"
	} else {
		antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
	}

	if err := registerModelAntenna2Flags(depth+1, antennaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkApType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apTypeDescription := `Enum: ["ptp","ptmp"]. Required. `

	var apTypeFlagName string
	if cmdPrefix == "" {
		apTypeFlagName = "apType"
	} else {
		apTypeFlagName = fmt.Sprintf("%v.apType", cmdPrefix)
	}

	var apTypeFlagDefault string

	_ = cmd.PersistentFlags().String(apTypeFlagName, apTypeFlagDefault, apTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(apTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ptp","ptmp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := `Enum: [0]. Required. `

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	if err := cmd.RegisterFlagCompletionFunc(channelWidthFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkColor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	colorDescription := `Required. `

	var colorFlagName string
	if cmdPrefix == "" {
		colorFlagName = "color"
	} else {
		colorFlagName = fmt.Sprintf("%v.color", cmdPrefix)
	}

	var colorFlagDefault string

	_ = cmd.PersistentFlags().String(colorFlagName, colorFlagDefault, colorDescription)

	return nil
}

func registerSimulationDeviceWithLinkCoverageCpeHeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	coverageCpeHeightDescription := `Enum: [0]. Required. `

	var coverageCpeHeightFlagName string
	if cmdPrefix == "" {
		coverageCpeHeightFlagName = "coverageCpeHeight"
	} else {
		coverageCpeHeightFlagName = fmt.Sprintf("%v.coverageCpeHeight", cmdPrefix)
	}

	var coverageCpeHeightFlagDefault float64

	_ = cmd.PersistentFlags().Float64(coverageCpeHeightFlagName, coverageCpeHeightFlagDefault, coverageCpeHeightDescription)

	if err := cmd.RegisterFlagCompletionFunc(coverageCpeHeightFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive createdAt strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerSimulationDeviceWithLinkDeviceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceIdDescription := `Required. `

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}

func registerSimulationDeviceWithLinkDeviceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceNameDescription := `Required. `

	var deviceNameFlagName string
	if cmdPrefix == "" {
		deviceNameFlagName = "deviceName"
	} else {
		deviceNameFlagName = fmt.Sprintf("%v.deviceName", cmdPrefix)
	}

	var deviceNameFlagDefault string

	_ = cmd.PersistentFlags().String(deviceNameFlagName, deviceNameFlagDefault, deviceNameDescription)

	return nil
}

func registerSimulationDeviceWithLinkEirp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eirpDescription := `Enum: [0]. Required. `

	var eirpFlagName string
	if cmdPrefix == "" {
		eirpFlagName = "eirp"
	} else {
		eirpFlagName = fmt.Sprintf("%v.eirp", cmdPrefix)
	}

	var eirpFlagDefault int64

	_ = cmd.PersistentFlags().Int64(eirpFlagName, eirpFlagDefault, eirpDescription)

	if err := cmd.RegisterFlagCompletionFunc(eirpFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := `Enum: [0]. Required. `

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault int64

	_ = cmd.PersistentFlags().Int64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	if err := cmd.RegisterFlagCompletionFunc(frequencyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkHeading(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	headingDescription := `Required. `

	var headingFlagName string
	if cmdPrefix == "" {
		headingFlagName = "heading"
	} else {
		headingFlagName = fmt.Sprintf("%v.heading", cmdPrefix)
	}

	var headingFlagDefault float64

	_ = cmd.PersistentFlags().Float64(headingFlagName, headingFlagDefault, headingDescription)

	return nil
}

func registerSimulationDeviceWithLinkHeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	heightDescription := `Enum: [0]. Required. `

	var heightFlagName string
	if cmdPrefix == "" {
		heightFlagName = "height"
	} else {
		heightFlagName = fmt.Sprintf("%v.height", cmdPrefix)
	}

	var heightFlagDefault float64

	_ = cmd.PersistentFlags().Float64(heightFlagName, heightFlagDefault, heightDescription)

	if err := cmd.RegisterFlagCompletionFunc(heightFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerSimulationDeviceWithLinkLatitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latitudeDescription := `Required. `

	var latitudeFlagName string
	if cmdPrefix == "" {
		latitudeFlagName = "latitude"
	} else {
		latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
	}

	var latitudeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(latitudeFlagName, latitudeFlagDefault, latitudeDescription)

	return nil
}

func registerSimulationDeviceWithLinkLink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var linkFlagName string
	if cmdPrefix == "" {
		linkFlagName = "link"
	} else {
		linkFlagName = fmt.Sprintf("%v.link", cmdPrefix)
	}

	if err := registerModelSimulationLink1Flags(depth+1, linkFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkLongitude(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	longitudeDescription := `Required. `

	var longitudeFlagName string
	if cmdPrefix == "" {
		longitudeFlagName = "longitude"
	} else {
		longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
	}

	var longitudeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(longitudeFlagName, longitudeFlagDefault, longitudeDescription)

	return nil
}

func registerSimulationDeviceWithLinkName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSimulationDeviceWithLinkRadius(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	radiusDescription := `Enum: [0]. Required. `

	var radiusFlagName string
	if cmdPrefix == "" {
		radiusFlagName = "radius"
	} else {
		radiusFlagName = fmt.Sprintf("%v.radius", cmdPrefix)
	}

	var radiusFlagDefault float64

	_ = cmd.PersistentFlags().Float64(radiusFlagName, radiusFlagDefault, radiusDescription)

	if err := cmd.RegisterFlagCompletionFunc(radiusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := `Enum: ["ap","cpe"]. Required. `

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault string

	_ = cmd.PersistentFlags().String(roleFlagName, roleFlagDefault, roleDescription)

	if err := cmd.RegisterFlagCompletionFunc(roleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","cpe"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSimulationDeviceWithLinkUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive updatedAt strfmt.Date is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSimulationDeviceWithLinkFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, altitudeAdded := retrieveSimulationDeviceWithLinkAltitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || altitudeAdded

	err, antennaAdded := retrieveSimulationDeviceWithLinkAntennaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded

	err, apTypeAdded := retrieveSimulationDeviceWithLinkApTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apTypeAdded

	err, channelWidthAdded := retrieveSimulationDeviceWithLinkChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, colorAdded := retrieveSimulationDeviceWithLinkColorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || colorAdded

	err, coverageCpeHeightAdded := retrieveSimulationDeviceWithLinkCoverageCpeHeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || coverageCpeHeightAdded

	err, createdAtAdded := retrieveSimulationDeviceWithLinkCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, deviceIdAdded := retrieveSimulationDeviceWithLinkDeviceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdAdded

	err, deviceNameAdded := retrieveSimulationDeviceWithLinkDeviceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceNameAdded

	err, eirpAdded := retrieveSimulationDeviceWithLinkEirpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eirpAdded

	err, frequencyAdded := retrieveSimulationDeviceWithLinkFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, headingAdded := retrieveSimulationDeviceWithLinkHeadingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || headingAdded

	err, heightAdded := retrieveSimulationDeviceWithLinkHeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || heightAdded

	err, idAdded := retrieveSimulationDeviceWithLinkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, latitudeAdded := retrieveSimulationDeviceWithLinkLatitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latitudeAdded

	err, linkAdded := retrieveSimulationDeviceWithLinkLinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkAdded

	err, longitudeAdded := retrieveSimulationDeviceWithLinkLongitudeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || longitudeAdded

	err, nameAdded := retrieveSimulationDeviceWithLinkNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, radiusAdded := retrieveSimulationDeviceWithLinkRadiusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || radiusAdded

	err, roleAdded := retrieveSimulationDeviceWithLinkRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, updatedAtAdded := retrieveSimulationDeviceWithLinkUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkAltitudeFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	altitudeFlagName := fmt.Sprintf("%v.altitude", cmdPrefix)
	if cmd.Flags().Changed(altitudeFlagName) {

		var altitudeFlagName string
		if cmdPrefix == "" {
			altitudeFlagName = "altitude"
		} else {
			altitudeFlagName = fmt.Sprintf("%v.altitude", cmdPrefix)
		}

		altitudeFlagValue, err := cmd.Flags().GetFloat64(altitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Altitude = &altitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkAntennaFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaFlagName := fmt.Sprintf("%v.antenna", cmdPrefix)
	if cmd.Flags().Changed(antennaFlagName) {
		// info: complex object antenna Antenna2 is retrieved outside this Changed() block
	}
	antennaFlagValue := m.Antenna
	if swag.IsZero(antennaFlagValue) {
		antennaFlagValue = &models.Antenna2{}
	}

	err, antennaAdded := retrieveModelAntenna2Flags(depth+1, antennaFlagValue, antennaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded
	if antennaAdded {
		m.Antenna = antennaFlagValue
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkApTypeFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apTypeFlagName := fmt.Sprintf("%v.apType", cmdPrefix)
	if cmd.Flags().Changed(apTypeFlagName) {

		var apTypeFlagName string
		if cmdPrefix == "" {
			apTypeFlagName = "apType"
		} else {
			apTypeFlagName = fmt.Sprintf("%v.apType", cmdPrefix)
		}

		apTypeFlagValue, err := cmd.Flags().GetString(apTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ApType = &apTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkChannelWidthFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetFloat64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkColorFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	colorFlagName := fmt.Sprintf("%v.color", cmdPrefix)
	if cmd.Flags().Changed(colorFlagName) {

		var colorFlagName string
		if cmdPrefix == "" {
			colorFlagName = "color"
		} else {
			colorFlagName = fmt.Sprintf("%v.color", cmdPrefix)
		}

		colorFlagValue, err := cmd.Flags().GetString(colorFlagName)
		if err != nil {
			return err, false
		}
		m.Color = &colorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkCoverageCpeHeightFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	coverageCpeHeightFlagName := fmt.Sprintf("%v.coverageCpeHeight", cmdPrefix)
	if cmd.Flags().Changed(coverageCpeHeightFlagName) {

		var coverageCpeHeightFlagName string
		if cmdPrefix == "" {
			coverageCpeHeightFlagName = "coverageCpeHeight"
		} else {
			coverageCpeHeightFlagName = fmt.Sprintf("%v.coverageCpeHeight", cmdPrefix)
		}

		coverageCpeHeightFlagValue, err := cmd.Flags().GetFloat64(coverageCpeHeightFlagName)
		if err != nil {
			return err, false
		}
		m.CoverageCpeHeight = &coverageCpeHeightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkCreatedAtFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		// warning: primitive createdAt strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkDeviceIDFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdFlagName := fmt.Sprintf("%v.deviceId", cmdPrefix)
	if cmd.Flags().Changed(deviceIdFlagName) {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkDeviceNameFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceNameFlagName := fmt.Sprintf("%v.deviceName", cmdPrefix)
	if cmd.Flags().Changed(deviceNameFlagName) {

		var deviceNameFlagName string
		if cmdPrefix == "" {
			deviceNameFlagName = "deviceName"
		} else {
			deviceNameFlagName = fmt.Sprintf("%v.deviceName", cmdPrefix)
		}

		deviceNameFlagValue, err := cmd.Flags().GetString(deviceNameFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceName = &deviceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkEirpFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eirpFlagName := fmt.Sprintf("%v.eirp", cmdPrefix)
	if cmd.Flags().Changed(eirpFlagName) {

		var eirpFlagName string
		if cmdPrefix == "" {
			eirpFlagName = "eirp"
		} else {
			eirpFlagName = fmt.Sprintf("%v.eirp", cmdPrefix)
		}

		eirpFlagValue, err := cmd.Flags().GetInt64(eirpFlagName)
		if err != nil {
			return err, false
		}
		m.Eirp = &eirpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkFrequencyFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetInt64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = &frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkHeadingFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	headingFlagName := fmt.Sprintf("%v.heading", cmdPrefix)
	if cmd.Flags().Changed(headingFlagName) {

		var headingFlagName string
		if cmdPrefix == "" {
			headingFlagName = "heading"
		} else {
			headingFlagName = fmt.Sprintf("%v.heading", cmdPrefix)
		}

		headingFlagValue, err := cmd.Flags().GetFloat64(headingFlagName)
		if err != nil {
			return err, false
		}
		m.Heading = &headingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkHeightFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	heightFlagName := fmt.Sprintf("%v.height", cmdPrefix)
	if cmd.Flags().Changed(heightFlagName) {

		var heightFlagName string
		if cmdPrefix == "" {
			heightFlagName = "height"
		} else {
			heightFlagName = fmt.Sprintf("%v.height", cmdPrefix)
		}

		heightFlagValue, err := cmd.Flags().GetFloat64(heightFlagName)
		if err != nil {
			return err, false
		}
		m.Height = &heightFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkIDFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkLatitudeFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latitudeFlagName := fmt.Sprintf("%v.latitude", cmdPrefix)
	if cmd.Flags().Changed(latitudeFlagName) {

		var latitudeFlagName string
		if cmdPrefix == "" {
			latitudeFlagName = "latitude"
		} else {
			latitudeFlagName = fmt.Sprintf("%v.latitude", cmdPrefix)
		}

		latitudeFlagValue, err := cmd.Flags().GetFloat64(latitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Latitude = &latitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkLinkFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linkFlagName := fmt.Sprintf("%v.link", cmdPrefix)
	if cmd.Flags().Changed(linkFlagName) {
		// info: complex object link SimulationLink1 is retrieved outside this Changed() block
	}
	linkFlagValue := m.Link
	if swag.IsZero(linkFlagValue) {
		linkFlagValue = &models.SimulationLink1{}
	}

	err, linkAdded := retrieveModelSimulationLink1Flags(depth+1, linkFlagValue, linkFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkAdded
	if linkAdded {
		m.Link = linkFlagValue
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkLongitudeFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	longitudeFlagName := fmt.Sprintf("%v.longitude", cmdPrefix)
	if cmd.Flags().Changed(longitudeFlagName) {

		var longitudeFlagName string
		if cmdPrefix == "" {
			longitudeFlagName = "longitude"
		} else {
			longitudeFlagName = fmt.Sprintf("%v.longitude", cmdPrefix)
		}

		longitudeFlagValue, err := cmd.Flags().GetFloat64(longitudeFlagName)
		if err != nil {
			return err, false
		}
		m.Longitude = &longitudeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkNameFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkRadiusFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	radiusFlagName := fmt.Sprintf("%v.radius", cmdPrefix)
	if cmd.Flags().Changed(radiusFlagName) {

		var radiusFlagName string
		if cmdPrefix == "" {
			radiusFlagName = "radius"
		} else {
			radiusFlagName = fmt.Sprintf("%v.radius", cmdPrefix)
		}

		radiusFlagValue, err := cmd.Flags().GetFloat64(radiusFlagName)
		if err != nil {
			return err, false
		}
		m.Radius = &radiusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkRoleFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetString(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = &roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSimulationDeviceWithLinkUpdatedAtFlags(depth int, m *models.SimulationDeviceWithLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		// warning: primitive updatedAt strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}
