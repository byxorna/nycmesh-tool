// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for Station

// register flags to command
func registerModelStationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStationConnected(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationDeviceIdentification(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationDistance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationDownlinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationFirmware(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationInterfaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationIPAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationLatency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationNoiseFloor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationRadio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationRxBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationRxChain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationRxChainMask(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationRxModulation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationRxRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationRxSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationStatistics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationTxBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationTxChain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationTxChainMask(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationTxModulation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationTxRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationTxSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationUplinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationUptime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStationVendor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStationConnected(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectedDescription := ``

	var connectedFlagName string
	if cmdPrefix == "" {
		connectedFlagName = "connected"
	} else {
		connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
	}

	var connectedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(connectedFlagName, connectedFlagDefault, connectedDescription)

	return nil
}

func registerStationDeviceIdentification(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deviceIdentificationFlagName string
	if cmdPrefix == "" {
		deviceIdentificationFlagName = "deviceIdentification"
	} else {
		deviceIdentificationFlagName = fmt.Sprintf("%v.deviceIdentification", cmdPrefix)
	}

	if err := registerModelDeviceIdentification1Flags(depth+1, deviceIdentificationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStationDistance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distanceDescription := `Distance in meters.`

	var distanceFlagName string
	if cmdPrefix == "" {
		distanceFlagName = "distance"
	} else {
		distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
	}

	var distanceFlagDefault int64

	_ = cmd.PersistentFlags().Int64(distanceFlagName, distanceFlagDefault, distanceDescription)

	return nil
}

func registerStationDownlinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downlinkCapacityDescription := ``

	var downlinkCapacityFlagName string
	if cmdPrefix == "" {
		downlinkCapacityFlagName = "downlinkCapacity"
	} else {
		downlinkCapacityFlagName = fmt.Sprintf("%v.downlinkCapacity", cmdPrefix)
	}

	var downlinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downlinkCapacityFlagName, downlinkCapacityFlagDefault, downlinkCapacityDescription)

	return nil
}

func registerStationFirmware(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var firmwareFlagName string
	if cmdPrefix == "" {
		firmwareFlagName = "firmware"
	} else {
		firmwareFlagName = fmt.Sprintf("%v.firmware", cmdPrefix)
	}

	if err := registerModelDeviceFirmware1Flags(depth+1, firmwareFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStationInterfaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceIdDescription := `Interface name, where the station is connected.`

	var interfaceIdFlagName string
	if cmdPrefix == "" {
		interfaceIdFlagName = "interfaceId"
	} else {
		interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
	}

	var interfaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceIdFlagName, interfaceIdFlagDefault, interfaceIdDescription)

	return nil
}

func registerStationIPAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipAddressDescription := `Custom IP address in IPv4 or IPv6 format.`

	var ipAddressFlagName string
	if cmdPrefix == "" {
		ipAddressFlagName = "ipAddress"
	} else {
		ipAddressFlagName = fmt.Sprintf("%v.ipAddress", cmdPrefix)
	}

	var ipAddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipAddressFlagName, ipAddressFlagDefault, ipAddressDescription)

	return nil
}

func registerStationLatency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latencyDescription := `Latency in milliseconds.`

	var latencyFlagName string
	if cmdPrefix == "" {
		latencyFlagName = "latency"
	} else {
		latencyFlagName = fmt.Sprintf("%v.latency", cmdPrefix)
	}

	var latencyFlagDefault int64

	_ = cmd.PersistentFlags().Int64(latencyFlagName, latencyFlagDefault, latencyDescription)

	return nil
}

func registerStationMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := ``

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

func registerStationModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := `Enum: ["UF-Nano","UF-Loco","UF-Wifi","UF-Instant","UF-OLT","UF-OLT4","UISP-R-Pro","UISP-R-Lite","UNMS-S-Lite","UISP-S-Lite","UISP-S-Pro","UISP-P-Lite","UISP-LTE","ER-X","ER-X-SFP","ERLite-3","ERPoe-5","ERPro-8","ER-8","ER-8-XG","ER-4","ER-6P","ER-12","ER-12P","ER-10X","EP-R8","EP-R6","EP-S16","ES-12F","ES-16-150W","ES-24-250W","ES-24-500W","ES-24-Lite","ES-48-500W","ES-48-750W","ES-48-Lite","ES-8-150W","ES-16-XG","ES-10XP","ES-10X","ES-18X","ES-26X","EP-54V-150W","EP-24V-72W","EP-54V-72W","TSW-PoE","TSW-PoE PRO","ACB-AC","ACB-ISP","ACB-LOCO","AF11FX","AF24","AF24HD","AF2X","AF3X","AF4X","AF5","AF5U","AF5X","AF-5XHD","AF-LTU","LTU-LITE","AF-LTU5","LTU-Rocket","AFLTULR","AF60","AF60-LR","WaveAP","WaveCPE","GBE-LR","GBE","GBE-Plus","GBE-AP","R2N","R2T","R5N","R6N","R36-GPS","RM3-GPS","R2N-GPS","R5N-GPS","R9N-GPS","R5T-GPS","RM3","R36","R9N","N2N","N5N","N6N","NS3","N36","N9N","N9S","LM2","LM5","B2N","B2T","B5N","B5T","BAC","AG2","AG2-HP","AG5","AG5-HP","p2N","p5N","M25","P2B-400","P5B-300","P5B-300-ISO","P5B-400","P5B-400-ISO","P5B-620","LB5-120","LB5","N5B","N5B-16","N5B-19","N5B-300","N5B-400","N5B-Client","N2B","N2B-13","N2B-400","PAP","LAP-HP","LAP","AGW","AGW-LR","AGW-Pro","AGW-Installer","PB5","PB3","P36","PBM10","NB5","NB2","NB3","B36","NB9","SM5","WM5","IS-M5","Loco5AC","NS-5AC","R5AC-PTMP","R5AC-PTP","R5AC-Lite","R5AC-PRISM","R2AC-Prism","R2AC-Gen2","RP-5AC-Gen2","NBE-2AC-13","NBE-5AC-16","NBE-5AC-19","NBE-5AC-Gen2","PBE-5AC-300","PBE-5AC-300-ISO","PBE-5AC-400","PBE-5AC-400-ISO","PBE-5AC-500","PBE-5AC-500-ISO","PBE-5AC-620","PBE-5AC-620-ISO","PBE-2AC-400","PBE-2AC-400-ISO","PBE-5AC-X-Gen2","PBE-5AC-Gen2","PBE-5AC-ISO-Gen2","PBE-5AC-400-ISO-Gen2","LBE-5AC-16-120","LAP-120","LBE-5AC-23","LBE-5AC-Gen2","LBE-5AC-LR","LAP-GPS","IS-5AC","PS-5AC","SolarSwitch","SolarPoint","BulletAC-IP67","B-DB-AC","UNKNOWN"]. Short names, for example UF-OLT.`

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	if err := cmd.RegisterFlagCompletionFunc(modelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UF-Nano","UF-Loco","UF-Wifi","UF-Instant","UF-OLT","UF-OLT4","UISP-R-Pro","UISP-R-Lite","UNMS-S-Lite","UISP-S-Lite","UISP-S-Pro","UISP-P-Lite","UISP-LTE","ER-X","ER-X-SFP","ERLite-3","ERPoe-5","ERPro-8","ER-8","ER-8-XG","ER-4","ER-6P","ER-12","ER-12P","ER-10X","EP-R8","EP-R6","EP-S16","ES-12F","ES-16-150W","ES-24-250W","ES-24-500W","ES-24-Lite","ES-48-500W","ES-48-750W","ES-48-Lite","ES-8-150W","ES-16-XG","ES-10XP","ES-10X","ES-18X","ES-26X","EP-54V-150W","EP-24V-72W","EP-54V-72W","TSW-PoE","TSW-PoE PRO","ACB-AC","ACB-ISP","ACB-LOCO","AF11FX","AF24","AF24HD","AF2X","AF3X","AF4X","AF5","AF5U","AF5X","AF-5XHD","AF-LTU","LTU-LITE","AF-LTU5","LTU-Rocket","AFLTULR","AF60","AF60-LR","WaveAP","WaveCPE","GBE-LR","GBE","GBE-Plus","GBE-AP","R2N","R2T","R5N","R6N","R36-GPS","RM3-GPS","R2N-GPS","R5N-GPS","R9N-GPS","R5T-GPS","RM3","R36","R9N","N2N","N5N","N6N","NS3","N36","N9N","N9S","LM2","LM5","B2N","B2T","B5N","B5T","BAC","AG2","AG2-HP","AG5","AG5-HP","p2N","p5N","M25","P2B-400","P5B-300","P5B-300-ISO","P5B-400","P5B-400-ISO","P5B-620","LB5-120","LB5","N5B","N5B-16","N5B-19","N5B-300","N5B-400","N5B-Client","N2B","N2B-13","N2B-400","PAP","LAP-HP","LAP","AGW","AGW-LR","AGW-Pro","AGW-Installer","PB5","PB3","P36","PBM10","NB5","NB2","NB3","B36","NB9","SM5","WM5","IS-M5","Loco5AC","NS-5AC","R5AC-PTMP","R5AC-PTP","R5AC-Lite","R5AC-PRISM","R2AC-Prism","R2AC-Gen2","RP-5AC-Gen2","NBE-2AC-13","NBE-5AC-16","NBE-5AC-19","NBE-5AC-Gen2","PBE-5AC-300","PBE-5AC-300-ISO","PBE-5AC-400","PBE-5AC-400-ISO","PBE-5AC-500","PBE-5AC-500-ISO","PBE-5AC-620","PBE-5AC-620-ISO","PBE-2AC-400","PBE-2AC-400-ISO","PBE-5AC-X-Gen2","PBE-5AC-Gen2","PBE-5AC-ISO-Gen2","PBE-5AC-400-ISO-Gen2","LBE-5AC-16-120","LAP-120","LBE-5AC-23","LBE-5AC-Gen2","LBE-5AC-LR","LAP-GPS","IS-5AC","PS-5AC","SolarSwitch","SolarPoint","BulletAC-IP67","B-DB-AC","UNKNOWN"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerStationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerStationNoiseFloor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noiseFloorDescription := `Required. Wireless noise level in dBm`

	var noiseFloorFlagName string
	if cmdPrefix == "" {
		noiseFloorFlagName = "noiseFloor"
	} else {
		noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	}

	var noiseFloorFlagDefault int64

	_ = cmd.PersistentFlags().Int64(noiseFloorFlagName, noiseFloorFlagDefault, noiseFloorDescription)

	return nil
}

func registerStationRadio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	radioDescription := `Enum: ["2.4GHz","3GHz","4GHz","5GHz","11GHz","24GHz","60GHz"]. `

	var radioFlagName string
	if cmdPrefix == "" {
		radioFlagName = "radio"
	} else {
		radioFlagName = fmt.Sprintf("%v.radio", cmdPrefix)
	}

	var radioFlagDefault string

	_ = cmd.PersistentFlags().String(radioFlagName, radioFlagDefault, radioDescription)

	if err := cmd.RegisterFlagCompletionFunc(radioFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["2.4GHz","3GHz","4GHz","5GHz","11GHz","24GHz","60GHz"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerStationRxBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxBytesDescription := `Received bytes.`

	var rxBytesFlagName string
	if cmdPrefix == "" {
		rxBytesFlagName = "rxBytes"
	} else {
		rxBytesFlagName = fmt.Sprintf("%v.rxBytes", cmdPrefix)
	}

	var rxBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rxBytesFlagName, rxBytesFlagDefault, rxBytesDescription)

	return nil
}

func registerStationRxChain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: rxChain RxChain array type is not supported by go-swagger cli yet

	return nil
}

func registerStationRxChainMask(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxChainMaskDescription := `Required. `

	var rxChainMaskFlagName string
	if cmdPrefix == "" {
		rxChainMaskFlagName = "rxChainMask"
	} else {
		rxChainMaskFlagName = fmt.Sprintf("%v.rxChainMask", cmdPrefix)
	}

	var rxChainMaskFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rxChainMaskFlagName, rxChainMaskFlagDefault, rxChainMaskDescription)

	return nil
}

func registerStationRxModulation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxModulationDescription := `Local Rx data rate.`

	var rxModulationFlagName string
	if cmdPrefix == "" {
		rxModulationFlagName = "rxModulation"
	} else {
		rxModulationFlagName = fmt.Sprintf("%v.rxModulation", cmdPrefix)
	}

	var rxModulationFlagDefault string

	_ = cmd.PersistentFlags().String(rxModulationFlagName, rxModulationFlagDefault, rxModulationDescription)

	return nil
}

func registerStationRxRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxRateDescription := `Current download speed in bps.`

	var rxRateFlagName string
	if cmdPrefix == "" {
		rxRateFlagName = "rxRate"
	} else {
		rxRateFlagName = fmt.Sprintf("%v.rxRate", cmdPrefix)
	}

	var rxRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rxRateFlagName, rxRateFlagDefault, rxRateDescription)

	return nil
}

func registerStationRxSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxSignalDescription := `Local Signal in dBm.`

	var rxSignalFlagName string
	if cmdPrefix == "" {
		rxSignalFlagName = "rxSignal"
	} else {
		rxSignalFlagName = fmt.Sprintf("%v.rxSignal", cmdPrefix)
	}

	var rxSignalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(rxSignalFlagName, rxSignalFlagDefault, rxSignalDescription)

	return nil
}

func registerStationStatistics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statisticsFlagName string
	if cmdPrefix == "" {
		statisticsFlagName = "statistics"
	} else {
		statisticsFlagName = fmt.Sprintf("%v.statistics", cmdPrefix)
	}

	if err := registerModelStatisticsFlags(depth+1, statisticsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStationTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive timestamp strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerStationTxBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txBytesDescription := `Transmitted/Sent bytes.`

	var txBytesFlagName string
	if cmdPrefix == "" {
		txBytesFlagName = "txBytes"
	} else {
		txBytesFlagName = fmt.Sprintf("%v.txBytes", cmdPrefix)
	}

	var txBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(txBytesFlagName, txBytesFlagDefault, txBytesDescription)

	return nil
}

func registerStationTxChain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: txChain TxChain array type is not supported by go-swagger cli yet

	return nil
}

func registerStationTxChainMask(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txChainMaskDescription := `Required. `

	var txChainMaskFlagName string
	if cmdPrefix == "" {
		txChainMaskFlagName = "txChainMask"
	} else {
		txChainMaskFlagName = fmt.Sprintf("%v.txChainMask", cmdPrefix)
	}

	var txChainMaskFlagDefault int64

	_ = cmd.PersistentFlags().Int64(txChainMaskFlagName, txChainMaskFlagDefault, txChainMaskDescription)

	return nil
}

func registerStationTxModulation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txModulationDescription := `Remote Rx data rate.`

	var txModulationFlagName string
	if cmdPrefix == "" {
		txModulationFlagName = "txModulation"
	} else {
		txModulationFlagName = fmt.Sprintf("%v.txModulation", cmdPrefix)
	}

	var txModulationFlagDefault string

	_ = cmd.PersistentFlags().String(txModulationFlagName, txModulationFlagDefault, txModulationDescription)

	return nil
}

func registerStationTxRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txRateDescription := `Current download speed in bps.`

	var txRateFlagName string
	if cmdPrefix == "" {
		txRateFlagName = "txRate"
	} else {
		txRateFlagName = fmt.Sprintf("%v.txRate", cmdPrefix)
	}

	var txRateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(txRateFlagName, txRateFlagDefault, txRateDescription)

	return nil
}

func registerStationTxSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txSignalDescription := `Remote Signal in dBm.`

	var txSignalFlagName string
	if cmdPrefix == "" {
		txSignalFlagName = "txSignal"
	} else {
		txSignalFlagName = fmt.Sprintf("%v.txSignal", cmdPrefix)
	}

	var txSignalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(txSignalFlagName, txSignalFlagDefault, txSignalDescription)

	return nil
}

func registerStationUplinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uplinkCapacityDescription := ``

	var uplinkCapacityFlagName string
	if cmdPrefix == "" {
		uplinkCapacityFlagName = "uplinkCapacity"
	} else {
		uplinkCapacityFlagName = fmt.Sprintf("%v.uplinkCapacity", cmdPrefix)
	}

	var uplinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uplinkCapacityFlagName, uplinkCapacityFlagDefault, uplinkCapacityDescription)

	return nil
}

func registerStationUptime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uptimeDescription := ``

	var uptimeFlagName string
	if cmdPrefix == "" {
		uptimeFlagName = "uptime"
	} else {
		uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
	}

	var uptimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uptimeFlagName, uptimeFlagDefault, uptimeDescription)

	return nil
}

func registerStationVendor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vendorDescription := ``

	var vendorFlagName string
	if cmdPrefix == "" {
		vendorFlagName = "vendor"
	} else {
		vendorFlagName = fmt.Sprintf("%v.vendor", cmdPrefix)
	}

	var vendorFlagDefault string

	_ = cmd.PersistentFlags().String(vendorFlagName, vendorFlagDefault, vendorDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStationFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, connectedAdded := retrieveStationConnectedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectedAdded

	err, deviceIdentificationAdded := retrieveStationDeviceIdentificationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdentificationAdded

	err, distanceAdded := retrieveStationDistanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distanceAdded

	err, downlinkCapacityAdded := retrieveStationDownlinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downlinkCapacityAdded

	err, firmwareAdded := retrieveStationFirmwareFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareAdded

	err, interfaceIdAdded := retrieveStationInterfaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceIdAdded

	err, ipAddressAdded := retrieveStationIPAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAddressAdded

	err, latencyAdded := retrieveStationLatencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latencyAdded

	err, macAdded := retrieveStationMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	err, modelAdded := retrieveStationModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, nameAdded := retrieveStationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, noiseFloorAdded := retrieveStationNoiseFloorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noiseFloorAdded

	err, radioAdded := retrieveStationRadioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || radioAdded

	err, rxBytesAdded := retrieveStationRxBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxBytesAdded

	err, rxChainAdded := retrieveStationRxChainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxChainAdded

	err, rxChainMaskAdded := retrieveStationRxChainMaskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxChainMaskAdded

	err, rxModulationAdded := retrieveStationRxModulationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxModulationAdded

	err, rxRateAdded := retrieveStationRxRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxRateAdded

	err, rxSignalAdded := retrieveStationRxSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxSignalAdded

	err, statisticsAdded := retrieveStationStatisticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statisticsAdded

	err, timestampAdded := retrieveStationTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampAdded

	err, txBytesAdded := retrieveStationTxBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txBytesAdded

	err, txChainAdded := retrieveStationTxChainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txChainAdded

	err, txChainMaskAdded := retrieveStationTxChainMaskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txChainMaskAdded

	err, txModulationAdded := retrieveStationTxModulationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txModulationAdded

	err, txRateAdded := retrieveStationTxRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txRateAdded

	err, txSignalAdded := retrieveStationTxSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txSignalAdded

	err, uplinkCapacityAdded := retrieveStationUplinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uplinkCapacityAdded

	err, uptimeAdded := retrieveStationUptimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uptimeAdded

	err, vendorAdded := retrieveStationVendorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vendorAdded

	return nil, retAdded
}

func retrieveStationConnectedFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectedFlagName := fmt.Sprintf("%v.connected", cmdPrefix)
	if cmd.Flags().Changed(connectedFlagName) {

		var connectedFlagName string
		if cmdPrefix == "" {
			connectedFlagName = "connected"
		} else {
			connectedFlagName = fmt.Sprintf("%v.connected", cmdPrefix)
		}

		connectedFlagValue, err := cmd.Flags().GetBool(connectedFlagName)
		if err != nil {
			return err, false
		}
		m.Connected = connectedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationDeviceIdentificationFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdentificationFlagName := fmt.Sprintf("%v.deviceIdentification", cmdPrefix)
	if cmd.Flags().Changed(deviceIdentificationFlagName) {
		// info: complex object deviceIdentification DeviceIdentification1 is retrieved outside this Changed() block
	}
	deviceIdentificationFlagValue := m.DeviceIdentification
	if swag.IsZero(deviceIdentificationFlagValue) {
		deviceIdentificationFlagValue = &models.DeviceIdentification1{}
	}

	err, deviceIdentificationAdded := retrieveModelDeviceIdentification1Flags(depth+1, deviceIdentificationFlagValue, deviceIdentificationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdentificationAdded
	if deviceIdentificationAdded {
		m.DeviceIdentification = deviceIdentificationFlagValue
	}

	return nil, retAdded
}

func retrieveStationDistanceFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distanceFlagName := fmt.Sprintf("%v.distance", cmdPrefix)
	if cmd.Flags().Changed(distanceFlagName) {

		var distanceFlagName string
		if cmdPrefix == "" {
			distanceFlagName = "distance"
		} else {
			distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
		}

		distanceFlagValue, err := cmd.Flags().GetInt64(distanceFlagName)
		if err != nil {
			return err, false
		}
		m.Distance = distanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationDownlinkCapacityFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downlinkCapacityFlagName := fmt.Sprintf("%v.downlinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(downlinkCapacityFlagName) {

		var downlinkCapacityFlagName string
		if cmdPrefix == "" {
			downlinkCapacityFlagName = "downlinkCapacity"
		} else {
			downlinkCapacityFlagName = fmt.Sprintf("%v.downlinkCapacity", cmdPrefix)
		}

		downlinkCapacityFlagValue, err := cmd.Flags().GetInt64(downlinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.DownlinkCapacity = downlinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationFirmwareFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareFlagName := fmt.Sprintf("%v.firmware", cmdPrefix)
	if cmd.Flags().Changed(firmwareFlagName) {
		// info: complex object firmware DeviceFirmware1 is retrieved outside this Changed() block
	}
	firmwareFlagValue := m.Firmware
	if swag.IsZero(firmwareFlagValue) {
		firmwareFlagValue = &models.DeviceFirmware1{}
	}

	err, firmwareAdded := retrieveModelDeviceFirmware1Flags(depth+1, firmwareFlagValue, firmwareFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareAdded
	if firmwareAdded {
		m.Firmware = firmwareFlagValue
	}

	return nil, retAdded
}

func retrieveStationInterfaceIDFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceIdFlagName := fmt.Sprintf("%v.interfaceId", cmdPrefix)
	if cmd.Flags().Changed(interfaceIdFlagName) {

		var interfaceIdFlagName string
		if cmdPrefix == "" {
			interfaceIdFlagName = "interfaceId"
		} else {
			interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
		}

		interfaceIdFlagValue, err := cmd.Flags().GetString(interfaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.InterfaceID = interfaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationIPAddressFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipAddressFlagName := fmt.Sprintf("%v.ipAddress", cmdPrefix)
	if cmd.Flags().Changed(ipAddressFlagName) {

		var ipAddressFlagName string
		if cmdPrefix == "" {
			ipAddressFlagName = "ipAddress"
		} else {
			ipAddressFlagName = fmt.Sprintf("%v.ipAddress", cmdPrefix)
		}

		ipAddressFlagValue, err := cmd.Flags().GetString(ipAddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddress = ipAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationLatencyFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latencyFlagName := fmt.Sprintf("%v.latency", cmdPrefix)
	if cmd.Flags().Changed(latencyFlagName) {

		var latencyFlagName string
		if cmdPrefix == "" {
			latencyFlagName = "latency"
		} else {
			latencyFlagName = fmt.Sprintf("%v.latency", cmdPrefix)
		}

		latencyFlagValue, err := cmd.Flags().GetInt64(latencyFlagName)
		if err != nil {
			return err, false
		}
		m.Latency = latencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationMacFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = macFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationModelFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationNameFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationNoiseFloorFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noiseFloorFlagName := fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	if cmd.Flags().Changed(noiseFloorFlagName) {

		var noiseFloorFlagName string
		if cmdPrefix == "" {
			noiseFloorFlagName = "noiseFloor"
		} else {
			noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
		}

		noiseFloorFlagValue, err := cmd.Flags().GetInt64(noiseFloorFlagName)
		if err != nil {
			return err, false
		}
		m.NoiseFloor = &noiseFloorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationRadioFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	radioFlagName := fmt.Sprintf("%v.radio", cmdPrefix)
	if cmd.Flags().Changed(radioFlagName) {

		var radioFlagName string
		if cmdPrefix == "" {
			radioFlagName = "radio"
		} else {
			radioFlagName = fmt.Sprintf("%v.radio", cmdPrefix)
		}

		radioFlagValue, err := cmd.Flags().GetString(radioFlagName)
		if err != nil {
			return err, false
		}
		m.Radio = radioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationRxBytesFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxBytesFlagName := fmt.Sprintf("%v.rxBytes", cmdPrefix)
	if cmd.Flags().Changed(rxBytesFlagName) {

		var rxBytesFlagName string
		if cmdPrefix == "" {
			rxBytesFlagName = "rxBytes"
		} else {
			rxBytesFlagName = fmt.Sprintf("%v.rxBytes", cmdPrefix)
		}

		rxBytesFlagValue, err := cmd.Flags().GetInt64(rxBytesFlagName)
		if err != nil {
			return err, false
		}
		m.RxBytes = rxBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationRxChainFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxChainFlagName := fmt.Sprintf("%v.rxChain", cmdPrefix)
	if cmd.Flags().Changed(rxChainFlagName) {
		// warning: rxChain array type RxChain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStationRxChainMaskFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxChainMaskFlagName := fmt.Sprintf("%v.rxChainMask", cmdPrefix)
	if cmd.Flags().Changed(rxChainMaskFlagName) {

		var rxChainMaskFlagName string
		if cmdPrefix == "" {
			rxChainMaskFlagName = "rxChainMask"
		} else {
			rxChainMaskFlagName = fmt.Sprintf("%v.rxChainMask", cmdPrefix)
		}

		rxChainMaskFlagValue, err := cmd.Flags().GetInt64(rxChainMaskFlagName)
		if err != nil {
			return err, false
		}
		m.RxChainMask = &rxChainMaskFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationRxModulationFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxModulationFlagName := fmt.Sprintf("%v.rxModulation", cmdPrefix)
	if cmd.Flags().Changed(rxModulationFlagName) {

		var rxModulationFlagName string
		if cmdPrefix == "" {
			rxModulationFlagName = "rxModulation"
		} else {
			rxModulationFlagName = fmt.Sprintf("%v.rxModulation", cmdPrefix)
		}

		rxModulationFlagValue, err := cmd.Flags().GetString(rxModulationFlagName)
		if err != nil {
			return err, false
		}
		m.RxModulation = rxModulationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationRxRateFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxRateFlagName := fmt.Sprintf("%v.rxRate", cmdPrefix)
	if cmd.Flags().Changed(rxRateFlagName) {

		var rxRateFlagName string
		if cmdPrefix == "" {
			rxRateFlagName = "rxRate"
		} else {
			rxRateFlagName = fmt.Sprintf("%v.rxRate", cmdPrefix)
		}

		rxRateFlagValue, err := cmd.Flags().GetInt64(rxRateFlagName)
		if err != nil {
			return err, false
		}
		m.RxRate = rxRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationRxSignalFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxSignalFlagName := fmt.Sprintf("%v.rxSignal", cmdPrefix)
	if cmd.Flags().Changed(rxSignalFlagName) {

		var rxSignalFlagName string
		if cmdPrefix == "" {
			rxSignalFlagName = "rxSignal"
		} else {
			rxSignalFlagName = fmt.Sprintf("%v.rxSignal", cmdPrefix)
		}

		rxSignalFlagValue, err := cmd.Flags().GetInt64(rxSignalFlagName)
		if err != nil {
			return err, false
		}
		m.RxSignal = rxSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationStatisticsFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statisticsFlagName := fmt.Sprintf("%v.statistics", cmdPrefix)
	if cmd.Flags().Changed(statisticsFlagName) {
		// info: complex object statistics Statistics is retrieved outside this Changed() block
	}
	statisticsFlagValue := m.Statistics
	if swag.IsZero(statisticsFlagValue) {
		statisticsFlagValue = &models.Statistics{}
	}

	err, statisticsAdded := retrieveModelStatisticsFlags(depth+1, statisticsFlagValue, statisticsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statisticsAdded
	if statisticsAdded {
		m.Statistics = statisticsFlagValue
	}

	return nil, retAdded
}

func retrieveStationTimestampFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampFlagName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(timestampFlagName) {

		// warning: primitive timestamp strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationTxBytesFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txBytesFlagName := fmt.Sprintf("%v.txBytes", cmdPrefix)
	if cmd.Flags().Changed(txBytesFlagName) {

		var txBytesFlagName string
		if cmdPrefix == "" {
			txBytesFlagName = "txBytes"
		} else {
			txBytesFlagName = fmt.Sprintf("%v.txBytes", cmdPrefix)
		}

		txBytesFlagValue, err := cmd.Flags().GetInt64(txBytesFlagName)
		if err != nil {
			return err, false
		}
		m.TxBytes = txBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationTxChainFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txChainFlagName := fmt.Sprintf("%v.txChain", cmdPrefix)
	if cmd.Flags().Changed(txChainFlagName) {
		// warning: txChain array type TxChain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStationTxChainMaskFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txChainMaskFlagName := fmt.Sprintf("%v.txChainMask", cmdPrefix)
	if cmd.Flags().Changed(txChainMaskFlagName) {

		var txChainMaskFlagName string
		if cmdPrefix == "" {
			txChainMaskFlagName = "txChainMask"
		} else {
			txChainMaskFlagName = fmt.Sprintf("%v.txChainMask", cmdPrefix)
		}

		txChainMaskFlagValue, err := cmd.Flags().GetInt64(txChainMaskFlagName)
		if err != nil {
			return err, false
		}
		m.TxChainMask = &txChainMaskFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationTxModulationFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txModulationFlagName := fmt.Sprintf("%v.txModulation", cmdPrefix)
	if cmd.Flags().Changed(txModulationFlagName) {

		var txModulationFlagName string
		if cmdPrefix == "" {
			txModulationFlagName = "txModulation"
		} else {
			txModulationFlagName = fmt.Sprintf("%v.txModulation", cmdPrefix)
		}

		txModulationFlagValue, err := cmd.Flags().GetString(txModulationFlagName)
		if err != nil {
			return err, false
		}
		m.TxModulation = txModulationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationTxRateFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txRateFlagName := fmt.Sprintf("%v.txRate", cmdPrefix)
	if cmd.Flags().Changed(txRateFlagName) {

		var txRateFlagName string
		if cmdPrefix == "" {
			txRateFlagName = "txRate"
		} else {
			txRateFlagName = fmt.Sprintf("%v.txRate", cmdPrefix)
		}

		txRateFlagValue, err := cmd.Flags().GetInt64(txRateFlagName)
		if err != nil {
			return err, false
		}
		m.TxRate = txRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationTxSignalFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txSignalFlagName := fmt.Sprintf("%v.txSignal", cmdPrefix)
	if cmd.Flags().Changed(txSignalFlagName) {

		var txSignalFlagName string
		if cmdPrefix == "" {
			txSignalFlagName = "txSignal"
		} else {
			txSignalFlagName = fmt.Sprintf("%v.txSignal", cmdPrefix)
		}

		txSignalFlagValue, err := cmd.Flags().GetInt64(txSignalFlagName)
		if err != nil {
			return err, false
		}
		m.TxSignal = txSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationUplinkCapacityFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uplinkCapacityFlagName := fmt.Sprintf("%v.uplinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(uplinkCapacityFlagName) {

		var uplinkCapacityFlagName string
		if cmdPrefix == "" {
			uplinkCapacityFlagName = "uplinkCapacity"
		} else {
			uplinkCapacityFlagName = fmt.Sprintf("%v.uplinkCapacity", cmdPrefix)
		}

		uplinkCapacityFlagValue, err := cmd.Flags().GetInt64(uplinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.UplinkCapacity = uplinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationUptimeFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uptimeFlagName := fmt.Sprintf("%v.uptime", cmdPrefix)
	if cmd.Flags().Changed(uptimeFlagName) {

		var uptimeFlagName string
		if cmdPrefix == "" {
			uptimeFlagName = "uptime"
		} else {
			uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
		}

		uptimeFlagValue, err := cmd.Flags().GetInt64(uptimeFlagName)
		if err != nil {
			return err, false
		}
		m.Uptime = uptimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStationVendorFlags(depth int, m *models.Station, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vendorFlagName := fmt.Sprintf("%v.vendor", cmdPrefix)
	if cmd.Flags().Changed(vendorFlagName) {

		var vendorFlagName string
		if cmdPrefix == "" {
			vendorFlagName = "vendor"
		} else {
			vendorFlagName = fmt.Sprintf("%v.vendor", cmdPrefix)
		}

		vendorFlagValue, err := cmd.Flags().GetString(vendorFlagName)
		if err != nil {
			return err, false
		}
		m.Vendor = vendorFlagValue

		retAdded = true
	}

	return nil, retAdded
}
