// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for DeviceBlackBoxConfig

// register flags to command
func registerModelDeviceBlackBoxConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceBlackBoxConfigDeviceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigDeviceRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigInterfaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigIPAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigModelName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigPingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigSiteID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigSnmpCommunity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigUbntData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceBlackBoxConfigUbntDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceBlackBoxConfigDeviceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceIdDescription := `Required. `

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}

func registerDeviceBlackBoxConfigDeviceRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceRoleDescription := `Enum: ["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]. `

	var deviceRoleFlagName string
	if cmdPrefix == "" {
		deviceRoleFlagName = "deviceRole"
	} else {
		deviceRoleFlagName = fmt.Sprintf("%v.deviceRole", cmdPrefix)
	}

	var deviceRoleFlagDefault string = "router"

	_ = cmd.PersistentFlags().String(deviceRoleFlagName, deviceRoleFlagDefault, deviceRoleDescription)

	if err := cmd.RegisterFlagCompletionFunc(deviceRoleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceBlackBoxConfigHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `Required. `

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerDeviceBlackBoxConfigInterfaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: interfaces ListOfInterfaces array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceBlackBoxConfigIPAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipAddressDescription := ``

	var ipAddressFlagName string
	if cmdPrefix == "" {
		ipAddressFlagName = "ipAddress"
	} else {
		ipAddressFlagName = fmt.Sprintf("%v.ipAddress", cmdPrefix)
	}

	var ipAddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipAddressFlagName, ipAddressFlagDefault, ipAddressDescription)

	return nil
}

func registerDeviceBlackBoxConfigMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macAddressDescription := ``

	var macAddressFlagName string
	if cmdPrefix == "" {
		macAddressFlagName = "macAddress"
	} else {
		macAddressFlagName = fmt.Sprintf("%v.macAddress", cmdPrefix)
	}

	var macAddressFlagDefault string

	_ = cmd.PersistentFlags().String(macAddressFlagName, macAddressFlagDefault, macAddressDescription)

	return nil
}

func registerDeviceBlackBoxConfigModelName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelNameDescription := ``

	var modelNameFlagName string
	if cmdPrefix == "" {
		modelNameFlagName = "modelName"
	} else {
		modelNameFlagName = fmt.Sprintf("%v.modelName", cmdPrefix)
	}

	var modelNameFlagDefault string

	_ = cmd.PersistentFlags().String(modelNameFlagName, modelNameFlagDefault, modelNameDescription)

	return nil
}

func registerDeviceBlackBoxConfigNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noteDescription := ``

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "note"
	} else {
		noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}

func registerDeviceBlackBoxConfigPingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pingEnabledDescription := `Required. `

	var pingEnabledFlagName string
	if cmdPrefix == "" {
		pingEnabledFlagName = "pingEnabled"
	} else {
		pingEnabledFlagName = fmt.Sprintf("%v.pingEnabled", cmdPrefix)
	}

	var pingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pingEnabledFlagName, pingEnabledFlagDefault, pingEnabledDescription)

	return nil
}

func registerDeviceBlackBoxConfigSiteID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	siteIdDescription := `Required. `

	var siteIdFlagName string
	if cmdPrefix == "" {
		siteIdFlagName = "siteId"
	} else {
		siteIdFlagName = fmt.Sprintf("%v.siteId", cmdPrefix)
	}

	var siteIdFlagDefault string

	_ = cmd.PersistentFlags().String(siteIdFlagName, siteIdFlagDefault, siteIdDescription)

	return nil
}

func registerDeviceBlackBoxConfigSnmpCommunity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	snmpCommunityDescription := ``

	var snmpCommunityFlagName string
	if cmdPrefix == "" {
		snmpCommunityFlagName = "snmpCommunity"
	} else {
		snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	}

	var snmpCommunityFlagDefault string

	_ = cmd.PersistentFlags().String(snmpCommunityFlagName, snmpCommunityFlagDefault, snmpCommunityDescription)

	return nil
}

func registerDeviceBlackBoxConfigUbntData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ubntDataFlagName string
	if cmdPrefix == "" {
		ubntDataFlagName = "ubntData"
	} else {
		ubntDataFlagName = fmt.Sprintf("%v.ubntData", cmdPrefix)
	}

	if err := registerModelUbntDataFlags(depth+1, ubntDataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceBlackBoxConfigUbntDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ubntDeviceDescription := ``

	var ubntDeviceFlagName string
	if cmdPrefix == "" {
		ubntDeviceFlagName = "ubntDevice"
	} else {
		ubntDeviceFlagName = fmt.Sprintf("%v.ubntDevice", cmdPrefix)
	}

	var ubntDeviceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ubntDeviceFlagName, ubntDeviceFlagDefault, ubntDeviceDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceBlackBoxConfigFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceIdAdded := retrieveDeviceBlackBoxConfigDeviceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdAdded

	err, deviceRoleAdded := retrieveDeviceBlackBoxConfigDeviceRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceRoleAdded

	err, hostnameAdded := retrieveDeviceBlackBoxConfigHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, interfacesAdded := retrieveDeviceBlackBoxConfigInterfacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfacesAdded

	err, ipAddressAdded := retrieveDeviceBlackBoxConfigIPAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAddressAdded

	err, macAddressAdded := retrieveDeviceBlackBoxConfigMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAddressAdded

	err, modelNameAdded := retrieveDeviceBlackBoxConfigModelNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelNameAdded

	err, noteAdded := retrieveDeviceBlackBoxConfigNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noteAdded

	err, pingEnabledAdded := retrieveDeviceBlackBoxConfigPingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pingEnabledAdded

	err, siteIdAdded := retrieveDeviceBlackBoxConfigSiteIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteIdAdded

	err, snmpCommunityAdded := retrieveDeviceBlackBoxConfigSnmpCommunityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || snmpCommunityAdded

	err, ubntDataAdded := retrieveDeviceBlackBoxConfigUbntDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ubntDataAdded

	err, ubntDeviceAdded := retrieveDeviceBlackBoxConfigUbntDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ubntDeviceAdded

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigDeviceIDFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdFlagName := fmt.Sprintf("%v.deviceId", cmdPrefix)
	if cmd.Flags().Changed(deviceIdFlagName) {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigDeviceRoleFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceRoleFlagName := fmt.Sprintf("%v.deviceRole", cmdPrefix)
	if cmd.Flags().Changed(deviceRoleFlagName) {

		var deviceRoleFlagName string
		if cmdPrefix == "" {
			deviceRoleFlagName = "deviceRole"
		} else {
			deviceRoleFlagName = fmt.Sprintf("%v.deviceRole", cmdPrefix)
		}

		deviceRoleFlagValue, err := cmd.Flags().GetString(deviceRoleFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceRole = &deviceRoleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigHostnameFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = &hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigInterfacesFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfacesFlagName := fmt.Sprintf("%v.interfaces", cmdPrefix)
	if cmd.Flags().Changed(interfacesFlagName) {
		// warning: interfaces array type ListOfInterfaces is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigIPAddressFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipAddressFlagName := fmt.Sprintf("%v.ipAddress", cmdPrefix)
	if cmd.Flags().Changed(ipAddressFlagName) {

		var ipAddressFlagName string
		if cmdPrefix == "" {
			ipAddressFlagName = "ipAddress"
		} else {
			ipAddressFlagName = fmt.Sprintf("%v.ipAddress", cmdPrefix)
		}

		ipAddressFlagValue, err := cmd.Flags().GetString(ipAddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddress = ipAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigMacAddressFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macAddressFlagName := fmt.Sprintf("%v.macAddress", cmdPrefix)
	if cmd.Flags().Changed(macAddressFlagName) {

		var macAddressFlagName string
		if cmdPrefix == "" {
			macAddressFlagName = "macAddress"
		} else {
			macAddressFlagName = fmt.Sprintf("%v.macAddress", cmdPrefix)
		}

		macAddressFlagValue, err := cmd.Flags().GetString(macAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = macAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigModelNameFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelNameFlagName := fmt.Sprintf("%v.modelName", cmdPrefix)
	if cmd.Flags().Changed(modelNameFlagName) {

		var modelNameFlagName string
		if cmdPrefix == "" {
			modelNameFlagName = "modelName"
		} else {
			modelNameFlagName = fmt.Sprintf("%v.modelName", cmdPrefix)
		}

		modelNameFlagValue, err := cmd.Flags().GetString(modelNameFlagName)
		if err != nil {
			return err, false
		}
		m.ModelName = modelNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigNoteFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noteFlagName := fmt.Sprintf("%v.note", cmdPrefix)
	if cmd.Flags().Changed(noteFlagName) {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "note"
		} else {
			noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = noteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigPingEnabledFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pingEnabledFlagName := fmt.Sprintf("%v.pingEnabled", cmdPrefix)
	if cmd.Flags().Changed(pingEnabledFlagName) {

		var pingEnabledFlagName string
		if cmdPrefix == "" {
			pingEnabledFlagName = "pingEnabled"
		} else {
			pingEnabledFlagName = fmt.Sprintf("%v.pingEnabled", cmdPrefix)
		}

		pingEnabledFlagValue, err := cmd.Flags().GetBool(pingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PingEnabled = pingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigSiteIDFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	siteIdFlagName := fmt.Sprintf("%v.siteId", cmdPrefix)
	if cmd.Flags().Changed(siteIdFlagName) {

		var siteIdFlagName string
		if cmdPrefix == "" {
			siteIdFlagName = "siteId"
		} else {
			siteIdFlagName = fmt.Sprintf("%v.siteId", cmdPrefix)
		}

		siteIdFlagValue, err := cmd.Flags().GetString(siteIdFlagName)
		if err != nil {
			return err, false
		}
		m.SiteID = &siteIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigSnmpCommunityFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	snmpCommunityFlagName := fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
	if cmd.Flags().Changed(snmpCommunityFlagName) {

		var snmpCommunityFlagName string
		if cmdPrefix == "" {
			snmpCommunityFlagName = "snmpCommunity"
		} else {
			snmpCommunityFlagName = fmt.Sprintf("%v.snmpCommunity", cmdPrefix)
		}

		snmpCommunityFlagValue, err := cmd.Flags().GetString(snmpCommunityFlagName)
		if err != nil {
			return err, false
		}
		m.SnmpCommunity = snmpCommunityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigUbntDataFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ubntDataFlagName := fmt.Sprintf("%v.ubntData", cmdPrefix)
	if cmd.Flags().Changed(ubntDataFlagName) {
		// info: complex object ubntData UbntData is retrieved outside this Changed() block
	}
	ubntDataFlagValue := m.UbntData
	if swag.IsZero(ubntDataFlagValue) {
		ubntDataFlagValue = &models.UbntData{}
	}

	err, ubntDataAdded := retrieveModelUbntDataFlags(depth+1, ubntDataFlagValue, ubntDataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ubntDataAdded
	if ubntDataAdded {
		m.UbntData = ubntDataFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceBlackBoxConfigUbntDeviceFlags(depth int, m *models.DeviceBlackBoxConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ubntDeviceFlagName := fmt.Sprintf("%v.ubntDevice", cmdPrefix)
	if cmd.Flags().Changed(ubntDeviceFlagName) {

		var ubntDeviceFlagName string
		if cmdPrefix == "" {
			ubntDeviceFlagName = "ubntDevice"
		} else {
			ubntDeviceFlagName = fmt.Sprintf("%v.ubntDevice", cmdPrefix)
		}

		ubntDeviceFlagValue, err := cmd.Flags().GetBool(ubntDeviceFlagName)
		if err != nil {
			return err, false
		}
		m.UbntDevice = &ubntDeviceFlagValue

		retAdded = true
	}

	return nil, retAdded
}
