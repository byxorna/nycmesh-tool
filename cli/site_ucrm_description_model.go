// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for SiteUcrmDescription

// register flags to command
func registerModelSiteUcrmDescriptionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSiteUcrmDescriptionClient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteUcrmDescriptionService(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteUcrmDescriptionClient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var clientFlagName string
	if cmdPrefix == "" {
		clientFlagName = "client"
	} else {
		clientFlagName = fmt.Sprintf("%v.client", cmdPrefix)
	}

	if err := registerModelClientFlags(depth+1, clientFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteUcrmDescriptionService(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var serviceFlagName string
	if cmdPrefix == "" {
		serviceFlagName = "service"
	} else {
		serviceFlagName = fmt.Sprintf("%v.service", cmdPrefix)
	}

	if err := registerModelServiceFlags(depth+1, serviceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSiteUcrmDescriptionFlags(depth int, m *models.SiteUcrmDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clientAdded := retrieveSiteUcrmDescriptionClientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientAdded

	err, serviceAdded := retrieveSiteUcrmDescriptionServiceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceAdded

	return nil, retAdded
}

func retrieveSiteUcrmDescriptionClientFlags(depth int, m *models.SiteUcrmDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientFlagName := fmt.Sprintf("%v.client", cmdPrefix)
	if cmd.Flags().Changed(clientFlagName) {
		// info: complex object client Client is retrieved outside this Changed() block
	}
	clientFlagValue := m.Client
	if swag.IsZero(clientFlagValue) {
		clientFlagValue = &models.Client{}
	}

	err, clientAdded := retrieveModelClientFlags(depth+1, clientFlagValue, clientFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientAdded
	if clientAdded {
		m.Client = clientFlagValue
	}

	return nil, retAdded
}

func retrieveSiteUcrmDescriptionServiceFlags(depth int, m *models.SiteUcrmDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceFlagName := fmt.Sprintf("%v.service", cmdPrefix)
	if cmd.Flags().Changed(serviceFlagName) {
		// info: complex object service Service is retrieved outside this Changed() block
	}
	serviceFlagValue := m.Service
	if swag.IsZero(serviceFlagValue) {
		serviceFlagValue = &models.Service{}
	}

	err, serviceAdded := retrieveModelServiceFlags(depth+1, serviceFlagValue, serviceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceAdded
	if serviceAdded {
		m.Service = serviceFlagValue
	}

	return nil, retAdded
}
