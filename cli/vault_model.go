// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Vault

// register flags to command
func registerModelVaultFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVaultIsCloudVaultEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVaultIsCloudVaultFromAnotherInstance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVaultIsCloudVaultGenerated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVaultIsPassphraseMissing(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVaultIsVaultEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVaultIsVaultGenerated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVaultPassphrase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVaultIsCloudVaultEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isCloudVaultEnabledDescription := `Required. `

	var isCloudVaultEnabledFlagName string
	if cmdPrefix == "" {
		isCloudVaultEnabledFlagName = "isCloudVaultEnabled"
	} else {
		isCloudVaultEnabledFlagName = fmt.Sprintf("%v.isCloudVaultEnabled", cmdPrefix)
	}

	var isCloudVaultEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isCloudVaultEnabledFlagName, isCloudVaultEnabledFlagDefault, isCloudVaultEnabledDescription)

	return nil
}

func registerVaultIsCloudVaultFromAnotherInstance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isCloudVaultFromAnotherInstanceDescription := `Required. `

	var isCloudVaultFromAnotherInstanceFlagName string
	if cmdPrefix == "" {
		isCloudVaultFromAnotherInstanceFlagName = "isCloudVaultFromAnotherInstance"
	} else {
		isCloudVaultFromAnotherInstanceFlagName = fmt.Sprintf("%v.isCloudVaultFromAnotherInstance", cmdPrefix)
	}

	var isCloudVaultFromAnotherInstanceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isCloudVaultFromAnotherInstanceFlagName, isCloudVaultFromAnotherInstanceFlagDefault, isCloudVaultFromAnotherInstanceDescription)

	return nil
}

func registerVaultIsCloudVaultGenerated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isCloudVaultGeneratedDescription := `Required. `

	var isCloudVaultGeneratedFlagName string
	if cmdPrefix == "" {
		isCloudVaultGeneratedFlagName = "isCloudVaultGenerated"
	} else {
		isCloudVaultGeneratedFlagName = fmt.Sprintf("%v.isCloudVaultGenerated", cmdPrefix)
	}

	var isCloudVaultGeneratedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isCloudVaultGeneratedFlagName, isCloudVaultGeneratedFlagDefault, isCloudVaultGeneratedDescription)

	return nil
}

func registerVaultIsPassphraseMissing(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isPassphraseMissingDescription := `Required. `

	var isPassphraseMissingFlagName string
	if cmdPrefix == "" {
		isPassphraseMissingFlagName = "isPassphraseMissing"
	} else {
		isPassphraseMissingFlagName = fmt.Sprintf("%v.isPassphraseMissing", cmdPrefix)
	}

	var isPassphraseMissingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isPassphraseMissingFlagName, isPassphraseMissingFlagDefault, isPassphraseMissingDescription)

	return nil
}

func registerVaultIsVaultEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isVaultEnabledDescription := `Required. `

	var isVaultEnabledFlagName string
	if cmdPrefix == "" {
		isVaultEnabledFlagName = "isVaultEnabled"
	} else {
		isVaultEnabledFlagName = fmt.Sprintf("%v.isVaultEnabled", cmdPrefix)
	}

	var isVaultEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isVaultEnabledFlagName, isVaultEnabledFlagDefault, isVaultEnabledDescription)

	return nil
}

func registerVaultIsVaultGenerated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isVaultGeneratedDescription := `Required. `

	var isVaultGeneratedFlagName string
	if cmdPrefix == "" {
		isVaultGeneratedFlagName = "isVaultGenerated"
	} else {
		isVaultGeneratedFlagName = fmt.Sprintf("%v.isVaultGenerated", cmdPrefix)
	}

	var isVaultGeneratedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isVaultGeneratedFlagName, isVaultGeneratedFlagDefault, isVaultGeneratedDescription)

	return nil
}

func registerVaultPassphrase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passphraseDescription := `Newly generated vault key.`

	var passphraseFlagName string
	if cmdPrefix == "" {
		passphraseFlagName = "passphrase"
	} else {
		passphraseFlagName = fmt.Sprintf("%v.passphrase", cmdPrefix)
	}

	var passphraseFlagDefault string

	_ = cmd.PersistentFlags().String(passphraseFlagName, passphraseFlagDefault, passphraseDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVaultFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, isCloudVaultEnabledAdded := retrieveVaultIsCloudVaultEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isCloudVaultEnabledAdded

	err, isCloudVaultFromAnotherInstanceAdded := retrieveVaultIsCloudVaultFromAnotherInstanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isCloudVaultFromAnotherInstanceAdded

	err, isCloudVaultGeneratedAdded := retrieveVaultIsCloudVaultGeneratedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isCloudVaultGeneratedAdded

	err, isPassphraseMissingAdded := retrieveVaultIsPassphraseMissingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isPassphraseMissingAdded

	err, isVaultEnabledAdded := retrieveVaultIsVaultEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isVaultEnabledAdded

	err, isVaultGeneratedAdded := retrieveVaultIsVaultGeneratedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isVaultGeneratedAdded

	err, passphraseAdded := retrieveVaultPassphraseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passphraseAdded

	return nil, retAdded
}

func retrieveVaultIsCloudVaultEnabledFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isCloudVaultEnabledFlagName := fmt.Sprintf("%v.isCloudVaultEnabled", cmdPrefix)
	if cmd.Flags().Changed(isCloudVaultEnabledFlagName) {

		var isCloudVaultEnabledFlagName string
		if cmdPrefix == "" {
			isCloudVaultEnabledFlagName = "isCloudVaultEnabled"
		} else {
			isCloudVaultEnabledFlagName = fmt.Sprintf("%v.isCloudVaultEnabled", cmdPrefix)
		}

		isCloudVaultEnabledFlagValue, err := cmd.Flags().GetBool(isCloudVaultEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsCloudVaultEnabled = &isCloudVaultEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVaultIsCloudVaultFromAnotherInstanceFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isCloudVaultFromAnotherInstanceFlagName := fmt.Sprintf("%v.isCloudVaultFromAnotherInstance", cmdPrefix)
	if cmd.Flags().Changed(isCloudVaultFromAnotherInstanceFlagName) {

		var isCloudVaultFromAnotherInstanceFlagName string
		if cmdPrefix == "" {
			isCloudVaultFromAnotherInstanceFlagName = "isCloudVaultFromAnotherInstance"
		} else {
			isCloudVaultFromAnotherInstanceFlagName = fmt.Sprintf("%v.isCloudVaultFromAnotherInstance", cmdPrefix)
		}

		isCloudVaultFromAnotherInstanceFlagValue, err := cmd.Flags().GetBool(isCloudVaultFromAnotherInstanceFlagName)
		if err != nil {
			return err, false
		}
		m.IsCloudVaultFromAnotherInstance = &isCloudVaultFromAnotherInstanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVaultIsCloudVaultGeneratedFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isCloudVaultGeneratedFlagName := fmt.Sprintf("%v.isCloudVaultGenerated", cmdPrefix)
	if cmd.Flags().Changed(isCloudVaultGeneratedFlagName) {

		var isCloudVaultGeneratedFlagName string
		if cmdPrefix == "" {
			isCloudVaultGeneratedFlagName = "isCloudVaultGenerated"
		} else {
			isCloudVaultGeneratedFlagName = fmt.Sprintf("%v.isCloudVaultGenerated", cmdPrefix)
		}

		isCloudVaultGeneratedFlagValue, err := cmd.Flags().GetBool(isCloudVaultGeneratedFlagName)
		if err != nil {
			return err, false
		}
		m.IsCloudVaultGenerated = &isCloudVaultGeneratedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVaultIsPassphraseMissingFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isPassphraseMissingFlagName := fmt.Sprintf("%v.isPassphraseMissing", cmdPrefix)
	if cmd.Flags().Changed(isPassphraseMissingFlagName) {

		var isPassphraseMissingFlagName string
		if cmdPrefix == "" {
			isPassphraseMissingFlagName = "isPassphraseMissing"
		} else {
			isPassphraseMissingFlagName = fmt.Sprintf("%v.isPassphraseMissing", cmdPrefix)
		}

		isPassphraseMissingFlagValue, err := cmd.Flags().GetBool(isPassphraseMissingFlagName)
		if err != nil {
			return err, false
		}
		m.IsPassphraseMissing = &isPassphraseMissingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVaultIsVaultEnabledFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isVaultEnabledFlagName := fmt.Sprintf("%v.isVaultEnabled", cmdPrefix)
	if cmd.Flags().Changed(isVaultEnabledFlagName) {

		var isVaultEnabledFlagName string
		if cmdPrefix == "" {
			isVaultEnabledFlagName = "isVaultEnabled"
		} else {
			isVaultEnabledFlagName = fmt.Sprintf("%v.isVaultEnabled", cmdPrefix)
		}

		isVaultEnabledFlagValue, err := cmd.Flags().GetBool(isVaultEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsVaultEnabled = &isVaultEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVaultIsVaultGeneratedFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isVaultGeneratedFlagName := fmt.Sprintf("%v.isVaultGenerated", cmdPrefix)
	if cmd.Flags().Changed(isVaultGeneratedFlagName) {

		var isVaultGeneratedFlagName string
		if cmdPrefix == "" {
			isVaultGeneratedFlagName = "isVaultGenerated"
		} else {
			isVaultGeneratedFlagName = fmt.Sprintf("%v.isVaultGenerated", cmdPrefix)
		}

		isVaultGeneratedFlagValue, err := cmd.Flags().GetBool(isVaultGeneratedFlagName)
		if err != nil {
			return err, false
		}
		m.IsVaultGenerated = &isVaultGeneratedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVaultPassphraseFlags(depth int, m *models.Vault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passphraseFlagName := fmt.Sprintf("%v.passphrase", cmdPrefix)
	if cmd.Flags().Changed(passphraseFlagName) {

		var passphraseFlagName string
		if cmdPrefix == "" {
			passphraseFlagName = "passphrase"
		} else {
			passphraseFlagName = fmt.Sprintf("%v.passphrase", cmdPrefix)
		}

		passphraseFlagValue, err := cmd.Flags().GetString(passphraseFlagName)
		if err != nil {
			return err, false
		}
		m.Passphrase = passphraseFlagValue

		retAdded = true
	}

	return nil, retAdded
}
