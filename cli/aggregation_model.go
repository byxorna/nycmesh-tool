// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Aggregation

// register flags to command
func registerModelAggregationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAggregationAllCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAggregationErrorCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAggregationInfoCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAggregationWarningCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAggregationAllCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allCountDescription := `Required. `

	var allCountFlagName string
	if cmdPrefix == "" {
		allCountFlagName = "allCount"
	} else {
		allCountFlagName = fmt.Sprintf("%v.allCount", cmdPrefix)
	}

	var allCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(allCountFlagName, allCountFlagDefault, allCountDescription)

	return nil
}

func registerAggregationErrorCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorCountDescription := `Required. `

	var errorCountFlagName string
	if cmdPrefix == "" {
		errorCountFlagName = "errorCount"
	} else {
		errorCountFlagName = fmt.Sprintf("%v.errorCount", cmdPrefix)
	}

	var errorCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(errorCountFlagName, errorCountFlagDefault, errorCountDescription)

	return nil
}

func registerAggregationInfoCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	infoCountDescription := `Required. `

	var infoCountFlagName string
	if cmdPrefix == "" {
		infoCountFlagName = "infoCount"
	} else {
		infoCountFlagName = fmt.Sprintf("%v.infoCount", cmdPrefix)
	}

	var infoCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(infoCountFlagName, infoCountFlagDefault, infoCountDescription)

	return nil
}

func registerAggregationWarningCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	warningCountDescription := `Required. `

	var warningCountFlagName string
	if cmdPrefix == "" {
		warningCountFlagName = "warningCount"
	} else {
		warningCountFlagName = fmt.Sprintf("%v.warningCount", cmdPrefix)
	}

	var warningCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(warningCountFlagName, warningCountFlagDefault, warningCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAggregationFlags(depth int, m *models.Aggregation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allCountAdded := retrieveAggregationAllCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allCountAdded

	err, errorCountAdded := retrieveAggregationErrorCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorCountAdded

	err, infoCountAdded := retrieveAggregationInfoCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || infoCountAdded

	err, warningCountAdded := retrieveAggregationWarningCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || warningCountAdded

	return nil, retAdded
}

func retrieveAggregationAllCountFlags(depth int, m *models.Aggregation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allCountFlagName := fmt.Sprintf("%v.allCount", cmdPrefix)
	if cmd.Flags().Changed(allCountFlagName) {

		var allCountFlagName string
		if cmdPrefix == "" {
			allCountFlagName = "allCount"
		} else {
			allCountFlagName = fmt.Sprintf("%v.allCount", cmdPrefix)
		}

		allCountFlagValue, err := cmd.Flags().GetInt64(allCountFlagName)
		if err != nil {
			return err, false
		}
		m.AllCount = &allCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAggregationErrorCountFlags(depth int, m *models.Aggregation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorCountFlagName := fmt.Sprintf("%v.errorCount", cmdPrefix)
	if cmd.Flags().Changed(errorCountFlagName) {

		var errorCountFlagName string
		if cmdPrefix == "" {
			errorCountFlagName = "errorCount"
		} else {
			errorCountFlagName = fmt.Sprintf("%v.errorCount", cmdPrefix)
		}

		errorCountFlagValue, err := cmd.Flags().GetInt64(errorCountFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorCount = &errorCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAggregationInfoCountFlags(depth int, m *models.Aggregation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	infoCountFlagName := fmt.Sprintf("%v.infoCount", cmdPrefix)
	if cmd.Flags().Changed(infoCountFlagName) {

		var infoCountFlagName string
		if cmdPrefix == "" {
			infoCountFlagName = "infoCount"
		} else {
			infoCountFlagName = fmt.Sprintf("%v.infoCount", cmdPrefix)
		}

		infoCountFlagValue, err := cmd.Flags().GetInt64(infoCountFlagName)
		if err != nil {
			return err, false
		}
		m.InfoCount = &infoCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAggregationWarningCountFlags(depth int, m *models.Aggregation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	warningCountFlagName := fmt.Sprintf("%v.warningCount", cmdPrefix)
	if cmd.Flags().Changed(warningCountFlagName) {

		var warningCountFlagName string
		if cmdPrefix == "" {
			warningCountFlagName = "warningCount"
		} else {
			warningCountFlagName = fmt.Sprintf("%v.warningCount", cmdPrefix)
		}

		warningCountFlagValue, err := cmd.Flags().GetInt64(warningCountFlagName)
		if err != nil {
			return err, false
		}
		m.WarningCount = &warningCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
