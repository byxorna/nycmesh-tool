// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for NewsSchema

// register flags to command
func registerModelNewsSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNewsSchemaDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNewsSchemaID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNewsSchemaLink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNewsSchemaText(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNewsSchemaType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNewsSchemaWho(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNewsSchemaDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dateDescription := `Required. Timestamp in milliseconds when the news was published.`

	var dateFlagName string
	if cmdPrefix == "" {
		dateFlagName = "date"
	} else {
		dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
	}

	var dateFlagDefault float64

	_ = cmd.PersistentFlags().Float64(dateFlagName, dateFlagDefault, dateDescription)

	return nil
}

func registerNewsSchemaID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. ID of the news.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerNewsSchemaLink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	linkDescription := `Required. URL with with more details.`

	var linkFlagName string
	if cmdPrefix == "" {
		linkFlagName = "link"
	} else {
		linkFlagName = fmt.Sprintf("%v.link", cmdPrefix)
	}

	var linkFlagDefault string

	_ = cmd.PersistentFlags().String(linkFlagName, linkFlagDefault, linkDescription)

	return nil
}

func registerNewsSchemaText(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	textDescription := `Required. News description.`

	var textFlagName string
	if cmdPrefix == "" {
		textFlagName = "text"
	} else {
		textFlagName = fmt.Sprintf("%v.text", cmdPrefix)
	}

	var textFlagDefault string

	_ = cmd.PersistentFlags().String(textFlagName, textFlagDefault, textDescription)

	return nil
}

func registerNewsSchemaType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Required. News severity.`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerNewsSchemaWho(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	whoDescription := `Required. Who issued the news.`

	var whoFlagName string
	if cmdPrefix == "" {
		whoFlagName = "who"
	} else {
		whoFlagName = fmt.Sprintf("%v.who", cmdPrefix)
	}

	var whoFlagDefault string

	_ = cmd.PersistentFlags().String(whoFlagName, whoFlagDefault, whoDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNewsSchemaFlags(depth int, m *models.NewsSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dateAdded := retrieveNewsSchemaDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateAdded

	err, idAdded := retrieveNewsSchemaIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, linkAdded := retrieveNewsSchemaLinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkAdded

	err, textAdded := retrieveNewsSchemaTextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || textAdded

	err, typeAdded := retrieveNewsSchemaTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, whoAdded := retrieveNewsSchemaWhoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || whoAdded

	return nil, retAdded
}

func retrieveNewsSchemaDateFlags(depth int, m *models.NewsSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateFlagName := fmt.Sprintf("%v.date", cmdPrefix)
	if cmd.Flags().Changed(dateFlagName) {

		var dateFlagName string
		if cmdPrefix == "" {
			dateFlagName = "date"
		} else {
			dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
		}

		dateFlagValue, err := cmd.Flags().GetFloat64(dateFlagName)
		if err != nil {
			return err, false
		}
		m.Date = &dateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNewsSchemaIDFlags(depth int, m *models.NewsSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNewsSchemaLinkFlags(depth int, m *models.NewsSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linkFlagName := fmt.Sprintf("%v.link", cmdPrefix)
	if cmd.Flags().Changed(linkFlagName) {

		var linkFlagName string
		if cmdPrefix == "" {
			linkFlagName = "link"
		} else {
			linkFlagName = fmt.Sprintf("%v.link", cmdPrefix)
		}

		linkFlagValue, err := cmd.Flags().GetString(linkFlagName)
		if err != nil {
			return err, false
		}
		m.Link = &linkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNewsSchemaTextFlags(depth int, m *models.NewsSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	textFlagName := fmt.Sprintf("%v.text", cmdPrefix)
	if cmd.Flags().Changed(textFlagName) {

		var textFlagName string
		if cmdPrefix == "" {
			textFlagName = "text"
		} else {
			textFlagName = fmt.Sprintf("%v.text", cmdPrefix)
		}

		textFlagValue, err := cmd.Flags().GetString(textFlagName)
		if err != nil {
			return err, false
		}
		m.Text = &textFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNewsSchemaTypeFlags(depth int, m *models.NewsSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNewsSchemaWhoFlags(depth int, m *models.NewsSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	whoFlagName := fmt.Sprintf("%v.who", cmdPrefix)
	if cmd.Flags().Changed(whoFlagName) {

		var whoFlagName string
		if cmdPrefix == "" {
			whoFlagName = "who"
		} else {
			whoFlagName = fmt.Sprintf("%v.who", cmdPrefix)
		}

		whoFlagValue, err := cmd.Flags().GetString(whoFlagName)
		if err != nil {
			return err, false
		}
		m.Who = &whoFlagValue

		retAdded = true
	}

	return nil, retAdded
}
