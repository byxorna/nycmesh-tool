// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for TokenSchema

// register flags to command
func registerModelTokenSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTokenSchemaCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaCurrentSession(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaExpiresAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaLastUsed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaMaxExpiresAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaTransient(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokenSchemaUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTokenSchemaCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive createdAt strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerTokenSchemaCurrentSession(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentSessionDescription := `Required. If true than this token was used in this request.`

	var currentSessionFlagName string
	if cmdPrefix == "" {
		currentSessionFlagName = "currentSession"
	} else {
		currentSessionFlagName = fmt.Sprintf("%v.currentSession", cmdPrefix)
	}

	var currentSessionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(currentSessionFlagName, currentSessionFlagDefault, currentSessionDescription)

	return nil
}

func registerTokenSchemaExpiresAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive expiresAt strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerTokenSchemaID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Token ID, not the token itself.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerTokenSchemaLastUsed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive lastUsed strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerTokenSchemaMaxExpiresAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive maxExpiresAt strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerTokenSchemaMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	metaDescription := `Token metadata.`

	var metaFlagName string
	if cmdPrefix == "" {
		metaFlagName = "meta"
	} else {
		metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
	}

	var metaFlagDefault string

	_ = cmd.PersistentFlags().String(metaFlagName, metaFlagDefault, metaDescription)

	return nil
}

func registerTokenSchemaName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Human readable token name.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerTokenSchemaScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: scope Scope array type is not supported by go-swagger cli yet

	return nil
}

func registerTokenSchemaTransient(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transientDescription := `Required. If true then the token will be deleted when server restarts.`

	var transientFlagName string
	if cmdPrefix == "" {
		transientFlagName = "transient"
	} else {
		transientFlagName = fmt.Sprintf("%v.transient", cmdPrefix)
	}

	var transientFlagDefault bool

	_ = cmd.PersistentFlags().Bool(transientFlagName, transientFlagDefault, transientDescription)

	return nil
}

func registerTokenSchemaUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	if err := registerModelUserFlags(depth+1, userFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTokenSchemaUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := `Id of the user this token represents. Null if the token is not bound to any user.`

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "userId"
	} else {
		userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
	}

	var userIdFlagDefault string

	_ = cmd.PersistentFlags().String(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTokenSchemaFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveTokenSchemaCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, currentSessionAdded := retrieveTokenSchemaCurrentSessionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentSessionAdded

	err, expiresAtAdded := retrieveTokenSchemaExpiresAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expiresAtAdded

	err, idAdded := retrieveTokenSchemaIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, lastUsedAdded := retrieveTokenSchemaLastUsedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastUsedAdded

	err, maxExpiresAtAdded := retrieveTokenSchemaMaxExpiresAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxExpiresAtAdded

	err, metaAdded := retrieveTokenSchemaMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	err, nameAdded := retrieveTokenSchemaNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, scopeAdded := retrieveTokenSchemaScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded

	err, transientAdded := retrieveTokenSchemaTransientFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transientAdded

	err, userAdded := retrieveTokenSchemaUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	err, userIdAdded := retrieveTokenSchemaUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	return nil, retAdded
}

func retrieveTokenSchemaCreatedAtFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		// warning: primitive createdAt strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaCurrentSessionFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentSessionFlagName := fmt.Sprintf("%v.currentSession", cmdPrefix)
	if cmd.Flags().Changed(currentSessionFlagName) {

		var currentSessionFlagName string
		if cmdPrefix == "" {
			currentSessionFlagName = "currentSession"
		} else {
			currentSessionFlagName = fmt.Sprintf("%v.currentSession", cmdPrefix)
		}

		currentSessionFlagValue, err := cmd.Flags().GetBool(currentSessionFlagName)
		if err != nil {
			return err, false
		}
		m.CurrentSession = &currentSessionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaExpiresAtFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expiresAtFlagName := fmt.Sprintf("%v.expiresAt", cmdPrefix)
	if cmd.Flags().Changed(expiresAtFlagName) {

		// warning: primitive expiresAt strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaIDFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaLastUsedFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastUsedFlagName := fmt.Sprintf("%v.lastUsed", cmdPrefix)
	if cmd.Flags().Changed(lastUsedFlagName) {

		// warning: primitive lastUsed strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaMaxExpiresAtFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxExpiresAtFlagName := fmt.Sprintf("%v.maxExpiresAt", cmdPrefix)
	if cmd.Flags().Changed(maxExpiresAtFlagName) {

		// warning: primitive maxExpiresAt strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaMetaFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {

		var metaFlagName string
		if cmdPrefix == "" {
			metaFlagName = "meta"
		} else {
			metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
		}

		metaFlagValue, err := cmd.Flags().GetString(metaFlagName)
		if err != nil {
			return err, false
		}
		m.Meta = metaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaNameFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaScopeFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopeFlagName := fmt.Sprintf("%v.scope", cmdPrefix)
	if cmd.Flags().Changed(scopeFlagName) {
		// warning: scope array type Scope is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTokenSchemaTransientFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transientFlagName := fmt.Sprintf("%v.transient", cmdPrefix)
	if cmd.Flags().Changed(transientFlagName) {

		var transientFlagName string
		if cmdPrefix == "" {
			transientFlagName = "transient"
		} else {
			transientFlagName = fmt.Sprintf("%v.transient", cmdPrefix)
		}

		transientFlagValue, err := cmd.Flags().GetBool(transientFlagName)
		if err != nil {
			return err, false
		}
		m.Transient = &transientFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokenSchemaUserFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {
		// info: complex object user User is retrieved outside this Changed() block
	}
	userFlagValue := m.User
	if swag.IsZero(userFlagValue) {
		userFlagValue = &models.User{}
	}

	err, userAdded := retrieveModelUserFlags(depth+1, userFlagValue, userFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded
	if userAdded {
		m.User = userFlagValue
	}

	return nil, retAdded
}

func retrieveTokenSchemaUserIDFlags(depth int, m *models.TokenSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.userId", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "userId"
		} else {
			userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetString(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
