// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/devices"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDevicesGetAirlinkProxyRainfallr001mapCmd returns a cmd to handle operation getAirlinkProxyRainfallr001map
func makeOperationDevicesGetAirlinkProxyRainfallr001mapCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getAirlinkProxyRainfallr001map",
		Short: ``,
		RunE:  runOperationDevicesGetAirlinkProxyRainfallr001map,
	}

	if err := registerOperationDevicesGetAirlinkProxyRainfallr001mapParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDevicesGetAirlinkProxyRainfallr001map uses cmd flags to call endpoint api
func runOperationDevicesGetAirlinkProxyRainfallr001map(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := devices.NewGetAirlinkProxyRainfallr001mapParams()
	if err, _ := retrieveOperationDevicesGetAirlinkProxyRainfallr001mapVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDevicesGetAirlinkProxyRainfallr001mapResult(appCli.Devices.GetAirlinkProxyRainfallr001map(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDevicesGetAirlinkProxyRainfallr001mapParamFlags registers all flags needed to fill params
func registerOperationDevicesGetAirlinkProxyRainfallr001mapParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDevicesGetAirlinkProxyRainfallr001mapVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDevicesGetAirlinkProxyRainfallr001mapVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Rainfall map file version.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault float64 = 1

	_ = cmd.PersistentFlags().Float64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationDevicesGetAirlinkProxyRainfallr001mapVersionFlag(m *devices.GetAirlinkProxyRainfallr001mapParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetFloat64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

	}
	return nil, retAdded
}

// parseOperationDevicesGetAirlinkProxyRainfallr001mapResult parses request result and return the string content
func parseOperationDevicesGetAirlinkProxyRainfallr001mapResult(respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*devices.GetAirlinkProxyRainfallr001mapBadRequest)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*devices.GetAirlinkProxyRainfallr001mapUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*devices.GetAirlinkProxyRainfallr001mapForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*devices.GetAirlinkProxyRainfallr001mapInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*devices.GetAirlinkProxyRainfallr001mapBadGateway)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}
	return "", nil
}
