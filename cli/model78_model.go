// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Model78

// register flags to command
func registerModelModel78Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel78AllowLoggingToLogentries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel78AllowLoggingToSentry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel78EulaConfirmed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel78Hostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel78IsIsp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel78SMTP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel78UseLetsEncrypt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel78User(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel78AllowLoggingToLogentries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowLoggingToLogentriesDescription := ``

	var allowLoggingToLogentriesFlagName string
	if cmdPrefix == "" {
		allowLoggingToLogentriesFlagName = "allowLoggingToLogentries"
	} else {
		allowLoggingToLogentriesFlagName = fmt.Sprintf("%v.allowLoggingToLogentries", cmdPrefix)
	}

	var allowLoggingToLogentriesFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(allowLoggingToLogentriesFlagName, allowLoggingToLogentriesFlagDefault, allowLoggingToLogentriesDescription)

	return nil
}

func registerModel78AllowLoggingToSentry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allowLoggingToSentryDescription := ``

	var allowLoggingToSentryFlagName string
	if cmdPrefix == "" {
		allowLoggingToSentryFlagName = "allowLoggingToSentry"
	} else {
		allowLoggingToSentryFlagName = fmt.Sprintf("%v.allowLoggingToSentry", cmdPrefix)
	}

	var allowLoggingToSentryFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(allowLoggingToSentryFlagName, allowLoggingToSentryFlagDefault, allowLoggingToSentryDescription)

	return nil
}

func registerModel78EulaConfirmed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eulaConfirmedDescription := `Required. `

	var eulaConfirmedFlagName string
	if cmdPrefix == "" {
		eulaConfirmedFlagName = "eulaConfirmed"
	} else {
		eulaConfirmedFlagName = fmt.Sprintf("%v.eulaConfirmed", cmdPrefix)
	}

	var eulaConfirmedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(eulaConfirmedFlagName, eulaConfirmedFlagDefault, eulaConfirmedDescription)

	return nil
}

func registerModel78Hostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `Required. `

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerModel78IsIsp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isIspDescription := ``

	var isIspFlagName string
	if cmdPrefix == "" {
		isIspFlagName = "isIsp"
	} else {
		isIspFlagName = fmt.Sprintf("%v.isIsp", cmdPrefix)
	}

	var isIspFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isIspFlagName, isIspFlagDefault, isIspDescription)

	return nil
}

func registerModel78SMTP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var smtpFlagName string
	if cmdPrefix == "" {
		smtpFlagName = "smtp"
	} else {
		smtpFlagName = fmt.Sprintf("%v.smtp", cmdPrefix)
	}

	if err := registerModelSMTPFlags(depth+1, smtpFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel78UseLetsEncrypt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useLetsEncryptDescription := `Required. `

	var useLetsEncryptFlagName string
	if cmdPrefix == "" {
		useLetsEncryptFlagName = "useLetsEncrypt"
	} else {
		useLetsEncryptFlagName = fmt.Sprintf("%v.useLetsEncrypt", cmdPrefix)
	}

	var useLetsEncryptFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useLetsEncryptFlagName, useLetsEncryptFlagDefault, useLetsEncryptDescription)

	return nil
}

func registerModel78User(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	if err := registerModelUser4Flags(depth+1, userFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel78Flags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, allowLoggingToLogentriesAdded := retrieveModel78AllowLoggingToLogentriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowLoggingToLogentriesAdded

	err, allowLoggingToSentryAdded := retrieveModel78AllowLoggingToSentryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowLoggingToSentryAdded

	err, eulaConfirmedAdded := retrieveModel78EulaConfirmedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eulaConfirmedAdded

	err, hostnameAdded := retrieveModel78HostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, isIspAdded := retrieveModel78IsIspFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isIspAdded

	err, smtpAdded := retrieveModel78SMTPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || smtpAdded

	err, useLetsEncryptAdded := retrieveModel78UseLetsEncryptFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useLetsEncryptAdded

	err, userAdded := retrieveModel78UserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	return nil, retAdded
}

func retrieveModel78AllowLoggingToLogentriesFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowLoggingToLogentriesFlagName := fmt.Sprintf("%v.allowLoggingToLogentries", cmdPrefix)
	if cmd.Flags().Changed(allowLoggingToLogentriesFlagName) {

		var allowLoggingToLogentriesFlagName string
		if cmdPrefix == "" {
			allowLoggingToLogentriesFlagName = "allowLoggingToLogentries"
		} else {
			allowLoggingToLogentriesFlagName = fmt.Sprintf("%v.allowLoggingToLogentries", cmdPrefix)
		}

		allowLoggingToLogentriesFlagValue, err := cmd.Flags().GetBool(allowLoggingToLogentriesFlagName)
		if err != nil {
			return err, false
		}
		m.AllowLoggingToLogentries = &allowLoggingToLogentriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel78AllowLoggingToSentryFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowLoggingToSentryFlagName := fmt.Sprintf("%v.allowLoggingToSentry", cmdPrefix)
	if cmd.Flags().Changed(allowLoggingToSentryFlagName) {

		var allowLoggingToSentryFlagName string
		if cmdPrefix == "" {
			allowLoggingToSentryFlagName = "allowLoggingToSentry"
		} else {
			allowLoggingToSentryFlagName = fmt.Sprintf("%v.allowLoggingToSentry", cmdPrefix)
		}

		allowLoggingToSentryFlagValue, err := cmd.Flags().GetBool(allowLoggingToSentryFlagName)
		if err != nil {
			return err, false
		}
		m.AllowLoggingToSentry = &allowLoggingToSentryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel78EulaConfirmedFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eulaConfirmedFlagName := fmt.Sprintf("%v.eulaConfirmed", cmdPrefix)
	if cmd.Flags().Changed(eulaConfirmedFlagName) {

		var eulaConfirmedFlagName string
		if cmdPrefix == "" {
			eulaConfirmedFlagName = "eulaConfirmed"
		} else {
			eulaConfirmedFlagName = fmt.Sprintf("%v.eulaConfirmed", cmdPrefix)
		}

		eulaConfirmedFlagValue, err := cmd.Flags().GetBool(eulaConfirmedFlagName)
		if err != nil {
			return err, false
		}
		m.EulaConfirmed = &eulaConfirmedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel78HostnameFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = &hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel78IsIspFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isIspFlagName := fmt.Sprintf("%v.isIsp", cmdPrefix)
	if cmd.Flags().Changed(isIspFlagName) {

		var isIspFlagName string
		if cmdPrefix == "" {
			isIspFlagName = "isIsp"
		} else {
			isIspFlagName = fmt.Sprintf("%v.isIsp", cmdPrefix)
		}

		isIspFlagValue, err := cmd.Flags().GetBool(isIspFlagName)
		if err != nil {
			return err, false
		}
		m.IsIsp = isIspFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel78SMTPFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	smtpFlagName := fmt.Sprintf("%v.smtp", cmdPrefix)
	if cmd.Flags().Changed(smtpFlagName) {
		// info: complex object smtp SMTP is retrieved outside this Changed() block
	}
	smtpFlagValue := m.SMTP
	if swag.IsZero(smtpFlagValue) {
		smtpFlagValue = &models.SMTP{}
	}

	err, smtpAdded := retrieveModelSMTPFlags(depth+1, smtpFlagValue, smtpFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || smtpAdded
	if smtpAdded {
		m.SMTP = smtpFlagValue
	}

	return nil, retAdded
}

func retrieveModel78UseLetsEncryptFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useLetsEncryptFlagName := fmt.Sprintf("%v.useLetsEncrypt", cmdPrefix)
	if cmd.Flags().Changed(useLetsEncryptFlagName) {

		var useLetsEncryptFlagName string
		if cmdPrefix == "" {
			useLetsEncryptFlagName = "useLetsEncrypt"
		} else {
			useLetsEncryptFlagName = fmt.Sprintf("%v.useLetsEncrypt", cmdPrefix)
		}

		useLetsEncryptFlagValue, err := cmd.Flags().GetBool(useLetsEncryptFlagName)
		if err != nil {
			return err, false
		}
		m.UseLetsEncrypt = &useLetsEncryptFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel78UserFlags(depth int, m *models.Model78, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {
		// info: complex object user User4 is retrieved outside this Changed() block
	}
	userFlagValue := m.User
	if swag.IsZero(userFlagValue) {
		userFlagValue = &models.User4{}
	}

	err, userAdded := retrieveModelUser4Flags(depth+1, userFlagValue, userFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded
	if userAdded {
		m.User = userFlagValue
	}

	return nil, retAdded
}
