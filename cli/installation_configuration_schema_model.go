// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for InstallationConfigurationSchema

// register flags to command
func registerModelInstallationConfigurationSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstallationConfigurationSchemaAp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationConfigurationSchemaConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstallationConfigurationSchemaAp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apDescription := `It is set to true when the device is set to be installed as a AP`

	var apFlagName string
	if cmdPrefix == "" {
		apFlagName = "ap"
	} else {
		apFlagName = fmt.Sprintf("%v.ap", cmdPrefix)
	}

	var apFlagDefault bool

	_ = cmd.PersistentFlags().Bool(apFlagName, apFlagDefault, apDescription)

	return nil
}

func registerInstallationConfigurationSchemaConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var configurationFlagName string
	if cmdPrefix == "" {
		configurationFlagName = "configuration"
	} else {
		configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
	}

	if err := registerModelConfigurationFlags(depth+1, configurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstallationConfigurationSchemaFlags(depth int, m *models.InstallationConfigurationSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, apAdded := retrieveInstallationConfigurationSchemaApFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apAdded

	err, configurationAdded := retrieveInstallationConfigurationSchemaConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configurationAdded

	return nil, retAdded
}

func retrieveInstallationConfigurationSchemaApFlags(depth int, m *models.InstallationConfigurationSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apFlagName := fmt.Sprintf("%v.ap", cmdPrefix)
	if cmd.Flags().Changed(apFlagName) {

		var apFlagName string
		if cmdPrefix == "" {
			apFlagName = "ap"
		} else {
			apFlagName = fmt.Sprintf("%v.ap", cmdPrefix)
		}

		apFlagValue, err := cmd.Flags().GetBool(apFlagName)
		if err != nil {
			return err, false
		}
		m.Ap = apFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationConfigurationSchemaConfigurationFlags(depth int, m *models.InstallationConfigurationSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configurationFlagName := fmt.Sprintf("%v.configuration", cmdPrefix)
	if cmd.Flags().Changed(configurationFlagName) {
		// info: complex object configuration Configuration is retrieved outside this Changed() block
	}
	configurationFlagValue := m.Configuration
	if swag.IsZero(configurationFlagValue) {
		configurationFlagValue = &models.Configuration{}
	}

	err, configurationAdded := retrieveModelConfigurationFlags(depth+1, configurationFlagValue, configurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configurationAdded
	if configurationAdded {
		m.Configuration = configurationFlagValue
	}

	return nil, retAdded
}
