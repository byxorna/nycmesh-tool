// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for SetupUispFinish

// register flags to command
func registerModelSetupUispFinishFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSetupUispFinishConnectionString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSetupUispFinishIsLetsEncryptError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSetupUispFinishPassphrase(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSetupUispFinishConnectionString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	connectionStringDescription := ``

	var connectionStringFlagName string
	if cmdPrefix == "" {
		connectionStringFlagName = "connectionString"
	} else {
		connectionStringFlagName = fmt.Sprintf("%v.connectionString", cmdPrefix)
	}

	var connectionStringFlagDefault string

	_ = cmd.PersistentFlags().String(connectionStringFlagName, connectionStringFlagDefault, connectionStringDescription)

	return nil
}

func registerSetupUispFinishIsLetsEncryptError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isLetsEncryptErrorDescription := ``

	var isLetsEncryptErrorFlagName string
	if cmdPrefix == "" {
		isLetsEncryptErrorFlagName = "isLetsEncryptError"
	} else {
		isLetsEncryptErrorFlagName = fmt.Sprintf("%v.isLetsEncryptError", cmdPrefix)
	}

	var isLetsEncryptErrorFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isLetsEncryptErrorFlagName, isLetsEncryptErrorFlagDefault, isLetsEncryptErrorDescription)

	return nil
}

func registerSetupUispFinishPassphrase(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passphraseDescription := ``

	var passphraseFlagName string
	if cmdPrefix == "" {
		passphraseFlagName = "passphrase"
	} else {
		passphraseFlagName = fmt.Sprintf("%v.passphrase", cmdPrefix)
	}

	var passphraseFlagDefault string

	_ = cmd.PersistentFlags().String(passphraseFlagName, passphraseFlagDefault, passphraseDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSetupUispFinishFlags(depth int, m *models.SetupUispFinish, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, connectionStringAdded := retrieveSetupUispFinishConnectionStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionStringAdded

	err, isLetsEncryptErrorAdded := retrieveSetupUispFinishIsLetsEncryptErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isLetsEncryptErrorAdded

	err, passphraseAdded := retrieveSetupUispFinishPassphraseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passphraseAdded

	return nil, retAdded
}

func retrieveSetupUispFinishConnectionStringFlags(depth int, m *models.SetupUispFinish, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionStringFlagName := fmt.Sprintf("%v.connectionString", cmdPrefix)
	if cmd.Flags().Changed(connectionStringFlagName) {

		var connectionStringFlagName string
		if cmdPrefix == "" {
			connectionStringFlagName = "connectionString"
		} else {
			connectionStringFlagName = fmt.Sprintf("%v.connectionString", cmdPrefix)
		}

		connectionStringFlagValue, err := cmd.Flags().GetString(connectionStringFlagName)
		if err != nil {
			return err, false
		}
		m.ConnectionString = connectionStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSetupUispFinishIsLetsEncryptErrorFlags(depth int, m *models.SetupUispFinish, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isLetsEncryptErrorFlagName := fmt.Sprintf("%v.isLetsEncryptError", cmdPrefix)
	if cmd.Flags().Changed(isLetsEncryptErrorFlagName) {

		var isLetsEncryptErrorFlagName string
		if cmdPrefix == "" {
			isLetsEncryptErrorFlagName = "isLetsEncryptError"
		} else {
			isLetsEncryptErrorFlagName = fmt.Sprintf("%v.isLetsEncryptError", cmdPrefix)
		}

		isLetsEncryptErrorFlagValue, err := cmd.Flags().GetBool(isLetsEncryptErrorFlagName)
		if err != nil {
			return err, false
		}
		m.IsLetsEncryptError = isLetsEncryptErrorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSetupUispFinishPassphraseFlags(depth int, m *models.SetupUispFinish, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passphraseFlagName := fmt.Sprintf("%v.passphrase", cmdPrefix)
	if cmd.Flags().Changed(passphraseFlagName) {

		var passphraseFlagName string
		if cmdPrefix == "" {
			passphraseFlagName = "passphrase"
		} else {
			passphraseFlagName = fmt.Sprintf("%v.passphrase", cmdPrefix)
		}

		passphraseFlagValue, err := cmd.Flags().GetString(passphraseFlagName)
		if err != nil {
			return err, false
		}
		m.Passphrase = passphraseFlagValue

		retAdded = true
	}

	return nil, retAdded
}
