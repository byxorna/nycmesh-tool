// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model69

// register flags to command
func registerModelModel69Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel69DeviceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel69FirmwareForMStationsVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel69FirmwareVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel69DeviceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceIdDescription := `Required. `

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}

func registerModel69FirmwareForMStationsVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firmwareForMStationsVersionDescription := `For accessPoint (AC series) with M stations.`

	var firmwareForMStationsVersionFlagName string
	if cmdPrefix == "" {
		firmwareForMStationsVersionFlagName = "firmwareForMStationsVersion"
	} else {
		firmwareForMStationsVersionFlagName = fmt.Sprintf("%v.firmwareForMStationsVersion", cmdPrefix)
	}

	var firmwareForMStationsVersionFlagDefault string

	_ = cmd.PersistentFlags().String(firmwareForMStationsVersionFlagName, firmwareForMStationsVersionFlagDefault, firmwareForMStationsVersionDescription)

	return nil
}

func registerModel69FirmwareVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firmwareVersionDescription := `Required. `

	var firmwareVersionFlagName string
	if cmdPrefix == "" {
		firmwareVersionFlagName = "firmwareVersion"
	} else {
		firmwareVersionFlagName = fmt.Sprintf("%v.firmwareVersion", cmdPrefix)
	}

	var firmwareVersionFlagDefault string

	_ = cmd.PersistentFlags().String(firmwareVersionFlagName, firmwareVersionFlagDefault, firmwareVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel69Flags(depth int, m *models.Model69, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceIdAdded := retrieveModel69DeviceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdAdded

	err, firmwareForMStationsVersionAdded := retrieveModel69FirmwareForMStationsVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareForMStationsVersionAdded

	err, firmwareVersionAdded := retrieveModel69FirmwareVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareVersionAdded

	return nil, retAdded
}

func retrieveModel69DeviceIDFlags(depth int, m *models.Model69, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdFlagName := fmt.Sprintf("%v.deviceId", cmdPrefix)
	if cmd.Flags().Changed(deviceIdFlagName) {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel69FirmwareForMStationsVersionFlags(depth int, m *models.Model69, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareForMStationsVersionFlagName := fmt.Sprintf("%v.firmwareForMStationsVersion", cmdPrefix)
	if cmd.Flags().Changed(firmwareForMStationsVersionFlagName) {

		var firmwareForMStationsVersionFlagName string
		if cmdPrefix == "" {
			firmwareForMStationsVersionFlagName = "firmwareForMStationsVersion"
		} else {
			firmwareForMStationsVersionFlagName = fmt.Sprintf("%v.firmwareForMStationsVersion", cmdPrefix)
		}

		firmwareForMStationsVersionFlagValue, err := cmd.Flags().GetString(firmwareForMStationsVersionFlagName)
		if err != nil {
			return err, false
		}
		m.FirmwareForMStationsVersion = firmwareForMStationsVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel69FirmwareVersionFlags(depth int, m *models.Model69, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareVersionFlagName := fmt.Sprintf("%v.firmwareVersion", cmdPrefix)
	if cmd.Flags().Changed(firmwareVersionFlagName) {

		var firmwareVersionFlagName string
		if cmdPrefix == "" {
			firmwareVersionFlagName = "firmwareVersion"
		} else {
			firmwareVersionFlagName = fmt.Sprintf("%v.firmwareVersion", cmdPrefix)
		}

		firmwareVersionFlagValue, err := cmd.Flags().GetString(firmwareVersionFlagName)
		if err != nil {
			return err, false
		}
		m.FirmwareVersion = &firmwareVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
