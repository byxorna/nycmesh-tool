// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for NmsUpdateStatus

// register flags to command
func registerModelNmsUpdateStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNmsUpdateStatusCanNmsUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsUpdateStatusNmsUpdateError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNmsUpdateStatusNmsUpdateStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNmsUpdateStatusCanNmsUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	canNmsUpdateDescription := `Required. `

	var canNmsUpdateFlagName string
	if cmdPrefix == "" {
		canNmsUpdateFlagName = "canNmsUpdate"
	} else {
		canNmsUpdateFlagName = fmt.Sprintf("%v.canNmsUpdate", cmdPrefix)
	}

	var canNmsUpdateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(canNmsUpdateFlagName, canNmsUpdateFlagDefault, canNmsUpdateDescription)

	return nil
}

func registerNmsUpdateStatusNmsUpdateError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var nmsUpdateErrorFlagName string
	if cmdPrefix == "" {
		nmsUpdateErrorFlagName = "nmsUpdateError"
	} else {
		nmsUpdateErrorFlagName = fmt.Sprintf("%v.nmsUpdateError", cmdPrefix)
	}

	if err := registerModelNmsUpdateErrorFlags(depth+1, nmsUpdateErrorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNmsUpdateStatusNmsUpdateStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nmsUpdateStatusDescription := `Enum: ["ready","requested","updating"]. Required. `

	var nmsUpdateStatusFlagName string
	if cmdPrefix == "" {
		nmsUpdateStatusFlagName = "nmsUpdateStatus"
	} else {
		nmsUpdateStatusFlagName = fmt.Sprintf("%v.nmsUpdateStatus", cmdPrefix)
	}

	var nmsUpdateStatusFlagDefault string

	_ = cmd.PersistentFlags().String(nmsUpdateStatusFlagName, nmsUpdateStatusFlagDefault, nmsUpdateStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(nmsUpdateStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ready","requested","updating"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNmsUpdateStatusFlags(depth int, m *models.NmsUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, canNmsUpdateAdded := retrieveNmsUpdateStatusCanNmsUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || canNmsUpdateAdded

	err, nmsUpdateErrorAdded := retrieveNmsUpdateStatusNmsUpdateErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nmsUpdateErrorAdded

	err, nmsUpdateStatusAdded := retrieveNmsUpdateStatusNmsUpdateStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nmsUpdateStatusAdded

	return nil, retAdded
}

func retrieveNmsUpdateStatusCanNmsUpdateFlags(depth int, m *models.NmsUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	canNmsUpdateFlagName := fmt.Sprintf("%v.canNmsUpdate", cmdPrefix)
	if cmd.Flags().Changed(canNmsUpdateFlagName) {

		var canNmsUpdateFlagName string
		if cmdPrefix == "" {
			canNmsUpdateFlagName = "canNmsUpdate"
		} else {
			canNmsUpdateFlagName = fmt.Sprintf("%v.canNmsUpdate", cmdPrefix)
		}

		canNmsUpdateFlagValue, err := cmd.Flags().GetBool(canNmsUpdateFlagName)
		if err != nil {
			return err, false
		}
		m.CanNmsUpdate = &canNmsUpdateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNmsUpdateStatusNmsUpdateErrorFlags(depth int, m *models.NmsUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nmsUpdateErrorFlagName := fmt.Sprintf("%v.nmsUpdateError", cmdPrefix)
	if cmd.Flags().Changed(nmsUpdateErrorFlagName) {
		// info: complex object nmsUpdateError NmsUpdateError is retrieved outside this Changed() block
	}
	nmsUpdateErrorFlagValue := m.NmsUpdateError
	if swag.IsZero(nmsUpdateErrorFlagValue) {
		nmsUpdateErrorFlagValue = &models.NmsUpdateError{}
	}

	err, nmsUpdateErrorAdded := retrieveModelNmsUpdateErrorFlags(depth+1, nmsUpdateErrorFlagValue, nmsUpdateErrorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nmsUpdateErrorAdded
	if nmsUpdateErrorAdded {
		m.NmsUpdateError = nmsUpdateErrorFlagValue
	}

	return nil, retAdded
}

func retrieveNmsUpdateStatusNmsUpdateStatusFlags(depth int, m *models.NmsUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nmsUpdateStatusFlagName := fmt.Sprintf("%v.nmsUpdateStatus", cmdPrefix)
	if cmd.Flags().Changed(nmsUpdateStatusFlagName) {

		var nmsUpdateStatusFlagName string
		if cmdPrefix == "" {
			nmsUpdateStatusFlagName = "nmsUpdateStatus"
		} else {
			nmsUpdateStatusFlagName = fmt.Sprintf("%v.nmsUpdateStatus", cmdPrefix)
		}

		nmsUpdateStatusFlagValue, err := cmd.Flags().GetString(nmsUpdateStatusFlagName)
		if err != nil {
			return err, false
		}
		m.NmsUpdateStatus = &nmsUpdateStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
