// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for ServerLogVerbosityResponseSchema

// register flags to command
func registerModelServerLogVerbosityResponseSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerLogVerbosityResponseSchemaExpiresAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerLogVerbosityResponseSchemaVerbosity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerLogVerbosityResponseSchemaExpiresAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive expiresAt strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerServerLogVerbosityResponseSchemaVerbosity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	verbosityDescription := `Enum: ["trace","debug","info","warn","error","fatal"]. Required. `

	var verbosityFlagName string
	if cmdPrefix == "" {
		verbosityFlagName = "verbosity"
	} else {
		verbosityFlagName = fmt.Sprintf("%v.verbosity", cmdPrefix)
	}

	var verbosityFlagDefault string

	_ = cmd.PersistentFlags().String(verbosityFlagName, verbosityFlagDefault, verbosityDescription)

	if err := cmd.RegisterFlagCompletionFunc(verbosityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["trace","debug","info","warn","error","fatal"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerLogVerbosityResponseSchemaFlags(depth int, m *models.ServerLogVerbosityResponseSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, expiresAtAdded := retrieveServerLogVerbosityResponseSchemaExpiresAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expiresAtAdded

	err, verbosityAdded := retrieveServerLogVerbosityResponseSchemaVerbosityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || verbosityAdded

	return nil, retAdded
}

func retrieveServerLogVerbosityResponseSchemaExpiresAtFlags(depth int, m *models.ServerLogVerbosityResponseSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expiresAtFlagName := fmt.Sprintf("%v.expiresAt", cmdPrefix)
	if cmd.Flags().Changed(expiresAtFlagName) {

		// warning: primitive expiresAt strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerLogVerbosityResponseSchemaVerbosityFlags(depth int, m *models.ServerLogVerbosityResponseSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	verbosityFlagName := fmt.Sprintf("%v.verbosity", cmdPrefix)
	if cmd.Flags().Changed(verbosityFlagName) {

		var verbosityFlagName string
		if cmdPrefix == "" {
			verbosityFlagName = "verbosity"
		} else {
			verbosityFlagName = fmt.Sprintf("%v.verbosity", cmdPrefix)
		}

		verbosityFlagValue, err := cmd.Flags().GetString(verbosityFlagName)
		if err != nil {
			return err, false
		}
		m.Verbosity = &verbosityFlagValue

		retAdded = true
	}

	return nil, retAdded
}
