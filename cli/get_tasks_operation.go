// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/tasks"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTasksGetTasksCmd returns a cmd to handle operation getTasks
func makeOperationTasksGetTasksCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTasks",
		Short: ``,
		RunE:  runOperationTasksGetTasks,
	}

	if err := registerOperationTasksGetTasksParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTasksGetTasks uses cmd flags to call endpoint api
func runOperationTasksGetTasks(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tasks.NewGetTasksParams()
	if err, _ := retrieveOperationTasksGetTasksCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTasksGetTasksPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTasksGetTasksPeriodFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationTasksGetTasksStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTasksGetTasksResult(appCli.Tasks.GetTasks(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTasksGetTasksParamFlags registers all flags needed to fill params
func registerOperationTasksGetTasksParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTasksGetTasksCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksGetTasksPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksGetTasksPeriodParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksGetTasksStatusParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTasksGetTasksCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	countDescription := `Required. `

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}
func registerOperationTasksGetTasksPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `Required. `

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationTasksGetTasksPeriodParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	periodDescription := ``

	var periodFlagName string
	if cmdPrefix == "" {
		periodFlagName = "period"
	} else {
		periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
	}

	var periodFlagDefault float64

	_ = cmd.PersistentFlags().Float64(periodFlagName, periodFlagDefault, periodDescription)

	return nil
}
func registerOperationTasksGetTasksStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	statusDescription := `Enum: ["success","failed","in-progress","canceled","queued"]. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["success","failed","in-progress","canceled","queued"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationTasksGetTasksCountFlag(m *tasks.GetTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("count") {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTasksGetTasksPageFlag(m *tasks.GetTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetFloat64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTasksGetTasksPeriodFlag(m *tasks.GetTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("period") {

		var periodFlagName string
		if cmdPrefix == "" {
			periodFlagName = "period"
		} else {
			periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
		}

		periodFlagValue, err := cmd.Flags().GetFloat64(periodFlagName)
		if err != nil {
			return err, false
		}
		m.Period = &periodFlagValue

	}
	return nil, retAdded
}
func retrieveOperationTasksGetTasksStatusFlag(m *tasks.GetTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("status") {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

	}
	return nil, retAdded
}

// parseOperationTasksGetTasksResult parses request result and return the string content
func parseOperationTasksGetTasksResult(resp0 *tasks.GetTasksOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*tasks.GetTasksOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*tasks.GetTasksUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*tasks.GetTasksForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*tasks.GetTasksInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
