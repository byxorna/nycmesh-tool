// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for UnknownDevice

// register flags to command
func registerModelUnknownDeviceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUnknownDeviceAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUnknownDeviceDownload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUnknownDeviceFirstSeen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUnknownDeviceLastSeen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUnknownDeviceUpload(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUnknownDeviceAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := `Required. IP address of the unknown device.`

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerUnknownDeviceDownload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downloadDescription := `Required. Total number of bytes downloaded by this IP address.`

	var downloadFlagName string
	if cmdPrefix == "" {
		downloadFlagName = "download"
	} else {
		downloadFlagName = fmt.Sprintf("%v.download", cmdPrefix)
	}

	var downloadFlagDefault float64

	_ = cmd.PersistentFlags().Float64(downloadFlagName, downloadFlagDefault, downloadDescription)

	return nil
}

func registerUnknownDeviceFirstSeen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive firstSeen strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerUnknownDeviceLastSeen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive lastSeen strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerUnknownDeviceUpload(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uploadDescription := `Required. Total number of bytes uploaded by this IP address.`

	var uploadFlagName string
	if cmdPrefix == "" {
		uploadFlagName = "upload"
	} else {
		uploadFlagName = fmt.Sprintf("%v.upload", cmdPrefix)
	}

	var uploadFlagDefault float64

	_ = cmd.PersistentFlags().Float64(uploadFlagName, uploadFlagDefault, uploadDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUnknownDeviceFlags(depth int, m *models.UnknownDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveUnknownDeviceAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, downloadAdded := retrieveUnknownDeviceDownloadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downloadAdded

	err, firstSeenAdded := retrieveUnknownDeviceFirstSeenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firstSeenAdded

	err, lastSeenAdded := retrieveUnknownDeviceLastSeenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastSeenAdded

	err, uploadAdded := retrieveUnknownDeviceUploadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadAdded

	return nil, retAdded
}

func retrieveUnknownDeviceAddressFlags(depth int, m *models.UnknownDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = &addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUnknownDeviceDownloadFlags(depth int, m *models.UnknownDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downloadFlagName := fmt.Sprintf("%v.download", cmdPrefix)
	if cmd.Flags().Changed(downloadFlagName) {

		var downloadFlagName string
		if cmdPrefix == "" {
			downloadFlagName = "download"
		} else {
			downloadFlagName = fmt.Sprintf("%v.download", cmdPrefix)
		}

		downloadFlagValue, err := cmd.Flags().GetFloat64(downloadFlagName)
		if err != nil {
			return err, false
		}
		m.Download = &downloadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUnknownDeviceFirstSeenFlags(depth int, m *models.UnknownDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firstSeenFlagName := fmt.Sprintf("%v.firstSeen", cmdPrefix)
	if cmd.Flags().Changed(firstSeenFlagName) {

		// warning: primitive firstSeen strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUnknownDeviceLastSeenFlags(depth int, m *models.UnknownDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastSeenFlagName := fmt.Sprintf("%v.lastSeen", cmdPrefix)
	if cmd.Flags().Changed(lastSeenFlagName) {

		// warning: primitive lastSeen strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUnknownDeviceUploadFlags(depth int, m *models.UnknownDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadFlagName := fmt.Sprintf("%v.upload", cmdPrefix)
	if cmd.Flags().Changed(uploadFlagName) {

		var uploadFlagName string
		if cmdPrefix == "" {
			uploadFlagName = "upload"
		} else {
			uploadFlagName = fmt.Sprintf("%v.upload", cmdPrefix)
		}

		uploadFlagValue, err := cmd.Flags().GetFloat64(uploadFlagName)
		if err != nil {
			return err, false
		}
		m.Upload = &uploadFlagValue

		retAdded = true
	}

	return nil, retAdded
}
