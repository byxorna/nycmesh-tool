// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
 "github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceInterfaceSchema

// register flags to command
func registerModelDeviceInterfaceSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceInterfaceSchemaAddresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaBridge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaCanDisplayStatistics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaCapabilities(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaIdentification(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaIsSwitchedPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaLag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaMtu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaOspf(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaPoe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaPppoe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaProxyARP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaSfp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaSpeeds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaStations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaStatistics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaSwitch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaVisible(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaVlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceInterfaceSchemaWireless(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaAddresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: addresses Addresses array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceInterfaceSchemaBridge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bridgeDescription := ``

	var bridgeFlagName string
	if cmdPrefix == "" {
		bridgeFlagName = "bridge"
	} else {
		bridgeFlagName = fmt.Sprintf("%v.bridge", cmdPrefix)
	}

	var bridgeFlagDefault string

	_ = cmd.PersistentFlags().String(bridgeFlagName, bridgeFlagDefault, bridgeDescription)

	return nil
}

func registerDeviceInterfaceSchemaCanDisplayStatistics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	canDisplayStatisticsDescription := ``

	var canDisplayStatisticsFlagName string
	if cmdPrefix == "" {
		canDisplayStatisticsFlagName = "canDisplayStatistics"
	} else {
		canDisplayStatisticsFlagName = fmt.Sprintf("%v.canDisplayStatistics", cmdPrefix)
	}

	var canDisplayStatisticsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(canDisplayStatisticsFlagName, canDisplayStatisticsFlagDefault, canDisplayStatisticsDescription)

	return nil
}

func registerDeviceInterfaceSchemaCapabilities(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var capabilitiesFlagName string
	if cmdPrefix == "" {
		capabilitiesFlagName = "capabilities"
	} else {
		capabilitiesFlagName = fmt.Sprintf("%v.capabilities", cmdPrefix)
	}

	if err := registerModelCapabilitiesFlags(depth+1, capabilitiesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerDeviceInterfaceSchemaIdentification(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var identificationFlagName string
	if cmdPrefix == "" {
		identificationFlagName = "identification"
	} else {
		identificationFlagName = fmt.Sprintf("%v.identification", cmdPrefix)
	}

	if err := registerModelInterfaceIdentificationFlags(depth+1, identificationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaIsSwitchedPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isSwitchedPortDescription := ``

	var isSwitchedPortFlagName string
	if cmdPrefix == "" {
		isSwitchedPortFlagName = "isSwitchedPort"
	} else {
		isSwitchedPortFlagName = fmt.Sprintf("%v.isSwitchedPort", cmdPrefix)
	}

	var isSwitchedPortFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isSwitchedPortFlagName, isSwitchedPortFlagDefault, isSwitchedPortDescription)

	return nil
}

func registerDeviceInterfaceSchemaLag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lagFlagName string
	if cmdPrefix == "" {
		lagFlagName = "lag"
	} else {
		lagFlagName = fmt.Sprintf("%v.lag", cmdPrefix)
	}

	if err := registerModelLagFlags(depth+1, lagFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaMtu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mtuDescription := ``

	var mtuFlagName string
	if cmdPrefix == "" {
		mtuFlagName = "mtu"
	} else {
		mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
	}

	var mtuFlagDefault string

	_ = cmd.PersistentFlags().String(mtuFlagName, mtuFlagDefault, mtuDescription)

	return nil
}

func registerDeviceInterfaceSchemaOspf(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ospfFlagName string
	if cmdPrefix == "" {
		ospfFlagName = "ospf"
	} else {
		ospfFlagName = fmt.Sprintf("%v.ospf", cmdPrefix)
	}

	if err := registerModelInterfaceOspfFlags(depth+1, ospfFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaPoe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var poeFlagName string
	if cmdPrefix == "" {
		poeFlagName = "poe"
	} else {
		poeFlagName = fmt.Sprintf("%v.poe", cmdPrefix)
	}

	if err := registerModelInterfacePoeFlags(depth+1, poeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	if err := registerModelPortFlags(depth+1, portFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaPppoe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pppoeDescription := ``

	var pppoeFlagName string
	if cmdPrefix == "" {
		pppoeFlagName = "pppoe"
	} else {
		pppoeFlagName = fmt.Sprintf("%v.pppoe", cmdPrefix)
	}

	var pppoeFlagDefault string

	_ = cmd.PersistentFlags().String(pppoeFlagName, pppoeFlagDefault, pppoeDescription)

	return nil
}

func registerDeviceInterfaceSchemaProxyARP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	proxyARPDescription := ``

	var proxyARPFlagName string
	if cmdPrefix == "" {
		proxyARPFlagName = "proxyARP"
	} else {
		proxyARPFlagName = fmt.Sprintf("%v.proxyARP", cmdPrefix)
	}

	var proxyARPFlagDefault string

	_ = cmd.PersistentFlags().String(proxyARPFlagName, proxyARPFlagDefault, proxyARPDescription)

	return nil
}

func registerDeviceInterfaceSchemaSfp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sfpDescription := ``

	var sfpFlagName string
	if cmdPrefix == "" {
		sfpFlagName = "sfp"
	} else {
		sfpFlagName = fmt.Sprintf("%v.sfp", cmdPrefix)
	}

	var sfpFlagDefault string

	_ = cmd.PersistentFlags().String(sfpFlagName, sfpFlagDefault, sfpDescription)

	return nil
}

func registerDeviceInterfaceSchemaSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	speedDescription := ``

	var speedFlagName string
	if cmdPrefix == "" {
		speedFlagName = "speed"
	} else {
		speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
	}

	var speedFlagDefault string

	_ = cmd.PersistentFlags().String(speedFlagName, speedFlagDefault, speedDescription)

	return nil
}

func registerDeviceInterfaceSchemaSpeeds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var speedsFlagName string
	if cmdPrefix == "" {
		speedsFlagName = "speeds"
	} else {
		speedsFlagName = fmt.Sprintf("%v.speeds", cmdPrefix)
	}

	if err := registerModelInterfaceSpeedsFlags(depth+1, speedsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaStations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: stations Stations array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceInterfaceSchemaStatistics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statisticsFlagName string
	if cmdPrefix == "" {
		statisticsFlagName = "statistics"
	} else {
		statisticsFlagName = fmt.Sprintf("%v.statistics", cmdPrefix)
	}

	if err := registerModelInterfaceStatisticsFlags(depth+1, statisticsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	if err := registerModelInterfaceStatusFlags(depth+1, statusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaSwitch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var switchFlagName string
	if cmdPrefix == "" {
		switchFlagName = "switch"
	} else {
		switchFlagName = fmt.Sprintf("%v.switch", cmdPrefix)
	}

	if err := registerModelSwitchFlags(depth+1, switchFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceInterfaceSchemaVisible(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	visibleDescription := ``

	var visibleFlagName string
	if cmdPrefix == "" {
		visibleFlagName = "visible"
	} else {
		visibleFlagName = fmt.Sprintf("%v.visible", cmdPrefix)
	}

	var visibleFlagDefault bool

	_ = cmd.PersistentFlags().Bool(visibleFlagName, visibleFlagDefault, visibleDescription)

	return nil
}

func registerDeviceInterfaceSchemaVlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlanDescription := ``

	var vlanFlagName string
	if cmdPrefix == "" {
		vlanFlagName = "vlan"
	} else {
		vlanFlagName = fmt.Sprintf("%v.vlan", cmdPrefix)
	}

	var vlanFlagDefault string

	_ = cmd.PersistentFlags().String(vlanFlagName, vlanFlagDefault, vlanDescription)

	return nil
}

func registerDeviceInterfaceSchemaWireless(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wirelessFlagName string
	if cmdPrefix == "" {
		wirelessFlagName = "wireless"
	} else {
		wirelessFlagName = fmt.Sprintf("%v.wireless", cmdPrefix)
	}

	if err := registerModelWirelessFlags(depth+1, wirelessFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceInterfaceSchemaFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressesAdded := retrieveDeviceInterfaceSchemaAddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressesAdded

	err, bridgeAdded := retrieveDeviceInterfaceSchemaBridgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bridgeAdded

	err, canDisplayStatisticsAdded := retrieveDeviceInterfaceSchemaCanDisplayStatisticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || canDisplayStatisticsAdded

	err, capabilitiesAdded := retrieveDeviceInterfaceSchemaCapabilitiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || capabilitiesAdded

	err, enabledAdded := retrieveDeviceInterfaceSchemaEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, identificationAdded := retrieveDeviceInterfaceSchemaIdentificationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || identificationAdded

	err, isSwitchedPortAdded := retrieveDeviceInterfaceSchemaIsSwitchedPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isSwitchedPortAdded

	err, lagAdded := retrieveDeviceInterfaceSchemaLagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lagAdded

	err, mtuAdded := retrieveDeviceInterfaceSchemaMtuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mtuAdded

	err, ospfAdded := retrieveDeviceInterfaceSchemaOspfFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ospfAdded

	err, poeAdded := retrieveDeviceInterfaceSchemaPoeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poeAdded

	err, portAdded := retrieveDeviceInterfaceSchemaPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, pppoeAdded := retrieveDeviceInterfaceSchemaPppoeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pppoeAdded

	err, proxyARPAdded := retrieveDeviceInterfaceSchemaProxyARPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || proxyARPAdded

	err, sfpAdded := retrieveDeviceInterfaceSchemaSfpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sfpAdded

	err, speedAdded := retrieveDeviceInterfaceSchemaSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedAdded

	err, speedsAdded := retrieveDeviceInterfaceSchemaSpeedsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedsAdded

	err, stationsAdded := retrieveDeviceInterfaceSchemaStationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationsAdded

	err, statisticsAdded := retrieveDeviceInterfaceSchemaStatisticsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statisticsAdded

	err, statusAdded := retrieveDeviceInterfaceSchemaStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, switchAdded := retrieveDeviceInterfaceSchemaSwitchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || switchAdded

	err, visibleAdded := retrieveDeviceInterfaceSchemaVisibleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || visibleAdded

	err, vlanAdded := retrieveDeviceInterfaceSchemaVlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlanAdded

	err, wirelessAdded := retrieveDeviceInterfaceSchemaWirelessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wirelessAdded

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaAddressesFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressesFlagName := fmt.Sprintf("%v.addresses", cmdPrefix)
	if cmd.Flags().Changed(addressesFlagName) {
		// warning: addresses array type Addresses is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaBridgeFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bridgeFlagName := fmt.Sprintf("%v.bridge", cmdPrefix)
	if cmd.Flags().Changed(bridgeFlagName) {

		var bridgeFlagName string
		if cmdPrefix == "" {
			bridgeFlagName = "bridge"
		} else {
			bridgeFlagName = fmt.Sprintf("%v.bridge", cmdPrefix)
		}

		bridgeFlagValue, err := cmd.Flags().GetString(bridgeFlagName)
		if err != nil {
			return err, false
		}
		m.Bridge = bridgeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaCanDisplayStatisticsFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	canDisplayStatisticsFlagName := fmt.Sprintf("%v.canDisplayStatistics", cmdPrefix)
	if cmd.Flags().Changed(canDisplayStatisticsFlagName) {

		var canDisplayStatisticsFlagName string
		if cmdPrefix == "" {
			canDisplayStatisticsFlagName = "canDisplayStatistics"
		} else {
			canDisplayStatisticsFlagName = fmt.Sprintf("%v.canDisplayStatistics", cmdPrefix)
		}

		canDisplayStatisticsFlagValue, err := cmd.Flags().GetBool(canDisplayStatisticsFlagName)
		if err != nil {
			return err, false
		}
		m.CanDisplayStatistics = canDisplayStatisticsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaCapabilitiesFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	capabilitiesFlagName := fmt.Sprintf("%v.capabilities", cmdPrefix)
	if cmd.Flags().Changed(capabilitiesFlagName) {
		// info: complex object capabilities Capabilities is retrieved outside this Changed() block
	}
	capabilitiesFlagValue := m.Capabilities
	if swag.IsZero(capabilitiesFlagValue) {
		capabilitiesFlagValue = &models.Capabilities{}
	}

	err, capabilitiesAdded := retrieveModelCapabilitiesFlags(depth+1, capabilitiesFlagValue, capabilitiesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || capabilitiesAdded
	if capabilitiesAdded {
		m.Capabilities = capabilitiesFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaEnabledFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaIdentificationFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	identificationFlagName := fmt.Sprintf("%v.identification", cmdPrefix)
	if cmd.Flags().Changed(identificationFlagName) {
		// info: complex object identification InterfaceIdentification is retrieved outside this Changed() block
	}
	identificationFlagValue := m.Identification
	if swag.IsZero(identificationFlagValue) {
		identificationFlagValue = &models.InterfaceIdentification{}
	}

	err, identificationAdded := retrieveModelInterfaceIdentificationFlags(depth+1, identificationFlagValue, identificationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || identificationAdded
	if identificationAdded {
		m.Identification = identificationFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaIsSwitchedPortFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isSwitchedPortFlagName := fmt.Sprintf("%v.isSwitchedPort", cmdPrefix)
	if cmd.Flags().Changed(isSwitchedPortFlagName) {

		var isSwitchedPortFlagName string
		if cmdPrefix == "" {
			isSwitchedPortFlagName = "isSwitchedPort"
		} else {
			isSwitchedPortFlagName = fmt.Sprintf("%v.isSwitchedPort", cmdPrefix)
		}

		isSwitchedPortFlagValue, err := cmd.Flags().GetBool(isSwitchedPortFlagName)
		if err != nil {
			return err, false
		}
		m.IsSwitchedPort = isSwitchedPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaLagFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lagFlagName := fmt.Sprintf("%v.lag", cmdPrefix)
	if cmd.Flags().Changed(lagFlagName) {
		// info: complex object lag Lag is retrieved outside this Changed() block
	}
	lagFlagValue := m.Lag
	if swag.IsZero(lagFlagValue) {
		lagFlagValue = &models.Lag{}
	}

	err, lagAdded := retrieveModelLagFlags(depth+1, lagFlagValue, lagFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lagAdded
	if lagAdded {
		m.Lag = lagFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaMtuFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mtuFlagName := fmt.Sprintf("%v.mtu", cmdPrefix)
	if cmd.Flags().Changed(mtuFlagName) {

		var mtuFlagName string
		if cmdPrefix == "" {
			mtuFlagName = "mtu"
		} else {
			mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
		}

		mtuFlagValue, err := cmd.Flags().GetString(mtuFlagName)
		if err != nil {
			return err, false
		}
		m.Mtu = mtuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaOspfFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ospfFlagName := fmt.Sprintf("%v.ospf", cmdPrefix)
	if cmd.Flags().Changed(ospfFlagName) {
		// info: complex object ospf InterfaceOspf is retrieved outside this Changed() block
	}
	ospfFlagValue := m.Ospf
	if swag.IsZero(ospfFlagValue) {
		ospfFlagValue = &models.InterfaceOspf{}
	}

	err, ospfAdded := retrieveModelInterfaceOspfFlags(depth+1, ospfFlagValue, ospfFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ospfAdded
	if ospfAdded {
		m.Ospf = ospfFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaPoeFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poeFlagName := fmt.Sprintf("%v.poe", cmdPrefix)
	if cmd.Flags().Changed(poeFlagName) {
		// info: complex object poe InterfacePoe is retrieved outside this Changed() block
	}
	poeFlagValue := m.Poe
	if swag.IsZero(poeFlagValue) {
		poeFlagValue = &models.InterfacePoe{}
	}

	err, poeAdded := retrieveModelInterfacePoeFlags(depth+1, poeFlagValue, poeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poeAdded
	if poeAdded {
		m.Poe = poeFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaPortFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {
		// info: complex object port Port is retrieved outside this Changed() block
	}
	portFlagValue := m.Port
	if swag.IsZero(portFlagValue) {
		portFlagValue = &models.Port{}
	}

	err, portAdded := retrieveModelPortFlags(depth+1, portFlagValue, portFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded
	if portAdded {
		m.Port = portFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaPppoeFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pppoeFlagName := fmt.Sprintf("%v.pppoe", cmdPrefix)
	if cmd.Flags().Changed(pppoeFlagName) {

		var pppoeFlagName string
		if cmdPrefix == "" {
			pppoeFlagName = "pppoe"
		} else {
			pppoeFlagName = fmt.Sprintf("%v.pppoe", cmdPrefix)
		}

		pppoeFlagValue, err := cmd.Flags().GetString(pppoeFlagName)
		if err != nil {
			return err, false
		}
		m.Pppoe = pppoeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaProxyARPFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	proxyARPFlagName := fmt.Sprintf("%v.proxyARP", cmdPrefix)
	if cmd.Flags().Changed(proxyARPFlagName) {

		var proxyARPFlagName string
		if cmdPrefix == "" {
			proxyARPFlagName = "proxyARP"
		} else {
			proxyARPFlagName = fmt.Sprintf("%v.proxyARP", cmdPrefix)
		}

		proxyARPFlagValue, err := cmd.Flags().GetString(proxyARPFlagName)
		if err != nil {
			return err, false
		}
		m.ProxyARP = proxyARPFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaSfpFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sfpFlagName := fmt.Sprintf("%v.sfp", cmdPrefix)
	if cmd.Flags().Changed(sfpFlagName) {

		var sfpFlagName string
		if cmdPrefix == "" {
			sfpFlagName = "sfp"
		} else {
			sfpFlagName = fmt.Sprintf("%v.sfp", cmdPrefix)
		}

		sfpFlagValue, err := cmd.Flags().GetString(sfpFlagName)
		if err != nil {
			return err, false
		}
		m.Sfp = sfpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaSpeedFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedFlagName := fmt.Sprintf("%v.speed", cmdPrefix)
	if cmd.Flags().Changed(speedFlagName) {

		var speedFlagName string
		if cmdPrefix == "" {
			speedFlagName = "speed"
		} else {
			speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
		}

		speedFlagValue, err := cmd.Flags().GetString(speedFlagName)
		if err != nil {
			return err, false
		}
		m.Speed = speedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaSpeedsFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedsFlagName := fmt.Sprintf("%v.speeds", cmdPrefix)
	if cmd.Flags().Changed(speedsFlagName) {
		// info: complex object speeds InterfaceSpeeds is retrieved outside this Changed() block
	}
	speedsFlagValue := m.Speeds
	if swag.IsZero(speedsFlagValue) {
		speedsFlagValue = &models.InterfaceSpeeds{}
	}

	err, speedsAdded := retrieveModelInterfaceSpeedsFlags(depth+1, speedsFlagValue, speedsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedsAdded
	if speedsAdded {
		m.Speeds = speedsFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaStationsFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationsFlagName := fmt.Sprintf("%v.stations", cmdPrefix)
	if cmd.Flags().Changed(stationsFlagName) {
		// warning: stations array type Stations is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaStatisticsFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statisticsFlagName := fmt.Sprintf("%v.statistics", cmdPrefix)
	if cmd.Flags().Changed(statisticsFlagName) {
		// info: complex object statistics InterfaceStatistics is retrieved outside this Changed() block
	}
	statisticsFlagValue := m.Statistics
	if swag.IsZero(statisticsFlagValue) {
		statisticsFlagValue = &models.InterfaceStatistics{}
	}

	err, statisticsAdded := retrieveModelInterfaceStatisticsFlags(depth+1, statisticsFlagValue, statisticsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statisticsAdded
	if statisticsAdded {
		m.Statistics = statisticsFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaStatusFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {
		// info: complex object status InterfaceStatus is retrieved outside this Changed() block
	}
	statusFlagValue := m.Status
	if swag.IsZero(statusFlagValue) {
		statusFlagValue = &models.InterfaceStatus{}
	}

	err, statusAdded := retrieveModelInterfaceStatusFlags(depth+1, statusFlagValue, statusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded
	if statusAdded {
		m.Status = statusFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaSwitchFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	switchFlagName := fmt.Sprintf("%v.switch", cmdPrefix)
	if cmd.Flags().Changed(switchFlagName) {
		// info: complex object switch Switch is retrieved outside this Changed() block
	}
	switchFlagValue := m.Switch
	if swag.IsZero(switchFlagValue) {
		switchFlagValue = &models.Switch{}
	}

	err, switchAdded := retrieveModelSwitchFlags(depth+1, switchFlagValue, switchFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || switchAdded
	if switchAdded {
		m.Switch = switchFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaVisibleFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	visibleFlagName := fmt.Sprintf("%v.visible", cmdPrefix)
	if cmd.Flags().Changed(visibleFlagName) {

		var visibleFlagName string
		if cmdPrefix == "" {
			visibleFlagName = "visible"
		} else {
			visibleFlagName = fmt.Sprintf("%v.visible", cmdPrefix)
		}

		visibleFlagValue, err := cmd.Flags().GetBool(visibleFlagName)
		if err != nil {
			return err, false
		}
		m.Visible = visibleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaVlanFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlanFlagName := fmt.Sprintf("%v.vlan", cmdPrefix)
	if cmd.Flags().Changed(vlanFlagName) {

		var vlanFlagName string
		if cmdPrefix == "" {
			vlanFlagName = "vlan"
		} else {
			vlanFlagName = fmt.Sprintf("%v.vlan", cmdPrefix)
		}

		vlanFlagValue, err := cmd.Flags().GetString(vlanFlagName)
		if err != nil {
			return err, false
		}
		m.Vlan = vlanFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceInterfaceSchemaWirelessFlags(depth int, m *models.DeviceInterfaceSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wirelessFlagName := fmt.Sprintf("%v.wireless", cmdPrefix)
	if cmd.Flags().Changed(wirelessFlagName) {
		// info: complex object wireless Wireless is retrieved outside this Changed() block
	}
	wirelessFlagValue := m.Wireless
	if swag.IsZero(wirelessFlagValue) {
		wirelessFlagValue = &models.Wireless{}
	}

	err, wirelessAdded := retrieveModelWirelessFlags(depth+1, wirelessFlagValue, wirelessFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wirelessAdded
	if wirelessAdded {
		m.Wireless = wirelessFlagValue
	}

	return nil, retAdded
}
