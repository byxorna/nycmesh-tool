// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for OnuPolicies

// register flags to command
func registerModelOnuPoliciesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOnuPoliciesDefaultState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOnuPoliciesDhcpOption82(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOnuPoliciesDefaultState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultStateDescription := ``

	var defaultStateFlagName string
	if cmdPrefix == "" {
		defaultStateFlagName = "defaultState"
	} else {
		defaultStateFlagName = fmt.Sprintf("%v.defaultState", cmdPrefix)
	}

	var defaultStateFlagDefault string

	_ = cmd.PersistentFlags().String(defaultStateFlagName, defaultStateFlagDefault, defaultStateDescription)

	return nil
}

func registerOnuPoliciesDhcpOption82(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpOption82Description := ``

	var dhcpOption82FlagName string
	if cmdPrefix == "" {
		dhcpOption82FlagName = "dhcpOption82"
	} else {
		dhcpOption82FlagName = fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
	}

	var dhcpOption82FlagDefault bool

	_ = cmd.PersistentFlags().Bool(dhcpOption82FlagName, dhcpOption82FlagDefault, dhcpOption82Description)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOnuPoliciesFlags(depth int, m *models.OnuPolicies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, defaultStateAdded := retrieveOnuPoliciesDefaultStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultStateAdded

	err, dhcpOption82Added := retrieveOnuPoliciesDhcpOption82Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpOption82Added

	return nil, retAdded
}

func retrieveOnuPoliciesDefaultStateFlags(depth int, m *models.OnuPolicies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultStateFlagName := fmt.Sprintf("%v.defaultState", cmdPrefix)
	if cmd.Flags().Changed(defaultStateFlagName) {

		var defaultStateFlagName string
		if cmdPrefix == "" {
			defaultStateFlagName = "defaultState"
		} else {
			defaultStateFlagName = fmt.Sprintf("%v.defaultState", cmdPrefix)
		}

		defaultStateFlagValue, err := cmd.Flags().GetString(defaultStateFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultState = defaultStateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOnuPoliciesDhcpOption82Flags(depth int, m *models.OnuPolicies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpOption82FlagName := fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
	if cmd.Flags().Changed(dhcpOption82FlagName) {

		var dhcpOption82FlagName string
		if cmdPrefix == "" {
			dhcpOption82FlagName = "dhcpOption82"
		} else {
			dhcpOption82FlagName = fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
		}

		dhcpOption82FlagValue, err := cmd.Flags().GetBool(dhcpOption82FlagName)
		if err != nil {
			return err, false
		}
		m.DhcpOption82 = dhcpOption82FlagValue

		retAdded = true
	}

	return nil, retAdded
}
