// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for InviteUserResponse

// register flags to command
func registerModelInviteUserResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInviteUserResponseInvitationLink(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInviteUserResponseMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInviteUserResponseResult(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInviteUserResponseInvitationLink(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	invitationLinkDescription := `Required. `

	var invitationLinkFlagName string
	if cmdPrefix == "" {
		invitationLinkFlagName = "invitationLink"
	} else {
		invitationLinkFlagName = fmt.Sprintf("%v.invitationLink", cmdPrefix)
	}

	var invitationLinkFlagDefault string

	_ = cmd.PersistentFlags().String(invitationLinkFlagName, invitationLinkFlagDefault, invitationLinkDescription)

	return nil
}

func registerInviteUserResponseMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := `Required. `

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerInviteUserResponseResult(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resultDescription := `Required. `

	var resultFlagName string
	if cmdPrefix == "" {
		resultFlagName = "result"
	} else {
		resultFlagName = fmt.Sprintf("%v.result", cmdPrefix)
	}

	var resultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(resultFlagName, resultFlagDefault, resultDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInviteUserResponseFlags(depth int, m *models.InviteUserResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, invitationLinkAdded := retrieveInviteUserResponseInvitationLinkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || invitationLinkAdded

	err, messageAdded := retrieveInviteUserResponseMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, resultAdded := retrieveInviteUserResponseResultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resultAdded

	return nil, retAdded
}

func retrieveInviteUserResponseInvitationLinkFlags(depth int, m *models.InviteUserResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	invitationLinkFlagName := fmt.Sprintf("%v.invitationLink", cmdPrefix)
	if cmd.Flags().Changed(invitationLinkFlagName) {

		var invitationLinkFlagName string
		if cmdPrefix == "" {
			invitationLinkFlagName = "invitationLink"
		} else {
			invitationLinkFlagName = fmt.Sprintf("%v.invitationLink", cmdPrefix)
		}

		invitationLinkFlagValue, err := cmd.Flags().GetString(invitationLinkFlagName)
		if err != nil {
			return err, false
		}
		m.InvitationLink = &invitationLinkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInviteUserResponseMessageFlags(depth int, m *models.InviteUserResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = &messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInviteUserResponseResultFlags(depth int, m *models.InviteUserResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resultFlagName := fmt.Sprintf("%v.result", cmdPrefix)
	if cmd.Flags().Changed(resultFlagName) {

		var resultFlagName string
		if cmdPrefix == "" {
			resultFlagName = "result"
		} else {
			resultFlagName = fmt.Sprintf("%v.result", cmdPrefix)
		}

		resultFlagValue, err := cmd.Flags().GetBool(resultFlagName)
		if err != nil {
			return err, false
		}
		m.Result = &resultFlagValue

		retAdded = true
	}

	return nil, retAdded
}
