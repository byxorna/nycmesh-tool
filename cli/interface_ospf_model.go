// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for InterfaceOspf

// register flags to command
func registerModelInterfaceOspfFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInterfaceOspfOspfCapable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInterfaceOspfOspfConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInterfaceOspfOspfCapable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ospfCapableDescription := ``

	var ospfCapableFlagName string
	if cmdPrefix == "" {
		ospfCapableFlagName = "ospfCapable"
	} else {
		ospfCapableFlagName = fmt.Sprintf("%v.ospfCapable", cmdPrefix)
	}

	var ospfCapableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ospfCapableFlagName, ospfCapableFlagDefault, ospfCapableDescription)

	return nil
}

func registerInterfaceOspfOspfConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ospfConfigFlagName string
	if cmdPrefix == "" {
		ospfConfigFlagName = "ospfConfig"
	} else {
		ospfConfigFlagName = fmt.Sprintf("%v.ospfConfig", cmdPrefix)
	}

	if err := registerModelOspfConfigFlags(depth+1, ospfConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInterfaceOspfFlags(depth int, m *models.InterfaceOspf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ospfCapableAdded := retrieveInterfaceOspfOspfCapableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ospfCapableAdded

	err, ospfConfigAdded := retrieveInterfaceOspfOspfConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ospfConfigAdded

	return nil, retAdded
}

func retrieveInterfaceOspfOspfCapableFlags(depth int, m *models.InterfaceOspf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ospfCapableFlagName := fmt.Sprintf("%v.ospfCapable", cmdPrefix)
	if cmd.Flags().Changed(ospfCapableFlagName) {

		var ospfCapableFlagName string
		if cmdPrefix == "" {
			ospfCapableFlagName = "ospfCapable"
		} else {
			ospfCapableFlagName = fmt.Sprintf("%v.ospfCapable", cmdPrefix)
		}

		ospfCapableFlagValue, err := cmd.Flags().GetBool(ospfCapableFlagName)
		if err != nil {
			return err, false
		}
		m.OspfCapable = ospfCapableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInterfaceOspfOspfConfigFlags(depth int, m *models.InterfaceOspf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ospfConfigFlagName := fmt.Sprintf("%v.ospfConfig", cmdPrefix)
	if cmd.Flags().Changed(ospfConfigFlagName) {
		// info: complex object ospfConfig OspfConfig is retrieved outside this Changed() block
	}
	ospfConfigFlagValue := m.OspfConfig
	if swag.IsZero(ospfConfigFlagValue) {
		ospfConfigFlagValue = &models.OspfConfig{}
	}

	err, ospfConfigAdded := retrieveModelOspfConfigFlags(depth+1, ospfConfigFlagValue, ospfConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ospfConfigAdded
	if ospfConfigAdded {
		m.OspfConfig = ospfConfigFlagValue
	}

	return nil, retAdded
}
