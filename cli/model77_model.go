// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
  "github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model77

// register flags to command
func registerModelModel77Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel77Coverage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel77MaxCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel77NorthWestCorner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel77SouthEastCorner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel77Coverage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: coverage Coverage array type is not supported by go-swagger cli yet

	return nil
}

func registerModel77MaxCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxCapacityDescription := `Required. Max capacity of requested configuration in Mbps`

	var maxCapacityFlagName string
	if cmdPrefix == "" {
		maxCapacityFlagName = "maxCapacity"
	} else {
		maxCapacityFlagName = fmt.Sprintf("%v.maxCapacity", cmdPrefix)
	}

	var maxCapacityFlagDefault float64

	_ = cmd.PersistentFlags().Float64(maxCapacityFlagName, maxCapacityFlagDefault, maxCapacityDescription)

	return nil
}

func registerModel77NorthWestCorner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var northWestCornerFlagName string
	if cmdPrefix == "" {
		northWestCornerFlagName = "northWestCorner"
	} else {
		northWestCornerFlagName = fmt.Sprintf("%v.northWestCorner", cmdPrefix)
	}

	if err := registerModelNorthWestCornerFlags(depth+1, northWestCornerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel77SouthEastCorner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var southEastCornerFlagName string
	if cmdPrefix == "" {
		southEastCornerFlagName = "southEastCorner"
	} else {
		southEastCornerFlagName = fmt.Sprintf("%v.southEastCorner", cmdPrefix)
	}

	if err := registerModelSouthEastCornerFlags(depth+1, southEastCornerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel77Flags(depth int, m *models.Model77, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, coverageAdded := retrieveModel77CoverageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || coverageAdded

	err, maxCapacityAdded := retrieveModel77MaxCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxCapacityAdded

	err, northWestCornerAdded := retrieveModel77NorthWestCornerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || northWestCornerAdded

	err, southEastCornerAdded := retrieveModel77SouthEastCornerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || southEastCornerAdded

	return nil, retAdded
}

func retrieveModel77CoverageFlags(depth int, m *models.Model77, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	coverageFlagName := fmt.Sprintf("%v.coverage", cmdPrefix)
	if cmd.Flags().Changed(coverageFlagName) {
		// warning: coverage array type Coverage is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel77MaxCapacityFlags(depth int, m *models.Model77, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxCapacityFlagName := fmt.Sprintf("%v.maxCapacity", cmdPrefix)
	if cmd.Flags().Changed(maxCapacityFlagName) {

		var maxCapacityFlagName string
		if cmdPrefix == "" {
			maxCapacityFlagName = "maxCapacity"
		} else {
			maxCapacityFlagName = fmt.Sprintf("%v.maxCapacity", cmdPrefix)
		}

		maxCapacityFlagValue, err := cmd.Flags().GetFloat64(maxCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.MaxCapacity = &maxCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel77NorthWestCornerFlags(depth int, m *models.Model77, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	northWestCornerFlagName := fmt.Sprintf("%v.northWestCorner", cmdPrefix)
	if cmd.Flags().Changed(northWestCornerFlagName) {
		// info: complex object northWestCorner NorthWestCorner is retrieved outside this Changed() block
	}
	northWestCornerFlagValue := m.NorthWestCorner
	if swag.IsZero(northWestCornerFlagValue) {
		northWestCornerFlagValue = &models.NorthWestCorner{}
	}

	err, northWestCornerAdded := retrieveModelNorthWestCornerFlags(depth+1, northWestCornerFlagValue, northWestCornerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || northWestCornerAdded
	if northWestCornerAdded {
		m.NorthWestCorner = northWestCornerFlagValue
	}

	return nil, retAdded
}

func retrieveModel77SouthEastCornerFlags(depth int, m *models.Model77, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	southEastCornerFlagName := fmt.Sprintf("%v.southEastCorner", cmdPrefix)
	if cmd.Flags().Changed(southEastCornerFlagName) {
		// info: complex object southEastCorner SouthEastCorner is retrieved outside this Changed() block
	}
	southEastCornerFlagValue := m.SouthEastCorner
	if swag.IsZero(southEastCornerFlagValue) {
		southEastCornerFlagValue = &models.SouthEastCorner{}
	}

	err, southEastCornerAdded := retrieveModelSouthEastCornerFlags(depth+1, southEastCornerFlagValue, southEastCornerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || southEastCornerAdded
	if southEastCornerAdded {
		m.SouthEastCorner = southEastCornerFlagValue
	}

	return nil, retAdded
}
