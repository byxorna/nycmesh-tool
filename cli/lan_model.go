// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Lan

// register flags to command
func registerModelLanFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLanCidr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLanDhcp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLanDNS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLanGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLanInterfaceNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLanProto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLanType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLanCidr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cidrDescription := `Required. `

	var cidrFlagName string
	if cmdPrefix == "" {
		cidrFlagName = "cidr"
	} else {
		cidrFlagName = fmt.Sprintf("%v.cidr", cmdPrefix)
	}

	var cidrFlagDefault string

	_ = cmd.PersistentFlags().String(cidrFlagName, cidrFlagDefault, cidrDescription)

	return nil
}

func registerLanDhcp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dhcpFlagName string
	if cmdPrefix == "" {
		dhcpFlagName = "dhcp"
	} else {
		dhcpFlagName = fmt.Sprintf("%v.dhcp", cmdPrefix)
	}

	if err := registerModelDhcpFlags(depth+1, dhcpFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerLanDNS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dns DNS array type is not supported by go-swagger cli yet

	return nil
}

func registerLanGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := `Required. `

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerLanInterfaceNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: interfaceNames InterfaceNames array type is not supported by go-swagger cli yet

	return nil
}

func registerLanProto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protoDescription := `Enum: ["static","dhcp","pppoe"]. Required. `

	var protoFlagName string
	if cmdPrefix == "" {
		protoFlagName = "proto"
	} else {
		protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
	}

	var protoFlagDefault string

	_ = cmd.PersistentFlags().String(protoFlagName, protoFlagDefault, protoDescription)

	if err := cmd.RegisterFlagCompletionFunc(protoFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["static","dhcp","pppoe"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLanType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["bridge","router","soho"]. Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["bridge","router","soho"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLanFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cidrAdded := retrieveLanCidrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cidrAdded

	err, dhcpAdded := retrieveLanDhcpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpAdded

	err, dnsAdded := retrieveLanDNSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsAdded

	err, gatewayAdded := retrieveLanGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, interfaceNamesAdded := retrieveLanInterfaceNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceNamesAdded

	err, protoAdded := retrieveLanProtoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protoAdded

	err, typeAdded := retrieveLanTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveLanCidrFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cidrFlagName := fmt.Sprintf("%v.cidr", cmdPrefix)
	if cmd.Flags().Changed(cidrFlagName) {

		var cidrFlagName string
		if cmdPrefix == "" {
			cidrFlagName = "cidr"
		} else {
			cidrFlagName = fmt.Sprintf("%v.cidr", cmdPrefix)
		}

		cidrFlagValue, err := cmd.Flags().GetString(cidrFlagName)
		if err != nil {
			return err, false
		}
		m.Cidr = &cidrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLanDhcpFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpFlagName := fmt.Sprintf("%v.dhcp", cmdPrefix)
	if cmd.Flags().Changed(dhcpFlagName) {
		// info: complex object dhcp Dhcp is retrieved outside this Changed() block
	}
	dhcpFlagValue := m.Dhcp
	if swag.IsZero(dhcpFlagValue) {
		dhcpFlagValue = &models.Dhcp{}
	}

	err, dhcpAdded := retrieveModelDhcpFlags(depth+1, dhcpFlagValue, dhcpFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpAdded
	if dhcpAdded {
		m.Dhcp = dhcpFlagValue
	}

	return nil, retAdded
}

func retrieveLanDNSFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsFlagName := fmt.Sprintf("%v.dns", cmdPrefix)
	if cmd.Flags().Changed(dnsFlagName) {
		// warning: dns array type DNS is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveLanGatewayFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gatewayFlagName := fmt.Sprintf("%v.gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = &gatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLanInterfaceNamesFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceNamesFlagName := fmt.Sprintf("%v.interfaceNames", cmdPrefix)
	if cmd.Flags().Changed(interfaceNamesFlagName) {
		// warning: interfaceNames array type InterfaceNames is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveLanProtoFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protoFlagName := fmt.Sprintf("%v.proto", cmdPrefix)
	if cmd.Flags().Changed(protoFlagName) {

		var protoFlagName string
		if cmdPrefix == "" {
			protoFlagName = "proto"
		} else {
			protoFlagName = fmt.Sprintf("%v.proto", cmdPrefix)
		}

		protoFlagValue, err := cmd.Flags().GetString(protoFlagName)
		if err != nil {
			return err, false
		}
		m.Proto = &protoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLanTypeFlags(depth int, m *models.Lan, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
