// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/sites"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSitesGetSitesCmd returns a cmd to handle operation getSites
func makeOperationSitesGetSitesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getSites",
		Short: ``,
		RunE:  runOperationSitesGetSites,
	}

	if err := registerOperationSitesGetSitesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSitesGetSites uses cmd flags to call endpoint api
func runOperationSitesGetSites(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := sites.NewGetSitesParams()
	if err, _ := retrieveOperationSitesGetSitesDeviceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesIPFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesUcrmFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesGetSitesUcrmDetailsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSitesGetSitesResult(appCli.Sites.GetSites(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSitesGetSitesParamFlags registers all flags needed to fill params
func registerOperationSitesGetSitesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSitesGetSitesDeviceIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesIPParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesUcrmParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesGetSitesUcrmDetailsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSitesGetSitesDeviceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	deviceIdDescription := `Return site containing device with this ID.`

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}
func registerOperationSitesGetSitesIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Return only sites with these IDs.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationSitesGetSitesIPParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ipDescription := `Return only sites that contain a device with this IP address.`

	var ipFlagName string
	if cmdPrefix == "" {
		ipFlagName = "ip"
	} else {
		ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
	}

	var ipFlagDefault string

	_ = cmd.PersistentFlags().String(ipFlagName, ipFlagDefault, ipDescription)

	return nil
}
func registerOperationSitesGetSitesTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: ["site","endpoint","client"]. Return sites with this type.`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["site","endpoint","client"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationSitesGetSitesUcrmParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ucrmDescription := `If true, returns only sites that are bound with CRM. If false, returns only sites that are not bound with CRM. Can be used only with "type" parameter.`

	var ucrmFlagName string
	if cmdPrefix == "" {
		ucrmFlagName = "ucrm"
	} else {
		ucrmFlagName = fmt.Sprintf("%v.ucrm", cmdPrefix)
	}

	var ucrmFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ucrmFlagName, ucrmFlagDefault, ucrmDescription)

	return nil
}
func registerOperationSitesGetSitesUcrmDetailsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	ucrmDetailsDescription := `Include CRM client and service details. Can be used with any other parameter.`

	var ucrmDetailsFlagName string
	if cmdPrefix == "" {
		ucrmDetailsFlagName = "ucrmDetails"
	} else {
		ucrmDetailsFlagName = fmt.Sprintf("%v.ucrmDetails", cmdPrefix)
	}

	var ucrmDetailsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ucrmDetailsFlagName, ucrmDetailsFlagDefault, ucrmDetailsDescription)

	return nil
}

func retrieveOperationSitesGetSitesDeviceIDFlag(m *sites.GetSitesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("deviceId") {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesIDFlag(m *sites.GetSitesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValues, err := cmd.Flags().GetStringSlice(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValues

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesIPFlag(m *sites.GetSitesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("ip") {

		var ipFlagName string
		if cmdPrefix == "" {
			ipFlagName = "ip"
		} else {
			ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
		}

		ipFlagValue, err := cmd.Flags().GetString(ipFlagName)
		if err != nil {
			return err, false
		}
		m.IP = &ipFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesTypeFlag(m *sites.GetSitesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesUcrmFlag(m *sites.GetSitesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("ucrm") {

		var ucrmFlagName string
		if cmdPrefix == "" {
			ucrmFlagName = "ucrm"
		} else {
			ucrmFlagName = fmt.Sprintf("%v.ucrm", cmdPrefix)
		}

		ucrmFlagValue, err := cmd.Flags().GetBool(ucrmFlagName)
		if err != nil {
			return err, false
		}
		m.Ucrm = &ucrmFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSitesGetSitesUcrmDetailsFlag(m *sites.GetSitesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("ucrmDetails") {

		var ucrmDetailsFlagName string
		if cmdPrefix == "" {
			ucrmDetailsFlagName = "ucrmDetails"
		} else {
			ucrmDetailsFlagName = fmt.Sprintf("%v.ucrmDetails", cmdPrefix)
		}

		ucrmDetailsFlagValue, err := cmd.Flags().GetBool(ucrmDetailsFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmDetails = &ucrmDetailsFlagValue

	}
	return nil, retAdded
}

// parseOperationSitesGetSitesResult parses request result and return the string content
func parseOperationSitesGetSitesResult(resp0 *sites.GetSitesOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*sites.GetSitesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*sites.GetSitesBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*sites.GetSitesUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*sites.GetSitesForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*sites.GetSitesInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
