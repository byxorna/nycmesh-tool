// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/sites"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSitesPostSitesDevicesiterelationsCmd returns a cmd to handle operation postSitesDevicesiterelations
func makeOperationSitesPostSitesDevicesiterelationsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "postSitesDevicesiterelations",
		Short: ``,
		RunE:  runOperationSitesPostSitesDevicesiterelations,
	}

	if err := registerOperationSitesPostSitesDevicesiterelationsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSitesPostSitesDevicesiterelations uses cmd flags to call endpoint api
func runOperationSitesPostSitesDevicesiterelations(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := sites.NewPostSitesDevicesiterelationsParams()
	if err, _ := retrieveOperationSitesPostSitesDevicesiterelationsBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSitesPostSitesDevicesiterelationsForceCreateFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSitesPostSitesDevicesiterelationsResult(appCli.Sites.PostSitesDevicesiterelations(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSitesPostSitesDevicesiterelationsParamFlags registers all flags needed to fill params
func registerOperationSitesPostSitesDevicesiterelationsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSitesPostSitesDevicesiterelationsBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSitesPostSitesDevicesiterelationsForceCreateParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSitesPostSitesDevicesiterelationsBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: array body models.SiteImportList is not supported by go-swagger cli yet

	return nil
}
func registerOperationSitesPostSitesDevicesiterelationsForceCreateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceCreateDescription := `
      If true it will create all sites and clients from payload.
      In case of duplicate names or ucrmId it will not update them but create duplicates.`

	var forceCreateFlagName string
	if cmdPrefix == "" {
		forceCreateFlagName = "forceCreate"
	} else {
		forceCreateFlagName = fmt.Sprintf("%v.forceCreate", cmdPrefix)
	}

	var forceCreateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceCreateFlagName, forceCreateFlagDefault, forceCreateDescription)

	return nil
}

func retrieveOperationSitesPostSitesDevicesiterelationsBodyFlag(m *sites.PostSitesDevicesiterelationsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		// warning: array body models.SiteImportList is not supported by go-swagger cli yet

	}
	return nil, retAdded
}
func retrieveOperationSitesPostSitesDevicesiterelationsForceCreateFlag(m *sites.PostSitesDevicesiterelationsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("forceCreate") {

		var forceCreateFlagName string
		if cmdPrefix == "" {
			forceCreateFlagName = "forceCreate"
		} else {
			forceCreateFlagName = fmt.Sprintf("%v.forceCreate", cmdPrefix)
		}

		forceCreateFlagValue, err := cmd.Flags().GetBool(forceCreateFlagName)
		if err != nil {
			return err, false
		}
		m.ForceCreate = &forceCreateFlagValue

	}
	return nil, retAdded
}

// parseOperationSitesPostSitesDevicesiterelationsResult parses request result and return the string content
func parseOperationSitesPostSitesDevicesiterelationsResult(resp0 *sites.PostSitesDevicesiterelationsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*sites.PostSitesDevicesiterelationsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*sites.PostSitesDevicesiterelationsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*sites.PostSitesDevicesiterelationsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*sites.PostSitesDevicesiterelationsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*sites.PostSitesDevicesiterelationsInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
