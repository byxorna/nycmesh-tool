// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Airfiber

// register flags to command
func registerModelAirfiberFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAirfiberFrameLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirfiberMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirfiberFrameLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frameLengthDescription := `Required. `

	var frameLengthFlagName string
	if cmdPrefix == "" {
		frameLengthFlagName = "frameLength"
	} else {
		frameLengthFlagName = fmt.Sprintf("%v.frameLength", cmdPrefix)
	}

	var frameLengthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frameLengthFlagName, frameLengthFlagDefault, frameLengthDescription)

	return nil
}

func registerAirfiberMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Required. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAirfiberFlags(depth int, m *models.Airfiber, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, frameLengthAdded := retrieveAirfiberFrameLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frameLengthAdded

	err, modeAdded := retrieveAirfiberModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	return nil, retAdded
}

func retrieveAirfiberFrameLengthFlags(depth int, m *models.Airfiber, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frameLengthFlagName := fmt.Sprintf("%v.frameLength", cmdPrefix)
	if cmd.Flags().Changed(frameLengthFlagName) {

		var frameLengthFlagName string
		if cmdPrefix == "" {
			frameLengthFlagName = "frameLength"
		} else {
			frameLengthFlagName = fmt.Sprintf("%v.frameLength", cmdPrefix)
		}

		frameLengthFlagValue, err := cmd.Flags().GetFloat64(frameLengthFlagName)
		if err != nil {
			return err, false
		}
		m.FrameLength = &frameLengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirfiberModeFlags(depth int, m *models.Airfiber, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = &modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
