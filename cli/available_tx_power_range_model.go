// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for AvailableTxPowerRange

// register flags to command
func registerModelAvailableTxPowerRangeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAvailableTxPowerRangeMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAvailableTxPowerRangeMin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAvailableTxPowerRangeMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxDescription := ``

	var maxFlagName string
	if cmdPrefix == "" {
		maxFlagName = "max"
	} else {
		maxFlagName = fmt.Sprintf("%v.max", cmdPrefix)
	}

	var maxFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maxFlagName, maxFlagDefault, maxDescription)

	return nil
}

func registerAvailableTxPowerRangeMin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minDescription := ``

	var minFlagName string
	if cmdPrefix == "" {
		minFlagName = "min"
	} else {
		minFlagName = fmt.Sprintf("%v.min", cmdPrefix)
	}

	var minFlagDefault int64

	_ = cmd.PersistentFlags().Int64(minFlagName, minFlagDefault, minDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAvailableTxPowerRangeFlags(depth int, m *models.AvailableTxPowerRange, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, maxAdded := retrieveAvailableTxPowerRangeMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxAdded

	err, minAdded := retrieveAvailableTxPowerRangeMinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minAdded

	return nil, retAdded
}

func retrieveAvailableTxPowerRangeMaxFlags(depth int, m *models.AvailableTxPowerRange, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxFlagName := fmt.Sprintf("%v.max", cmdPrefix)
	if cmd.Flags().Changed(maxFlagName) {

		var maxFlagName string
		if cmdPrefix == "" {
			maxFlagName = "max"
		} else {
			maxFlagName = fmt.Sprintf("%v.max", cmdPrefix)
		}

		maxFlagValue, err := cmd.Flags().GetInt64(maxFlagName)
		if err != nil {
			return err, false
		}
		m.Max = maxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAvailableTxPowerRangeMinFlags(depth int, m *models.AvailableTxPowerRange, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minFlagName := fmt.Sprintf("%v.min", cmdPrefix)
	if cmd.Flags().Changed(minFlagName) {

		var minFlagName string
		if cmdPrefix == "" {
			minFlagName = "min"
		} else {
			minFlagName = fmt.Sprintf("%v.min", cmdPrefix)
		}

		minFlagValue, err := cmd.Flags().GetInt64(minFlagName)
		if err != nil {
			return err, false
		}
		m.Min = minFlagValue

		retAdded = true
	}

	return nil, retAdded
}
