// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for SiteTrafficShaping

// register flags to command
func registerModelSiteTrafficShapingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSiteTrafficShapingAggregation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteTrafficShapingDownloadBurstSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteTrafficShapingDownloadSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteTrafficShapingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteTrafficShapingPropagation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteTrafficShapingUploadBurstSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSiteTrafficShapingUploadSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSiteTrafficShapingAggregation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aggregationDescription := `Required. 
      Number indicating how many times the guaranteed rate is less than the maximum allowed bandwidth.
      Null for auto calculation by UISP.
    `

	var aggregationFlagName string
	if cmdPrefix == "" {
		aggregationFlagName = "aggregation"
	} else {
		aggregationFlagName = fmt.Sprintf("%v.aggregation", cmdPrefix)
	}

	var aggregationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(aggregationFlagName, aggregationFlagDefault, aggregationDescription)

	return nil
}

func registerSiteTrafficShapingDownloadBurstSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downloadBurstSizeDescription := `Enum: [0]. Required. Amount of bytes that can be sent at downloadSpeed in excess of the guaranteed rate.`

	var downloadBurstSizeFlagName string
	if cmdPrefix == "" {
		downloadBurstSizeFlagName = "downloadBurstSize"
	} else {
		downloadBurstSizeFlagName = fmt.Sprintf("%v.downloadBurstSize", cmdPrefix)
	}

	var downloadBurstSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downloadBurstSizeFlagName, downloadBurstSizeFlagDefault, downloadBurstSizeDescription)

	if err := cmd.RegisterFlagCompletionFunc(downloadBurstSizeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteTrafficShapingDownloadSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downloadSpeedDescription := `Enum: [0]. Required. Download speed limit in bps.`

	var downloadSpeedFlagName string
	if cmdPrefix == "" {
		downloadSpeedFlagName = "downloadSpeed"
	} else {
		downloadSpeedFlagName = fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
	}

	var downloadSpeedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downloadSpeedFlagName, downloadSpeedFlagDefault, downloadSpeedDescription)

	if err := cmd.RegisterFlagCompletionFunc(downloadSpeedFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteTrafficShapingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. Set to TRUE if optional Traffic Shaping queue are activated.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerSiteTrafficShapingPropagation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	propagationDescription := `Enum: ["all","gateway"]. 
      Whether or not set Traffic Shaping on Client devices like, CPEs and ONUs.
      Enabling this will lower your traffic in local network.
    `

	var propagationFlagName string
	if cmdPrefix == "" {
		propagationFlagName = "propagation"
	} else {
		propagationFlagName = fmt.Sprintf("%v.propagation", cmdPrefix)
	}

	var propagationFlagDefault string

	_ = cmd.PersistentFlags().String(propagationFlagName, propagationFlagDefault, propagationDescription)

	if err := cmd.RegisterFlagCompletionFunc(propagationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["all","gateway"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteTrafficShapingUploadBurstSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uploadBurstSizeDescription := `Enum: [0]. Required. Amount of bytes that can be sent at uploadSpeed in excess of the guaranteed rate.`

	var uploadBurstSizeFlagName string
	if cmdPrefix == "" {
		uploadBurstSizeFlagName = "uploadBurstSize"
	} else {
		uploadBurstSizeFlagName = fmt.Sprintf("%v.uploadBurstSize", cmdPrefix)
	}

	var uploadBurstSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uploadBurstSizeFlagName, uploadBurstSizeFlagDefault, uploadBurstSizeDescription)

	if err := cmd.RegisterFlagCompletionFunc(uploadBurstSizeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSiteTrafficShapingUploadSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uploadSpeedDescription := `Enum: [0]. Required. Upload speed limit in bps.`

	var uploadSpeedFlagName string
	if cmdPrefix == "" {
		uploadSpeedFlagName = "uploadSpeed"
	} else {
		uploadSpeedFlagName = fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
	}

	var uploadSpeedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uploadSpeedFlagName, uploadSpeedFlagDefault, uploadSpeedDescription)

	if err := cmd.RegisterFlagCompletionFunc(uploadSpeedFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[0]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSiteTrafficShapingFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aggregationAdded := retrieveSiteTrafficShapingAggregationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aggregationAdded

	err, downloadBurstSizeAdded := retrieveSiteTrafficShapingDownloadBurstSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downloadBurstSizeAdded

	err, downloadSpeedAdded := retrieveSiteTrafficShapingDownloadSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downloadSpeedAdded

	err, enabledAdded := retrieveSiteTrafficShapingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, propagationAdded := retrieveSiteTrafficShapingPropagationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || propagationAdded

	err, uploadBurstSizeAdded := retrieveSiteTrafficShapingUploadBurstSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadBurstSizeAdded

	err, uploadSpeedAdded := retrieveSiteTrafficShapingUploadSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uploadSpeedAdded

	return nil, retAdded
}

func retrieveSiteTrafficShapingAggregationFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aggregationFlagName := fmt.Sprintf("%v.aggregation", cmdPrefix)
	if cmd.Flags().Changed(aggregationFlagName) {

		var aggregationFlagName string
		if cmdPrefix == "" {
			aggregationFlagName = "aggregation"
		} else {
			aggregationFlagName = fmt.Sprintf("%v.aggregation", cmdPrefix)
		}

		aggregationFlagValue, err := cmd.Flags().GetInt64(aggregationFlagName)
		if err != nil {
			return err, false
		}
		m.Aggregation = &aggregationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteTrafficShapingDownloadBurstSizeFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downloadBurstSizeFlagName := fmt.Sprintf("%v.downloadBurstSize", cmdPrefix)
	if cmd.Flags().Changed(downloadBurstSizeFlagName) {

		var downloadBurstSizeFlagName string
		if cmdPrefix == "" {
			downloadBurstSizeFlagName = "downloadBurstSize"
		} else {
			downloadBurstSizeFlagName = fmt.Sprintf("%v.downloadBurstSize", cmdPrefix)
		}

		downloadBurstSizeFlagValue, err := cmd.Flags().GetInt64(downloadBurstSizeFlagName)
		if err != nil {
			return err, false
		}
		m.DownloadBurstSize = &downloadBurstSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteTrafficShapingDownloadSpeedFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downloadSpeedFlagName := fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
	if cmd.Flags().Changed(downloadSpeedFlagName) {

		var downloadSpeedFlagName string
		if cmdPrefix == "" {
			downloadSpeedFlagName = "downloadSpeed"
		} else {
			downloadSpeedFlagName = fmt.Sprintf("%v.downloadSpeed", cmdPrefix)
		}

		downloadSpeedFlagValue, err := cmd.Flags().GetInt64(downloadSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.DownloadSpeed = &downloadSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteTrafficShapingEnabledFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteTrafficShapingPropagationFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	propagationFlagName := fmt.Sprintf("%v.propagation", cmdPrefix)
	if cmd.Flags().Changed(propagationFlagName) {

		var propagationFlagName string
		if cmdPrefix == "" {
			propagationFlagName = "propagation"
		} else {
			propagationFlagName = fmt.Sprintf("%v.propagation", cmdPrefix)
		}

		propagationFlagValue, err := cmd.Flags().GetString(propagationFlagName)
		if err != nil {
			return err, false
		}
		m.Propagation = propagationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteTrafficShapingUploadBurstSizeFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadBurstSizeFlagName := fmt.Sprintf("%v.uploadBurstSize", cmdPrefix)
	if cmd.Flags().Changed(uploadBurstSizeFlagName) {

		var uploadBurstSizeFlagName string
		if cmdPrefix == "" {
			uploadBurstSizeFlagName = "uploadBurstSize"
		} else {
			uploadBurstSizeFlagName = fmt.Sprintf("%v.uploadBurstSize", cmdPrefix)
		}

		uploadBurstSizeFlagValue, err := cmd.Flags().GetInt64(uploadBurstSizeFlagName)
		if err != nil {
			return err, false
		}
		m.UploadBurstSize = &uploadBurstSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSiteTrafficShapingUploadSpeedFlags(depth int, m *models.SiteTrafficShaping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uploadSpeedFlagName := fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
	if cmd.Flags().Changed(uploadSpeedFlagName) {

		var uploadSpeedFlagName string
		if cmdPrefix == "" {
			uploadSpeedFlagName = "uploadSpeed"
		} else {
			uploadSpeedFlagName = fmt.Sprintf("%v.uploadSpeed", cmdPrefix)
		}

		uploadSpeedFlagValue, err := cmd.Flags().GetInt64(uploadSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.UploadSpeed = &uploadSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
