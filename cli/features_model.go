// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Features

// register flags to command
func registerModelFeaturesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFeaturesCloudVault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFeaturesLinkScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFeaturesNewUserRoles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFeaturesWifiMan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFeaturesCloudVault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cloudVaultDescription := `Required. Experimental flag for cloud-managed vault key.`

	var cloudVaultFlagName string
	if cmdPrefix == "" {
		cloudVaultFlagName = "cloudVault"
	} else {
		cloudVaultFlagName = fmt.Sprintf("%v.cloudVault", cmdPrefix)
	}

	var cloudVaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(cloudVaultFlagName, cloudVaultFlagDefault, cloudVaultDescription)

	return nil
}

func registerFeaturesLinkScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	linkScoreDescription := `Required. Experimental flag for linkScore.`

	var linkScoreFlagName string
	if cmdPrefix == "" {
		linkScoreFlagName = "linkScore"
	} else {
		linkScoreFlagName = fmt.Sprintf("%v.linkScore", cmdPrefix)
	}

	var linkScoreFlagDefault bool

	_ = cmd.PersistentFlags().Bool(linkScoreFlagName, linkScoreFlagDefault, linkScoreDescription)

	return nil
}

func registerFeaturesNewUserRoles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	newUserRolesDescription := `Required. Experimental flag for new user roles.`

	var newUserRolesFlagName string
	if cmdPrefix == "" {
		newUserRolesFlagName = "newUserRoles"
	} else {
		newUserRolesFlagName = fmt.Sprintf("%v.newUserRoles", cmdPrefix)
	}

	var newUserRolesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(newUserRolesFlagName, newUserRolesFlagDefault, newUserRolesDescription)

	return nil
}

func registerFeaturesWifiMan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wifiManDescription := `Required. Experimental flag for wifiMan.`

	var wifiManFlagName string
	if cmdPrefix == "" {
		wifiManFlagName = "wifiMan"
	} else {
		wifiManFlagName = fmt.Sprintf("%v.wifiMan", cmdPrefix)
	}

	var wifiManFlagDefault bool

	_ = cmd.PersistentFlags().Bool(wifiManFlagName, wifiManFlagDefault, wifiManDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFeaturesFlags(depth int, m *models.Features, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cloudVaultAdded := retrieveFeaturesCloudVaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cloudVaultAdded

	err, linkScoreAdded := retrieveFeaturesLinkScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkScoreAdded

	err, newUserRolesAdded := retrieveFeaturesNewUserRolesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || newUserRolesAdded

	err, wifiManAdded := retrieveFeaturesWifiManFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifiManAdded

	return nil, retAdded
}

func retrieveFeaturesCloudVaultFlags(depth int, m *models.Features, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cloudVaultFlagName := fmt.Sprintf("%v.cloudVault", cmdPrefix)
	if cmd.Flags().Changed(cloudVaultFlagName) {

		var cloudVaultFlagName string
		if cmdPrefix == "" {
			cloudVaultFlagName = "cloudVault"
		} else {
			cloudVaultFlagName = fmt.Sprintf("%v.cloudVault", cmdPrefix)
		}

		cloudVaultFlagValue, err := cmd.Flags().GetBool(cloudVaultFlagName)
		if err != nil {
			return err, false
		}
		m.CloudVault = &cloudVaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFeaturesLinkScoreFlags(depth int, m *models.Features, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linkScoreFlagName := fmt.Sprintf("%v.linkScore", cmdPrefix)
	if cmd.Flags().Changed(linkScoreFlagName) {

		var linkScoreFlagName string
		if cmdPrefix == "" {
			linkScoreFlagName = "linkScore"
		} else {
			linkScoreFlagName = fmt.Sprintf("%v.linkScore", cmdPrefix)
		}

		linkScoreFlagValue, err := cmd.Flags().GetBool(linkScoreFlagName)
		if err != nil {
			return err, false
		}
		m.LinkScore = &linkScoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFeaturesNewUserRolesFlags(depth int, m *models.Features, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	newUserRolesFlagName := fmt.Sprintf("%v.newUserRoles", cmdPrefix)
	if cmd.Flags().Changed(newUserRolesFlagName) {

		var newUserRolesFlagName string
		if cmdPrefix == "" {
			newUserRolesFlagName = "newUserRoles"
		} else {
			newUserRolesFlagName = fmt.Sprintf("%v.newUserRoles", cmdPrefix)
		}

		newUserRolesFlagValue, err := cmd.Flags().GetBool(newUserRolesFlagName)
		if err != nil {
			return err, false
		}
		m.NewUserRoles = &newUserRolesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFeaturesWifiManFlags(depth int, m *models.Features, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifiManFlagName := fmt.Sprintf("%v.wifiMan", cmdPrefix)
	if cmd.Flags().Changed(wifiManFlagName) {

		var wifiManFlagName string
		if cmdPrefix == "" {
			wifiManFlagName = "wifiMan"
		} else {
			wifiManFlagName = fmt.Sprintf("%v.wifiMan", cmdPrefix)
		}

		wifiManFlagValue, err := cmd.Flags().GetBool(wifiManFlagName)
		if err != nil {
			return err, false
		}
		m.WifiMan = &wifiManFlagValue

		retAdded = true
	}

	return nil, retAdded
}
