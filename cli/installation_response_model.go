// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for InstallationResponse

// register flags to command
func registerModelInstallationResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstallationResponseChat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationResponseCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationResponseDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationResponseFinished(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationResponseID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationResponseUpdated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationResponseUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstallationResponseChat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: chat Chat array type is not supported by go-swagger cli yet

	return nil
}

func registerInstallationResponseCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive created strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerInstallationResponseDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: devices Devices array type is not supported by go-swagger cli yet

	return nil
}

func registerInstallationResponseFinished(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive finished strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerInstallationResponseID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Id of the installation.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerInstallationResponseUpdated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive updated strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerInstallationResponseUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: users Users1 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstallationResponseFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, chatAdded := retrieveInstallationResponseChatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chatAdded

	err, createdAdded := retrieveInstallationResponseCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, devicesAdded := retrieveInstallationResponseDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicesAdded

	err, finishedAdded := retrieveInstallationResponseFinishedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishedAdded

	err, idAdded := retrieveInstallationResponseIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, updatedAdded := retrieveInstallationResponseUpdatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAdded

	err, usersAdded := retrieveInstallationResponseUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usersAdded

	return nil, retAdded
}

func retrieveInstallationResponseChatFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chatFlagName := fmt.Sprintf("%v.chat", cmdPrefix)
	if cmd.Flags().Changed(chatFlagName) {
		// warning: chat array type Chat is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveInstallationResponseCreatedFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdFlagName := fmt.Sprintf("%v.created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		// warning: primitive created strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationResponseDevicesFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicesFlagName := fmt.Sprintf("%v.devices", cmdPrefix)
	if cmd.Flags().Changed(devicesFlagName) {
		// warning: devices array type Devices is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveInstallationResponseFinishedFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	finishedFlagName := fmt.Sprintf("%v.finished", cmdPrefix)
	if cmd.Flags().Changed(finishedFlagName) {

		// warning: primitive finished strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationResponseIDFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationResponseUpdatedFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedFlagName := fmt.Sprintf("%v.updated", cmdPrefix)
	if cmd.Flags().Changed(updatedFlagName) {

		// warning: primitive updated strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationResponseUsersFlags(depth int, m *models.InstallationResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usersFlagName := fmt.Sprintf("%v.users", cmdPrefix)
	if cmd.Flags().Changed(usersFlagName) {
		// warning: users array type Users1 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
