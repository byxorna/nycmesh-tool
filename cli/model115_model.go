// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model115

// register flags to command
func registerModelModel115Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel115AdminPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel115Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel115Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel115AdminPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	adminPasswordDescription := `Admin password`

	var adminPasswordFlagName string
	if cmdPrefix == "" {
		adminPasswordFlagName = "adminPassword"
	} else {
		adminPasswordFlagName = fmt.Sprintf("%v.adminPassword", cmdPrefix)
	}

	var adminPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(adminPasswordFlagName, adminPasswordFlagDefault, adminPasswordDescription)

	return nil
}

func registerModel115Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. Set to true if device is enabled`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerModel115Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Device name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel115Flags(depth int, m *models.Model115, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, adminPasswordAdded := retrieveModel115AdminPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminPasswordAdded

	err, enabledAdded := retrieveModel115EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, nameAdded := retrieveModel115NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveModel115AdminPasswordFlags(depth int, m *models.Model115, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	adminPasswordFlagName := fmt.Sprintf("%v.adminPassword", cmdPrefix)
	if cmd.Flags().Changed(adminPasswordFlagName) {

		var adminPasswordFlagName string
		if cmdPrefix == "" {
			adminPasswordFlagName = "adminPassword"
		} else {
			adminPasswordFlagName = fmt.Sprintf("%v.adminPassword", cmdPrefix)
		}

		adminPasswordFlagValue, err := cmd.Flags().GetString(adminPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.AdminPassword = adminPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel115EnabledFlags(depth int, m *models.Model115, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel115NameFlags(depth int, m *models.Model115, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
