// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Wireless

// register flags to command
func registerModelWirelessFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWirelessAntenna(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessDfsLockouts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessDfsTimeRemaining(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessDfsTimeTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessDlRatio(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessFrameLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessFrequencyBand(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessMaxTxPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessMinTxPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessNoiseFloor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessSecurity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessTransmitEirp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWirelessTransmitPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWirelessAntenna(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var antennaFlagName string
	if cmdPrefix == "" {
		antennaFlagName = "antenna"
	} else {
		antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
	}

	if err := registerModelAntenna1Flags(depth+1, antennaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerWirelessChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := `Required. Channel width in MHz radio is operating on.`

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerWirelessDfsLockouts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dfsLockouts DfsLockouts array type is not supported by go-swagger cli yet

	return nil
}

func registerWirelessDfsTimeRemaining(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dfsTimeRemainingDescription := `Required. DFS wait time remaining.`

	var dfsTimeRemainingFlagName string
	if cmdPrefix == "" {
		dfsTimeRemainingFlagName = "dfsTimeRemaining"
	} else {
		dfsTimeRemainingFlagName = fmt.Sprintf("%v.dfsTimeRemaining", cmdPrefix)
	}

	var dfsTimeRemainingFlagDefault float64

	_ = cmd.PersistentFlags().Float64(dfsTimeRemainingFlagName, dfsTimeRemainingFlagDefault, dfsTimeRemainingDescription)

	return nil
}

func registerWirelessDfsTimeTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dfsTimeTotalDescription := `Required. DFS expected total wait time.`

	var dfsTimeTotalFlagName string
	if cmdPrefix == "" {
		dfsTimeTotalFlagName = "dfsTimeTotal"
	} else {
		dfsTimeTotalFlagName = fmt.Sprintf("%v.dfsTimeTotal", cmdPrefix)
	}

	var dfsTimeTotalFlagDefault float64

	_ = cmd.PersistentFlags().Float64(dfsTimeTotalFlagName, dfsTimeTotalFlagDefault, dfsTimeTotalDescription)

	return nil
}

func registerWirelessDlRatio(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dlRatioDescription := `Required. Downlink ratio in percentage. To calculate Uplink percentage substract DlRatio out of a hundered.`

	var dlRatioFlagName string
	if cmdPrefix == "" {
		dlRatioFlagName = "dlRatio"
	} else {
		dlRatioFlagName = fmt.Sprintf("%v.dlRatio", cmdPrefix)
	}

	var dlRatioFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dlRatioFlagName, dlRatioFlagDefault, dlRatioDescription)

	return nil
}

func registerWirelessFrameLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frameLengthDescription := `Required. `

	var frameLengthFlagName string
	if cmdPrefix == "" {
		frameLengthFlagName = "frameLength"
	} else {
		frameLengthFlagName = fmt.Sprintf("%v.frameLength", cmdPrefix)
	}

	var frameLengthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frameLengthFlagName, frameLengthFlagDefault, frameLengthDescription)

	return nil
}

func registerWirelessFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := `Required. Frequency in MHz, on which radio is listening.`

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	return nil
}

func registerWirelessFrequencyBand(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyBandDescription := `Enum: ["2.4GHz","3GHz","4GHz","5GHz","11GHz","24GHz","60GHz"]. `

	var frequencyBandFlagName string
	if cmdPrefix == "" {
		frequencyBandFlagName = "frequencyBand"
	} else {
		frequencyBandFlagName = fmt.Sprintf("%v.frequencyBand", cmdPrefix)
	}

	var frequencyBandFlagDefault string

	_ = cmd.PersistentFlags().String(frequencyBandFlagName, frequencyBandFlagDefault, frequencyBandDescription)

	if err := cmd.RegisterFlagCompletionFunc(frequencyBandFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["2.4GHz","3GHz","4GHz","5GHz","11GHz","24GHz","60GHz"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWirelessKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyDescription := `Required. Pre shared key`

	var keyFlagName string
	if cmdPrefix == "" {
		keyFlagName = "key"
	} else {
		keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
	}

	var keyFlagDefault string

	_ = cmd.PersistentFlags().String(keyFlagName, keyFlagDefault, keyDescription)

	return nil
}

func registerWirelessMaxTxPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxTxPowerDescription := ``

	var maxTxPowerFlagName string
	if cmdPrefix == "" {
		maxTxPowerFlagName = "maxTxPower"
	} else {
		maxTxPowerFlagName = fmt.Sprintf("%v.maxTxPower", cmdPrefix)
	}

	var maxTxPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(maxTxPowerFlagName, maxTxPowerFlagDefault, maxTxPowerDescription)

	return nil
}

func registerWirelessMinTxPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minTxPowerDescription := ``

	var minTxPowerFlagName string
	if cmdPrefix == "" {
		minTxPowerFlagName = "minTxPower"
	} else {
		minTxPowerFlagName = fmt.Sprintf("%v.minTxPower", cmdPrefix)
	}

	var minTxPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(minTxPowerFlagName, minTxPowerFlagDefault, minTxPowerDescription)

	return nil
}

func registerWirelessNoiseFloor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noiseFloorDescription := `Required. Wireless noise level in dBm`

	var noiseFloorFlagName string
	if cmdPrefix == "" {
		noiseFloorFlagName = "noiseFloor"
	} else {
		noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	}

	var noiseFloorFlagDefault int64

	_ = cmd.PersistentFlags().Int64(noiseFloorFlagName, noiseFloorFlagDefault, noiseFloorDescription)

	return nil
}

func registerWirelessSecurity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	securityDescription := `Enum: ["wep","wpa","wpa-psk","wpa2","enabled","none"]. Required. `

	var securityFlagName string
	if cmdPrefix == "" {
		securityFlagName = "security"
	} else {
		securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
	}

	var securityFlagDefault string

	_ = cmd.PersistentFlags().String(securityFlagName, securityFlagDefault, securityDescription)

	if err := cmd.RegisterFlagCompletionFunc(securityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWirelessSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := `Required. SSID`

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerWirelessTransmitEirp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitEirpDescription := ``

	var transmitEirpFlagName string
	if cmdPrefix == "" {
		transmitEirpFlagName = "transmitEirp"
	} else {
		transmitEirpFlagName = fmt.Sprintf("%v.transmitEirp", cmdPrefix)
	}

	var transmitEirpFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitEirpFlagName, transmitEirpFlagDefault, transmitEirpDescription)

	return nil
}

func registerWirelessTransmitPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitPowerDescription := ``

	var transmitPowerFlagName string
	if cmdPrefix == "" {
		transmitPowerFlagName = "transmitPower"
	} else {
		transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
	}

	var transmitPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitPowerFlagName, transmitPowerFlagDefault, transmitPowerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWirelessFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, antennaAdded := retrieveWirelessAntennaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded

	err, channelWidthAdded := retrieveWirelessChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, dfsLockoutsAdded := retrieveWirelessDfsLockoutsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dfsLockoutsAdded

	err, dfsTimeRemainingAdded := retrieveWirelessDfsTimeRemainingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dfsTimeRemainingAdded

	err, dfsTimeTotalAdded := retrieveWirelessDfsTimeTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dfsTimeTotalAdded

	err, dlRatioAdded := retrieveWirelessDlRatioFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dlRatioAdded

	err, frameLengthAdded := retrieveWirelessFrameLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frameLengthAdded

	err, frequencyAdded := retrieveWirelessFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, frequencyBandAdded := retrieveWirelessFrequencyBandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyBandAdded

	err, keyAdded := retrieveWirelessKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyAdded

	err, maxTxPowerAdded := retrieveWirelessMaxTxPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxTxPowerAdded

	err, minTxPowerAdded := retrieveWirelessMinTxPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minTxPowerAdded

	err, noiseFloorAdded := retrieveWirelessNoiseFloorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noiseFloorAdded

	err, securityAdded := retrieveWirelessSecurityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securityAdded

	err, ssidAdded := retrieveWirelessSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, transmitEirpAdded := retrieveWirelessTransmitEirpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitEirpAdded

	err, transmitPowerAdded := retrieveWirelessTransmitPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitPowerAdded

	return nil, retAdded
}

func retrieveWirelessAntennaFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaFlagName := fmt.Sprintf("%v.antenna", cmdPrefix)
	if cmd.Flags().Changed(antennaFlagName) {
		// info: complex object antenna Antenna1 is retrieved outside this Changed() block
	}
	antennaFlagValue := m.Antenna
	if swag.IsZero(antennaFlagValue) {
		antennaFlagValue = &models.Antenna1{}
	}

	err, antennaAdded := retrieveModelAntenna1Flags(depth+1, antennaFlagValue, antennaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded
	if antennaAdded {
		m.Antenna = antennaFlagValue
	}

	return nil, retAdded
}

func retrieveWirelessChannelWidthFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetInt64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessDfsLockoutsFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dfsLockoutsFlagName := fmt.Sprintf("%v.dfsLockouts", cmdPrefix)
	if cmd.Flags().Changed(dfsLockoutsFlagName) {
		// warning: dfsLockouts array type DfsLockouts is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWirelessDfsTimeRemainingFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dfsTimeRemainingFlagName := fmt.Sprintf("%v.dfsTimeRemaining", cmdPrefix)
	if cmd.Flags().Changed(dfsTimeRemainingFlagName) {

		var dfsTimeRemainingFlagName string
		if cmdPrefix == "" {
			dfsTimeRemainingFlagName = "dfsTimeRemaining"
		} else {
			dfsTimeRemainingFlagName = fmt.Sprintf("%v.dfsTimeRemaining", cmdPrefix)
		}

		dfsTimeRemainingFlagValue, err := cmd.Flags().GetFloat64(dfsTimeRemainingFlagName)
		if err != nil {
			return err, false
		}
		m.DfsTimeRemaining = &dfsTimeRemainingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessDfsTimeTotalFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dfsTimeTotalFlagName := fmt.Sprintf("%v.dfsTimeTotal", cmdPrefix)
	if cmd.Flags().Changed(dfsTimeTotalFlagName) {

		var dfsTimeTotalFlagName string
		if cmdPrefix == "" {
			dfsTimeTotalFlagName = "dfsTimeTotal"
		} else {
			dfsTimeTotalFlagName = fmt.Sprintf("%v.dfsTimeTotal", cmdPrefix)
		}

		dfsTimeTotalFlagValue, err := cmd.Flags().GetFloat64(dfsTimeTotalFlagName)
		if err != nil {
			return err, false
		}
		m.DfsTimeTotal = &dfsTimeTotalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessDlRatioFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dlRatioFlagName := fmt.Sprintf("%v.dlRatio", cmdPrefix)
	if cmd.Flags().Changed(dlRatioFlagName) {

		var dlRatioFlagName string
		if cmdPrefix == "" {
			dlRatioFlagName = "dlRatio"
		} else {
			dlRatioFlagName = fmt.Sprintf("%v.dlRatio", cmdPrefix)
		}

		dlRatioFlagValue, err := cmd.Flags().GetInt64(dlRatioFlagName)
		if err != nil {
			return err, false
		}
		m.DlRatio = &dlRatioFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessFrameLengthFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frameLengthFlagName := fmt.Sprintf("%v.frameLength", cmdPrefix)
	if cmd.Flags().Changed(frameLengthFlagName) {

		var frameLengthFlagName string
		if cmdPrefix == "" {
			frameLengthFlagName = "frameLength"
		} else {
			frameLengthFlagName = fmt.Sprintf("%v.frameLength", cmdPrefix)
		}

		frameLengthFlagValue, err := cmd.Flags().GetFloat64(frameLengthFlagName)
		if err != nil {
			return err, false
		}
		m.FrameLength = &frameLengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessFrequencyFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetFloat64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = &frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessFrequencyBandFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyBandFlagName := fmt.Sprintf("%v.frequencyBand", cmdPrefix)
	if cmd.Flags().Changed(frequencyBandFlagName) {

		var frequencyBandFlagName string
		if cmdPrefix == "" {
			frequencyBandFlagName = "frequencyBand"
		} else {
			frequencyBandFlagName = fmt.Sprintf("%v.frequencyBand", cmdPrefix)
		}

		frequencyBandFlagValue, err := cmd.Flags().GetString(frequencyBandFlagName)
		if err != nil {
			return err, false
		}
		m.FrequencyBand = frequencyBandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessKeyFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyFlagName := fmt.Sprintf("%v.key", cmdPrefix)
	if cmd.Flags().Changed(keyFlagName) {

		var keyFlagName string
		if cmdPrefix == "" {
			keyFlagName = "key"
		} else {
			keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
		}

		keyFlagValue, err := cmd.Flags().GetString(keyFlagName)
		if err != nil {
			return err, false
		}
		m.Key = &keyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessMaxTxPowerFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxTxPowerFlagName := fmt.Sprintf("%v.maxTxPower", cmdPrefix)
	if cmd.Flags().Changed(maxTxPowerFlagName) {

		var maxTxPowerFlagName string
		if cmdPrefix == "" {
			maxTxPowerFlagName = "maxTxPower"
		} else {
			maxTxPowerFlagName = fmt.Sprintf("%v.maxTxPower", cmdPrefix)
		}

		maxTxPowerFlagValue, err := cmd.Flags().GetFloat64(maxTxPowerFlagName)
		if err != nil {
			return err, false
		}
		m.MaxTxPower = maxTxPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessMinTxPowerFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minTxPowerFlagName := fmt.Sprintf("%v.minTxPower", cmdPrefix)
	if cmd.Flags().Changed(minTxPowerFlagName) {

		var minTxPowerFlagName string
		if cmdPrefix == "" {
			minTxPowerFlagName = "minTxPower"
		} else {
			minTxPowerFlagName = fmt.Sprintf("%v.minTxPower", cmdPrefix)
		}

		minTxPowerFlagValue, err := cmd.Flags().GetFloat64(minTxPowerFlagName)
		if err != nil {
			return err, false
		}
		m.MinTxPower = minTxPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessNoiseFloorFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noiseFloorFlagName := fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	if cmd.Flags().Changed(noiseFloorFlagName) {

		var noiseFloorFlagName string
		if cmdPrefix == "" {
			noiseFloorFlagName = "noiseFloor"
		} else {
			noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
		}

		noiseFloorFlagValue, err := cmd.Flags().GetInt64(noiseFloorFlagName)
		if err != nil {
			return err, false
		}
		m.NoiseFloor = &noiseFloorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessSecurityFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securityFlagName := fmt.Sprintf("%v.security", cmdPrefix)
	if cmd.Flags().Changed(securityFlagName) {

		var securityFlagName string
		if cmdPrefix == "" {
			securityFlagName = "security"
		} else {
			securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
		}

		securityFlagValue, err := cmd.Flags().GetString(securityFlagName)
		if err != nil {
			return err, false
		}
		m.Security = &securityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessSsidFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = &ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessTransmitEirpFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitEirpFlagName := fmt.Sprintf("%v.transmitEirp", cmdPrefix)
	if cmd.Flags().Changed(transmitEirpFlagName) {

		var transmitEirpFlagName string
		if cmdPrefix == "" {
			transmitEirpFlagName = "transmitEirp"
		} else {
			transmitEirpFlagName = fmt.Sprintf("%v.transmitEirp", cmdPrefix)
		}

		transmitEirpFlagValue, err := cmd.Flags().GetFloat64(transmitEirpFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitEirp = transmitEirpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWirelessTransmitPowerFlags(depth int, m *models.Wireless, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitPowerFlagName := fmt.Sprintf("%v.transmitPower", cmdPrefix)
	if cmd.Flags().Changed(transmitPowerFlagName) {

		var transmitPowerFlagName string
		if cmdPrefix == "" {
			transmitPowerFlagName = "transmitPower"
		} else {
			transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
		}

		transmitPowerFlagValue, err := cmd.Flags().GetFloat64(transmitPowerFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitPower = transmitPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
