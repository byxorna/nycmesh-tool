// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
  "github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for AirCubeWifiConfig

// register flags to command
func registerModelAirCubeWifiConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAirCubeWifiConfigWifi2Ghz(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeWifiConfigWifi5Ghz(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirCubeWifiConfigWifiMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeWifiConfigWifi2Ghz(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wifi2GhzFlagName string
	if cmdPrefix == "" {
		wifi2GhzFlagName = "wifi2Ghz"
	} else {
		wifi2GhzFlagName = fmt.Sprintf("%v.wifi2Ghz", cmdPrefix)
	}

	if err := registerModelWifi2GhzFlags(depth+1, wifi2GhzFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeWifiConfigWifi5Ghz(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wifi5GhzFlagName string
	if cmdPrefix == "" {
		wifi5GhzFlagName = "wifi5Ghz"
	} else {
		wifi5GhzFlagName = fmt.Sprintf("%v.wifi5Ghz", cmdPrefix)
	}

	if err := registerModelWifi5GhzFlags(depth+1, wifi5GhzFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirCubeWifiConfigWifiMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wifiModeDescription := `Enum: ["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]. `

	var wifiModeFlagName string
	if cmdPrefix == "" {
		wifiModeFlagName = "wifiMode"
	} else {
		wifiModeFlagName = fmt.Sprintf("%v.wifiMode", cmdPrefix)
	}

	var wifiModeFlagDefault string

	_ = cmd.PersistentFlags().String(wifiModeFlagName, wifiModeFlagDefault, wifiModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(wifiModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAirCubeWifiConfigFlags(depth int, m *models.AirCubeWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, wifi2GhzAdded := retrieveAirCubeWifiConfigWifi2GhzFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi2GhzAdded

	err, wifi5GhzAdded := retrieveAirCubeWifiConfigWifi5GhzFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi5GhzAdded

	err, wifiModeAdded := retrieveAirCubeWifiConfigWifiModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifiModeAdded

	return nil, retAdded
}

func retrieveAirCubeWifiConfigWifi2GhzFlags(depth int, m *models.AirCubeWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifi2GhzFlagName := fmt.Sprintf("%v.wifi2Ghz", cmdPrefix)
	if cmd.Flags().Changed(wifi2GhzFlagName) {
		// info: complex object wifi2Ghz Wifi2Ghz is retrieved outside this Changed() block
	}
	wifi2GhzFlagValue := m.Wifi2Ghz
	if swag.IsZero(wifi2GhzFlagValue) {
		wifi2GhzFlagValue = &models.Wifi2Ghz{}
	}

	err, wifi2GhzAdded := retrieveModelWifi2GhzFlags(depth+1, wifi2GhzFlagValue, wifi2GhzFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi2GhzAdded
	if wifi2GhzAdded {
		m.Wifi2Ghz = wifi2GhzFlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeWifiConfigWifi5GhzFlags(depth int, m *models.AirCubeWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifi5GhzFlagName := fmt.Sprintf("%v.wifi5Ghz", cmdPrefix)
	if cmd.Flags().Changed(wifi5GhzFlagName) {
		// info: complex object wifi5Ghz Wifi5Ghz is retrieved outside this Changed() block
	}
	wifi5GhzFlagValue := m.Wifi5Ghz
	if swag.IsZero(wifi5GhzFlagValue) {
		wifi5GhzFlagValue = &models.Wifi5Ghz{}
	}

	err, wifi5GhzAdded := retrieveModelWifi5GhzFlags(depth+1, wifi5GhzFlagValue, wifi5GhzFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi5GhzAdded
	if wifi5GhzAdded {
		m.Wifi5Ghz = wifi5GhzFlagValue
	}

	return nil, retAdded
}

func retrieveAirCubeWifiConfigWifiModeFlags(depth int, m *models.AirCubeWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifiModeFlagName := fmt.Sprintf("%v.wifiMode", cmdPrefix)
	if cmd.Flags().Changed(wifiModeFlagName) {

		var wifiModeFlagName string
		if cmdPrefix == "" {
			wifiModeFlagName = "wifiMode"
		} else {
			wifiModeFlagName = fmt.Sprintf("%v.wifiMode", cmdPrefix)
		}

		wifiModeFlagValue, err := cmd.Flags().GetString(wifiModeFlagName)
		if err != nil {
			return err, false
		}
		m.WifiMode = wifiModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
