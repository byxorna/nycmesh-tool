// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
  "github.com/byxorna/nycmesh-tool/models"

	"github.com/spf13/cobra"
)

// Schema cli for DeviceFirmware

// register flags to command
func registerModelDeviceFirmwareFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceFirmwareCompatible(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceFirmwareCurrent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceFirmwareLatest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceFirmwareLatestOnCurrentMajorVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceFirmwareLatestOver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceFirmwareSemver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceFirmwareUpgradeRecommendedToVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceFirmwareCompatible(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	compatibleDescription := `If firmware is compatible with UISP`

	var compatibleFlagName string
	if cmdPrefix == "" {
		compatibleFlagName = "compatible"
	} else {
		compatibleFlagName = fmt.Sprintf("%v.compatible", cmdPrefix)
	}

	var compatibleFlagDefault bool

	_ = cmd.PersistentFlags().Bool(compatibleFlagName, compatibleFlagDefault, compatibleDescription)

	return nil
}

func registerDeviceFirmwareCurrent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentDescription := `Required. Current firmware version`

	var currentFlagName string
	if cmdPrefix == "" {
		currentFlagName = "current"
	} else {
		currentFlagName = fmt.Sprintf("%v.current", cmdPrefix)
	}

	var currentFlagDefault string

	_ = cmd.PersistentFlags().String(currentFlagName, currentFlagDefault, currentDescription)

	return nil
}

func registerDeviceFirmwareLatest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latestDescription := `Required. Latest known firmware version`

	var latestFlagName string
	if cmdPrefix == "" {
		latestFlagName = "latest"
	} else {
		latestFlagName = fmt.Sprintf("%v.latest", cmdPrefix)
	}

	var latestFlagDefault string

	_ = cmd.PersistentFlags().String(latestFlagName, latestFlagDefault, latestDescription)

	return nil
}

func registerDeviceFirmwareLatestOnCurrentMajorVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latestOnCurrentMajorVersionDescription := `Required. Latest known firmware version on current major version`

	var latestOnCurrentMajorVersionFlagName string
	if cmdPrefix == "" {
		latestOnCurrentMajorVersionFlagName = "latestOnCurrentMajorVersion"
	} else {
		latestOnCurrentMajorVersionFlagName = fmt.Sprintf("%v.latestOnCurrentMajorVersion", cmdPrefix)
	}

	var latestOnCurrentMajorVersionFlagDefault string

	_ = cmd.PersistentFlags().String(latestOnCurrentMajorVersionFlagName, latestOnCurrentMajorVersionFlagDefault, latestOnCurrentMajorVersionDescription)

	return nil
}

func registerDeviceFirmwareLatestOver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latestOverDescription := `Required. Upgrade this firmware version as first if target
  firmware is higher than latestOver. (AirCube must be updated over 2.8.0 fw)`

	var latestOverFlagName string
	if cmdPrefix == "" {
		latestOverFlagName = "latestOver"
	} else {
		latestOverFlagName = fmt.Sprintf("%v.latestOver", cmdPrefix)
	}

	var latestOverFlagDefault string

	_ = cmd.PersistentFlags().String(latestOverFlagName, latestOverFlagDefault, latestOverDescription)

	return nil
}

func registerDeviceFirmwareSemver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var semverFlagName string
	if cmdPrefix == "" {
		semverFlagName = "semver"
	} else {
		semverFlagName = fmt.Sprintf("%v.semver", cmdPrefix)
	}

	if err := registerModelSemverFlags(depth+1, semverFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceFirmwareUpgradeRecommendedToVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	upgradeRecommendedToVersionDescription := `Required. Recommended firmware version to upgrade to.`

	var upgradeRecommendedToVersionFlagName string
	if cmdPrefix == "" {
		upgradeRecommendedToVersionFlagName = "upgradeRecommendedToVersion"
	} else {
		upgradeRecommendedToVersionFlagName = fmt.Sprintf("%v.upgradeRecommendedToVersion", cmdPrefix)
	}

	var upgradeRecommendedToVersionFlagDefault string

	_ = cmd.PersistentFlags().String(upgradeRecommendedToVersionFlagName, upgradeRecommendedToVersionFlagDefault, upgradeRecommendedToVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceFirmwareFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, compatibleAdded := retrieveDeviceFirmwareCompatibleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || compatibleAdded

	err, currentAdded := retrieveDeviceFirmwareCurrentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentAdded

	err, latestAdded := retrieveDeviceFirmwareLatestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latestAdded

	err, latestOnCurrentMajorVersionAdded := retrieveDeviceFirmwareLatestOnCurrentMajorVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latestOnCurrentMajorVersionAdded

	err, latestOverAdded := retrieveDeviceFirmwareLatestOverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latestOverAdded

	err, semverAdded := retrieveDeviceFirmwareSemverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || semverAdded

	err, upgradeRecommendedToVersionAdded := retrieveDeviceFirmwareUpgradeRecommendedToVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradeRecommendedToVersionAdded

	return nil, retAdded
}

func retrieveDeviceFirmwareCompatibleFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	compatibleFlagName := fmt.Sprintf("%v.compatible", cmdPrefix)
	if cmd.Flags().Changed(compatibleFlagName) {

		var compatibleFlagName string
		if cmdPrefix == "" {
			compatibleFlagName = "compatible"
		} else {
			compatibleFlagName = fmt.Sprintf("%v.compatible", cmdPrefix)
		}

		compatibleFlagValue, err := cmd.Flags().GetBool(compatibleFlagName)
		if err != nil {
			return err, false
		}
		m.Compatible = compatibleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceFirmwareCurrentFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentFlagName := fmt.Sprintf("%v.current", cmdPrefix)
	if cmd.Flags().Changed(currentFlagName) {

		var currentFlagName string
		if cmdPrefix == "" {
			currentFlagName = "current"
		} else {
			currentFlagName = fmt.Sprintf("%v.current", cmdPrefix)
		}

		currentFlagValue, err := cmd.Flags().GetString(currentFlagName)
		if err != nil {
			return err, false
		}
		m.Current = &currentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceFirmwareLatestFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latestFlagName := fmt.Sprintf("%v.latest", cmdPrefix)
	if cmd.Flags().Changed(latestFlagName) {

		var latestFlagName string
		if cmdPrefix == "" {
			latestFlagName = "latest"
		} else {
			latestFlagName = fmt.Sprintf("%v.latest", cmdPrefix)
		}

		latestFlagValue, err := cmd.Flags().GetString(latestFlagName)
		if err != nil {
			return err, false
		}
		m.Latest = &latestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceFirmwareLatestOnCurrentMajorVersionFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latestOnCurrentMajorVersionFlagName := fmt.Sprintf("%v.latestOnCurrentMajorVersion", cmdPrefix)
	if cmd.Flags().Changed(latestOnCurrentMajorVersionFlagName) {

		var latestOnCurrentMajorVersionFlagName string
		if cmdPrefix == "" {
			latestOnCurrentMajorVersionFlagName = "latestOnCurrentMajorVersion"
		} else {
			latestOnCurrentMajorVersionFlagName = fmt.Sprintf("%v.latestOnCurrentMajorVersion", cmdPrefix)
		}

		latestOnCurrentMajorVersionFlagValue, err := cmd.Flags().GetString(latestOnCurrentMajorVersionFlagName)
		if err != nil {
			return err, false
		}
		m.LatestOnCurrentMajorVersion = &latestOnCurrentMajorVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceFirmwareLatestOverFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latestOverFlagName := fmt.Sprintf("%v.latestOver", cmdPrefix)
	if cmd.Flags().Changed(latestOverFlagName) {

		var latestOverFlagName string
		if cmdPrefix == "" {
			latestOverFlagName = "latestOver"
		} else {
			latestOverFlagName = fmt.Sprintf("%v.latestOver", cmdPrefix)
		}

		latestOverFlagValue, err := cmd.Flags().GetString(latestOverFlagName)
		if err != nil {
			return err, false
		}
		m.LatestOver = &latestOverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceFirmwareSemverFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	semverFlagName := fmt.Sprintf("%v.semver", cmdPrefix)
	if cmd.Flags().Changed(semverFlagName) {
		// info: complex object semver Semver is retrieved outside this Changed() block
	}
	semverFlagValue := m.Semver
	if swag.IsZero(semverFlagValue) {
		semverFlagValue = &models.Semver{}
	}

	err, semverAdded := retrieveModelSemverFlags(depth+1, semverFlagValue, semverFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || semverAdded
	if semverAdded {
		m.Semver = semverFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceFirmwareUpgradeRecommendedToVersionFlags(depth int, m *models.DeviceFirmware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upgradeRecommendedToVersionFlagName := fmt.Sprintf("%v.upgradeRecommendedToVersion", cmdPrefix)
	if cmd.Flags().Changed(upgradeRecommendedToVersionFlagName) {

		var upgradeRecommendedToVersionFlagName string
		if cmdPrefix == "" {
			upgradeRecommendedToVersionFlagName = "upgradeRecommendedToVersion"
		} else {
			upgradeRecommendedToVersionFlagName = fmt.Sprintf("%v.upgradeRecommendedToVersion", cmdPrefix)
		}

		upgradeRecommendedToVersionFlagValue, err := cmd.Flags().GetString(upgradeRecommendedToVersionFlagName)
		if err != nil {
			return err, false
		}
		m.UpgradeRecommendedToVersion = &upgradeRecommendedToVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
