// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for AddressData

// register flags to command
func registerModelAddressDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAddressDataAddressComponents(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAddressDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAddressDataAddressComponents(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: addressComponents Interface map type is not supported by go-swagger cli yet

	return nil
}

func registerAddressDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["GoogleMaps","OpenStreetMap"]. Required. Map provider.`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["GoogleMaps","OpenStreetMap"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAddressDataFlags(depth int, m *models.AddressData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressComponentsAdded := retrieveAddressDataAddressComponentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressComponentsAdded

	err, typeAdded := retrieveAddressDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveAddressDataAddressComponentsFlags(depth int, m *models.AddressData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressComponentsFlagName := fmt.Sprintf("%v.addressComponents", cmdPrefix)
	if cmd.Flags().Changed(addressComponentsFlagName) {
		// warning: addressComponents map type Interface is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAddressDataTypeFlags(depth int, m *models.AddressData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
