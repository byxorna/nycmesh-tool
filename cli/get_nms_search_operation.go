// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/server"
	serverops "github.com/byxorna/nycmesh-tool/client/server"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationServerGetNmsSearchCmd returns a cmd to handle operation getNmsSearch
func makeOperationServerGetNmsSearchCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getNmsSearch",
		Short: ``,
		RunE:  runOperationServerGetNmsSearch,
	}

	if err := registerOperationServerGetNmsSearchParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationServerGetNmsSearch uses cmd flags to call endpoint api
func runOperationServerGetNmsSearch(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := serverops.NewGetNmsSearchParams()
	if err, _ := retrieveOperationServerGetNmsSearchCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServerGetNmsSearchPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServerGetNmsSearchQueryFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationServerGetNmsSearchResult(appCli.Server.GetNmsSearch(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationServerGetNmsSearchParamFlags registers all flags needed to fill params
func registerOperationServerGetNmsSearchParamFlags(cmd *cobra.Command) error {
	if err := registerOperationServerGetNmsSearchCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServerGetNmsSearchPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServerGetNmsSearchQueryParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationServerGetNmsSearchCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	countDescription := `Required. Results per page.`

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}
func registerOperationServerGetNmsSearchPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `Required. Results page.`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationServerGetNmsSearchQueryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	queryDescription := `Text to search for.`

	var queryFlagName string
	if cmdPrefix == "" {
		queryFlagName = "query"
	} else {
		queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
	}

	var queryFlagDefault string

	_ = cmd.PersistentFlags().String(queryFlagName, queryFlagDefault, queryDescription)

	return nil
}

func retrieveOperationServerGetNmsSearchCountFlag(m *serverops.GetNmsSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("count") {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServerGetNmsSearchPageFlag(m *serverops.GetNmsSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetFloat64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServerGetNmsSearchQueryFlag(m *serverops.GetNmsSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("query") {

		var queryFlagName string
		if cmdPrefix == "" {
			queryFlagName = "query"
		} else {
			queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
		}

		queryFlagValue, err := cmd.Flags().GetString(queryFlagName)
		if err != nil {
			return err, false
		}
		m.Query = &queryFlagValue

	}
	return nil, retAdded
}

// parseOperationServerGetNmsSearchResult parses request result and return the string content
func parseOperationServerGetNmsSearchResult(resp0 *server.GetNmsSearchOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*server.GetNmsSearchOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*server.GetNmsSearchUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*server.GetNmsSearchForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*server.GetNmsSearchInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
