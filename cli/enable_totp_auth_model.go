// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for EnableTotpAuth

// register flags to command
func registerModelEnableTotpAuthFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEnableTotpAuthPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnableTotpAuthTotpAuthEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnableTotpAuthTotpAuthSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnableTotpAuthVerificationCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEnableTotpAuthPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerEnableTotpAuthTotpAuthEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totpAuthEnabledDescription := `Required. `

	var totpAuthEnabledFlagName string
	if cmdPrefix == "" {
		totpAuthEnabledFlagName = "totpAuthEnabled"
	} else {
		totpAuthEnabledFlagName = fmt.Sprintf("%v.totpAuthEnabled", cmdPrefix)
	}

	var totpAuthEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(totpAuthEnabledFlagName, totpAuthEnabledFlagDefault, totpAuthEnabledDescription)

	return nil
}

func registerEnableTotpAuthTotpAuthSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totpAuthSecretDescription := ``

	var totpAuthSecretFlagName string
	if cmdPrefix == "" {
		totpAuthSecretFlagName = "totpAuthSecret"
	} else {
		totpAuthSecretFlagName = fmt.Sprintf("%v.totpAuthSecret", cmdPrefix)
	}

	var totpAuthSecretFlagDefault string

	_ = cmd.PersistentFlags().String(totpAuthSecretFlagName, totpAuthSecretFlagDefault, totpAuthSecretDescription)

	return nil
}

func registerEnableTotpAuthVerificationCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	verificationCodeDescription := ``

	var verificationCodeFlagName string
	if cmdPrefix == "" {
		verificationCodeFlagName = "verificationCode"
	} else {
		verificationCodeFlagName = fmt.Sprintf("%v.verificationCode", cmdPrefix)
	}

	var verificationCodeFlagDefault string

	_ = cmd.PersistentFlags().String(verificationCodeFlagName, verificationCodeFlagDefault, verificationCodeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEnableTotpAuthFlags(depth int, m *models.EnableTotpAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, passwordAdded := retrieveEnableTotpAuthPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, totpAuthEnabledAdded := retrieveEnableTotpAuthTotpAuthEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totpAuthEnabledAdded

	err, totpAuthSecretAdded := retrieveEnableTotpAuthTotpAuthSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totpAuthSecretAdded

	err, verificationCodeAdded := retrieveEnableTotpAuthVerificationCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || verificationCodeAdded

	return nil, retAdded
}

func retrieveEnableTotpAuthPasswordFlags(depth int, m *models.EnableTotpAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnableTotpAuthTotpAuthEnabledFlags(depth int, m *models.EnableTotpAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totpAuthEnabledFlagName := fmt.Sprintf("%v.totpAuthEnabled", cmdPrefix)
	if cmd.Flags().Changed(totpAuthEnabledFlagName) {

		var totpAuthEnabledFlagName string
		if cmdPrefix == "" {
			totpAuthEnabledFlagName = "totpAuthEnabled"
		} else {
			totpAuthEnabledFlagName = fmt.Sprintf("%v.totpAuthEnabled", cmdPrefix)
		}

		totpAuthEnabledFlagValue, err := cmd.Flags().GetBool(totpAuthEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.TotpAuthEnabled = &totpAuthEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnableTotpAuthTotpAuthSecretFlags(depth int, m *models.EnableTotpAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totpAuthSecretFlagName := fmt.Sprintf("%v.totpAuthSecret", cmdPrefix)
	if cmd.Flags().Changed(totpAuthSecretFlagName) {

		var totpAuthSecretFlagName string
		if cmdPrefix == "" {
			totpAuthSecretFlagName = "totpAuthSecret"
		} else {
			totpAuthSecretFlagName = fmt.Sprintf("%v.totpAuthSecret", cmdPrefix)
		}

		totpAuthSecretFlagValue, err := cmd.Flags().GetString(totpAuthSecretFlagName)
		if err != nil {
			return err, false
		}
		m.TotpAuthSecret = totpAuthSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnableTotpAuthVerificationCodeFlags(depth int, m *models.EnableTotpAuth, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	verificationCodeFlagName := fmt.Sprintf("%v.verificationCode", cmdPrefix)
	if cmd.Flags().Changed(verificationCodeFlagName) {

		var verificationCodeFlagName string
		if cmdPrefix == "" {
			verificationCodeFlagName = "verificationCode"
		} else {
			verificationCodeFlagName = fmt.Sprintf("%v.verificationCode", cmdPrefix)
		}

		verificationCodeFlagValue, err := cmd.Flags().GetString(verificationCodeFlagName)
		if err != nil {
			return err, false
		}
		m.VerificationCode = verificationCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
