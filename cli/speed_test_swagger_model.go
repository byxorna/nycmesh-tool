// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for SpeedTest

// register flags to command
func registerModelSpeedTestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSpeedTestData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestMasterID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestSlaveID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestSpeedTestID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestTimeLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSpeedTestData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data Data array type is not supported by go-swagger cli yet

	return nil
}

func registerSpeedTestMasterID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	masterIdDescription := `Required. `

	var masterIdFlagName string
	if cmdPrefix == "" {
		masterIdFlagName = "masterId"
	} else {
		masterIdFlagName = fmt.Sprintf("%v.masterId", cmdPrefix)
	}

	var masterIdFlagDefault string

	_ = cmd.PersistentFlags().String(masterIdFlagName, masterIdFlagDefault, masterIdDescription)

	return nil
}

func registerSpeedTestSlaveID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slaveIdDescription := `Required. `

	var slaveIdFlagName string
	if cmdPrefix == "" {
		slaveIdFlagName = "slaveId"
	} else {
		slaveIdFlagName = fmt.Sprintf("%v.slaveId", cmdPrefix)
	}

	var slaveIdFlagDefault string

	_ = cmd.PersistentFlags().String(slaveIdFlagName, slaveIdFlagDefault, slaveIdDescription)

	return nil
}

func registerSpeedTestSpeedTestID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	speedTestIdDescription := `Required. `

	var speedTestIdFlagName string
	if cmdPrefix == "" {
		speedTestIdFlagName = "speedTestId"
	} else {
		speedTestIdFlagName = fmt.Sprintf("%v.speedTestId", cmdPrefix)
	}

	var speedTestIdFlagDefault string

	_ = cmd.PersistentFlags().String(speedTestIdFlagName, speedTestIdFlagDefault, speedTestIdDescription)

	return nil
}

func registerSpeedTestTimeLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeLimitDescription := ``

	var timeLimitFlagName string
	if cmdPrefix == "" {
		timeLimitFlagName = "timeLimit"
	} else {
		timeLimitFlagName = fmt.Sprintf("%v.timeLimit", cmdPrefix)
	}

	var timeLimitFlagDefault float64

	_ = cmd.PersistentFlags().Float64(timeLimitFlagName, timeLimitFlagDefault, timeLimitDescription)

	return nil
}

func registerSpeedTestTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timestampDescription := `Required. `

	var timestampFlagName string
	if cmdPrefix == "" {
		timestampFlagName = "timestamp"
	} else {
		timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	var timestampFlagDefault float64

	_ = cmd.PersistentFlags().Float64(timestampFlagName, timestampFlagDefault, timestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSpeedTestFlags(depth int, m *models.SpeedTest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveSpeedTestDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	err, masterIdAdded := retrieveSpeedTestMasterIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || masterIdAdded

	err, slaveIdAdded := retrieveSpeedTestSlaveIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slaveIdAdded

	err, speedTestIdAdded := retrieveSpeedTestSpeedTestIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedTestIdAdded

	err, timeLimitAdded := retrieveSpeedTestTimeLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeLimitAdded

	err, timestampAdded := retrieveSpeedTestTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampAdded

	return nil, retAdded
}

func retrieveSpeedTestDataFlags(depth int, m *models.SpeedTest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// warning: data array type Data is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSpeedTestMasterIDFlags(depth int, m *models.SpeedTest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	masterIdFlagName := fmt.Sprintf("%v.masterId", cmdPrefix)
	if cmd.Flags().Changed(masterIdFlagName) {

		var masterIdFlagName string
		if cmdPrefix == "" {
			masterIdFlagName = "masterId"
		} else {
			masterIdFlagName = fmt.Sprintf("%v.masterId", cmdPrefix)
		}

		masterIdFlagValue, err := cmd.Flags().GetString(masterIdFlagName)
		if err != nil {
			return err, false
		}
		m.MasterID = &masterIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestSlaveIDFlags(depth int, m *models.SpeedTest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slaveIdFlagName := fmt.Sprintf("%v.slaveId", cmdPrefix)
	if cmd.Flags().Changed(slaveIdFlagName) {

		var slaveIdFlagName string
		if cmdPrefix == "" {
			slaveIdFlagName = "slaveId"
		} else {
			slaveIdFlagName = fmt.Sprintf("%v.slaveId", cmdPrefix)
		}

		slaveIdFlagValue, err := cmd.Flags().GetString(slaveIdFlagName)
		if err != nil {
			return err, false
		}
		m.SlaveID = &slaveIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestSpeedTestIDFlags(depth int, m *models.SpeedTest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedTestIdFlagName := fmt.Sprintf("%v.speedTestId", cmdPrefix)
	if cmd.Flags().Changed(speedTestIdFlagName) {

		var speedTestIdFlagName string
		if cmdPrefix == "" {
			speedTestIdFlagName = "speedTestId"
		} else {
			speedTestIdFlagName = fmt.Sprintf("%v.speedTestId", cmdPrefix)
		}

		speedTestIdFlagValue, err := cmd.Flags().GetString(speedTestIdFlagName)
		if err != nil {
			return err, false
		}
		m.SpeedTestID = &speedTestIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestTimeLimitFlags(depth int, m *models.SpeedTest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeLimitFlagName := fmt.Sprintf("%v.timeLimit", cmdPrefix)
	if cmd.Flags().Changed(timeLimitFlagName) {

		var timeLimitFlagName string
		if cmdPrefix == "" {
			timeLimitFlagName = "timeLimit"
		} else {
			timeLimitFlagName = fmt.Sprintf("%v.timeLimit", cmdPrefix)
		}

		timeLimitFlagValue, err := cmd.Flags().GetFloat64(timeLimitFlagName)
		if err != nil {
			return err, false
		}
		m.TimeLimit = timeLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestTimestampFlags(depth int, m *models.SpeedTest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampFlagName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(timestampFlagName) {

		var timestampFlagName string
		if cmdPrefix == "" {
			timestampFlagName = "timestamp"
		} else {
			timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		timestampFlagValue, err := cmd.Flags().GetFloat64(timestampFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamp = &timestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}
