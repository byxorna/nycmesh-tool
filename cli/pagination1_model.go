// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Pagination1

// register flags to command
func registerModelPagination1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPagination1Count(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPagination1Page(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPagination1Pages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPagination1Total(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPagination1Count(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countDescription := `selected items`

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault int64

	_ = cmd.PersistentFlags().Int64(countFlagName, countFlagDefault, countDescription)

	return nil
}

func registerPagination1Page(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pageDescription := `actual page`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}

func registerPagination1Pages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pagesDescription := `pages count`

	var pagesFlagName string
	if cmdPrefix == "" {
		pagesFlagName = "pages"
	} else {
		pagesFlagName = fmt.Sprintf("%v.pages", cmdPrefix)
	}

	var pagesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pagesFlagName, pagesFlagDefault, pagesDescription)

	return nil
}

func registerPagination1Total(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDescription := `count of found items`

	var totalFlagName string
	if cmdPrefix == "" {
		totalFlagName = "total"
	} else {
		totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var totalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalFlagName, totalFlagDefault, totalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPagination1Flags(depth int, m *models.Pagination1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, countAdded := retrievePagination1CountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countAdded

	err, pageAdded := retrievePagination1PageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pageAdded

	err, pagesAdded := retrievePagination1PagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pagesAdded

	err, totalAdded := retrievePagination1TotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalAdded

	return nil, retAdded
}

func retrievePagination1CountFlags(depth int, m *models.Pagination1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countFlagName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(countFlagName) {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetInt64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = &countFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePagination1PageFlags(depth int, m *models.Pagination1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pageFlagName := fmt.Sprintf("%v.page", cmdPrefix)
	if cmd.Flags().Changed(pageFlagName) {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = pageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePagination1PagesFlags(depth int, m *models.Pagination1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pagesFlagName := fmt.Sprintf("%v.pages", cmdPrefix)
	if cmd.Flags().Changed(pagesFlagName) {

		var pagesFlagName string
		if cmdPrefix == "" {
			pagesFlagName = "pages"
		} else {
			pagesFlagName = fmt.Sprintf("%v.pages", cmdPrefix)
		}

		pagesFlagValue, err := cmd.Flags().GetInt64(pagesFlagName)
		if err != nil {
			return err, false
		}
		m.Pages = pagesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePagination1TotalFlags(depth int, m *models.Pagination1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(totalFlagName) {

		var totalFlagName string
		if cmdPrefix == "" {
			totalFlagName = "total"
		} else {
			totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		totalFlagValue, err := cmd.Flags().GetInt64(totalFlagName)
		if err != nil {
			return err, false
		}
		m.Total = &totalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
