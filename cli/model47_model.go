// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model47

// register flags to command
func registerModelModel47Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel47HTTPPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel47SSHEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel47SSHPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel47TelnetEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel47TelnetPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel47UbntDiscoveryEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel47HTTPPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpPortDescription := `Required. HTTP port number`

	var httpPortFlagName string
	if cmdPrefix == "" {
		httpPortFlagName = "httpPort"
	} else {
		httpPortFlagName = fmt.Sprintf("%v.httpPort", cmdPrefix)
	}

	var httpPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(httpPortFlagName, httpPortFlagDefault, httpPortDescription)

	return nil
}

func registerModel47SSHEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sshEnabledDescription := `Required. Set to true if SSH is enabled`

	var sshEnabledFlagName string
	if cmdPrefix == "" {
		sshEnabledFlagName = "sshEnabled"
	} else {
		sshEnabledFlagName = fmt.Sprintf("%v.sshEnabled", cmdPrefix)
	}

	var sshEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sshEnabledFlagName, sshEnabledFlagDefault, sshEnabledDescription)

	return nil
}

func registerModel47SSHPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sshPortDescription := `Required. SSH port number`

	var sshPortFlagName string
	if cmdPrefix == "" {
		sshPortFlagName = "sshPort"
	} else {
		sshPortFlagName = fmt.Sprintf("%v.sshPort", cmdPrefix)
	}

	var sshPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sshPortFlagName, sshPortFlagDefault, sshPortDescription)

	return nil
}

func registerModel47TelnetEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	telnetEnabledDescription := `Required. Set to true if Telnet is enabled`

	var telnetEnabledFlagName string
	if cmdPrefix == "" {
		telnetEnabledFlagName = "telnetEnabled"
	} else {
		telnetEnabledFlagName = fmt.Sprintf("%v.telnetEnabled", cmdPrefix)
	}

	var telnetEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(telnetEnabledFlagName, telnetEnabledFlagDefault, telnetEnabledDescription)

	return nil
}

func registerModel47TelnetPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	telnetPortDescription := `Required. Telnet port number`

	var telnetPortFlagName string
	if cmdPrefix == "" {
		telnetPortFlagName = "telnetPort"
	} else {
		telnetPortFlagName = fmt.Sprintf("%v.telnetPort", cmdPrefix)
	}

	var telnetPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(telnetPortFlagName, telnetPortFlagDefault, telnetPortDescription)

	return nil
}

func registerModel47UbntDiscoveryEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ubntDiscoveryEnabledDescription := `Required. Set to true if UNMS discovery is enabled`

	var ubntDiscoveryEnabledFlagName string
	if cmdPrefix == "" {
		ubntDiscoveryEnabledFlagName = "ubntDiscoveryEnabled"
	} else {
		ubntDiscoveryEnabledFlagName = fmt.Sprintf("%v.ubntDiscoveryEnabled", cmdPrefix)
	}

	var ubntDiscoveryEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ubntDiscoveryEnabledFlagName, ubntDiscoveryEnabledFlagDefault, ubntDiscoveryEnabledDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel47Flags(depth int, m *models.Model47, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, httpPortAdded := retrieveModel47HTTPPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpPortAdded

	err, sshEnabledAdded := retrieveModel47SSHEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshEnabledAdded

	err, sshPortAdded := retrieveModel47SSHPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshPortAdded

	err, telnetEnabledAdded := retrieveModel47TelnetEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || telnetEnabledAdded

	err, telnetPortAdded := retrieveModel47TelnetPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || telnetPortAdded

	err, ubntDiscoveryEnabledAdded := retrieveModel47UbntDiscoveryEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ubntDiscoveryEnabledAdded

	return nil, retAdded
}

func retrieveModel47HTTPPortFlags(depth int, m *models.Model47, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpPortFlagName := fmt.Sprintf("%v.httpPort", cmdPrefix)
	if cmd.Flags().Changed(httpPortFlagName) {

		var httpPortFlagName string
		if cmdPrefix == "" {
			httpPortFlagName = "httpPort"
		} else {
			httpPortFlagName = fmt.Sprintf("%v.httpPort", cmdPrefix)
		}

		httpPortFlagValue, err := cmd.Flags().GetInt64(httpPortFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPPort = &httpPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel47SSHEnabledFlags(depth int, m *models.Model47, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshEnabledFlagName := fmt.Sprintf("%v.sshEnabled", cmdPrefix)
	if cmd.Flags().Changed(sshEnabledFlagName) {

		var sshEnabledFlagName string
		if cmdPrefix == "" {
			sshEnabledFlagName = "sshEnabled"
		} else {
			sshEnabledFlagName = fmt.Sprintf("%v.sshEnabled", cmdPrefix)
		}

		sshEnabledFlagValue, err := cmd.Flags().GetBool(sshEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.SSHEnabled = &sshEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel47SSHPortFlags(depth int, m *models.Model47, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshPortFlagName := fmt.Sprintf("%v.sshPort", cmdPrefix)
	if cmd.Flags().Changed(sshPortFlagName) {

		var sshPortFlagName string
		if cmdPrefix == "" {
			sshPortFlagName = "sshPort"
		} else {
			sshPortFlagName = fmt.Sprintf("%v.sshPort", cmdPrefix)
		}

		sshPortFlagValue, err := cmd.Flags().GetInt64(sshPortFlagName)
		if err != nil {
			return err, false
		}
		m.SSHPort = &sshPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel47TelnetEnabledFlags(depth int, m *models.Model47, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	telnetEnabledFlagName := fmt.Sprintf("%v.telnetEnabled", cmdPrefix)
	if cmd.Flags().Changed(telnetEnabledFlagName) {

		var telnetEnabledFlagName string
		if cmdPrefix == "" {
			telnetEnabledFlagName = "telnetEnabled"
		} else {
			telnetEnabledFlagName = fmt.Sprintf("%v.telnetEnabled", cmdPrefix)
		}

		telnetEnabledFlagValue, err := cmd.Flags().GetBool(telnetEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.TelnetEnabled = &telnetEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel47TelnetPortFlags(depth int, m *models.Model47, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	telnetPortFlagName := fmt.Sprintf("%v.telnetPort", cmdPrefix)
	if cmd.Flags().Changed(telnetPortFlagName) {

		var telnetPortFlagName string
		if cmdPrefix == "" {
			telnetPortFlagName = "telnetPort"
		} else {
			telnetPortFlagName = fmt.Sprintf("%v.telnetPort", cmdPrefix)
		}

		telnetPortFlagValue, err := cmd.Flags().GetInt64(telnetPortFlagName)
		if err != nil {
			return err, false
		}
		m.TelnetPort = &telnetPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel47UbntDiscoveryEnabledFlags(depth int, m *models.Model47, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ubntDiscoveryEnabledFlagName := fmt.Sprintf("%v.ubntDiscoveryEnabled", cmdPrefix)
	if cmd.Flags().Changed(ubntDiscoveryEnabledFlagName) {

		var ubntDiscoveryEnabledFlagName string
		if cmdPrefix == "" {
			ubntDiscoveryEnabledFlagName = "ubntDiscoveryEnabled"
		} else {
			ubntDiscoveryEnabledFlagName = fmt.Sprintf("%v.ubntDiscoveryEnabled", cmdPrefix)
		}

		ubntDiscoveryEnabledFlagValue, err := cmd.Flags().GetBool(ubntDiscoveryEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.UbntDiscoveryEnabled = &ubntDiscoveryEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}
