// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Antenna1

// register flags to command
func registerModelAntenna1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAntenna1CableLoss(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntenna1Gain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAntenna1ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAntenna1CableLoss(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cableLossDescription := ``

	var cableLossFlagName string
	if cmdPrefix == "" {
		cableLossFlagName = "cableLoss"
	} else {
		cableLossFlagName = fmt.Sprintf("%v.cableLoss", cmdPrefix)
	}

	var cableLossFlagDefault float64

	_ = cmd.PersistentFlags().Float64(cableLossFlagName, cableLossFlagDefault, cableLossDescription)

	return nil
}

func registerAntenna1Gain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gainDescription := ``

	var gainFlagName string
	if cmdPrefix == "" {
		gainFlagName = "gain"
	} else {
		gainFlagName = fmt.Sprintf("%v.gain", cmdPrefix)
	}

	var gainFlagDefault float64

	_ = cmd.PersistentFlags().Float64(gainFlagName, gainFlagDefault, gainDescription)

	return nil
}

func registerAntenna1ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAntenna1Flags(depth int, m *models.Antenna1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cableLossAdded := retrieveAntenna1CableLossFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cableLossAdded

	err, gainAdded := retrieveAntenna1GainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gainAdded

	err, idAdded := retrieveAntenna1IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveAntenna1CableLossFlags(depth int, m *models.Antenna1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cableLossFlagName := fmt.Sprintf("%v.cableLoss", cmdPrefix)
	if cmd.Flags().Changed(cableLossFlagName) {

		var cableLossFlagName string
		if cmdPrefix == "" {
			cableLossFlagName = "cableLoss"
		} else {
			cableLossFlagName = fmt.Sprintf("%v.cableLoss", cmdPrefix)
		}

		cableLossFlagValue, err := cmd.Flags().GetFloat64(cableLossFlagName)
		if err != nil {
			return err, false
		}
		m.CableLoss = cableLossFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntenna1GainFlags(depth int, m *models.Antenna1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gainFlagName := fmt.Sprintf("%v.gain", cmdPrefix)
	if cmd.Flags().Changed(gainFlagName) {

		var gainFlagName string
		if cmdPrefix == "" {
			gainFlagName = "gain"
		} else {
			gainFlagName = fmt.Sprintf("%v.gain", cmdPrefix)
		}

		gainFlagValue, err := cmd.Flags().GetFloat64(gainFlagName)
		if err != nil {
			return err, false
		}
		m.Gain = gainFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAntenna1IDFlags(depth int, m *models.Antenna1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}
