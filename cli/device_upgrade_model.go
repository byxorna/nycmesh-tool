// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

  "github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceUpgrade

// register flags to command
func registerModelDeviceUpgradeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceUpgradeFirmware(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceUpgradeProgress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceUpgradeStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceUpgradeFirmware(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var firmwareFlagName string
	if cmdPrefix == "" {
		firmwareFlagName = "firmware"
	} else {
		firmwareFlagName = fmt.Sprintf("%v.firmware", cmdPrefix)
	}

	if err := registerModelFirmwareFlags(depth+1, firmwareFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceUpgradeProgress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	progressDescription := `Required. `

	var progressFlagName string
	if cmdPrefix == "" {
		progressFlagName = "progress"
	} else {
		progressFlagName = fmt.Sprintf("%v.progress", cmdPrefix)
	}

	var progressFlagDefault float64

	_ = cmd.PersistentFlags().Float64(progressFlagName, progressFlagDefault, progressDescription)

	return nil
}

func registerDeviceUpgradeStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Required. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceUpgradeFlags(depth int, m *models.DeviceUpgrade, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, firmwareAdded := retrieveDeviceUpgradeFirmwareFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareAdded

	err, progressAdded := retrieveDeviceUpgradeProgressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || progressAdded

	err, statusAdded := retrieveDeviceUpgradeStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveDeviceUpgradeFirmwareFlags(depth int, m *models.DeviceUpgrade, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareFlagName := fmt.Sprintf("%v.firmware", cmdPrefix)
	if cmd.Flags().Changed(firmwareFlagName) {
		// info: complex object firmware Firmware is retrieved outside this Changed() block
	}
	firmwareFlagValue := m.Firmware
	if swag.IsZero(firmwareFlagValue) {
		firmwareFlagValue = &models.Firmware{}
	}

	err, firmwareAdded := retrieveModelFirmwareFlags(depth+1, firmwareFlagValue, firmwareFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareAdded
	if firmwareAdded {
		m.Firmware = firmwareFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceUpgradeProgressFlags(depth int, m *models.DeviceUpgrade, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	progressFlagName := fmt.Sprintf("%v.progress", cmdPrefix)
	if cmd.Flags().Changed(progressFlagName) {

		var progressFlagName string
		if cmdPrefix == "" {
			progressFlagName = "progress"
		} else {
			progressFlagName = fmt.Sprintf("%v.progress", cmdPrefix)
		}

		progressFlagValue, err := cmd.Flags().GetFloat64(progressFlagName)
		if err != nil {
			return err, false
		}
		m.Progress = &progressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceUpgradeStatusFlags(depth int, m *models.DeviceUpgrade, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
