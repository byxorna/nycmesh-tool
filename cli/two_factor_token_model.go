// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for TwoFactorToken

// register flags to command
func registerModelTwoFactorTokenFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTwoFactorTokenExp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTwoFactorTokenID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTwoFactorTokenUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTwoFactorTokenExp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expDescription := `Required. `

	var expFlagName string
	if cmdPrefix == "" {
		expFlagName = "exp"
	} else {
		expFlagName = fmt.Sprintf("%v.exp", cmdPrefix)
	}

	var expFlagDefault float64

	_ = cmd.PersistentFlags().Float64(expFlagName, expFlagDefault, expDescription)

	return nil
}

func registerTwoFactorTokenID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerTwoFactorTokenUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := `Required. `

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "userId"
	} else {
		userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
	}

	var userIdFlagDefault string

	_ = cmd.PersistentFlags().String(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTwoFactorTokenFlags(depth int, m *models.TwoFactorToken, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, expAdded := retrieveTwoFactorTokenExpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expAdded

	err, idAdded := retrieveTwoFactorTokenIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, userIdAdded := retrieveTwoFactorTokenUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	return nil, retAdded
}

func retrieveTwoFactorTokenExpFlags(depth int, m *models.TwoFactorToken, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expFlagName := fmt.Sprintf("%v.exp", cmdPrefix)
	if cmd.Flags().Changed(expFlagName) {

		var expFlagName string
		if cmdPrefix == "" {
			expFlagName = "exp"
		} else {
			expFlagName = fmt.Sprintf("%v.exp", cmdPrefix)
		}

		expFlagValue, err := cmd.Flags().GetFloat64(expFlagName)
		if err != nil {
			return err, false
		}
		m.Exp = &expFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTwoFactorTokenIDFlags(depth int, m *models.TwoFactorToken, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTwoFactorTokenUserIDFlags(depth int, m *models.TwoFactorToken, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.userId", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "userId"
		} else {
			userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetString(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = &userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
