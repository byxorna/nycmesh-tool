// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for IPLinkRedirect

// register flags to command
func registerModelIPLinkRedirectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPLinkRedirectHTTPSPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLinkRedirectToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPLinkRedirectHTTPSPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpsPortDescription := ``

	var httpsPortFlagName string
	if cmdPrefix == "" {
		httpsPortFlagName = "httpsPort"
	} else {
		httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
	}

	var httpsPortFlagDefault string

	_ = cmd.PersistentFlags().String(httpsPortFlagName, httpsPortFlagDefault, httpsPortDescription)

	return nil
}

func registerIPLinkRedirectToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenDescription := ``

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPLinkRedirectFlags(depth int, m *models.IPLinkRedirect, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, httpsPortAdded := retrieveIPLinkRedirectHTTPSPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpsPortAdded

	err, tokenAdded := retrieveIPLinkRedirectTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenAdded

	return nil, retAdded
}

func retrieveIPLinkRedirectHTTPSPortFlags(depth int, m *models.IPLinkRedirect, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpsPortFlagName := fmt.Sprintf("%v.httpsPort", cmdPrefix)
	if cmd.Flags().Changed(httpsPortFlagName) {

		var httpsPortFlagName string
		if cmdPrefix == "" {
			httpsPortFlagName = "httpsPort"
		} else {
			httpsPortFlagName = fmt.Sprintf("%v.httpsPort", cmdPrefix)
		}

		httpsPortFlagValue, err := cmd.Flags().GetString(httpsPortFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPSPort = httpsPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLinkRedirectTokenFlags(depth int, m *models.IPLinkRedirect, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenFlagName := fmt.Sprintf("%v.token", cmdPrefix)
	if cmd.Flags().Changed(tokenFlagName) {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}
