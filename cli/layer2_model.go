// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Layer2

// register flags to command
func registerModelLayer2Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLayer2Lag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLayer2Vlans(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLayer2Lag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var lagFlagName string
	if cmdPrefix == "" {
		lagFlagName = "lag"
	} else {
		lagFlagName = fmt.Sprintf("%v.lag", cmdPrefix)
	}

	if err := registerModelLag1Flags(depth+1, lagFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerLayer2Vlans(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var vlansFlagName string
	if cmdPrefix == "" {
		vlansFlagName = "vlans"
	} else {
		vlansFlagName = fmt.Sprintf("%v.vlans", cmdPrefix)
	}

	if err := registerModelVlans1Flags(depth+1, vlansFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLayer2Flags(depth int, m *models.Layer2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, lagAdded := retrieveLayer2LagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lagAdded

	err, vlansAdded := retrieveLayer2VlansFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlansAdded

	return nil, retAdded
}

func retrieveLayer2LagFlags(depth int, m *models.Layer2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lagFlagName := fmt.Sprintf("%v.lag", cmdPrefix)
	if cmd.Flags().Changed(lagFlagName) {
		// info: complex object lag Lag1 is retrieved outside this Changed() block
	}
	lagFlagValue := m.Lag
	if swag.IsZero(lagFlagValue) {
		lagFlagValue = &models.Lag1{}
	}

	err, lagAdded := retrieveModelLag1Flags(depth+1, lagFlagValue, lagFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lagAdded
	if lagAdded {
		m.Lag = lagFlagValue
	}

	return nil, retAdded
}

func retrieveLayer2VlansFlags(depth int, m *models.Layer2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlansFlagName := fmt.Sprintf("%v.vlans", cmdPrefix)
	if cmd.Flags().Changed(vlansFlagName) {
		// info: complex object vlans Vlans1 is retrieved outside this Changed() block
	}
	vlansFlagValue := m.Vlans
	if swag.IsZero(vlansFlagValue) {
		vlansFlagValue = &models.Vlans1{}
	}

	err, vlansAdded := retrieveModelVlans1Flags(depth+1, vlansFlagValue, vlansFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlansAdded
	if vlansAdded {
		m.Vlans = vlansFlagValue
	}

	return nil, retAdded
}
