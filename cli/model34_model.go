// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model34

// register flags to command
func registerModelModel34Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel34DeviceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel34DeviceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel34DeviceType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel34InterfaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel34IP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel34DeviceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceIdDescription := `Required. Device ID.`

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}

func registerModel34DeviceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceNameDescription := ``

	var deviceNameFlagName string
	if cmdPrefix == "" {
		deviceNameFlagName = "deviceName"
	} else {
		deviceNameFlagName = fmt.Sprintf("%v.deviceName", cmdPrefix)
	}

	var deviceNameFlagDefault string

	_ = cmd.PersistentFlags().String(deviceNameFlagName, deviceNameFlagDefault, deviceNameDescription)

	return nil
}

func registerModel34DeviceType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceTypeDescription := `Enum: ["onu","olt","uispp","uispr","uisps","uispLte","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","wave","blackBox"]. `

	var deviceTypeFlagName string
	if cmdPrefix == "" {
		deviceTypeFlagName = "deviceType"
	} else {
		deviceTypeFlagName = fmt.Sprintf("%v.deviceType", cmdPrefix)
	}

	var deviceTypeFlagDefault string

	_ = cmd.PersistentFlags().String(deviceTypeFlagName, deviceTypeFlagDefault, deviceTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(deviceTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["onu","olt","uispp","uispr","uisps","uispLte","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","wave","blackBox"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel34InterfaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceIdDescription := `Interface name.`

	var interfaceIdFlagName string
	if cmdPrefix == "" {
		interfaceIdFlagName = "interfaceId"
	} else {
		interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
	}

	var interfaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceIdFlagName, interfaceIdFlagDefault, interfaceIdDescription)

	return nil
}

func registerModel34IP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipDescription := ``

	var ipFlagName string
	if cmdPrefix == "" {
		ipFlagName = "ip"
	} else {
		ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
	}

	var ipFlagDefault string

	_ = cmd.PersistentFlags().String(ipFlagName, ipFlagDefault, ipDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel34Flags(depth int, m *models.Model34, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceIdAdded := retrieveModel34DeviceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceIdAdded

	err, deviceNameAdded := retrieveModel34DeviceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceNameAdded

	err, deviceTypeAdded := retrieveModel34DeviceTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceTypeAdded

	err, interfaceIdAdded := retrieveModel34InterfaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceIdAdded

	err, ipAdded := retrieveModel34IPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAdded

	return nil, retAdded
}

func retrieveModel34DeviceIDFlags(depth int, m *models.Model34, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceIdFlagName := fmt.Sprintf("%v.deviceId", cmdPrefix)
	if cmd.Flags().Changed(deviceIdFlagName) {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel34DeviceNameFlags(depth int, m *models.Model34, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceNameFlagName := fmt.Sprintf("%v.deviceName", cmdPrefix)
	if cmd.Flags().Changed(deviceNameFlagName) {

		var deviceNameFlagName string
		if cmdPrefix == "" {
			deviceNameFlagName = "deviceName"
		} else {
			deviceNameFlagName = fmt.Sprintf("%v.deviceName", cmdPrefix)
		}

		deviceNameFlagValue, err := cmd.Flags().GetString(deviceNameFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceName = deviceNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel34DeviceTypeFlags(depth int, m *models.Model34, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceTypeFlagName := fmt.Sprintf("%v.deviceType", cmdPrefix)
	if cmd.Flags().Changed(deviceTypeFlagName) {

		var deviceTypeFlagName string
		if cmdPrefix == "" {
			deviceTypeFlagName = "deviceType"
		} else {
			deviceTypeFlagName = fmt.Sprintf("%v.deviceType", cmdPrefix)
		}

		deviceTypeFlagValue, err := cmd.Flags().GetString(deviceTypeFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceType = deviceTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel34InterfaceIDFlags(depth int, m *models.Model34, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceIdFlagName := fmt.Sprintf("%v.interfaceId", cmdPrefix)
	if cmd.Flags().Changed(interfaceIdFlagName) {

		var interfaceIdFlagName string
		if cmdPrefix == "" {
			interfaceIdFlagName = "interfaceId"
		} else {
			interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
		}

		interfaceIdFlagValue, err := cmd.Flags().GetString(interfaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.InterfaceID = interfaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel34IPFlags(depth int, m *models.Model34, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipFlagName := fmt.Sprintf("%v.ip", cmdPrefix)
	if cmd.Flags().Changed(ipFlagName) {

		var ipFlagName string
		if cmdPrefix == "" {
			ipFlagName = "ip"
		} else {
			ipFlagName = fmt.Sprintf("%v.ip", cmdPrefix)
		}

		ipFlagValue, err := cmd.Flags().GetString(ipFlagName)
		if err != nil {
			return err, false
		}
		m.IP = ipFlagValue

		retAdded = true
	}

	return nil, retAdded
}
