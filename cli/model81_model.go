// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
  "github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model81

// register flags to command
func registerModelModel81Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel81Data(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel81Message(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel81Result(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel81Data(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelData1Flags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel81Message(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := ``

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerModel81Result(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resultDescription := ``

	var resultFlagName string
	if cmdPrefix == "" {
		resultFlagName = "result"
	} else {
		resultFlagName = fmt.Sprintf("%v.result", cmdPrefix)
	}

	var resultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(resultFlagName, resultFlagDefault, resultDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel81Flags(depth int, m *models.Model81, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveModel81DataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	err, messageAdded := retrieveModel81MessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, resultAdded := retrieveModel81ResultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resultAdded

	return nil, retAdded
}

func retrieveModel81DataFlags(depth int, m *models.Model81, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data Data1 is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &models.Data1{}
	}

	err, dataAdded := retrieveModelData1Flags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

func retrieveModel81MessageFlags(depth int, m *models.Model81, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel81ResultFlags(depth int, m *models.Model81, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resultFlagName := fmt.Sprintf("%v.result", cmdPrefix)
	if cmd.Flags().Changed(resultFlagName) {

		var resultFlagName string
		if cmdPrefix == "" {
			resultFlagName = "result"
		} else {
			resultFlagName = fmt.Sprintf("%v.result", cmdPrefix)
		}

		resultFlagValue, err := cmd.Flags().GetBool(resultFlagName)
		if err != nil {
			return err, false
		}
		m.Result = resultFlagValue

		retAdded = true
	}

	return nil, retAdded
}
