// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for UserLogin

// register flags to command
func registerModelUserLoginFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUserLoginAlerts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginFirstName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginForceChangePassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginHomeScreen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginImageURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginIsLocalLoginEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginIsSsoLoginEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginKeepMeSignedIn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginLastLogItemID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginLastName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginLastNewsSeenDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginLastReleaseNotesSeen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginMapConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginPreferences(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginPresentationMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginSessionTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginTableConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginTotpAuthEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginUcrmID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginUcrmRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginUpdated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserLoginUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserLoginAlerts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	alertsDescription := `Required. `

	var alertsFlagName string
	if cmdPrefix == "" {
		alertsFlagName = "alerts"
	} else {
		alertsFlagName = fmt.Sprintf("%v.alerts", cmdPrefix)
	}

	var alertsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(alertsFlagName, alertsFlagDefault, alertsDescription)

	return nil
}

func registerUserLoginEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := `Required. `

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerUserLoginEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. Whether the user can log in or not.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerUserLoginFirstName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firstNameDescription := ``

	var firstNameFlagName string
	if cmdPrefix == "" {
		firstNameFlagName = "firstName"
	} else {
		firstNameFlagName = fmt.Sprintf("%v.firstName", cmdPrefix)
	}

	var firstNameFlagDefault string

	_ = cmd.PersistentFlags().String(firstNameFlagName, firstNameFlagDefault, firstNameDescription)

	return nil
}

func registerUserLoginForceChangePassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceChangePasswordDescription := `Required. `

	var forceChangePasswordFlagName string
	if cmdPrefix == "" {
		forceChangePasswordFlagName = "forceChangePassword"
	} else {
		forceChangePasswordFlagName = fmt.Sprintf("%v.forceChangePassword", cmdPrefix)
	}

	var forceChangePasswordFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceChangePasswordFlagName, forceChangePasswordFlagDefault, forceChangePasswordDescription)

	return nil
}

func registerUserLoginHomeScreen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	homeScreenDescription := `Enum: ["/nms","/crm"]. Required. Where should the user be redirected after login.`

	var homeScreenFlagName string
	if cmdPrefix == "" {
		homeScreenFlagName = "homeScreen"
	} else {
		homeScreenFlagName = fmt.Sprintf("%v.homeScreen", cmdPrefix)
	}

	var homeScreenFlagDefault string

	_ = cmd.PersistentFlags().String(homeScreenFlagName, homeScreenFlagDefault, homeScreenDescription)

	if err := cmd.RegisterFlagCompletionFunc(homeScreenFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["/nms","/crm"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUserLoginID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerUserLoginImageURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageUrlDescription := ``

	var imageUrlFlagName string
	if cmdPrefix == "" {
		imageUrlFlagName = "imageUrl"
	} else {
		imageUrlFlagName = fmt.Sprintf("%v.imageUrl", cmdPrefix)
	}

	var imageUrlFlagDefault string

	_ = cmd.PersistentFlags().String(imageUrlFlagName, imageUrlFlagDefault, imageUrlDescription)

	return nil
}

func registerUserLoginIsLocalLoginEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isLocalLoginEnabledDescription := `Required. `

	var isLocalLoginEnabledFlagName string
	if cmdPrefix == "" {
		isLocalLoginEnabledFlagName = "isLocalLoginEnabled"
	} else {
		isLocalLoginEnabledFlagName = fmt.Sprintf("%v.isLocalLoginEnabled", cmdPrefix)
	}

	var isLocalLoginEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isLocalLoginEnabledFlagName, isLocalLoginEnabledFlagDefault, isLocalLoginEnabledDescription)

	return nil
}

func registerUserLoginIsSsoLoginEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isSsoLoginEnabledDescription := `Required. `

	var isSsoLoginEnabledFlagName string
	if cmdPrefix == "" {
		isSsoLoginEnabledFlagName = "isSsoLoginEnabled"
	} else {
		isSsoLoginEnabledFlagName = fmt.Sprintf("%v.isSsoLoginEnabled", cmdPrefix)
	}

	var isSsoLoginEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isSsoLoginEnabledFlagName, isSsoLoginEnabledFlagDefault, isSsoLoginEnabledDescription)

	return nil
}

func registerUserLoginKeepMeSignedIn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepMeSignedInDescription := `Required. Whether session should be cleared when browser window is closed.`

	var keepMeSignedInFlagName string
	if cmdPrefix == "" {
		keepMeSignedInFlagName = "keepMeSignedIn"
	} else {
		keepMeSignedInFlagName = fmt.Sprintf("%v.keepMeSignedIn", cmdPrefix)
	}

	var keepMeSignedInFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepMeSignedInFlagName, keepMeSignedInFlagDefault, keepMeSignedInDescription)

	return nil
}

func registerUserLoginLastLogItemID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastLogItemIdDescription := ``

	var lastLogItemIdFlagName string
	if cmdPrefix == "" {
		lastLogItemIdFlagName = "lastLogItemId"
	} else {
		lastLogItemIdFlagName = fmt.Sprintf("%v.lastLogItemId", cmdPrefix)
	}

	var lastLogItemIdFlagDefault string

	_ = cmd.PersistentFlags().String(lastLogItemIdFlagName, lastLogItemIdFlagDefault, lastLogItemIdDescription)

	return nil
}

func registerUserLoginLastName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastNameDescription := ``

	var lastNameFlagName string
	if cmdPrefix == "" {
		lastNameFlagName = "lastName"
	} else {
		lastNameFlagName = fmt.Sprintf("%v.lastName", cmdPrefix)
	}

	var lastNameFlagDefault string

	_ = cmd.PersistentFlags().String(lastNameFlagName, lastNameFlagDefault, lastNameDescription)

	return nil
}

func registerUserLoginLastNewsSeenDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive lastNewsSeenDate strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerUserLoginLastReleaseNotesSeen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastReleaseNotesSeenDescription := `Required. Last seen version of release notes.`

	var lastReleaseNotesSeenFlagName string
	if cmdPrefix == "" {
		lastReleaseNotesSeenFlagName = "lastReleaseNotesSeen"
	} else {
		lastReleaseNotesSeenFlagName = fmt.Sprintf("%v.lastReleaseNotesSeen", cmdPrefix)
	}

	var lastReleaseNotesSeenFlagDefault string

	_ = cmd.PersistentFlags().String(lastReleaseNotesSeenFlagName, lastReleaseNotesSeenFlagDefault, lastReleaseNotesSeenDescription)

	return nil
}

func registerUserLoginLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var locationFlagName string
	if cmdPrefix == "" {
		locationFlagName = "location"
	} else {
		locationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	if err := registerModelUserLocationFlags(depth+1, locationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserLoginMapConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var mapConfigFlagName string
	if cmdPrefix == "" {
		mapConfigFlagName = "mapConfig"
	} else {
		mapConfigFlagName = fmt.Sprintf("%v.mapConfig", cmdPrefix)
	}

	if err := registerModelMapConfigFlags(depth+1, mapConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserLoginPreferences(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: preferences Preferences map type is not supported by go-swagger cli yet

	return nil
}

func registerUserLoginPresentationMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	presentationModeDescription := `Obsolete.`

	var presentationModeFlagName string
	if cmdPrefix == "" {
		presentationModeFlagName = "presentationMode"
	} else {
		presentationModeFlagName = fmt.Sprintf("%v.presentationMode", cmdPrefix)
	}

	var presentationModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(presentationModeFlagName, presentationModeFlagDefault, presentationModeDescription)

	return nil
}

func registerUserLoginRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := `Enum: ["superadmin","admin","guest","anonymous","installer"]. Role of this user in UISP. 'anonymous' if user is only allowed to access CRM.`

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault string

	_ = cmd.PersistentFlags().String(roleFlagName, roleFlagDefault, roleDescription)

	if err := cmd.RegisterFlagCompletionFunc(roleFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["superadmin","admin","guest","anonymous","installer"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUserLoginSessionTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sessionTimeoutDescription := `Session expiration in milliseconds, max 30 days.`

	var sessionTimeoutFlagName string
	if cmdPrefix == "" {
		sessionTimeoutFlagName = "sessionTimeout"
	} else {
		sessionTimeoutFlagName = fmt.Sprintf("%v.sessionTimeout", cmdPrefix)
	}

	var sessionTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sessionTimeoutFlagName, sessionTimeoutFlagDefault, sessionTimeoutDescription)

	return nil
}

func registerUserLoginTableConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tableConfig TableConfig map type is not supported by go-swagger cli yet

	return nil
}

func registerUserLoginTotpAuthEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totpAuthEnabledDescription := ``

	var totpAuthEnabledFlagName string
	if cmdPrefix == "" {
		totpAuthEnabledFlagName = "totpAuthEnabled"
	} else {
		totpAuthEnabledFlagName = fmt.Sprintf("%v.totpAuthEnabled", cmdPrefix)
	}

	var totpAuthEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(totpAuthEnabledFlagName, totpAuthEnabledFlagDefault, totpAuthEnabledDescription)

	return nil
}

func registerUserLoginUcrmID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmIdDescription := `Required. ID of UCRM user that is bound with this user.`

	var ucrmIdFlagName string
	if cmdPrefix == "" {
		ucrmIdFlagName = "ucrmId"
	} else {
		ucrmIdFlagName = fmt.Sprintf("%v.ucrmId", cmdPrefix)
	}

	var ucrmIdFlagDefault string

	_ = cmd.PersistentFlags().String(ucrmIdFlagName, ucrmIdFlagDefault, ucrmIdDescription)

	return nil
}

func registerUserLoginUcrmRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmRoleDescription := `Required. Role of this user in UCRM. 'null' if user is not allowed to access UCRM.`

	var ucrmRoleFlagName string
	if cmdPrefix == "" {
		ucrmRoleFlagName = "ucrmRole"
	} else {
		ucrmRoleFlagName = fmt.Sprintf("%v.ucrmRole", cmdPrefix)
	}

	var ucrmRoleFlagDefault string

	_ = cmd.PersistentFlags().String(ucrmRoleFlagName, ucrmRoleFlagDefault, ucrmRoleDescription)

	return nil
}

func registerUserLoginUpdated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive updated strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerUserLoginUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Required. `

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUserLoginFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, alertsAdded := retrieveUserLoginAlertsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alertsAdded

	err, emailAdded := retrieveUserLoginEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, enabledAdded := retrieveUserLoginEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, firstNameAdded := retrieveUserLoginFirstNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firstNameAdded

	err, forceChangePasswordAdded := retrieveUserLoginForceChangePasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceChangePasswordAdded

	err, homeScreenAdded := retrieveUserLoginHomeScreenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || homeScreenAdded

	err, idAdded := retrieveUserLoginIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, imageUrlAdded := retrieveUserLoginImageURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageUrlAdded

	err, isLocalLoginEnabledAdded := retrieveUserLoginIsLocalLoginEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isLocalLoginEnabledAdded

	err, isSsoLoginEnabledAdded := retrieveUserLoginIsSsoLoginEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isSsoLoginEnabledAdded

	err, keepMeSignedInAdded := retrieveUserLoginKeepMeSignedInFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepMeSignedInAdded

	err, lastLogItemIdAdded := retrieveUserLoginLastLogItemIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastLogItemIdAdded

	err, lastNameAdded := retrieveUserLoginLastNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastNameAdded

	err, lastNewsSeenDateAdded := retrieveUserLoginLastNewsSeenDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastNewsSeenDateAdded

	err, lastReleaseNotesSeenAdded := retrieveUserLoginLastReleaseNotesSeenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastReleaseNotesSeenAdded

	err, locationAdded := retrieveUserLoginLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded

	err, mapConfigAdded := retrieveUserLoginMapConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapConfigAdded

	err, preferencesAdded := retrieveUserLoginPreferencesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || preferencesAdded

	err, presentationModeAdded := retrieveUserLoginPresentationModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || presentationModeAdded

	err, roleAdded := retrieveUserLoginRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	err, sessionTimeoutAdded := retrieveUserLoginSessionTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sessionTimeoutAdded

	err, tableConfigAdded := retrieveUserLoginTableConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tableConfigAdded

	err, totpAuthEnabledAdded := retrieveUserLoginTotpAuthEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totpAuthEnabledAdded

	err, ucrmIdAdded := retrieveUserLoginUcrmIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmIdAdded

	err, ucrmRoleAdded := retrieveUserLoginUcrmRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmRoleAdded

	err, updatedAdded := retrieveUserLoginUpdatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAdded

	err, usernameAdded := retrieveUserLoginUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveUserLoginAlertsFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alertsFlagName := fmt.Sprintf("%v.alerts", cmdPrefix)
	if cmd.Flags().Changed(alertsFlagName) {

		var alertsFlagName string
		if cmdPrefix == "" {
			alertsFlagName = "alerts"
		} else {
			alertsFlagName = fmt.Sprintf("%v.alerts", cmdPrefix)
		}

		alertsFlagValue, err := cmd.Flags().GetBool(alertsFlagName)
		if err != nil {
			return err, false
		}
		m.Alerts = &alertsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginEmailFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = &emailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginEnabledFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginFirstNameFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firstNameFlagName := fmt.Sprintf("%v.firstName", cmdPrefix)
	if cmd.Flags().Changed(firstNameFlagName) {

		var firstNameFlagName string
		if cmdPrefix == "" {
			firstNameFlagName = "firstName"
		} else {
			firstNameFlagName = fmt.Sprintf("%v.firstName", cmdPrefix)
		}

		firstNameFlagValue, err := cmd.Flags().GetString(firstNameFlagName)
		if err != nil {
			return err, false
		}
		m.FirstName = firstNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginForceChangePasswordFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	forceChangePasswordFlagName := fmt.Sprintf("%v.forceChangePassword", cmdPrefix)
	if cmd.Flags().Changed(forceChangePasswordFlagName) {

		var forceChangePasswordFlagName string
		if cmdPrefix == "" {
			forceChangePasswordFlagName = "forceChangePassword"
		} else {
			forceChangePasswordFlagName = fmt.Sprintf("%v.forceChangePassword", cmdPrefix)
		}

		forceChangePasswordFlagValue, err := cmd.Flags().GetBool(forceChangePasswordFlagName)
		if err != nil {
			return err, false
		}
		m.ForceChangePassword = &forceChangePasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginHomeScreenFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	homeScreenFlagName := fmt.Sprintf("%v.homeScreen", cmdPrefix)
	if cmd.Flags().Changed(homeScreenFlagName) {

		var homeScreenFlagName string
		if cmdPrefix == "" {
			homeScreenFlagName = "homeScreen"
		} else {
			homeScreenFlagName = fmt.Sprintf("%v.homeScreen", cmdPrefix)
		}

		homeScreenFlagValue, err := cmd.Flags().GetString(homeScreenFlagName)
		if err != nil {
			return err, false
		}
		m.HomeScreen = &homeScreenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginIDFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginImageURLFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imageUrlFlagName := fmt.Sprintf("%v.imageUrl", cmdPrefix)
	if cmd.Flags().Changed(imageUrlFlagName) {

		var imageUrlFlagName string
		if cmdPrefix == "" {
			imageUrlFlagName = "imageUrl"
		} else {
			imageUrlFlagName = fmt.Sprintf("%v.imageUrl", cmdPrefix)
		}

		imageUrlFlagValue, err := cmd.Flags().GetString(imageUrlFlagName)
		if err != nil {
			return err, false
		}
		m.ImageURL = imageUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginIsLocalLoginEnabledFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isLocalLoginEnabledFlagName := fmt.Sprintf("%v.isLocalLoginEnabled", cmdPrefix)
	if cmd.Flags().Changed(isLocalLoginEnabledFlagName) {

		var isLocalLoginEnabledFlagName string
		if cmdPrefix == "" {
			isLocalLoginEnabledFlagName = "isLocalLoginEnabled"
		} else {
			isLocalLoginEnabledFlagName = fmt.Sprintf("%v.isLocalLoginEnabled", cmdPrefix)
		}

		isLocalLoginEnabledFlagValue, err := cmd.Flags().GetBool(isLocalLoginEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsLocalLoginEnabled = &isLocalLoginEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginIsSsoLoginEnabledFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isSsoLoginEnabledFlagName := fmt.Sprintf("%v.isSsoLoginEnabled", cmdPrefix)
	if cmd.Flags().Changed(isSsoLoginEnabledFlagName) {

		var isSsoLoginEnabledFlagName string
		if cmdPrefix == "" {
			isSsoLoginEnabledFlagName = "isSsoLoginEnabled"
		} else {
			isSsoLoginEnabledFlagName = fmt.Sprintf("%v.isSsoLoginEnabled", cmdPrefix)
		}

		isSsoLoginEnabledFlagValue, err := cmd.Flags().GetBool(isSsoLoginEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsSsoLoginEnabled = &isSsoLoginEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginKeepMeSignedInFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepMeSignedInFlagName := fmt.Sprintf("%v.keepMeSignedIn", cmdPrefix)
	if cmd.Flags().Changed(keepMeSignedInFlagName) {

		var keepMeSignedInFlagName string
		if cmdPrefix == "" {
			keepMeSignedInFlagName = "keepMeSignedIn"
		} else {
			keepMeSignedInFlagName = fmt.Sprintf("%v.keepMeSignedIn", cmdPrefix)
		}

		keepMeSignedInFlagValue, err := cmd.Flags().GetBool(keepMeSignedInFlagName)
		if err != nil {
			return err, false
		}
		m.KeepMeSignedIn = &keepMeSignedInFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginLastLogItemIDFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastLogItemIdFlagName := fmt.Sprintf("%v.lastLogItemId", cmdPrefix)
	if cmd.Flags().Changed(lastLogItemIdFlagName) {

		var lastLogItemIdFlagName string
		if cmdPrefix == "" {
			lastLogItemIdFlagName = "lastLogItemId"
		} else {
			lastLogItemIdFlagName = fmt.Sprintf("%v.lastLogItemId", cmdPrefix)
		}

		lastLogItemIdFlagValue, err := cmd.Flags().GetString(lastLogItemIdFlagName)
		if err != nil {
			return err, false
		}
		m.LastLogItemID = lastLogItemIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginLastNameFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastNameFlagName := fmt.Sprintf("%v.lastName", cmdPrefix)
	if cmd.Flags().Changed(lastNameFlagName) {

		var lastNameFlagName string
		if cmdPrefix == "" {
			lastNameFlagName = "lastName"
		} else {
			lastNameFlagName = fmt.Sprintf("%v.lastName", cmdPrefix)
		}

		lastNameFlagValue, err := cmd.Flags().GetString(lastNameFlagName)
		if err != nil {
			return err, false
		}
		m.LastName = lastNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginLastNewsSeenDateFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastNewsSeenDateFlagName := fmt.Sprintf("%v.lastNewsSeenDate", cmdPrefix)
	if cmd.Flags().Changed(lastNewsSeenDateFlagName) {

		// warning: primitive lastNewsSeenDate strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginLastReleaseNotesSeenFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastReleaseNotesSeenFlagName := fmt.Sprintf("%v.lastReleaseNotesSeen", cmdPrefix)
	if cmd.Flags().Changed(lastReleaseNotesSeenFlagName) {

		var lastReleaseNotesSeenFlagName string
		if cmdPrefix == "" {
			lastReleaseNotesSeenFlagName = "lastReleaseNotesSeen"
		} else {
			lastReleaseNotesSeenFlagName = fmt.Sprintf("%v.lastReleaseNotesSeen", cmdPrefix)
		}

		lastReleaseNotesSeenFlagValue, err := cmd.Flags().GetString(lastReleaseNotesSeenFlagName)
		if err != nil {
			return err, false
		}
		m.LastReleaseNotesSeen = &lastReleaseNotesSeenFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginLocationFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	locationFlagName := fmt.Sprintf("%v.location", cmdPrefix)
	if cmd.Flags().Changed(locationFlagName) {
		// info: complex object location UserLocation is retrieved outside this Changed() block
	}
	locationFlagValue := m.Location
	if swag.IsZero(locationFlagValue) {
		locationFlagValue = &models.UserLocation{}
	}

	err, locationAdded := retrieveModelUserLocationFlags(depth+1, locationFlagValue, locationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded
	if locationAdded {
		m.Location = locationFlagValue
	}

	return nil, retAdded
}

func retrieveUserLoginMapConfigFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mapConfigFlagName := fmt.Sprintf("%v.mapConfig", cmdPrefix)
	if cmd.Flags().Changed(mapConfigFlagName) {
		// info: complex object mapConfig MapConfig is retrieved outside this Changed() block
	}
	mapConfigFlagValue := m.MapConfig
	if swag.IsZero(mapConfigFlagValue) {
		mapConfigFlagValue = &models.MapConfig{}
	}

	err, mapConfigAdded := retrieveModelMapConfigFlags(depth+1, mapConfigFlagValue, mapConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mapConfigAdded
	if mapConfigAdded {
		m.MapConfig = mapConfigFlagValue
	}

	return nil, retAdded
}

func retrieveUserLoginPreferencesFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	preferencesFlagName := fmt.Sprintf("%v.preferences", cmdPrefix)
	if cmd.Flags().Changed(preferencesFlagName) {
		// warning: preferences map type Preferences is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveUserLoginPresentationModeFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	presentationModeFlagName := fmt.Sprintf("%v.presentationMode", cmdPrefix)
	if cmd.Flags().Changed(presentationModeFlagName) {

		var presentationModeFlagName string
		if cmdPrefix == "" {
			presentationModeFlagName = "presentationMode"
		} else {
			presentationModeFlagName = fmt.Sprintf("%v.presentationMode", cmdPrefix)
		}

		presentationModeFlagValue, err := cmd.Flags().GetBool(presentationModeFlagName)
		if err != nil {
			return err, false
		}
		m.PresentationMode = presentationModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginRoleFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetString(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginSessionTimeoutFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sessionTimeoutFlagName := fmt.Sprintf("%v.sessionTimeout", cmdPrefix)
	if cmd.Flags().Changed(sessionTimeoutFlagName) {

		var sessionTimeoutFlagName string
		if cmdPrefix == "" {
			sessionTimeoutFlagName = "sessionTimeout"
		} else {
			sessionTimeoutFlagName = fmt.Sprintf("%v.sessionTimeout", cmdPrefix)
		}

		sessionTimeoutFlagValue, err := cmd.Flags().GetInt64(sessionTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.SessionTimeout = sessionTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginTableConfigFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tableConfigFlagName := fmt.Sprintf("%v.tableConfig", cmdPrefix)
	if cmd.Flags().Changed(tableConfigFlagName) {
		// warning: tableConfig map type TableConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveUserLoginTotpAuthEnabledFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totpAuthEnabledFlagName := fmt.Sprintf("%v.totpAuthEnabled", cmdPrefix)
	if cmd.Flags().Changed(totpAuthEnabledFlagName) {

		var totpAuthEnabledFlagName string
		if cmdPrefix == "" {
			totpAuthEnabledFlagName = "totpAuthEnabled"
		} else {
			totpAuthEnabledFlagName = fmt.Sprintf("%v.totpAuthEnabled", cmdPrefix)
		}

		totpAuthEnabledFlagValue, err := cmd.Flags().GetBool(totpAuthEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.TotpAuthEnabled = totpAuthEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginUcrmIDFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmIdFlagName := fmt.Sprintf("%v.ucrmId", cmdPrefix)
	if cmd.Flags().Changed(ucrmIdFlagName) {

		var ucrmIdFlagName string
		if cmdPrefix == "" {
			ucrmIdFlagName = "ucrmId"
		} else {
			ucrmIdFlagName = fmt.Sprintf("%v.ucrmId", cmdPrefix)
		}

		ucrmIdFlagValue, err := cmd.Flags().GetString(ucrmIdFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmID = &ucrmIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginUcrmRoleFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmRoleFlagName := fmt.Sprintf("%v.ucrmRole", cmdPrefix)
	if cmd.Flags().Changed(ucrmRoleFlagName) {

		var ucrmRoleFlagName string
		if cmdPrefix == "" {
			ucrmRoleFlagName = "ucrmRole"
		} else {
			ucrmRoleFlagName = fmt.Sprintf("%v.ucrmRole", cmdPrefix)
		}

		ucrmRoleFlagValue, err := cmd.Flags().GetString(ucrmRoleFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmRole = &ucrmRoleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginUpdatedFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedFlagName := fmt.Sprintf("%v.updated", cmdPrefix)
	if cmd.Flags().Changed(updatedFlagName) {

		// warning: primitive updated strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserLoginUsernameFlags(depth int, m *models.UserLogin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = &usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
