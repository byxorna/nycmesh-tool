// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Wifi

// register flags to command
func registerModelWifiFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWifiAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiChannel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiEncryption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiIsChannelAuto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiStationsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWifiTxPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWifiAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationDescription := `Enum: ["psk","psk2","ent","none"]. `

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
	}

	var authenticationFlagDefault string

	_ = cmd.PersistentFlags().String(authenticationFlagName, authenticationFlagDefault, authenticationDescription)

	if err := cmd.RegisterFlagCompletionFunc(authenticationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWifiAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	availableDescription := ``

	var availableFlagName string
	if cmdPrefix == "" {
		availableFlagName = "available"
	} else {
		availableFlagName = fmt.Sprintf("%v.available", cmdPrefix)
	}

	var availableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(availableFlagName, availableFlagDefault, availableDescription)

	return nil
}

func registerWifiChannel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelDescription := ``

	var channelFlagName string
	if cmdPrefix == "" {
		channelFlagName = "channel"
	} else {
		channelFlagName = fmt.Sprintf("%v.channel", cmdPrefix)
	}

	var channelFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelFlagName, channelFlagDefault, channelDescription)

	return nil
}

func registerWifiChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := ``

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerWifiCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryDescription := `Enum: ["XX","XY","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CK","CR","CI","HR","CW","CY","CZ","CD","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","HN","HK","HU","IS","IN","ID","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","KR","RS","SC","CG","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","PS","SR","SJ","SE","CH","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UY","UZ","VU","VA","VE","VN","VG","VI","WF","EH","YE","ZM","ZW"]. `

	var countryFlagName string
	if cmdPrefix == "" {
		countryFlagName = "country"
	} else {
		countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
	}

	var countryFlagDefault string

	_ = cmd.PersistentFlags().String(countryFlagName, countryFlagDefault, countryDescription)

	if err := cmd.RegisterFlagCompletionFunc(countryFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["XX","XY","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CK","CR","CI","HR","CW","CY","CZ","CD","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","HN","HK","HU","IS","IN","ID","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","KR","RS","SC","CG","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","PS","SR","SJ","SE","CH","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UY","UZ","VU","VA","VE","VN","VG","VI","WF","EH","YE","ZM","ZW"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWifiEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerWifiEncryption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	encryptionDescription := `Enum: ["wep","wpa","wpa-psk","wpa2","enabled","none"]. `

	var encryptionFlagName string
	if cmdPrefix == "" {
		encryptionFlagName = "encryption"
	} else {
		encryptionFlagName = fmt.Sprintf("%v.encryption", cmdPrefix)
	}

	var encryptionFlagDefault string

	_ = cmd.PersistentFlags().String(encryptionFlagName, encryptionFlagDefault, encryptionDescription)

	if err := cmd.RegisterFlagCompletionFunc(encryptionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWifiFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := ``

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	return nil
}

func registerWifiIsChannelAuto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isChannelAutoDescription := ``

	var isChannelAutoFlagName string
	if cmdPrefix == "" {
		isChannelAutoFlagName = "isChannelAuto"
	} else {
		isChannelAutoFlagName = fmt.Sprintf("%v.isChannelAuto", cmdPrefix)
	}

	var isChannelAutoFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isChannelAutoFlagName, isChannelAutoFlagDefault, isChannelAutoDescription)

	return nil
}

func registerWifiKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keyDescription := ``

	var keyFlagName string
	if cmdPrefix == "" {
		keyFlagName = "key"
	} else {
		keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
	}

	var keyFlagDefault string

	_ = cmd.PersistentFlags().String(keyFlagName, keyFlagDefault, keyDescription)

	return nil
}

func registerWifiMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := ``

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

func registerWifiMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["ap","mesh"]. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","mesh"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWifiSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := `SSID`

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerWifiStationsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stationsCountDescription := ``

	var stationsCountFlagName string
	if cmdPrefix == "" {
		stationsCountFlagName = "stationsCount"
	} else {
		stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
	}

	var stationsCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(stationsCountFlagName, stationsCountFlagDefault, stationsCountDescription)

	return nil
}

func registerWifiTxPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txPowerDescription := ``

	var txPowerFlagName string
	if cmdPrefix == "" {
		txPowerFlagName = "txPower"
	} else {
		txPowerFlagName = fmt.Sprintf("%v.txPower", cmdPrefix)
	}

	var txPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(txPowerFlagName, txPowerFlagDefault, txPowerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWifiFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authenticationAdded := retrieveWifiAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, availableAdded := retrieveWifiAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availableAdded

	err, channelAdded := retrieveWifiChannelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelAdded

	err, channelWidthAdded := retrieveWifiChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, countryAdded := retrieveWifiCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryAdded

	err, enabledAdded := retrieveWifiEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, encryptionAdded := retrieveWifiEncryptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encryptionAdded

	err, frequencyAdded := retrieveWifiFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, isChannelAutoAdded := retrieveWifiIsChannelAutoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isChannelAutoAdded

	err, keyAdded := retrieveWifiKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keyAdded

	err, macAdded := retrieveWifiMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	err, modeAdded := retrieveWifiModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, ssidAdded := retrieveWifiSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, stationsCountAdded := retrieveWifiStationsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationsCountAdded

	err, txPowerAdded := retrieveWifiTxPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txPowerAdded

	return nil, retAdded
}

func retrieveWifiAuthenticationFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {

		var authenticationFlagName string
		if cmdPrefix == "" {
			authenticationFlagName = "authentication"
		} else {
			authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
		}

		authenticationFlagValue, err := cmd.Flags().GetString(authenticationFlagName)
		if err != nil {
			return err, false
		}
		m.Authentication = authenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiAvailableFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	availableFlagName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(availableFlagName) {

		var availableFlagName string
		if cmdPrefix == "" {
			availableFlagName = "available"
		} else {
			availableFlagName = fmt.Sprintf("%v.available", cmdPrefix)
		}

		availableFlagValue, err := cmd.Flags().GetBool(availableFlagName)
		if err != nil {
			return err, false
		}
		m.Available = availableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiChannelFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelFlagName := fmt.Sprintf("%v.channel", cmdPrefix)
	if cmd.Flags().Changed(channelFlagName) {

		var channelFlagName string
		if cmdPrefix == "" {
			channelFlagName = "channel"
		} else {
			channelFlagName = fmt.Sprintf("%v.channel", cmdPrefix)
		}

		channelFlagValue, err := cmd.Flags().GetFloat64(channelFlagName)
		if err != nil {
			return err, false
		}
		m.Channel = channelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiChannelWidthFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetInt64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiCountryFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryFlagName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(countryFlagName) {

		var countryFlagName string
		if cmdPrefix == "" {
			countryFlagName = "country"
		} else {
			countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
		}

		countryFlagValue, err := cmd.Flags().GetString(countryFlagName)
		if err != nil {
			return err, false
		}
		m.Country = countryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiEnabledFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiEncryptionFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	encryptionFlagName := fmt.Sprintf("%v.encryption", cmdPrefix)
	if cmd.Flags().Changed(encryptionFlagName) {

		var encryptionFlagName string
		if cmdPrefix == "" {
			encryptionFlagName = "encryption"
		} else {
			encryptionFlagName = fmt.Sprintf("%v.encryption", cmdPrefix)
		}

		encryptionFlagValue, err := cmd.Flags().GetString(encryptionFlagName)
		if err != nil {
			return err, false
		}
		m.Encryption = encryptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiFrequencyFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetFloat64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = &frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiIsChannelAutoFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isChannelAutoFlagName := fmt.Sprintf("%v.isChannelAuto", cmdPrefix)
	if cmd.Flags().Changed(isChannelAutoFlagName) {

		var isChannelAutoFlagName string
		if cmdPrefix == "" {
			isChannelAutoFlagName = "isChannelAuto"
		} else {
			isChannelAutoFlagName = fmt.Sprintf("%v.isChannelAuto", cmdPrefix)
		}

		isChannelAutoFlagValue, err := cmd.Flags().GetBool(isChannelAutoFlagName)
		if err != nil {
			return err, false
		}
		m.IsChannelAuto = isChannelAutoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiKeyFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keyFlagName := fmt.Sprintf("%v.key", cmdPrefix)
	if cmd.Flags().Changed(keyFlagName) {

		var keyFlagName string
		if cmdPrefix == "" {
			keyFlagName = "key"
		} else {
			keyFlagName = fmt.Sprintf("%v.key", cmdPrefix)
		}

		keyFlagValue, err := cmd.Flags().GetString(keyFlagName)
		if err != nil {
			return err, false
		}
		m.Key = keyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiMacFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = macFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiModeFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiSsidFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiStationsCountFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationsCountFlagName := fmt.Sprintf("%v.stationsCount", cmdPrefix)
	if cmd.Flags().Changed(stationsCountFlagName) {

		var stationsCountFlagName string
		if cmdPrefix == "" {
			stationsCountFlagName = "stationsCount"
		} else {
			stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
		}

		stationsCountFlagValue, err := cmd.Flags().GetFloat64(stationsCountFlagName)
		if err != nil {
			return err, false
		}
		m.StationsCount = stationsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWifiTxPowerFlags(depth int, m *models.Wifi, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txPowerFlagName := fmt.Sprintf("%v.txPower", cmdPrefix)
	if cmd.Flags().Changed(txPowerFlagName) {

		var txPowerFlagName string
		if cmdPrefix == "" {
			txPowerFlagName = "txPower"
		} else {
			txPowerFlagName = fmt.Sprintf("%v.txPower", cmdPrefix)
		}

		txPowerFlagValue, err := cmd.Flags().GetFloat64(txPowerFlagName)
		if err != nil {
			return err, false
		}
		m.TxPower = txPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
