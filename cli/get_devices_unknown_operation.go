// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/devices"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDevicesGetDevicesUnknownCmd returns a cmd to handle operation getDevicesUnknown
func makeOperationDevicesGetDevicesUnknownCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getDevicesUnknown",
		Short: ``,
		RunE:  runOperationDevicesGetDevicesUnknown,
	}

	if err := registerOperationDevicesGetDevicesUnknownParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDevicesGetDevicesUnknown uses cmd flags to call endpoint api
func runOperationDevicesGetDevicesUnknown(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := devices.NewGetDevicesUnknownParams()
	if err, _ := retrieveOperationDevicesGetDevicesUnknownMinTrafficFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDevicesGetDevicesUnknownResult(appCli.Devices.GetDevicesUnknown(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDevicesGetDevicesUnknownParamFlags registers all flags needed to fill params
func registerOperationDevicesGetDevicesUnknownParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDevicesGetDevicesUnknownMinTrafficParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDevicesGetDevicesUnknownMinTrafficParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	minTrafficDescription := `Get only devices that produced at least this amount of traffic (in bytes).`

	var minTrafficFlagName string
	if cmdPrefix == "" {
		minTrafficFlagName = "minTraffic"
	} else {
		minTrafficFlagName = fmt.Sprintf("%v.minTraffic", cmdPrefix)
	}

	var minTrafficFlagDefault float64 = 102400

	_ = cmd.PersistentFlags().Float64(minTrafficFlagName, minTrafficFlagDefault, minTrafficDescription)

	return nil
}

func retrieveOperationDevicesGetDevicesUnknownMinTrafficFlag(m *devices.GetDevicesUnknownParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("minTraffic") {

		var minTrafficFlagName string
		if cmdPrefix == "" {
			minTrafficFlagName = "minTraffic"
		} else {
			minTrafficFlagName = fmt.Sprintf("%v.minTraffic", cmdPrefix)
		}

		minTrafficFlagValue, err := cmd.Flags().GetFloat64(minTrafficFlagName)
		if err != nil {
			return err, false
		}
		m.MinTraffic = &minTrafficFlagValue

	}
	return nil, retAdded
}

// parseOperationDevicesGetDevicesUnknownResult parses request result and return the string content
func parseOperationDevicesGetDevicesUnknownResult(resp0 *devices.GetDevicesUnknownOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*devices.GetDevicesUnknownOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*devices.GetDevicesUnknownBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*devices.GetDevicesUnknownUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*devices.GetDevicesUnknownForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*devices.GetDevicesUnknownInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
