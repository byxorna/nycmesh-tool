// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/outages"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationOutagesGetOutagesCmd returns a cmd to handle operation getOutages
func makeOperationOutagesGetOutagesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getOutages",
		Short: ``,
		RunE:  runOperationOutagesGetOutages,
	}

	if err := registerOperationOutagesGetOutagesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationOutagesGetOutages uses cmd flags to call endpoint api
func runOperationOutagesGetOutages(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := outages.NewGetOutagesParams()
	if err, _ := retrieveOperationOutagesGetOutagesCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOutagesGetOutagesDeviceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOutagesGetOutagesInProgressFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOutagesGetOutagesPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOutagesGetOutagesPeriodFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOutagesGetOutagesQueryFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOutagesGetOutagesTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationOutagesGetOutagesResult(appCli.Outages.GetOutages(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationOutagesGetOutagesParamFlags registers all flags needed to fill params
func registerOperationOutagesGetOutagesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationOutagesGetOutagesCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOutagesGetOutagesDeviceIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOutagesGetOutagesInProgressParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOutagesGetOutagesPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOutagesGetOutagesPeriodParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOutagesGetOutagesQueryParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOutagesGetOutagesTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationOutagesGetOutagesCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	countDescription := `Required. `

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}
func registerOperationOutagesGetOutagesDeviceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	deviceIdDescription := ``

	var deviceIdFlagName string
	if cmdPrefix == "" {
		deviceIdFlagName = "deviceId"
	} else {
		deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
	}

	var deviceIdFlagDefault string

	_ = cmd.PersistentFlags().String(deviceIdFlagName, deviceIdFlagDefault, deviceIdDescription)

	return nil
}
func registerOperationOutagesGetOutagesInProgressParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	inProgressDescription := ``

	var inProgressFlagName string
	if cmdPrefix == "" {
		inProgressFlagName = "inProgress"
	} else {
		inProgressFlagName = fmt.Sprintf("%v.inProgress", cmdPrefix)
	}

	var inProgressFlagDefault bool

	_ = cmd.PersistentFlags().Bool(inProgressFlagName, inProgressFlagDefault, inProgressDescription)

	return nil
}
func registerOperationOutagesGetOutagesPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `Required. `

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationOutagesGetOutagesPeriodParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	periodDescription := ``

	var periodFlagName string
	if cmdPrefix == "" {
		periodFlagName = "period"
	} else {
		periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
	}

	var periodFlagDefault float64

	_ = cmd.PersistentFlags().Float64(periodFlagName, periodFlagDefault, periodDescription)

	return nil
}
func registerOperationOutagesGetOutagesQueryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	queryDescription := ``

	var queryFlagName string
	if cmdPrefix == "" {
		queryFlagName = "query"
	} else {
		queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
	}

	var queryFlagDefault string

	_ = cmd.PersistentFlags().String(queryFlagName, queryFlagDefault, queryDescription)

	return nil
}
func registerOperationOutagesGetOutagesTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: ["outage","unreachable"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["outage","unreachable"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationOutagesGetOutagesCountFlag(m *outages.GetOutagesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("count") {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOutagesGetOutagesDeviceIDFlag(m *outages.GetOutagesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("deviceId") {

		var deviceIdFlagName string
		if cmdPrefix == "" {
			deviceIdFlagName = "deviceId"
		} else {
			deviceIdFlagName = fmt.Sprintf("%v.deviceId", cmdPrefix)
		}

		deviceIdFlagValue, err := cmd.Flags().GetString(deviceIdFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceID = &deviceIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOutagesGetOutagesInProgressFlag(m *outages.GetOutagesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("inProgress") {

		var inProgressFlagName string
		if cmdPrefix == "" {
			inProgressFlagName = "inProgress"
		} else {
			inProgressFlagName = fmt.Sprintf("%v.inProgress", cmdPrefix)
		}

		inProgressFlagValue, err := cmd.Flags().GetBool(inProgressFlagName)
		if err != nil {
			return err, false
		}
		m.InProgress = &inProgressFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOutagesGetOutagesPageFlag(m *outages.GetOutagesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetFloat64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOutagesGetOutagesPeriodFlag(m *outages.GetOutagesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("period") {

		var periodFlagName string
		if cmdPrefix == "" {
			periodFlagName = "period"
		} else {
			periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
		}

		periodFlagValue, err := cmd.Flags().GetFloat64(periodFlagName)
		if err != nil {
			return err, false
		}
		m.Period = &periodFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOutagesGetOutagesQueryFlag(m *outages.GetOutagesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("query") {

		var queryFlagName string
		if cmdPrefix == "" {
			queryFlagName = "query"
		} else {
			queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
		}

		queryFlagValue, err := cmd.Flags().GetString(queryFlagName)
		if err != nil {
			return err, false
		}
		m.Query = &queryFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOutagesGetOutagesTypeFlag(m *outages.GetOutagesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}
	return nil, retAdded
}

// parseOperationOutagesGetOutagesResult parses request result and return the string content
func parseOperationOutagesGetOutagesResult(resp0 *outages.GetOutagesOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*outages.GetOutagesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*outages.GetOutagesBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*outages.GetOutagesUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*outages.GetOutagesForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*outages.GetOutagesNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*outages.GetOutagesInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
