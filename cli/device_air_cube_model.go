// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for DeviceAirCube

// register flags to command
func registerModelDeviceAirCubeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceAirCubeApDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceAirCubeLanIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceAirCubeMgmtIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceAirCubePoe(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceAirCubeWanIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceAirCubeWifi2Ghz(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceAirCubeWifi5Ghz(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceAirCubeWifiMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceAirCubeApDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var apDeviceFlagName string
	if cmdPrefix == "" {
		apDeviceFlagName = "apDevice"
	} else {
		apDeviceFlagName = fmt.Sprintf("%v.apDevice", cmdPrefix)
	}

	if err := registerModelApDevice3Flags(depth+1, apDeviceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceAirCubeLanIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lanIpDescription := `Lan IP address.`

	var lanIpFlagName string
	if cmdPrefix == "" {
		lanIpFlagName = "lanIp"
	} else {
		lanIpFlagName = fmt.Sprintf("%v.lanIp", cmdPrefix)
	}

	var lanIpFlagDefault string

	_ = cmd.PersistentFlags().String(lanIpFlagName, lanIpFlagDefault, lanIpDescription)

	return nil
}

func registerDeviceAirCubeMgmtIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mgmtIpDescription := `Management IP address.`

	var mgmtIpFlagName string
	if cmdPrefix == "" {
		mgmtIpFlagName = "mgmtIp"
	} else {
		mgmtIpFlagName = fmt.Sprintf("%v.mgmtIp", cmdPrefix)
	}

	var mgmtIpFlagDefault string

	_ = cmd.PersistentFlags().String(mgmtIpFlagName, mgmtIpFlagDefault, mgmtIpDescription)

	return nil
}

func registerDeviceAirCubePoe(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poeDescription := ``

	var poeFlagName string
	if cmdPrefix == "" {
		poeFlagName = "poe"
	} else {
		poeFlagName = fmt.Sprintf("%v.poe", cmdPrefix)
	}

	var poeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(poeFlagName, poeFlagDefault, poeDescription)

	return nil
}

func registerDeviceAirCubeWanIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanIpDescription := `Wan IP address.`

	var wanIpFlagName string
	if cmdPrefix == "" {
		wanIpFlagName = "wanIp"
	} else {
		wanIpFlagName = fmt.Sprintf("%v.wanIp", cmdPrefix)
	}

	var wanIpFlagDefault string

	_ = cmd.PersistentFlags().String(wanIpFlagName, wanIpFlagDefault, wanIpDescription)

	return nil
}

func registerDeviceAirCubeWifi2Ghz(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wifi2GhzFlagName string
	if cmdPrefix == "" {
		wifi2GhzFlagName = "wifi2Ghz"
	} else {
		wifi2GhzFlagName = fmt.Sprintf("%v.wifi2Ghz", cmdPrefix)
	}

	if err := registerModelWifiFlags(depth+1, wifi2GhzFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceAirCubeWifi5Ghz(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var wifi5GhzFlagName string
	if cmdPrefix == "" {
		wifi5GhzFlagName = "wifi5Ghz"
	} else {
		wifi5GhzFlagName = fmt.Sprintf("%v.wifi5Ghz", cmdPrefix)
	}

	if err := registerModelWifiFlags(depth+1, wifi5GhzFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceAirCubeWifiMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wifiModeDescription := `Enum: ["ap","mesh"]. `

	var wifiModeFlagName string
	if cmdPrefix == "" {
		wifiModeFlagName = "wifiMode"
	} else {
		wifiModeFlagName = fmt.Sprintf("%v.wifiMode", cmdPrefix)
	}

	var wifiModeFlagDefault string

	_ = cmd.PersistentFlags().String(wifiModeFlagName, wifiModeFlagDefault, wifiModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(wifiModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","mesh"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceAirCubeFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, apDeviceAdded := retrieveDeviceAirCubeApDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apDeviceAdded

	err, lanIpAdded := retrieveDeviceAirCubeLanIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanIpAdded

	err, mgmtIpAdded := retrieveDeviceAirCubeMgmtIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mgmtIpAdded

	err, poeAdded := retrieveDeviceAirCubePoeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poeAdded

	err, wanIpAdded := retrieveDeviceAirCubeWanIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanIpAdded

	err, wifi2GhzAdded := retrieveDeviceAirCubeWifi2GhzFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi2GhzAdded

	err, wifi5GhzAdded := retrieveDeviceAirCubeWifi5GhzFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi5GhzAdded

	err, wifiModeAdded := retrieveDeviceAirCubeWifiModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifiModeAdded

	return nil, retAdded
}

func retrieveDeviceAirCubeApDeviceFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apDeviceFlagName := fmt.Sprintf("%v.apDevice", cmdPrefix)
	if cmd.Flags().Changed(apDeviceFlagName) {
		// info: complex object apDevice ApDevice3 is retrieved outside this Changed() block
	}
	apDeviceFlagValue := m.ApDevice
	if swag.IsZero(apDeviceFlagValue) {
		apDeviceFlagValue = &models.ApDevice3{}
	}

	err, apDeviceAdded := retrieveModelApDevice3Flags(depth+1, apDeviceFlagValue, apDeviceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apDeviceAdded
	if apDeviceAdded {
		m.ApDevice = apDeviceFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceAirCubeLanIPFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lanIpFlagName := fmt.Sprintf("%v.lanIp", cmdPrefix)
	if cmd.Flags().Changed(lanIpFlagName) {

		var lanIpFlagName string
		if cmdPrefix == "" {
			lanIpFlagName = "lanIp"
		} else {
			lanIpFlagName = fmt.Sprintf("%v.lanIp", cmdPrefix)
		}

		lanIpFlagValue, err := cmd.Flags().GetString(lanIpFlagName)
		if err != nil {
			return err, false
		}
		m.LanIP = lanIpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceAirCubeMgmtIPFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mgmtIpFlagName := fmt.Sprintf("%v.mgmtIp", cmdPrefix)
	if cmd.Flags().Changed(mgmtIpFlagName) {

		var mgmtIpFlagName string
		if cmdPrefix == "" {
			mgmtIpFlagName = "mgmtIp"
		} else {
			mgmtIpFlagName = fmt.Sprintf("%v.mgmtIp", cmdPrefix)
		}

		mgmtIpFlagValue, err := cmd.Flags().GetString(mgmtIpFlagName)
		if err != nil {
			return err, false
		}
		m.MgmtIP = mgmtIpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceAirCubePoeFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poeFlagName := fmt.Sprintf("%v.poe", cmdPrefix)
	if cmd.Flags().Changed(poeFlagName) {

		var poeFlagName string
		if cmdPrefix == "" {
			poeFlagName = "poe"
		} else {
			poeFlagName = fmt.Sprintf("%v.poe", cmdPrefix)
		}

		poeFlagValue, err := cmd.Flags().GetBool(poeFlagName)
		if err != nil {
			return err, false
		}
		m.Poe = poeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceAirCubeWanIPFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanIpFlagName := fmt.Sprintf("%v.wanIp", cmdPrefix)
	if cmd.Flags().Changed(wanIpFlagName) {

		var wanIpFlagName string
		if cmdPrefix == "" {
			wanIpFlagName = "wanIp"
		} else {
			wanIpFlagName = fmt.Sprintf("%v.wanIp", cmdPrefix)
		}

		wanIpFlagValue, err := cmd.Flags().GetString(wanIpFlagName)
		if err != nil {
			return err, false
		}
		m.WanIP = wanIpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceAirCubeWifi2GhzFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifi2GhzFlagName := fmt.Sprintf("%v.wifi2Ghz", cmdPrefix)
	if cmd.Flags().Changed(wifi2GhzFlagName) {
		// info: complex object wifi2Ghz Wifi is retrieved outside this Changed() block
	}
	wifi2GhzFlagValue := m.Wifi2Ghz
	if swag.IsZero(wifi2GhzFlagValue) {
		wifi2GhzFlagValue = &models.Wifi{}
	}

	err, wifi2GhzAdded := retrieveModelWifiFlags(depth+1, wifi2GhzFlagValue, wifi2GhzFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi2GhzAdded
	if wifi2GhzAdded {
		m.Wifi2Ghz = wifi2GhzFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceAirCubeWifi5GhzFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifi5GhzFlagName := fmt.Sprintf("%v.wifi5Ghz", cmdPrefix)
	if cmd.Flags().Changed(wifi5GhzFlagName) {
		// info: complex object wifi5Ghz Wifi is retrieved outside this Changed() block
	}
	wifi5GhzFlagValue := m.Wifi5Ghz
	if swag.IsZero(wifi5GhzFlagValue) {
		wifi5GhzFlagValue = &models.Wifi{}
	}

	err, wifi5GhzAdded := retrieveModelWifiFlags(depth+1, wifi5GhzFlagValue, wifi5GhzFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wifi5GhzAdded
	if wifi5GhzAdded {
		m.Wifi5Ghz = wifi5GhzFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceAirCubeWifiModeFlags(depth int, m *models.DeviceAirCube, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wifiModeFlagName := fmt.Sprintf("%v.wifiMode", cmdPrefix)
	if cmd.Flags().Changed(wifiModeFlagName) {

		var wifiModeFlagName string
		if cmdPrefix == "" {
			wifiModeFlagName = "wifiMode"
		} else {
			wifiModeFlagName = fmt.Sprintf("%v.wifiMode", cmdPrefix)
		}

		wifiModeFlagValue, err := cmd.Flags().GetString(wifiModeFlagName)
		if err != nil {
			return err, false
		}
		m.WifiMode = wifiModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
