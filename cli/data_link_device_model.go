// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/byxorna/nycmesh-tool/models"

	"github.com/spf13/cobra"
)

// Schema cli for DataLinkDevice

// register flags to command
func registerModelDataLinkDeviceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDataLinkDeviceAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataLinkDeviceFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataLinkDeviceIdentification(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataLinkDeviceMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataLinkDeviceOverview(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataLinkDeviceSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataLinkDeviceSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDataLinkDeviceStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDataLinkDeviceAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDataLinkDeviceFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := ``

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	return nil
}

func registerDataLinkDeviceIdentification(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var identificationFlagName string
	if cmdPrefix == "" {
		identificationFlagName = "identification"
	} else {
		identificationFlagName = fmt.Sprintf("%v.identification", cmdPrefix)
	}

	if err := registerModelIdentification1Flags(depth+1, identificationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDataLinkDeviceMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: meta Meta map type is not supported by go-swagger cli yet

	return nil
}

func registerDataLinkDeviceOverview(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var overviewFlagName string
	if cmdPrefix == "" {
		overviewFlagName = "overview"
	} else {
		overviewFlagName = fmt.Sprintf("%v.overview", cmdPrefix)
	}

	if err := registerModelOverviewFlags(depth+1, overviewFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDataLinkDeviceSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signalDescription := ``

	var signalFlagName string
	if cmdPrefix == "" {
		signalFlagName = "signal"
	} else {
		signalFlagName = fmt.Sprintf("%v.signal", cmdPrefix)
	}

	var signalFlagDefault float64

	_ = cmd.PersistentFlags().Float64(signalFlagName, signalFlagDefault, signalDescription)

	return nil
}

func registerDataLinkDeviceSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := ``

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerDataLinkDeviceStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Required. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDataLinkDeviceFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveDataLinkDeviceAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, frequencyAdded := retrieveDataLinkDeviceFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, identificationAdded := retrieveDataLinkDeviceIdentificationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || identificationAdded

	err, metaAdded := retrieveDataLinkDeviceMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	err, overviewAdded := retrieveDataLinkDeviceOverviewFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || overviewAdded

	err, signalAdded := retrieveDataLinkDeviceSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalAdded

	err, ssidAdded := retrieveDataLinkDeviceSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, statusAdded := retrieveDataLinkDeviceStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveDataLinkDeviceAttributesFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes Attributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.Attributes{}
	}

	err, attributesAdded := retrieveModelAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveDataLinkDeviceFrequencyFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetFloat64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDataLinkDeviceIdentificationFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	identificationFlagName := fmt.Sprintf("%v.identification", cmdPrefix)
	if cmd.Flags().Changed(identificationFlagName) {
		// info: complex object identification Identification1 is retrieved outside this Changed() block
	}
	identificationFlagValue := m.Identification
	if swag.IsZero(identificationFlagValue) {
		identificationFlagValue = &models.Identification1{}
	}

	err, identificationAdded := retrieveModelIdentification1Flags(depth+1, identificationFlagValue, identificationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || identificationAdded
	if identificationAdded {
		m.Identification = identificationFlagValue
	}

	return nil, retAdded
}

func retrieveDataLinkDeviceMetaFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {
		// warning: meta map type Meta is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDataLinkDeviceOverviewFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	overviewFlagName := fmt.Sprintf("%v.overview", cmdPrefix)
	if cmd.Flags().Changed(overviewFlagName) {
		// info: complex object overview Overview is retrieved outside this Changed() block
	}
	overviewFlagValue := m.Overview
	if swag.IsZero(overviewFlagValue) {
		overviewFlagValue = &models.Overview{}
	}

	err, overviewAdded := retrieveModelOverviewFlags(depth+1, overviewFlagValue, overviewFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || overviewAdded
	if overviewAdded {
		m.Overview = overviewFlagValue
	}

	return nil, retAdded
}

func retrieveDataLinkDeviceSignalFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalFlagName := fmt.Sprintf("%v.signal", cmdPrefix)
	if cmd.Flags().Changed(signalFlagName) {

		var signalFlagName string
		if cmdPrefix == "" {
			signalFlagName = "signal"
		} else {
			signalFlagName = fmt.Sprintf("%v.signal", cmdPrefix)
		}

		signalFlagValue, err := cmd.Flags().GetFloat64(signalFlagName)
		if err != nil {
			return err, false
		}
		m.Signal = signalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDataLinkDeviceSsidFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDataLinkDeviceStatusFlags(depth int, m *models.DataLinkDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
