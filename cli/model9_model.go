// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Model9

// register flags to command
func registerModelModel9Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel9Device(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel9DeviceMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel9ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel9Level(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel9Message(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel9Site(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel9Tags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel9Timestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel9Device(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deviceFlagName string
	if cmdPrefix == "" {
		deviceFlagName = "device"
	} else {
		deviceFlagName = fmt.Sprintf("%v.device", cmdPrefix)
	}

	if err := registerModelDeviceIdentification2Flags(depth+1, deviceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel9DeviceMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deviceMetadataFlagName string
	if cmdPrefix == "" {
		deviceMetadataFlagName = "deviceMetadata"
	} else {
		deviceMetadataFlagName = fmt.Sprintf("%v.deviceMetadata", cmdPrefix)
	}

	if err := registerModelDeviceMetadataFlags(depth+1, deviceMetadataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel9ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Log item id.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel9Level(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	levelDescription := `Enum: ["info","warning","error"]. Required. Log severity level`

	var levelFlagName string
	if cmdPrefix == "" {
		levelFlagName = "level"
	} else {
		levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
	}

	var levelFlagDefault string

	_ = cmd.PersistentFlags().String(levelFlagName, levelFlagDefault, levelDescription)

	if err := cmd.RegisterFlagCompletionFunc(levelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["info","warning","error"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel9Message(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := `Required. Log message`

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerModel9Site(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var siteFlagName string
	if cmdPrefix == "" {
		siteFlagName = "site"
	} else {
		siteFlagName = fmt.Sprintf("%v.site", cmdPrefix)
	}

	if err := registerModelSite1Flags(depth+1, siteFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel9Tags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags Tags array type is not supported by go-swagger cli yet

	return nil
}

func registerModel9Timestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive timestamp strfmt.Date is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel9Flags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceAdded := retrieveModel9DeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceAdded

	err, deviceMetadataAdded := retrieveModel9DeviceMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceMetadataAdded

	err, idAdded := retrieveModel9IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, levelAdded := retrieveModel9LevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || levelAdded

	err, messageAdded := retrieveModel9MessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, siteAdded := retrieveModel9SiteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded

	err, tagsAdded := retrieveModel9TagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, timestampAdded := retrieveModel9TimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampAdded

	return nil, retAdded
}

func retrieveModel9DeviceFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceFlagName := fmt.Sprintf("%v.device", cmdPrefix)
	if cmd.Flags().Changed(deviceFlagName) {
		// info: complex object device DeviceIdentification2 is retrieved outside this Changed() block
	}
	deviceFlagValue := m.Device
	if swag.IsZero(deviceFlagValue) {
		deviceFlagValue = &models.DeviceIdentification2{}
	}

	err, deviceAdded := retrieveModelDeviceIdentification2Flags(depth+1, deviceFlagValue, deviceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceAdded
	if deviceAdded {
		m.Device = deviceFlagValue
	}

	return nil, retAdded
}

func retrieveModel9DeviceMetadataFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceMetadataFlagName := fmt.Sprintf("%v.deviceMetadata", cmdPrefix)
	if cmd.Flags().Changed(deviceMetadataFlagName) {
		// info: complex object deviceMetadata DeviceMetadata is retrieved outside this Changed() block
	}
	deviceMetadataFlagValue := m.DeviceMetadata
	if swag.IsZero(deviceMetadataFlagValue) {
		deviceMetadataFlagValue = &models.DeviceMetadata{}
	}

	err, deviceMetadataAdded := retrieveModelDeviceMetadataFlags(depth+1, deviceMetadataFlagValue, deviceMetadataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceMetadataAdded
	if deviceMetadataAdded {
		m.DeviceMetadata = deviceMetadataFlagValue
	}

	return nil, retAdded
}

func retrieveModel9IDFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel9LevelFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	levelFlagName := fmt.Sprintf("%v.level", cmdPrefix)
	if cmd.Flags().Changed(levelFlagName) {

		var levelFlagName string
		if cmdPrefix == "" {
			levelFlagName = "level"
		} else {
			levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
		}

		levelFlagValue, err := cmd.Flags().GetString(levelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = &levelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel9MessageFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = &messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel9SiteFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	siteFlagName := fmt.Sprintf("%v.site", cmdPrefix)
	if cmd.Flags().Changed(siteFlagName) {
		// info: complex object site Site1 is retrieved outside this Changed() block
	}
	siteFlagValue := m.Site
	if swag.IsZero(siteFlagValue) {
		siteFlagValue = &models.Site1{}
	}

	err, siteAdded := retrieveModelSite1Flags(depth+1, siteFlagValue, siteFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded
	if siteAdded {
		m.Site = siteFlagValue
	}

	return nil, retAdded
}

func retrieveModel9TagsFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: tags array type Tags is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel9TimestampFlags(depth int, m *models.Model9, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampFlagName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(timestampFlagName) {

		// warning: primitive timestamp strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}
