// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for BoardInfo

// register flags to command
func registerModelBoardInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBoardInfoAutoChannelWidthList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoIsExternalResetSupported(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoLedCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoPhysicalInterfaceCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoPhysicalInterfaceMACAddresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoProduct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoRadio1(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoRebootTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoardInfoUpgradeTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBoardInfoAutoChannelWidthList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: autoChannelWidthList AutoChannelWidthList array type is not supported by go-swagger cli yet

	return nil
}

func registerBoardInfoIsExternalResetSupported(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isExternalResetSupportedDescription := `Required. `

	var isExternalResetSupportedFlagName string
	if cmdPrefix == "" {
		isExternalResetSupportedFlagName = "isExternalResetSupported"
	} else {
		isExternalResetSupportedFlagName = fmt.Sprintf("%v.isExternalResetSupported", cmdPrefix)
	}

	var isExternalResetSupportedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isExternalResetSupportedFlagName, isExternalResetSupportedFlagDefault, isExternalResetSupportedDescription)

	return nil
}

func registerBoardInfoLedCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ledCountDescription := `Required. `

	var ledCountFlagName string
	if cmdPrefix == "" {
		ledCountFlagName = "ledCount"
	} else {
		ledCountFlagName = fmt.Sprintf("%v.ledCount", cmdPrefix)
	}

	var ledCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ledCountFlagName, ledCountFlagDefault, ledCountDescription)

	return nil
}

func registerBoardInfoModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := `Required. `

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	return nil
}

func registerBoardInfoPhysicalInterfaceCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	physicalInterfaceCountDescription := `Required. `

	var physicalInterfaceCountFlagName string
	if cmdPrefix == "" {
		physicalInterfaceCountFlagName = "physicalInterfaceCount"
	} else {
		physicalInterfaceCountFlagName = fmt.Sprintf("%v.physicalInterfaceCount", cmdPrefix)
	}

	var physicalInterfaceCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(physicalInterfaceCountFlagName, physicalInterfaceCountFlagDefault, physicalInterfaceCountDescription)

	return nil
}

func registerBoardInfoPhysicalInterfaceMACAddresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: physicalInterfaceMACAddresses PhysicalInterfaceMACAddresses array type is not supported by go-swagger cli yet

	return nil
}

func registerBoardInfoProduct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	productDescription := `Required. `

	var productFlagName string
	if cmdPrefix == "" {
		productFlagName = "product"
	} else {
		productFlagName = fmt.Sprintf("%v.product", cmdPrefix)
	}

	var productFlagDefault string

	_ = cmd.PersistentFlags().String(productFlagName, productFlagDefault, productDescription)

	return nil
}

func registerBoardInfoRadio1(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var radio1FlagName string
	if cmdPrefix == "" {
		radio1FlagName = "radio1"
	} else {
		radio1FlagName = fmt.Sprintf("%v.radio1", cmdPrefix)
	}

	if err := registerModelRadio1Flags(depth+1, radio1FlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBoardInfoRebootTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rebootTimeoutDescription := `Required. `

	var rebootTimeoutFlagName string
	if cmdPrefix == "" {
		rebootTimeoutFlagName = "rebootTimeout"
	} else {
		rebootTimeoutFlagName = fmt.Sprintf("%v.rebootTimeout", cmdPrefix)
	}

	var rebootTimeoutFlagDefault float64

	_ = cmd.PersistentFlags().Float64(rebootTimeoutFlagName, rebootTimeoutFlagDefault, rebootTimeoutDescription)

	return nil
}

func registerBoardInfoUpgradeTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	upgradeTimeoutDescription := `Required. `

	var upgradeTimeoutFlagName string
	if cmdPrefix == "" {
		upgradeTimeoutFlagName = "upgradeTimeout"
	} else {
		upgradeTimeoutFlagName = fmt.Sprintf("%v.upgradeTimeout", cmdPrefix)
	}

	var upgradeTimeoutFlagDefault float64

	_ = cmd.PersistentFlags().Float64(upgradeTimeoutFlagName, upgradeTimeoutFlagDefault, upgradeTimeoutDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBoardInfoFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, autoChannelWidthListAdded := retrieveBoardInfoAutoChannelWidthListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoChannelWidthListAdded

	err, isExternalResetSupportedAdded := retrieveBoardInfoIsExternalResetSupportedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isExternalResetSupportedAdded

	err, ledCountAdded := retrieveBoardInfoLedCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ledCountAdded

	err, modelAdded := retrieveBoardInfoModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, physicalInterfaceCountAdded := retrieveBoardInfoPhysicalInterfaceCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || physicalInterfaceCountAdded

	err, physicalInterfaceMACAddressesAdded := retrieveBoardInfoPhysicalInterfaceMACAddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || physicalInterfaceMACAddressesAdded

	err, productAdded := retrieveBoardInfoProductFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || productAdded

	err, radio1Added := retrieveBoardInfoRadio1Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || radio1Added

	err, rebootTimeoutAdded := retrieveBoardInfoRebootTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rebootTimeoutAdded

	err, upgradeTimeoutAdded := retrieveBoardInfoUpgradeTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradeTimeoutAdded

	return nil, retAdded
}

func retrieveBoardInfoAutoChannelWidthListFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoChannelWidthListFlagName := fmt.Sprintf("%v.autoChannelWidthList", cmdPrefix)
	if cmd.Flags().Changed(autoChannelWidthListFlagName) {
		// warning: autoChannelWidthList array type AutoChannelWidthList is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBoardInfoIsExternalResetSupportedFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isExternalResetSupportedFlagName := fmt.Sprintf("%v.isExternalResetSupported", cmdPrefix)
	if cmd.Flags().Changed(isExternalResetSupportedFlagName) {

		var isExternalResetSupportedFlagName string
		if cmdPrefix == "" {
			isExternalResetSupportedFlagName = "isExternalResetSupported"
		} else {
			isExternalResetSupportedFlagName = fmt.Sprintf("%v.isExternalResetSupported", cmdPrefix)
		}

		isExternalResetSupportedFlagValue, err := cmd.Flags().GetBool(isExternalResetSupportedFlagName)
		if err != nil {
			return err, false
		}
		m.IsExternalResetSupported = &isExternalResetSupportedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBoardInfoLedCountFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ledCountFlagName := fmt.Sprintf("%v.ledCount", cmdPrefix)
	if cmd.Flags().Changed(ledCountFlagName) {

		var ledCountFlagName string
		if cmdPrefix == "" {
			ledCountFlagName = "ledCount"
		} else {
			ledCountFlagName = fmt.Sprintf("%v.ledCount", cmdPrefix)
		}

		ledCountFlagValue, err := cmd.Flags().GetFloat64(ledCountFlagName)
		if err != nil {
			return err, false
		}
		m.LedCount = &ledCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBoardInfoModelFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = &modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBoardInfoPhysicalInterfaceCountFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	physicalInterfaceCountFlagName := fmt.Sprintf("%v.physicalInterfaceCount", cmdPrefix)
	if cmd.Flags().Changed(physicalInterfaceCountFlagName) {

		var physicalInterfaceCountFlagName string
		if cmdPrefix == "" {
			physicalInterfaceCountFlagName = "physicalInterfaceCount"
		} else {
			physicalInterfaceCountFlagName = fmt.Sprintf("%v.physicalInterfaceCount", cmdPrefix)
		}

		physicalInterfaceCountFlagValue, err := cmd.Flags().GetFloat64(physicalInterfaceCountFlagName)
		if err != nil {
			return err, false
		}
		m.PhysicalInterfaceCount = &physicalInterfaceCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBoardInfoPhysicalInterfaceMACAddressesFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	physicalInterfaceMACAddressesFlagName := fmt.Sprintf("%v.physicalInterfaceMACAddresses", cmdPrefix)
	if cmd.Flags().Changed(physicalInterfaceMACAddressesFlagName) {
		// warning: physicalInterfaceMACAddresses array type PhysicalInterfaceMACAddresses is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBoardInfoProductFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	productFlagName := fmt.Sprintf("%v.product", cmdPrefix)
	if cmd.Flags().Changed(productFlagName) {

		var productFlagName string
		if cmdPrefix == "" {
			productFlagName = "product"
		} else {
			productFlagName = fmt.Sprintf("%v.product", cmdPrefix)
		}

		productFlagValue, err := cmd.Flags().GetString(productFlagName)
		if err != nil {
			return err, false
		}
		m.Product = &productFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBoardInfoRadio1Flags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	radio1FlagName := fmt.Sprintf("%v.radio1", cmdPrefix)
	if cmd.Flags().Changed(radio1FlagName) {
		// info: complex object radio1 Radio1 is retrieved outside this Changed() block
	}
	radio1FlagValue := m.Radio1
	if swag.IsZero(radio1FlagValue) {
		radio1FlagValue = &models.Radio1{}
	}

	err, radio1Added := retrieveModelRadio1Flags(depth+1, radio1FlagValue, radio1FlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || radio1Added
	if radio1Added {
		m.Radio1 = radio1FlagValue
	}

	return nil, retAdded
}

func retrieveBoardInfoRebootTimeoutFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rebootTimeoutFlagName := fmt.Sprintf("%v.rebootTimeout", cmdPrefix)
	if cmd.Flags().Changed(rebootTimeoutFlagName) {

		var rebootTimeoutFlagName string
		if cmdPrefix == "" {
			rebootTimeoutFlagName = "rebootTimeout"
		} else {
			rebootTimeoutFlagName = fmt.Sprintf("%v.rebootTimeout", cmdPrefix)
		}

		rebootTimeoutFlagValue, err := cmd.Flags().GetFloat64(rebootTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.RebootTimeout = &rebootTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBoardInfoUpgradeTimeoutFlags(depth int, m *models.BoardInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upgradeTimeoutFlagName := fmt.Sprintf("%v.upgradeTimeout", cmdPrefix)
	if cmd.Flags().Changed(upgradeTimeoutFlagName) {

		var upgradeTimeoutFlagName string
		if cmdPrefix == "" {
			upgradeTimeoutFlagName = "upgradeTimeout"
		} else {
			upgradeTimeoutFlagName = fmt.Sprintf("%v.upgradeTimeout", cmdPrefix)
		}

		upgradeTimeoutFlagValue, err := cmd.Flags().GetFloat64(upgradeTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.UpgradeTimeout = &upgradeTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}
