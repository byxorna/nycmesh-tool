// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for ServerSummary

// register flags to command
func registerModelServerSummaryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServerSummaryActiveClientsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryActiveSitesCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryAllClientsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryAllSitesCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryAuthorizedUbntDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryBlackBoxesLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryDevicesDiscoveredCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryDevicesLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryDevicesUnauthorizedCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryFirmwareUpToDateness(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryFirmwareUpToDatenessLatest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryFirmwareUpToDatenessTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryFirmwaresUnreadCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryIspScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryLogsUnreadCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryMinimumRequiredDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryNetworkDesignScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryOutagesActiveCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryOutagesUnreadCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryRecentlyActiveDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummarySuperadminCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryUcrmClientsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServerSummaryUnreadBlogPostsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServerSummaryActiveClientsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	activeClientsCountDescription := ``

	var activeClientsCountFlagName string
	if cmdPrefix == "" {
		activeClientsCountFlagName = "activeClientsCount"
	} else {
		activeClientsCountFlagName = fmt.Sprintf("%v.activeClientsCount", cmdPrefix)
	}

	var activeClientsCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(activeClientsCountFlagName, activeClientsCountFlagDefault, activeClientsCountDescription)

	return nil
}

func registerServerSummaryActiveSitesCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	activeSitesCountDescription := ``

	var activeSitesCountFlagName string
	if cmdPrefix == "" {
		activeSitesCountFlagName = "activeSitesCount"
	} else {
		activeSitesCountFlagName = fmt.Sprintf("%v.activeSitesCount", cmdPrefix)
	}

	var activeSitesCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(activeSitesCountFlagName, activeSitesCountFlagDefault, activeSitesCountDescription)

	return nil
}

func registerServerSummaryAllClientsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allClientsCountDescription := ``

	var allClientsCountFlagName string
	if cmdPrefix == "" {
		allClientsCountFlagName = "allClientsCount"
	} else {
		allClientsCountFlagName = fmt.Sprintf("%v.allClientsCount", cmdPrefix)
	}

	var allClientsCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(allClientsCountFlagName, allClientsCountFlagDefault, allClientsCountDescription)

	return nil
}

func registerServerSummaryAllSitesCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	allSitesCountDescription := ``

	var allSitesCountFlagName string
	if cmdPrefix == "" {
		allSitesCountFlagName = "allSitesCount"
	} else {
		allSitesCountFlagName = fmt.Sprintf("%v.allSitesCount", cmdPrefix)
	}

	var allSitesCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(allSitesCountFlagName, allSitesCountFlagDefault, allSitesCountDescription)

	return nil
}

func registerServerSummaryAuthorizedUbntDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authorizedUbntDevicesDescription := ``

	var authorizedUbntDevicesFlagName string
	if cmdPrefix == "" {
		authorizedUbntDevicesFlagName = "authorizedUbntDevices"
	} else {
		authorizedUbntDevicesFlagName = fmt.Sprintf("%v.authorizedUbntDevices", cmdPrefix)
	}

	var authorizedUbntDevicesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(authorizedUbntDevicesFlagName, authorizedUbntDevicesFlagDefault, authorizedUbntDevicesDescription)

	return nil
}

func registerServerSummaryBlackBoxesLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	blackBoxesLimitDescription := ``

	var blackBoxesLimitFlagName string
	if cmdPrefix == "" {
		blackBoxesLimitFlagName = "blackBoxesLimit"
	} else {
		blackBoxesLimitFlagName = fmt.Sprintf("%v.blackBoxesLimit", cmdPrefix)
	}

	var blackBoxesLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(blackBoxesLimitFlagName, blackBoxesLimitFlagDefault, blackBoxesLimitDescription)

	return nil
}

func registerServerSummaryDevicesDiscoveredCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicesDiscoveredCountDescription := ``

	var devicesDiscoveredCountFlagName string
	if cmdPrefix == "" {
		devicesDiscoveredCountFlagName = "devicesDiscoveredCount"
	} else {
		devicesDiscoveredCountFlagName = fmt.Sprintf("%v.devicesDiscoveredCount", cmdPrefix)
	}

	var devicesDiscoveredCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(devicesDiscoveredCountFlagName, devicesDiscoveredCountFlagDefault, devicesDiscoveredCountDescription)

	return nil
}

func registerServerSummaryDevicesLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicesLimitDescription := ``

	var devicesLimitFlagName string
	if cmdPrefix == "" {
		devicesLimitFlagName = "devicesLimit"
	} else {
		devicesLimitFlagName = fmt.Sprintf("%v.devicesLimit", cmdPrefix)
	}

	var devicesLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(devicesLimitFlagName, devicesLimitFlagDefault, devicesLimitDescription)

	return nil
}

func registerServerSummaryDevicesUnauthorizedCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicesUnauthorizedCountDescription := ``

	var devicesUnauthorizedCountFlagName string
	if cmdPrefix == "" {
		devicesUnauthorizedCountFlagName = "devicesUnauthorizedCount"
	} else {
		devicesUnauthorizedCountFlagName = fmt.Sprintf("%v.devicesUnauthorizedCount", cmdPrefix)
	}

	var devicesUnauthorizedCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(devicesUnauthorizedCountFlagName, devicesUnauthorizedCountFlagDefault, devicesUnauthorizedCountDescription)

	return nil
}

func registerServerSummaryFirmwareUpToDateness(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firmwareUpToDatenessDescription := ``

	var firmwareUpToDatenessFlagName string
	if cmdPrefix == "" {
		firmwareUpToDatenessFlagName = "firmwareUpToDateness"
	} else {
		firmwareUpToDatenessFlagName = fmt.Sprintf("%v.firmwareUpToDateness", cmdPrefix)
	}

	var firmwareUpToDatenessFlagDefault float64

	_ = cmd.PersistentFlags().Float64(firmwareUpToDatenessFlagName, firmwareUpToDatenessFlagDefault, firmwareUpToDatenessDescription)

	return nil
}

func registerServerSummaryFirmwareUpToDatenessLatest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firmwareUpToDatenessLatestDescription := ``

	var firmwareUpToDatenessLatestFlagName string
	if cmdPrefix == "" {
		firmwareUpToDatenessLatestFlagName = "firmwareUpToDatenessLatest"
	} else {
		firmwareUpToDatenessLatestFlagName = fmt.Sprintf("%v.firmwareUpToDatenessLatest", cmdPrefix)
	}

	var firmwareUpToDatenessLatestFlagDefault int64

	_ = cmd.PersistentFlags().Int64(firmwareUpToDatenessLatestFlagName, firmwareUpToDatenessLatestFlagDefault, firmwareUpToDatenessLatestDescription)

	return nil
}

func registerServerSummaryFirmwareUpToDatenessTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firmwareUpToDatenessTotalDescription := ``

	var firmwareUpToDatenessTotalFlagName string
	if cmdPrefix == "" {
		firmwareUpToDatenessTotalFlagName = "firmwareUpToDatenessTotal"
	} else {
		firmwareUpToDatenessTotalFlagName = fmt.Sprintf("%v.firmwareUpToDatenessTotal", cmdPrefix)
	}

	var firmwareUpToDatenessTotalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(firmwareUpToDatenessTotalFlagName, firmwareUpToDatenessTotalFlagDefault, firmwareUpToDatenessTotalDescription)

	return nil
}

func registerServerSummaryFirmwaresUnreadCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firmwaresUnreadCountDescription := ``

	var firmwaresUnreadCountFlagName string
	if cmdPrefix == "" {
		firmwaresUnreadCountFlagName = "firmwaresUnreadCount"
	} else {
		firmwaresUnreadCountFlagName = fmt.Sprintf("%v.firmwaresUnreadCount", cmdPrefix)
	}

	var firmwaresUnreadCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(firmwaresUnreadCountFlagName, firmwaresUnreadCountFlagDefault, firmwaresUnreadCountDescription)

	return nil
}

func registerServerSummaryIspScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ispScoreDescription := ``

	var ispScoreFlagName string
	if cmdPrefix == "" {
		ispScoreFlagName = "ispScore"
	} else {
		ispScoreFlagName = fmt.Sprintf("%v.ispScore", cmdPrefix)
	}

	var ispScoreFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ispScoreFlagName, ispScoreFlagDefault, ispScoreDescription)

	return nil
}

func registerServerSummaryLogsUnreadCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logsUnreadCountDescription := ``

	var logsUnreadCountFlagName string
	if cmdPrefix == "" {
		logsUnreadCountFlagName = "logsUnreadCount"
	} else {
		logsUnreadCountFlagName = fmt.Sprintf("%v.logsUnreadCount", cmdPrefix)
	}

	var logsUnreadCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(logsUnreadCountFlagName, logsUnreadCountFlagDefault, logsUnreadCountDescription)

	return nil
}

func registerServerSummaryMinimumRequiredDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minimumRequiredDevicesDescription := ``

	var minimumRequiredDevicesFlagName string
	if cmdPrefix == "" {
		minimumRequiredDevicesFlagName = "minimumRequiredDevices"
	} else {
		minimumRequiredDevicesFlagName = fmt.Sprintf("%v.minimumRequiredDevices", cmdPrefix)
	}

	var minimumRequiredDevicesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(minimumRequiredDevicesFlagName, minimumRequiredDevicesFlagDefault, minimumRequiredDevicesDescription)

	return nil
}

func registerServerSummaryNetworkDesignScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	networkDesignScoreDescription := ``

	var networkDesignScoreFlagName string
	if cmdPrefix == "" {
		networkDesignScoreFlagName = "networkDesignScore"
	} else {
		networkDesignScoreFlagName = fmt.Sprintf("%v.networkDesignScore", cmdPrefix)
	}

	var networkDesignScoreFlagDefault float64

	_ = cmd.PersistentFlags().Float64(networkDesignScoreFlagName, networkDesignScoreFlagDefault, networkDesignScoreDescription)

	return nil
}

func registerServerSummaryOutagesActiveCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	outagesActiveCountDescription := ``

	var outagesActiveCountFlagName string
	if cmdPrefix == "" {
		outagesActiveCountFlagName = "outagesActiveCount"
	} else {
		outagesActiveCountFlagName = fmt.Sprintf("%v.outagesActiveCount", cmdPrefix)
	}

	var outagesActiveCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(outagesActiveCountFlagName, outagesActiveCountFlagDefault, outagesActiveCountDescription)

	return nil
}

func registerServerSummaryOutagesUnreadCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	outagesUnreadCountDescription := ``

	var outagesUnreadCountFlagName string
	if cmdPrefix == "" {
		outagesUnreadCountFlagName = "outagesUnreadCount"
	} else {
		outagesUnreadCountFlagName = fmt.Sprintf("%v.outagesUnreadCount", cmdPrefix)
	}

	var outagesUnreadCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(outagesUnreadCountFlagName, outagesUnreadCountFlagDefault, outagesUnreadCountDescription)

	return nil
}

func registerServerSummaryRecentlyActiveDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	recentlyActiveDevicesDescription := ``

	var recentlyActiveDevicesFlagName string
	if cmdPrefix == "" {
		recentlyActiveDevicesFlagName = "recentlyActiveDevices"
	} else {
		recentlyActiveDevicesFlagName = fmt.Sprintf("%v.recentlyActiveDevices", cmdPrefix)
	}

	var recentlyActiveDevicesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(recentlyActiveDevicesFlagName, recentlyActiveDevicesFlagDefault, recentlyActiveDevicesDescription)

	return nil
}

func registerServerSummarySuperadminCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	superadminCountDescription := ``

	var superadminCountFlagName string
	if cmdPrefix == "" {
		superadminCountFlagName = "superadminCount"
	} else {
		superadminCountFlagName = fmt.Sprintf("%v.superadminCount", cmdPrefix)
	}

	var superadminCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(superadminCountFlagName, superadminCountFlagDefault, superadminCountDescription)

	return nil
}

func registerServerSummaryUcrmClientsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ucrmClientsCountDescription := ``

	var ucrmClientsCountFlagName string
	if cmdPrefix == "" {
		ucrmClientsCountFlagName = "ucrmClientsCount"
	} else {
		ucrmClientsCountFlagName = fmt.Sprintf("%v.ucrmClientsCount", cmdPrefix)
	}

	var ucrmClientsCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ucrmClientsCountFlagName, ucrmClientsCountFlagDefault, ucrmClientsCountDescription)

	return nil
}

func registerServerSummaryUnreadBlogPostsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unreadBlogPostsCountDescription := ``

	var unreadBlogPostsCountFlagName string
	if cmdPrefix == "" {
		unreadBlogPostsCountFlagName = "unreadBlogPostsCount"
	} else {
		unreadBlogPostsCountFlagName = fmt.Sprintf("%v.unreadBlogPostsCount", cmdPrefix)
	}

	var unreadBlogPostsCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(unreadBlogPostsCountFlagName, unreadBlogPostsCountFlagDefault, unreadBlogPostsCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServerSummaryFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, activeClientsCountAdded := retrieveServerSummaryActiveClientsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || activeClientsCountAdded

	err, activeSitesCountAdded := retrieveServerSummaryActiveSitesCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || activeSitesCountAdded

	err, allClientsCountAdded := retrieveServerSummaryAllClientsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allClientsCountAdded

	err, allSitesCountAdded := retrieveServerSummaryAllSitesCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allSitesCountAdded

	err, authorizedUbntDevicesAdded := retrieveServerSummaryAuthorizedUbntDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorizedUbntDevicesAdded

	err, blackBoxesLimitAdded := retrieveServerSummaryBlackBoxesLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blackBoxesLimitAdded

	err, devicesDiscoveredCountAdded := retrieveServerSummaryDevicesDiscoveredCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicesDiscoveredCountAdded

	err, devicesLimitAdded := retrieveServerSummaryDevicesLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicesLimitAdded

	err, devicesUnauthorizedCountAdded := retrieveServerSummaryDevicesUnauthorizedCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicesUnauthorizedCountAdded

	err, firmwareUpToDatenessAdded := retrieveServerSummaryFirmwareUpToDatenessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareUpToDatenessAdded

	err, firmwareUpToDatenessLatestAdded := retrieveServerSummaryFirmwareUpToDatenessLatestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareUpToDatenessLatestAdded

	err, firmwareUpToDatenessTotalAdded := retrieveServerSummaryFirmwareUpToDatenessTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareUpToDatenessTotalAdded

	err, firmwaresUnreadCountAdded := retrieveServerSummaryFirmwaresUnreadCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwaresUnreadCountAdded

	err, ispScoreAdded := retrieveServerSummaryIspScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ispScoreAdded

	err, logsUnreadCountAdded := retrieveServerSummaryLogsUnreadCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logsUnreadCountAdded

	err, minimumRequiredDevicesAdded := retrieveServerSummaryMinimumRequiredDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minimumRequiredDevicesAdded

	err, networkDesignScoreAdded := retrieveServerSummaryNetworkDesignScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkDesignScoreAdded

	err, outagesActiveCountAdded := retrieveServerSummaryOutagesActiveCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outagesActiveCountAdded

	err, outagesUnreadCountAdded := retrieveServerSummaryOutagesUnreadCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outagesUnreadCountAdded

	err, recentlyActiveDevicesAdded := retrieveServerSummaryRecentlyActiveDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || recentlyActiveDevicesAdded

	err, superadminCountAdded := retrieveServerSummarySuperadminCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || superadminCountAdded

	err, ucrmClientsCountAdded := retrieveServerSummaryUcrmClientsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ucrmClientsCountAdded

	err, unreadBlogPostsCountAdded := retrieveServerSummaryUnreadBlogPostsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unreadBlogPostsCountAdded

	return nil, retAdded
}

func retrieveServerSummaryActiveClientsCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	activeClientsCountFlagName := fmt.Sprintf("%v.activeClientsCount", cmdPrefix)
	if cmd.Flags().Changed(activeClientsCountFlagName) {

		var activeClientsCountFlagName string
		if cmdPrefix == "" {
			activeClientsCountFlagName = "activeClientsCount"
		} else {
			activeClientsCountFlagName = fmt.Sprintf("%v.activeClientsCount", cmdPrefix)
		}

		activeClientsCountFlagValue, err := cmd.Flags().GetInt64(activeClientsCountFlagName)
		if err != nil {
			return err, false
		}
		m.ActiveClientsCount = activeClientsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryActiveSitesCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	activeSitesCountFlagName := fmt.Sprintf("%v.activeSitesCount", cmdPrefix)
	if cmd.Flags().Changed(activeSitesCountFlagName) {

		var activeSitesCountFlagName string
		if cmdPrefix == "" {
			activeSitesCountFlagName = "activeSitesCount"
		} else {
			activeSitesCountFlagName = fmt.Sprintf("%v.activeSitesCount", cmdPrefix)
		}

		activeSitesCountFlagValue, err := cmd.Flags().GetInt64(activeSitesCountFlagName)
		if err != nil {
			return err, false
		}
		m.ActiveSitesCount = activeSitesCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryAllClientsCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allClientsCountFlagName := fmt.Sprintf("%v.allClientsCount", cmdPrefix)
	if cmd.Flags().Changed(allClientsCountFlagName) {

		var allClientsCountFlagName string
		if cmdPrefix == "" {
			allClientsCountFlagName = "allClientsCount"
		} else {
			allClientsCountFlagName = fmt.Sprintf("%v.allClientsCount", cmdPrefix)
		}

		allClientsCountFlagValue, err := cmd.Flags().GetInt64(allClientsCountFlagName)
		if err != nil {
			return err, false
		}
		m.AllClientsCount = allClientsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryAllSitesCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allSitesCountFlagName := fmt.Sprintf("%v.allSitesCount", cmdPrefix)
	if cmd.Flags().Changed(allSitesCountFlagName) {

		var allSitesCountFlagName string
		if cmdPrefix == "" {
			allSitesCountFlagName = "allSitesCount"
		} else {
			allSitesCountFlagName = fmt.Sprintf("%v.allSitesCount", cmdPrefix)
		}

		allSitesCountFlagValue, err := cmd.Flags().GetInt64(allSitesCountFlagName)
		if err != nil {
			return err, false
		}
		m.AllSitesCount = allSitesCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryAuthorizedUbntDevicesFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorizedUbntDevicesFlagName := fmt.Sprintf("%v.authorizedUbntDevices", cmdPrefix)
	if cmd.Flags().Changed(authorizedUbntDevicesFlagName) {

		var authorizedUbntDevicesFlagName string
		if cmdPrefix == "" {
			authorizedUbntDevicesFlagName = "authorizedUbntDevices"
		} else {
			authorizedUbntDevicesFlagName = fmt.Sprintf("%v.authorizedUbntDevices", cmdPrefix)
		}

		authorizedUbntDevicesFlagValue, err := cmd.Flags().GetInt64(authorizedUbntDevicesFlagName)
		if err != nil {
			return err, false
		}
		m.AuthorizedUbntDevices = authorizedUbntDevicesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryBlackBoxesLimitFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	blackBoxesLimitFlagName := fmt.Sprintf("%v.blackBoxesLimit", cmdPrefix)
	if cmd.Flags().Changed(blackBoxesLimitFlagName) {

		var blackBoxesLimitFlagName string
		if cmdPrefix == "" {
			blackBoxesLimitFlagName = "blackBoxesLimit"
		} else {
			blackBoxesLimitFlagName = fmt.Sprintf("%v.blackBoxesLimit", cmdPrefix)
		}

		blackBoxesLimitFlagValue, err := cmd.Flags().GetInt64(blackBoxesLimitFlagName)
		if err != nil {
			return err, false
		}
		m.BlackBoxesLimit = blackBoxesLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryDevicesDiscoveredCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicesDiscoveredCountFlagName := fmt.Sprintf("%v.devicesDiscoveredCount", cmdPrefix)
	if cmd.Flags().Changed(devicesDiscoveredCountFlagName) {

		var devicesDiscoveredCountFlagName string
		if cmdPrefix == "" {
			devicesDiscoveredCountFlagName = "devicesDiscoveredCount"
		} else {
			devicesDiscoveredCountFlagName = fmt.Sprintf("%v.devicesDiscoveredCount", cmdPrefix)
		}

		devicesDiscoveredCountFlagValue, err := cmd.Flags().GetInt64(devicesDiscoveredCountFlagName)
		if err != nil {
			return err, false
		}
		m.DevicesDiscoveredCount = devicesDiscoveredCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryDevicesLimitFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicesLimitFlagName := fmt.Sprintf("%v.devicesLimit", cmdPrefix)
	if cmd.Flags().Changed(devicesLimitFlagName) {

		var devicesLimitFlagName string
		if cmdPrefix == "" {
			devicesLimitFlagName = "devicesLimit"
		} else {
			devicesLimitFlagName = fmt.Sprintf("%v.devicesLimit", cmdPrefix)
		}

		devicesLimitFlagValue, err := cmd.Flags().GetInt64(devicesLimitFlagName)
		if err != nil {
			return err, false
		}
		m.DevicesLimit = devicesLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryDevicesUnauthorizedCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicesUnauthorizedCountFlagName := fmt.Sprintf("%v.devicesUnauthorizedCount", cmdPrefix)
	if cmd.Flags().Changed(devicesUnauthorizedCountFlagName) {

		var devicesUnauthorizedCountFlagName string
		if cmdPrefix == "" {
			devicesUnauthorizedCountFlagName = "devicesUnauthorizedCount"
		} else {
			devicesUnauthorizedCountFlagName = fmt.Sprintf("%v.devicesUnauthorizedCount", cmdPrefix)
		}

		devicesUnauthorizedCountFlagValue, err := cmd.Flags().GetInt64(devicesUnauthorizedCountFlagName)
		if err != nil {
			return err, false
		}
		m.DevicesUnauthorizedCount = devicesUnauthorizedCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryFirmwareUpToDatenessFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareUpToDatenessFlagName := fmt.Sprintf("%v.firmwareUpToDateness", cmdPrefix)
	if cmd.Flags().Changed(firmwareUpToDatenessFlagName) {

		var firmwareUpToDatenessFlagName string
		if cmdPrefix == "" {
			firmwareUpToDatenessFlagName = "firmwareUpToDateness"
		} else {
			firmwareUpToDatenessFlagName = fmt.Sprintf("%v.firmwareUpToDateness", cmdPrefix)
		}

		firmwareUpToDatenessFlagValue, err := cmd.Flags().GetFloat64(firmwareUpToDatenessFlagName)
		if err != nil {
			return err, false
		}
		m.FirmwareUpToDateness = firmwareUpToDatenessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryFirmwareUpToDatenessLatestFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareUpToDatenessLatestFlagName := fmt.Sprintf("%v.firmwareUpToDatenessLatest", cmdPrefix)
	if cmd.Flags().Changed(firmwareUpToDatenessLatestFlagName) {

		var firmwareUpToDatenessLatestFlagName string
		if cmdPrefix == "" {
			firmwareUpToDatenessLatestFlagName = "firmwareUpToDatenessLatest"
		} else {
			firmwareUpToDatenessLatestFlagName = fmt.Sprintf("%v.firmwareUpToDatenessLatest", cmdPrefix)
		}

		firmwareUpToDatenessLatestFlagValue, err := cmd.Flags().GetInt64(firmwareUpToDatenessLatestFlagName)
		if err != nil {
			return err, false
		}
		m.FirmwareUpToDatenessLatest = firmwareUpToDatenessLatestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryFirmwareUpToDatenessTotalFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareUpToDatenessTotalFlagName := fmt.Sprintf("%v.firmwareUpToDatenessTotal", cmdPrefix)
	if cmd.Flags().Changed(firmwareUpToDatenessTotalFlagName) {

		var firmwareUpToDatenessTotalFlagName string
		if cmdPrefix == "" {
			firmwareUpToDatenessTotalFlagName = "firmwareUpToDatenessTotal"
		} else {
			firmwareUpToDatenessTotalFlagName = fmt.Sprintf("%v.firmwareUpToDatenessTotal", cmdPrefix)
		}

		firmwareUpToDatenessTotalFlagValue, err := cmd.Flags().GetInt64(firmwareUpToDatenessTotalFlagName)
		if err != nil {
			return err, false
		}
		m.FirmwareUpToDatenessTotal = firmwareUpToDatenessTotalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryFirmwaresUnreadCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwaresUnreadCountFlagName := fmt.Sprintf("%v.firmwaresUnreadCount", cmdPrefix)
	if cmd.Flags().Changed(firmwaresUnreadCountFlagName) {

		var firmwaresUnreadCountFlagName string
		if cmdPrefix == "" {
			firmwaresUnreadCountFlagName = "firmwaresUnreadCount"
		} else {
			firmwaresUnreadCountFlagName = fmt.Sprintf("%v.firmwaresUnreadCount", cmdPrefix)
		}

		firmwaresUnreadCountFlagValue, err := cmd.Flags().GetInt64(firmwaresUnreadCountFlagName)
		if err != nil {
			return err, false
		}
		m.FirmwaresUnreadCount = firmwaresUnreadCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryIspScoreFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ispScoreFlagName := fmt.Sprintf("%v.ispScore", cmdPrefix)
	if cmd.Flags().Changed(ispScoreFlagName) {

		var ispScoreFlagName string
		if cmdPrefix == "" {
			ispScoreFlagName = "ispScore"
		} else {
			ispScoreFlagName = fmt.Sprintf("%v.ispScore", cmdPrefix)
		}

		ispScoreFlagValue, err := cmd.Flags().GetFloat64(ispScoreFlagName)
		if err != nil {
			return err, false
		}
		m.IspScore = ispScoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryLogsUnreadCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logsUnreadCountFlagName := fmt.Sprintf("%v.logsUnreadCount", cmdPrefix)
	if cmd.Flags().Changed(logsUnreadCountFlagName) {

		var logsUnreadCountFlagName string
		if cmdPrefix == "" {
			logsUnreadCountFlagName = "logsUnreadCount"
		} else {
			logsUnreadCountFlagName = fmt.Sprintf("%v.logsUnreadCount", cmdPrefix)
		}

		logsUnreadCountFlagValue, err := cmd.Flags().GetInt64(logsUnreadCountFlagName)
		if err != nil {
			return err, false
		}
		m.LogsUnreadCount = logsUnreadCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryMinimumRequiredDevicesFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minimumRequiredDevicesFlagName := fmt.Sprintf("%v.minimumRequiredDevices", cmdPrefix)
	if cmd.Flags().Changed(minimumRequiredDevicesFlagName) {

		var minimumRequiredDevicesFlagName string
		if cmdPrefix == "" {
			minimumRequiredDevicesFlagName = "minimumRequiredDevices"
		} else {
			minimumRequiredDevicesFlagName = fmt.Sprintf("%v.minimumRequiredDevices", cmdPrefix)
		}

		minimumRequiredDevicesFlagValue, err := cmd.Flags().GetInt64(minimumRequiredDevicesFlagName)
		if err != nil {
			return err, false
		}
		m.MinimumRequiredDevices = minimumRequiredDevicesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryNetworkDesignScoreFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkDesignScoreFlagName := fmt.Sprintf("%v.networkDesignScore", cmdPrefix)
	if cmd.Flags().Changed(networkDesignScoreFlagName) {

		var networkDesignScoreFlagName string
		if cmdPrefix == "" {
			networkDesignScoreFlagName = "networkDesignScore"
		} else {
			networkDesignScoreFlagName = fmt.Sprintf("%v.networkDesignScore", cmdPrefix)
		}

		networkDesignScoreFlagValue, err := cmd.Flags().GetFloat64(networkDesignScoreFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkDesignScore = networkDesignScoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryOutagesActiveCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outagesActiveCountFlagName := fmt.Sprintf("%v.outagesActiveCount", cmdPrefix)
	if cmd.Flags().Changed(outagesActiveCountFlagName) {

		var outagesActiveCountFlagName string
		if cmdPrefix == "" {
			outagesActiveCountFlagName = "outagesActiveCount"
		} else {
			outagesActiveCountFlagName = fmt.Sprintf("%v.outagesActiveCount", cmdPrefix)
		}

		outagesActiveCountFlagValue, err := cmd.Flags().GetInt64(outagesActiveCountFlagName)
		if err != nil {
			return err, false
		}
		m.OutagesActiveCount = outagesActiveCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryOutagesUnreadCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outagesUnreadCountFlagName := fmt.Sprintf("%v.outagesUnreadCount", cmdPrefix)
	if cmd.Flags().Changed(outagesUnreadCountFlagName) {

		var outagesUnreadCountFlagName string
		if cmdPrefix == "" {
			outagesUnreadCountFlagName = "outagesUnreadCount"
		} else {
			outagesUnreadCountFlagName = fmt.Sprintf("%v.outagesUnreadCount", cmdPrefix)
		}

		outagesUnreadCountFlagValue, err := cmd.Flags().GetInt64(outagesUnreadCountFlagName)
		if err != nil {
			return err, false
		}
		m.OutagesUnreadCount = outagesUnreadCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryRecentlyActiveDevicesFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	recentlyActiveDevicesFlagName := fmt.Sprintf("%v.recentlyActiveDevices", cmdPrefix)
	if cmd.Flags().Changed(recentlyActiveDevicesFlagName) {

		var recentlyActiveDevicesFlagName string
		if cmdPrefix == "" {
			recentlyActiveDevicesFlagName = "recentlyActiveDevices"
		} else {
			recentlyActiveDevicesFlagName = fmt.Sprintf("%v.recentlyActiveDevices", cmdPrefix)
		}

		recentlyActiveDevicesFlagValue, err := cmd.Flags().GetInt64(recentlyActiveDevicesFlagName)
		if err != nil {
			return err, false
		}
		m.RecentlyActiveDevices = recentlyActiveDevicesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummarySuperadminCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	superadminCountFlagName := fmt.Sprintf("%v.superadminCount", cmdPrefix)
	if cmd.Flags().Changed(superadminCountFlagName) {

		var superadminCountFlagName string
		if cmdPrefix == "" {
			superadminCountFlagName = "superadminCount"
		} else {
			superadminCountFlagName = fmt.Sprintf("%v.superadminCount", cmdPrefix)
		}

		superadminCountFlagValue, err := cmd.Flags().GetInt64(superadminCountFlagName)
		if err != nil {
			return err, false
		}
		m.SuperadminCount = superadminCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryUcrmClientsCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ucrmClientsCountFlagName := fmt.Sprintf("%v.ucrmClientsCount", cmdPrefix)
	if cmd.Flags().Changed(ucrmClientsCountFlagName) {

		var ucrmClientsCountFlagName string
		if cmdPrefix == "" {
			ucrmClientsCountFlagName = "ucrmClientsCount"
		} else {
			ucrmClientsCountFlagName = fmt.Sprintf("%v.ucrmClientsCount", cmdPrefix)
		}

		ucrmClientsCountFlagValue, err := cmd.Flags().GetInt64(ucrmClientsCountFlagName)
		if err != nil {
			return err, false
		}
		m.UcrmClientsCount = ucrmClientsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServerSummaryUnreadBlogPostsCountFlags(depth int, m *models.ServerSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unreadBlogPostsCountFlagName := fmt.Sprintf("%v.unreadBlogPostsCount", cmdPrefix)
	if cmd.Flags().Changed(unreadBlogPostsCountFlagName) {

		var unreadBlogPostsCountFlagName string
		if cmdPrefix == "" {
			unreadBlogPostsCountFlagName = "unreadBlogPostsCount"
		} else {
			unreadBlogPostsCountFlagName = fmt.Sprintf("%v.unreadBlogPostsCount", cmdPrefix)
		}

		unreadBlogPostsCountFlagValue, err := cmd.Flags().GetInt64(unreadBlogPostsCountFlagName)
		if err != nil {
			return err, false
		}
		m.UnreadBlogPostsCount = unreadBlogPostsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
