// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceOverview

// register flags to command
func registerModelDeviceOverviewFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceOverviewAntenna(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewBatteryCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewBatteryTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewBiasCurrent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewCanUpgrade(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewConsumption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewDistance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewDownlinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewDownlinkUtilization(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewIsLocateRunning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewLastSeen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewLinkScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewMaximalPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewOutageScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewOutputPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewPowerStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewPsu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewRAM(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewRemoteSignalMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewRunningOnBattery(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewSignalMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewStationsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewTemperature(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewTheoreticalDownlinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewTheoreticalMaxDownlinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewTheoreticalMaxUplinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewTheoreticalUplinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewTransmitPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewUplinkCapacity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewUplinkUtilization(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewUptime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewVoltage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewWirelessActiveInterfaceIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceOverviewWirelessMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceOverviewAntenna(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var antennaFlagName string
	if cmdPrefix == "" {
		antennaFlagName = "antenna"
	} else {
		antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
	}

	if err := registerModelAntennaFlags(depth+1, antennaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceOverviewBatteryCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	batteryCapacityDescription := ``

	var batteryCapacityFlagName string
	if cmdPrefix == "" {
		batteryCapacityFlagName = "batteryCapacity"
	} else {
		batteryCapacityFlagName = fmt.Sprintf("%v.batteryCapacity", cmdPrefix)
	}

	var batteryCapacityFlagDefault float64

	_ = cmd.PersistentFlags().Float64(batteryCapacityFlagName, batteryCapacityFlagDefault, batteryCapacityDescription)

	return nil
}

func registerDeviceOverviewBatteryTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	batteryTimeDescription := ``

	var batteryTimeFlagName string
	if cmdPrefix == "" {
		batteryTimeFlagName = "batteryTime"
	} else {
		batteryTimeFlagName = fmt.Sprintf("%v.batteryTime", cmdPrefix)
	}

	var batteryTimeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(batteryTimeFlagName, batteryTimeFlagDefault, batteryTimeDescription)

	return nil
}

func registerDeviceOverviewBiasCurrent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	biasCurrentDescription := `Nullable property in milliamperes.`

	var biasCurrentFlagName string
	if cmdPrefix == "" {
		biasCurrentFlagName = "biasCurrent"
	} else {
		biasCurrentFlagName = fmt.Sprintf("%v.biasCurrent", cmdPrefix)
	}

	var biasCurrentFlagDefault float64

	_ = cmd.PersistentFlags().Float64(biasCurrentFlagName, biasCurrentFlagDefault, biasCurrentDescription)

	return nil
}

func registerDeviceOverviewCanUpgrade(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	canUpgradeDescription := `TRUE if device can be upgraded.`

	var canUpgradeFlagName string
	if cmdPrefix == "" {
		canUpgradeFlagName = "canUpgrade"
	} else {
		canUpgradeFlagName = fmt.Sprintf("%v.canUpgrade", cmdPrefix)
	}

	var canUpgradeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(canUpgradeFlagName, canUpgradeFlagDefault, canUpgradeDescription)

	return nil
}

func registerDeviceOverviewChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := ``

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerDeviceOverviewConsumption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	consumptionDescription := `Power consumption in Wh.`

	var consumptionFlagName string
	if cmdPrefix == "" {
		consumptionFlagName = "consumption"
	} else {
		consumptionFlagName = fmt.Sprintf("%v.consumption", cmdPrefix)
	}

	var consumptionFlagDefault float64

	_ = cmd.PersistentFlags().Float64(consumptionFlagName, consumptionFlagDefault, consumptionDescription)

	return nil
}

func registerDeviceOverviewCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuDescription := `Current cpu load.`

	var cpuFlagName string
	if cmdPrefix == "" {
		cpuFlagName = "cpu"
	} else {
		cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
	}

	var cpuFlagDefault float64

	_ = cmd.PersistentFlags().Float64(cpuFlagName, cpuFlagDefault, cpuDescription)

	return nil
}

func registerDeviceOverviewCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive createdAt strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerDeviceOverviewDistance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distanceDescription := `Nullable property in meters.Either distance between sites or distance returned from device AP.`

	var distanceFlagName string
	if cmdPrefix == "" {
		distanceFlagName = "distance"
	} else {
		distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
	}

	var distanceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(distanceFlagName, distanceFlagDefault, distanceDescription)

	return nil
}

func registerDeviceOverviewDownlinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downlinkCapacityDescription := ``

	var downlinkCapacityFlagName string
	if cmdPrefix == "" {
		downlinkCapacityFlagName = "downlinkCapacity"
	} else {
		downlinkCapacityFlagName = fmt.Sprintf("%v.downlinkCapacity", cmdPrefix)
	}

	var downlinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(downlinkCapacityFlagName, downlinkCapacityFlagDefault, downlinkCapacityDescription)

	return nil
}

func registerDeviceOverviewDownlinkUtilization(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	downlinkUtilizationDescription := ``

	var downlinkUtilizationFlagName string
	if cmdPrefix == "" {
		downlinkUtilizationFlagName = "downlinkUtilization"
	} else {
		downlinkUtilizationFlagName = fmt.Sprintf("%v.downlinkUtilization", cmdPrefix)
	}

	var downlinkUtilizationFlagDefault float64

	_ = cmd.PersistentFlags().Float64(downlinkUtilizationFlagName, downlinkUtilizationFlagDefault, downlinkUtilizationDescription)

	return nil
}

func registerDeviceOverviewFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := `Nullable prop; current frequency (only for airmax devices).`

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	return nil
}

func registerDeviceOverviewIsLocateRunning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isLocateRunningDescription := `TRUE if device is in location mode.`

	var isLocateRunningFlagName string
	if cmdPrefix == "" {
		isLocateRunningFlagName = "isLocateRunning"
	} else {
		isLocateRunningFlagName = fmt.Sprintf("%v.isLocateRunning", cmdPrefix)
	}

	var isLocateRunningFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isLocateRunningFlagName, isLocateRunningFlagDefault, isLocateRunningDescription)

	return nil
}

func registerDeviceOverviewLastSeen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive lastSeen strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerDeviceOverviewLinkScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var linkScoreFlagName string
	if cmdPrefix == "" {
		linkScoreFlagName = "linkScore"
	} else {
		linkScoreFlagName = fmt.Sprintf("%v.linkScore", cmdPrefix)
	}

	if err := registerModelLinkScoreFlags(depth+1, linkScoreFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceOverviewMaximalPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maximalPowerDescription := `Maximum power the device can currently provide in W.`

	var maximalPowerFlagName string
	if cmdPrefix == "" {
		maximalPowerFlagName = "maximalPower"
	} else {
		maximalPowerFlagName = fmt.Sprintf("%v.maximalPower", cmdPrefix)
	}

	var maximalPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(maximalPowerFlagName, maximalPowerFlagDefault, maximalPowerDescription)

	return nil
}

func registerDeviceOverviewOutageScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	outageScoreDescription := ``

	var outageScoreFlagName string
	if cmdPrefix == "" {
		outageScoreFlagName = "outageScore"
	} else {
		outageScoreFlagName = fmt.Sprintf("%v.outageScore", cmdPrefix)
	}

	var outageScoreFlagDefault float64

	_ = cmd.PersistentFlags().Float64(outageScoreFlagName, outageScoreFlagDefault, outageScoreDescription)

	return nil
}

func registerDeviceOverviewOutputPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	outputPowerDescription := `Power consumption in W.`

	var outputPowerFlagName string
	if cmdPrefix == "" {
		outputPowerFlagName = "outputPower"
	} else {
		outputPowerFlagName = fmt.Sprintf("%v.outputPower", cmdPrefix)
	}

	var outputPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(outputPowerFlagName, outputPowerFlagDefault, outputPowerDescription)

	return nil
}

func registerDeviceOverviewPowerStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	powerStatusDescription := ``

	var powerStatusFlagName string
	if cmdPrefix == "" {
		powerStatusFlagName = "powerStatus"
	} else {
		powerStatusFlagName = fmt.Sprintf("%v.powerStatus", cmdPrefix)
	}

	var powerStatusFlagDefault float64

	_ = cmd.PersistentFlags().Float64(powerStatusFlagName, powerStatusFlagDefault, powerStatusDescription)

	return nil
}

func registerDeviceOverviewPsu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: psu Psu array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceOverviewRAM(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ramDescription := `Current memory usage.`

	var ramFlagName string
	if cmdPrefix == "" {
		ramFlagName = "ram"
	} else {
		ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
	}

	var ramFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ramFlagName, ramFlagDefault, ramDescription)

	return nil
}

func registerDeviceOverviewRemoteSignalMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteSignalMaxDescription := `Theoretical max remote signal level.`

	var remoteSignalMaxFlagName string
	if cmdPrefix == "" {
		remoteSignalMaxFlagName = "remoteSignalMax"
	} else {
		remoteSignalMaxFlagName = fmt.Sprintf("%v.remoteSignalMax", cmdPrefix)
	}

	var remoteSignalMaxFlagDefault float64

	_ = cmd.PersistentFlags().Float64(remoteSignalMaxFlagName, remoteSignalMaxFlagDefault, remoteSignalMaxDescription)

	return nil
}

func registerDeviceOverviewRunningOnBattery(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runningOnBatteryDescription := `TRUE if device is running on battery`

	var runningOnBatteryFlagName string
	if cmdPrefix == "" {
		runningOnBatteryFlagName = "runningOnBattery"
	} else {
		runningOnBatteryFlagName = fmt.Sprintf("%v.runningOnBattery", cmdPrefix)
	}

	var runningOnBatteryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(runningOnBatteryFlagName, runningOnBatteryFlagDefault, runningOnBatteryDescription)

	return nil
}

func registerDeviceOverviewSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signalDescription := `Nullable prop; current signal level (only for airmax devices), for example -55 dBm.`

	var signalFlagName string
	if cmdPrefix == "" {
		signalFlagName = "signal"
	} else {
		signalFlagName = fmt.Sprintf("%v.signal", cmdPrefix)
	}

	var signalFlagDefault float64

	_ = cmd.PersistentFlags().Float64(signalFlagName, signalFlagDefault, signalDescription)

	return nil
}

func registerDeviceOverviewSignalMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signalMaxDescription := `Theoretical max local signal level.`

	var signalMaxFlagName string
	if cmdPrefix == "" {
		signalMaxFlagName = "signalMax"
	} else {
		signalMaxFlagName = fmt.Sprintf("%v.signalMax", cmdPrefix)
	}

	var signalMaxFlagDefault float64

	_ = cmd.PersistentFlags().Float64(signalMaxFlagName, signalMaxFlagDefault, signalMaxDescription)

	return nil
}

func registerDeviceOverviewStationsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stationsCountDescription := `Count of stations (only for airmax and aircube).`

	var stationsCountFlagName string
	if cmdPrefix == "" {
		stationsCountFlagName = "stationsCount"
	} else {
		stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
	}

	var stationsCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(stationsCountFlagName, stationsCountFlagDefault, stationsCountDescription)

	return nil
}

func registerDeviceOverviewStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Read-only value generated by UISP.`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerDeviceOverviewTemperature(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	temperatureDescription := ``

	var temperatureFlagName string
	if cmdPrefix == "" {
		temperatureFlagName = "temperature"
	} else {
		temperatureFlagName = fmt.Sprintf("%v.temperature", cmdPrefix)
	}

	var temperatureFlagDefault float64

	_ = cmd.PersistentFlags().Float64(temperatureFlagName, temperatureFlagDefault, temperatureDescription)

	return nil
}

func registerDeviceOverviewTheoreticalDownlinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	theoreticalDownlinkCapacityDescription := ``

	var theoreticalDownlinkCapacityFlagName string
	if cmdPrefix == "" {
		theoreticalDownlinkCapacityFlagName = "theoreticalDownlinkCapacity"
	} else {
		theoreticalDownlinkCapacityFlagName = fmt.Sprintf("%v.theoreticalDownlinkCapacity", cmdPrefix)
	}

	var theoreticalDownlinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(theoreticalDownlinkCapacityFlagName, theoreticalDownlinkCapacityFlagDefault, theoreticalDownlinkCapacityDescription)

	return nil
}

func registerDeviceOverviewTheoreticalMaxDownlinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	theoreticalMaxDownlinkCapacityDescription := ``

	var theoreticalMaxDownlinkCapacityFlagName string
	if cmdPrefix == "" {
		theoreticalMaxDownlinkCapacityFlagName = "theoreticalMaxDownlinkCapacity"
	} else {
		theoreticalMaxDownlinkCapacityFlagName = fmt.Sprintf("%v.theoreticalMaxDownlinkCapacity", cmdPrefix)
	}

	var theoreticalMaxDownlinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(theoreticalMaxDownlinkCapacityFlagName, theoreticalMaxDownlinkCapacityFlagDefault, theoreticalMaxDownlinkCapacityDescription)

	return nil
}

func registerDeviceOverviewTheoreticalMaxUplinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	theoreticalMaxUplinkCapacityDescription := ``

	var theoreticalMaxUplinkCapacityFlagName string
	if cmdPrefix == "" {
		theoreticalMaxUplinkCapacityFlagName = "theoreticalMaxUplinkCapacity"
	} else {
		theoreticalMaxUplinkCapacityFlagName = fmt.Sprintf("%v.theoreticalMaxUplinkCapacity", cmdPrefix)
	}

	var theoreticalMaxUplinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(theoreticalMaxUplinkCapacityFlagName, theoreticalMaxUplinkCapacityFlagDefault, theoreticalMaxUplinkCapacityDescription)

	return nil
}

func registerDeviceOverviewTheoreticalUplinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	theoreticalUplinkCapacityDescription := ``

	var theoreticalUplinkCapacityFlagName string
	if cmdPrefix == "" {
		theoreticalUplinkCapacityFlagName = "theoreticalUplinkCapacity"
	} else {
		theoreticalUplinkCapacityFlagName = fmt.Sprintf("%v.theoreticalUplinkCapacity", cmdPrefix)
	}

	var theoreticalUplinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(theoreticalUplinkCapacityFlagName, theoreticalUplinkCapacityFlagDefault, theoreticalUplinkCapacityDescription)

	return nil
}

func registerDeviceOverviewTransmitPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitPowerDescription := ``

	var transmitPowerFlagName string
	if cmdPrefix == "" {
		transmitPowerFlagName = "transmitPower"
	} else {
		transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
	}

	var transmitPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitPowerFlagName, transmitPowerFlagDefault, transmitPowerDescription)

	return nil
}

func registerDeviceOverviewUplinkCapacity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uplinkCapacityDescription := ``

	var uplinkCapacityFlagName string
	if cmdPrefix == "" {
		uplinkCapacityFlagName = "uplinkCapacity"
	} else {
		uplinkCapacityFlagName = fmt.Sprintf("%v.uplinkCapacity", cmdPrefix)
	}

	var uplinkCapacityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(uplinkCapacityFlagName, uplinkCapacityFlagDefault, uplinkCapacityDescription)

	return nil
}

func registerDeviceOverviewUplinkUtilization(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uplinkUtilizationDescription := ``

	var uplinkUtilizationFlagName string
	if cmdPrefix == "" {
		uplinkUtilizationFlagName = "uplinkUtilization"
	} else {
		uplinkUtilizationFlagName = fmt.Sprintf("%v.uplinkUtilization", cmdPrefix)
	}

	var uplinkUtilizationFlagDefault float64

	_ = cmd.PersistentFlags().Float64(uplinkUtilizationFlagName, uplinkUtilizationFlagDefault, uplinkUtilizationDescription)

	return nil
}

func registerDeviceOverviewUptime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uptimeDescription := `Uptime in seconds.`

	var uptimeFlagName string
	if cmdPrefix == "" {
		uptimeFlagName = "uptime"
	} else {
		uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
	}

	var uptimeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(uptimeFlagName, uptimeFlagDefault, uptimeDescription)

	return nil
}

func registerDeviceOverviewVoltage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	voltageDescription := `System input voltage in V.`

	var voltageFlagName string
	if cmdPrefix == "" {
		voltageFlagName = "voltage"
	} else {
		voltageFlagName = fmt.Sprintf("%v.voltage", cmdPrefix)
	}

	var voltageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(voltageFlagName, voltageFlagDefault, voltageDescription)

	return nil
}

func registerDeviceOverviewWirelessActiveInterfaceIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: wirelessActiveInterfaceIds WirelessActiveInterfaceIds array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceOverviewWirelessMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wirelessModeDescription := `Enum: ["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]. `

	var wirelessModeFlagName string
	if cmdPrefix == "" {
		wirelessModeFlagName = "wirelessMode"
	} else {
		wirelessModeFlagName = fmt.Sprintf("%v.wirelessMode", cmdPrefix)
	}

	var wirelessModeFlagDefault string

	_ = cmd.PersistentFlags().String(wirelessModeFlagName, wirelessModeFlagDefault, wirelessModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(wirelessModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceOverviewFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, antennaAdded := retrieveDeviceOverviewAntennaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded

	err, batteryCapacityAdded := retrieveDeviceOverviewBatteryCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || batteryCapacityAdded

	err, batteryTimeAdded := retrieveDeviceOverviewBatteryTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || batteryTimeAdded

	err, biasCurrentAdded := retrieveDeviceOverviewBiasCurrentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || biasCurrentAdded

	err, canUpgradeAdded := retrieveDeviceOverviewCanUpgradeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || canUpgradeAdded

	err, channelWidthAdded := retrieveDeviceOverviewChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, consumptionAdded := retrieveDeviceOverviewConsumptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || consumptionAdded

	err, cpuAdded := retrieveDeviceOverviewCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuAdded

	err, createdAtAdded := retrieveDeviceOverviewCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, distanceAdded := retrieveDeviceOverviewDistanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distanceAdded

	err, downlinkCapacityAdded := retrieveDeviceOverviewDownlinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downlinkCapacityAdded

	err, downlinkUtilizationAdded := retrieveDeviceOverviewDownlinkUtilizationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || downlinkUtilizationAdded

	err, frequencyAdded := retrieveDeviceOverviewFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, isLocateRunningAdded := retrieveDeviceOverviewIsLocateRunningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isLocateRunningAdded

	err, lastSeenAdded := retrieveDeviceOverviewLastSeenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastSeenAdded

	err, linkScoreAdded := retrieveDeviceOverviewLinkScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkScoreAdded

	err, maximalPowerAdded := retrieveDeviceOverviewMaximalPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maximalPowerAdded

	err, outageScoreAdded := retrieveDeviceOverviewOutageScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outageScoreAdded

	err, outputPowerAdded := retrieveDeviceOverviewOutputPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || outputPowerAdded

	err, powerStatusAdded := retrieveDeviceOverviewPowerStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || powerStatusAdded

	err, psuAdded := retrieveDeviceOverviewPsuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || psuAdded

	err, ramAdded := retrieveDeviceOverviewRAMFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ramAdded

	err, remoteSignalMaxAdded := retrieveDeviceOverviewRemoteSignalMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteSignalMaxAdded

	err, runningOnBatteryAdded := retrieveDeviceOverviewRunningOnBatteryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runningOnBatteryAdded

	err, signalAdded := retrieveDeviceOverviewSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalAdded

	err, signalMaxAdded := retrieveDeviceOverviewSignalMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalMaxAdded

	err, stationsCountAdded := retrieveDeviceOverviewStationsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationsCountAdded

	err, statusAdded := retrieveDeviceOverviewStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, temperatureAdded := retrieveDeviceOverviewTemperatureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || temperatureAdded

	err, theoreticalDownlinkCapacityAdded := retrieveDeviceOverviewTheoreticalDownlinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || theoreticalDownlinkCapacityAdded

	err, theoreticalMaxDownlinkCapacityAdded := retrieveDeviceOverviewTheoreticalMaxDownlinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || theoreticalMaxDownlinkCapacityAdded

	err, theoreticalMaxUplinkCapacityAdded := retrieveDeviceOverviewTheoreticalMaxUplinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || theoreticalMaxUplinkCapacityAdded

	err, theoreticalUplinkCapacityAdded := retrieveDeviceOverviewTheoreticalUplinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || theoreticalUplinkCapacityAdded

	err, transmitPowerAdded := retrieveDeviceOverviewTransmitPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitPowerAdded

	err, uplinkCapacityAdded := retrieveDeviceOverviewUplinkCapacityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uplinkCapacityAdded

	err, uplinkUtilizationAdded := retrieveDeviceOverviewUplinkUtilizationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uplinkUtilizationAdded

	err, uptimeAdded := retrieveDeviceOverviewUptimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uptimeAdded

	err, voltageAdded := retrieveDeviceOverviewVoltageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || voltageAdded

	err, wirelessActiveInterfaceIdsAdded := retrieveDeviceOverviewWirelessActiveInterfaceIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wirelessActiveInterfaceIdsAdded

	err, wirelessModeAdded := retrieveDeviceOverviewWirelessModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wirelessModeAdded

	return nil, retAdded
}

func retrieveDeviceOverviewAntennaFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaFlagName := fmt.Sprintf("%v.antenna", cmdPrefix)
	if cmd.Flags().Changed(antennaFlagName) {
		// info: complex object antenna Antenna is retrieved outside this Changed() block
	}
	antennaFlagValue := m.Antenna
	if swag.IsZero(antennaFlagValue) {
		antennaFlagValue = &models.Antenna{}
	}

	err, antennaAdded := retrieveModelAntennaFlags(depth+1, antennaFlagValue, antennaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded
	if antennaAdded {
		m.Antenna = antennaFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceOverviewBatteryCapacityFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	batteryCapacityFlagName := fmt.Sprintf("%v.batteryCapacity", cmdPrefix)
	if cmd.Flags().Changed(batteryCapacityFlagName) {

		var batteryCapacityFlagName string
		if cmdPrefix == "" {
			batteryCapacityFlagName = "batteryCapacity"
		} else {
			batteryCapacityFlagName = fmt.Sprintf("%v.batteryCapacity", cmdPrefix)
		}

		batteryCapacityFlagValue, err := cmd.Flags().GetFloat64(batteryCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.BatteryCapacity = batteryCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewBatteryTimeFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	batteryTimeFlagName := fmt.Sprintf("%v.batteryTime", cmdPrefix)
	if cmd.Flags().Changed(batteryTimeFlagName) {

		var batteryTimeFlagName string
		if cmdPrefix == "" {
			batteryTimeFlagName = "batteryTime"
		} else {
			batteryTimeFlagName = fmt.Sprintf("%v.batteryTime", cmdPrefix)
		}

		batteryTimeFlagValue, err := cmd.Flags().GetFloat64(batteryTimeFlagName)
		if err != nil {
			return err, false
		}
		m.BatteryTime = batteryTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewBiasCurrentFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	biasCurrentFlagName := fmt.Sprintf("%v.biasCurrent", cmdPrefix)
	if cmd.Flags().Changed(biasCurrentFlagName) {

		var biasCurrentFlagName string
		if cmdPrefix == "" {
			biasCurrentFlagName = "biasCurrent"
		} else {
			biasCurrentFlagName = fmt.Sprintf("%v.biasCurrent", cmdPrefix)
		}

		biasCurrentFlagValue, err := cmd.Flags().GetFloat64(biasCurrentFlagName)
		if err != nil {
			return err, false
		}
		m.BiasCurrent = biasCurrentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewCanUpgradeFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	canUpgradeFlagName := fmt.Sprintf("%v.canUpgrade", cmdPrefix)
	if cmd.Flags().Changed(canUpgradeFlagName) {

		var canUpgradeFlagName string
		if cmdPrefix == "" {
			canUpgradeFlagName = "canUpgrade"
		} else {
			canUpgradeFlagName = fmt.Sprintf("%v.canUpgrade", cmdPrefix)
		}

		canUpgradeFlagValue, err := cmd.Flags().GetBool(canUpgradeFlagName)
		if err != nil {
			return err, false
		}
		m.CanUpgrade = canUpgradeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewChannelWidthFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetFloat64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewConsumptionFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	consumptionFlagName := fmt.Sprintf("%v.consumption", cmdPrefix)
	if cmd.Flags().Changed(consumptionFlagName) {

		var consumptionFlagName string
		if cmdPrefix == "" {
			consumptionFlagName = "consumption"
		} else {
			consumptionFlagName = fmt.Sprintf("%v.consumption", cmdPrefix)
		}

		consumptionFlagValue, err := cmd.Flags().GetFloat64(consumptionFlagName)
		if err != nil {
			return err, false
		}
		m.Consumption = consumptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewCPUFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuFlagName := fmt.Sprintf("%v.cpu", cmdPrefix)
	if cmd.Flags().Changed(cpuFlagName) {

		var cpuFlagName string
		if cmdPrefix == "" {
			cpuFlagName = "cpu"
		} else {
			cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
		}

		cpuFlagValue, err := cmd.Flags().GetFloat64(cpuFlagName)
		if err != nil {
			return err, false
		}
		m.CPU = cpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewCreatedAtFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		// warning: primitive createdAt strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewDistanceFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distanceFlagName := fmt.Sprintf("%v.distance", cmdPrefix)
	if cmd.Flags().Changed(distanceFlagName) {

		var distanceFlagName string
		if cmdPrefix == "" {
			distanceFlagName = "distance"
		} else {
			distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
		}

		distanceFlagValue, err := cmd.Flags().GetFloat64(distanceFlagName)
		if err != nil {
			return err, false
		}
		m.Distance = distanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewDownlinkCapacityFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downlinkCapacityFlagName := fmt.Sprintf("%v.downlinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(downlinkCapacityFlagName) {

		var downlinkCapacityFlagName string
		if cmdPrefix == "" {
			downlinkCapacityFlagName = "downlinkCapacity"
		} else {
			downlinkCapacityFlagName = fmt.Sprintf("%v.downlinkCapacity", cmdPrefix)
		}

		downlinkCapacityFlagValue, err := cmd.Flags().GetInt64(downlinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.DownlinkCapacity = downlinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewDownlinkUtilizationFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	downlinkUtilizationFlagName := fmt.Sprintf("%v.downlinkUtilization", cmdPrefix)
	if cmd.Flags().Changed(downlinkUtilizationFlagName) {

		var downlinkUtilizationFlagName string
		if cmdPrefix == "" {
			downlinkUtilizationFlagName = "downlinkUtilization"
		} else {
			downlinkUtilizationFlagName = fmt.Sprintf("%v.downlinkUtilization", cmdPrefix)
		}

		downlinkUtilizationFlagValue, err := cmd.Flags().GetFloat64(downlinkUtilizationFlagName)
		if err != nil {
			return err, false
		}
		m.DownlinkUtilization = downlinkUtilizationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewFrequencyFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetFloat64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewIsLocateRunningFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isLocateRunningFlagName := fmt.Sprintf("%v.isLocateRunning", cmdPrefix)
	if cmd.Flags().Changed(isLocateRunningFlagName) {

		var isLocateRunningFlagName string
		if cmdPrefix == "" {
			isLocateRunningFlagName = "isLocateRunning"
		} else {
			isLocateRunningFlagName = fmt.Sprintf("%v.isLocateRunning", cmdPrefix)
		}

		isLocateRunningFlagValue, err := cmd.Flags().GetBool(isLocateRunningFlagName)
		if err != nil {
			return err, false
		}
		m.IsLocateRunning = isLocateRunningFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewLastSeenFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastSeenFlagName := fmt.Sprintf("%v.lastSeen", cmdPrefix)
	if cmd.Flags().Changed(lastSeenFlagName) {

		// warning: primitive lastSeen strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewLinkScoreFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	linkScoreFlagName := fmt.Sprintf("%v.linkScore", cmdPrefix)
	if cmd.Flags().Changed(linkScoreFlagName) {
		// info: complex object linkScore LinkScore is retrieved outside this Changed() block
	}
	linkScoreFlagValue := m.LinkScore
	if swag.IsZero(linkScoreFlagValue) {
		linkScoreFlagValue = &models.LinkScore{}
	}

	err, linkScoreAdded := retrieveModelLinkScoreFlags(depth+1, linkScoreFlagValue, linkScoreFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkScoreAdded
	if linkScoreAdded {
		m.LinkScore = linkScoreFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceOverviewMaximalPowerFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maximalPowerFlagName := fmt.Sprintf("%v.maximalPower", cmdPrefix)
	if cmd.Flags().Changed(maximalPowerFlagName) {

		var maximalPowerFlagName string
		if cmdPrefix == "" {
			maximalPowerFlagName = "maximalPower"
		} else {
			maximalPowerFlagName = fmt.Sprintf("%v.maximalPower", cmdPrefix)
		}

		maximalPowerFlagValue, err := cmd.Flags().GetFloat64(maximalPowerFlagName)
		if err != nil {
			return err, false
		}
		m.MaximalPower = maximalPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewOutageScoreFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outageScoreFlagName := fmt.Sprintf("%v.outageScore", cmdPrefix)
	if cmd.Flags().Changed(outageScoreFlagName) {

		var outageScoreFlagName string
		if cmdPrefix == "" {
			outageScoreFlagName = "outageScore"
		} else {
			outageScoreFlagName = fmt.Sprintf("%v.outageScore", cmdPrefix)
		}

		outageScoreFlagValue, err := cmd.Flags().GetFloat64(outageScoreFlagName)
		if err != nil {
			return err, false
		}
		m.OutageScore = outageScoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewOutputPowerFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	outputPowerFlagName := fmt.Sprintf("%v.outputPower", cmdPrefix)
	if cmd.Flags().Changed(outputPowerFlagName) {

		var outputPowerFlagName string
		if cmdPrefix == "" {
			outputPowerFlagName = "outputPower"
		} else {
			outputPowerFlagName = fmt.Sprintf("%v.outputPower", cmdPrefix)
		}

		outputPowerFlagValue, err := cmd.Flags().GetFloat64(outputPowerFlagName)
		if err != nil {
			return err, false
		}
		m.OutputPower = outputPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewPowerStatusFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	powerStatusFlagName := fmt.Sprintf("%v.powerStatus", cmdPrefix)
	if cmd.Flags().Changed(powerStatusFlagName) {

		var powerStatusFlagName string
		if cmdPrefix == "" {
			powerStatusFlagName = "powerStatus"
		} else {
			powerStatusFlagName = fmt.Sprintf("%v.powerStatus", cmdPrefix)
		}

		powerStatusFlagValue, err := cmd.Flags().GetFloat64(powerStatusFlagName)
		if err != nil {
			return err, false
		}
		m.PowerStatus = powerStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewPsuFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	psuFlagName := fmt.Sprintf("%v.psu", cmdPrefix)
	if cmd.Flags().Changed(psuFlagName) {
		// warning: psu array type Psu is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceOverviewRAMFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ramFlagName := fmt.Sprintf("%v.ram", cmdPrefix)
	if cmd.Flags().Changed(ramFlagName) {

		var ramFlagName string
		if cmdPrefix == "" {
			ramFlagName = "ram"
		} else {
			ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
		}

		ramFlagValue, err := cmd.Flags().GetFloat64(ramFlagName)
		if err != nil {
			return err, false
		}
		m.RAM = ramFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewRemoteSignalMaxFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteSignalMaxFlagName := fmt.Sprintf("%v.remoteSignalMax", cmdPrefix)
	if cmd.Flags().Changed(remoteSignalMaxFlagName) {

		var remoteSignalMaxFlagName string
		if cmdPrefix == "" {
			remoteSignalMaxFlagName = "remoteSignalMax"
		} else {
			remoteSignalMaxFlagName = fmt.Sprintf("%v.remoteSignalMax", cmdPrefix)
		}

		remoteSignalMaxFlagValue, err := cmd.Flags().GetFloat64(remoteSignalMaxFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteSignalMax = remoteSignalMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewRunningOnBatteryFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runningOnBatteryFlagName := fmt.Sprintf("%v.runningOnBattery", cmdPrefix)
	if cmd.Flags().Changed(runningOnBatteryFlagName) {

		var runningOnBatteryFlagName string
		if cmdPrefix == "" {
			runningOnBatteryFlagName = "runningOnBattery"
		} else {
			runningOnBatteryFlagName = fmt.Sprintf("%v.runningOnBattery", cmdPrefix)
		}

		runningOnBatteryFlagValue, err := cmd.Flags().GetBool(runningOnBatteryFlagName)
		if err != nil {
			return err, false
		}
		m.RunningOnBattery = runningOnBatteryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewSignalFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalFlagName := fmt.Sprintf("%v.signal", cmdPrefix)
	if cmd.Flags().Changed(signalFlagName) {

		var signalFlagName string
		if cmdPrefix == "" {
			signalFlagName = "signal"
		} else {
			signalFlagName = fmt.Sprintf("%v.signal", cmdPrefix)
		}

		signalFlagValue, err := cmd.Flags().GetFloat64(signalFlagName)
		if err != nil {
			return err, false
		}
		m.Signal = signalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewSignalMaxFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalMaxFlagName := fmt.Sprintf("%v.signalMax", cmdPrefix)
	if cmd.Flags().Changed(signalMaxFlagName) {

		var signalMaxFlagName string
		if cmdPrefix == "" {
			signalMaxFlagName = "signalMax"
		} else {
			signalMaxFlagName = fmt.Sprintf("%v.signalMax", cmdPrefix)
		}

		signalMaxFlagValue, err := cmd.Flags().GetFloat64(signalMaxFlagName)
		if err != nil {
			return err, false
		}
		m.SignalMax = signalMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewStationsCountFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationsCountFlagName := fmt.Sprintf("%v.stationsCount", cmdPrefix)
	if cmd.Flags().Changed(stationsCountFlagName) {

		var stationsCountFlagName string
		if cmdPrefix == "" {
			stationsCountFlagName = "stationsCount"
		} else {
			stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
		}

		stationsCountFlagValue, err := cmd.Flags().GetFloat64(stationsCountFlagName)
		if err != nil {
			return err, false
		}
		m.StationsCount = stationsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewStatusFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewTemperatureFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	temperatureFlagName := fmt.Sprintf("%v.temperature", cmdPrefix)
	if cmd.Flags().Changed(temperatureFlagName) {

		var temperatureFlagName string
		if cmdPrefix == "" {
			temperatureFlagName = "temperature"
		} else {
			temperatureFlagName = fmt.Sprintf("%v.temperature", cmdPrefix)
		}

		temperatureFlagValue, err := cmd.Flags().GetFloat64(temperatureFlagName)
		if err != nil {
			return err, false
		}
		m.Temperature = temperatureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewTheoreticalDownlinkCapacityFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	theoreticalDownlinkCapacityFlagName := fmt.Sprintf("%v.theoreticalDownlinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(theoreticalDownlinkCapacityFlagName) {

		var theoreticalDownlinkCapacityFlagName string
		if cmdPrefix == "" {
			theoreticalDownlinkCapacityFlagName = "theoreticalDownlinkCapacity"
		} else {
			theoreticalDownlinkCapacityFlagName = fmt.Sprintf("%v.theoreticalDownlinkCapacity", cmdPrefix)
		}

		theoreticalDownlinkCapacityFlagValue, err := cmd.Flags().GetInt64(theoreticalDownlinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.TheoreticalDownlinkCapacity = theoreticalDownlinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewTheoreticalMaxDownlinkCapacityFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	theoreticalMaxDownlinkCapacityFlagName := fmt.Sprintf("%v.theoreticalMaxDownlinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(theoreticalMaxDownlinkCapacityFlagName) {

		var theoreticalMaxDownlinkCapacityFlagName string
		if cmdPrefix == "" {
			theoreticalMaxDownlinkCapacityFlagName = "theoreticalMaxDownlinkCapacity"
		} else {
			theoreticalMaxDownlinkCapacityFlagName = fmt.Sprintf("%v.theoreticalMaxDownlinkCapacity", cmdPrefix)
		}

		theoreticalMaxDownlinkCapacityFlagValue, err := cmd.Flags().GetInt64(theoreticalMaxDownlinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.TheoreticalMaxDownlinkCapacity = theoreticalMaxDownlinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewTheoreticalMaxUplinkCapacityFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	theoreticalMaxUplinkCapacityFlagName := fmt.Sprintf("%v.theoreticalMaxUplinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(theoreticalMaxUplinkCapacityFlagName) {

		var theoreticalMaxUplinkCapacityFlagName string
		if cmdPrefix == "" {
			theoreticalMaxUplinkCapacityFlagName = "theoreticalMaxUplinkCapacity"
		} else {
			theoreticalMaxUplinkCapacityFlagName = fmt.Sprintf("%v.theoreticalMaxUplinkCapacity", cmdPrefix)
		}

		theoreticalMaxUplinkCapacityFlagValue, err := cmd.Flags().GetInt64(theoreticalMaxUplinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.TheoreticalMaxUplinkCapacity = theoreticalMaxUplinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewTheoreticalUplinkCapacityFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	theoreticalUplinkCapacityFlagName := fmt.Sprintf("%v.theoreticalUplinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(theoreticalUplinkCapacityFlagName) {

		var theoreticalUplinkCapacityFlagName string
		if cmdPrefix == "" {
			theoreticalUplinkCapacityFlagName = "theoreticalUplinkCapacity"
		} else {
			theoreticalUplinkCapacityFlagName = fmt.Sprintf("%v.theoreticalUplinkCapacity", cmdPrefix)
		}

		theoreticalUplinkCapacityFlagValue, err := cmd.Flags().GetInt64(theoreticalUplinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.TheoreticalUplinkCapacity = theoreticalUplinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewTransmitPowerFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitPowerFlagName := fmt.Sprintf("%v.transmitPower", cmdPrefix)
	if cmd.Flags().Changed(transmitPowerFlagName) {

		var transmitPowerFlagName string
		if cmdPrefix == "" {
			transmitPowerFlagName = "transmitPower"
		} else {
			transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
		}

		transmitPowerFlagValue, err := cmd.Flags().GetFloat64(transmitPowerFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitPower = transmitPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewUplinkCapacityFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uplinkCapacityFlagName := fmt.Sprintf("%v.uplinkCapacity", cmdPrefix)
	if cmd.Flags().Changed(uplinkCapacityFlagName) {

		var uplinkCapacityFlagName string
		if cmdPrefix == "" {
			uplinkCapacityFlagName = "uplinkCapacity"
		} else {
			uplinkCapacityFlagName = fmt.Sprintf("%v.uplinkCapacity", cmdPrefix)
		}

		uplinkCapacityFlagValue, err := cmd.Flags().GetInt64(uplinkCapacityFlagName)
		if err != nil {
			return err, false
		}
		m.UplinkCapacity = uplinkCapacityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewUplinkUtilizationFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uplinkUtilizationFlagName := fmt.Sprintf("%v.uplinkUtilization", cmdPrefix)
	if cmd.Flags().Changed(uplinkUtilizationFlagName) {

		var uplinkUtilizationFlagName string
		if cmdPrefix == "" {
			uplinkUtilizationFlagName = "uplinkUtilization"
		} else {
			uplinkUtilizationFlagName = fmt.Sprintf("%v.uplinkUtilization", cmdPrefix)
		}

		uplinkUtilizationFlagValue, err := cmd.Flags().GetFloat64(uplinkUtilizationFlagName)
		if err != nil {
			return err, false
		}
		m.UplinkUtilization = uplinkUtilizationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewUptimeFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uptimeFlagName := fmt.Sprintf("%v.uptime", cmdPrefix)
	if cmd.Flags().Changed(uptimeFlagName) {

		var uptimeFlagName string
		if cmdPrefix == "" {
			uptimeFlagName = "uptime"
		} else {
			uptimeFlagName = fmt.Sprintf("%v.uptime", cmdPrefix)
		}

		uptimeFlagValue, err := cmd.Flags().GetFloat64(uptimeFlagName)
		if err != nil {
			return err, false
		}
		m.Uptime = uptimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewVoltageFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	voltageFlagName := fmt.Sprintf("%v.voltage", cmdPrefix)
	if cmd.Flags().Changed(voltageFlagName) {

		var voltageFlagName string
		if cmdPrefix == "" {
			voltageFlagName = "voltage"
		} else {
			voltageFlagName = fmt.Sprintf("%v.voltage", cmdPrefix)
		}

		voltageFlagValue, err := cmd.Flags().GetFloat64(voltageFlagName)
		if err != nil {
			return err, false
		}
		m.Voltage = voltageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceOverviewWirelessActiveInterfaceIdsFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wirelessActiveInterfaceIdsFlagName := fmt.Sprintf("%v.wirelessActiveInterfaceIds", cmdPrefix)
	if cmd.Flags().Changed(wirelessActiveInterfaceIdsFlagName) {
		// warning: wirelessActiveInterfaceIds array type WirelessActiveInterfaceIds is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceOverviewWirelessModeFlags(depth int, m *models.DeviceOverview, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wirelessModeFlagName := fmt.Sprintf("%v.wirelessMode", cmdPrefix)
	if cmd.Flags().Changed(wirelessModeFlagName) {

		var wirelessModeFlagName string
		if cmdPrefix == "" {
			wirelessModeFlagName = "wirelessMode"
		} else {
			wirelessModeFlagName = fmt.Sprintf("%v.wirelessMode", cmdPrefix)
		}

		wirelessModeFlagValue, err := cmd.Flags().GetString(wirelessModeFlagName)
		if err != nil {
			return err, false
		}
		m.WirelessMode = wirelessModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
