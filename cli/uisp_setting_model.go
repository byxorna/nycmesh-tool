// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for UispSetting

// register flags to command
func registerModelUispSettingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUispSettingDeviceGracePeriodOutage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUispSettingDevicePingAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUispSettingDevicePingIntervalNormal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUispSettingDevicePingIntervalOutage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUispSettingDeviceTransmissionFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUispSettingDeviceTransmissionProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUispSettingMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUispSettingOverrideGlobal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUispSettingDeviceGracePeriodOutage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceGracePeriodOutageDescription := `In milliseconds.`

	var deviceGracePeriodOutageFlagName string
	if cmdPrefix == "" {
		deviceGracePeriodOutageFlagName = "deviceGracePeriodOutage"
	} else {
		deviceGracePeriodOutageFlagName = fmt.Sprintf("%v.deviceGracePeriodOutage", cmdPrefix)
	}

	var deviceGracePeriodOutageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(deviceGracePeriodOutageFlagName, deviceGracePeriodOutageFlagDefault, deviceGracePeriodOutageDescription)

	return nil
}

func registerUispSettingDevicePingAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicePingAddressDescription := `Address for device to ping.`

	var devicePingAddressFlagName string
	if cmdPrefix == "" {
		devicePingAddressFlagName = "devicePingAddress"
	} else {
		devicePingAddressFlagName = fmt.Sprintf("%v.devicePingAddress", cmdPrefix)
	}

	var devicePingAddressFlagDefault string

	_ = cmd.PersistentFlags().String(devicePingAddressFlagName, devicePingAddressFlagDefault, devicePingAddressDescription)

	return nil
}

func registerUispSettingDevicePingIntervalNormal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicePingIntervalNormalDescription := `In milliseconds.`

	var devicePingIntervalNormalFlagName string
	if cmdPrefix == "" {
		devicePingIntervalNormalFlagName = "devicePingIntervalNormal"
	} else {
		devicePingIntervalNormalFlagName = fmt.Sprintf("%v.devicePingIntervalNormal", cmdPrefix)
	}

	var devicePingIntervalNormalFlagDefault float64

	_ = cmd.PersistentFlags().Float64(devicePingIntervalNormalFlagName, devicePingIntervalNormalFlagDefault, devicePingIntervalNormalDescription)

	return nil
}

func registerUispSettingDevicePingIntervalOutage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devicePingIntervalOutageDescription := `In milliseconds.`

	var devicePingIntervalOutageFlagName string
	if cmdPrefix == "" {
		devicePingIntervalOutageFlagName = "devicePingIntervalOutage"
	} else {
		devicePingIntervalOutageFlagName = fmt.Sprintf("%v.devicePingIntervalOutage", cmdPrefix)
	}

	var devicePingIntervalOutageFlagDefault float64

	_ = cmd.PersistentFlags().Float64(devicePingIntervalOutageFlagName, devicePingIntervalOutageFlagDefault, devicePingIntervalOutageDescription)

	return nil
}

func registerUispSettingDeviceTransmissionFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceTransmissionFrequencyDescription := `Enum: ["minimal","low","medium","high","realtime"]. `

	var deviceTransmissionFrequencyFlagName string
	if cmdPrefix == "" {
		deviceTransmissionFrequencyFlagName = "deviceTransmissionFrequency"
	} else {
		deviceTransmissionFrequencyFlagName = fmt.Sprintf("%v.deviceTransmissionFrequency", cmdPrefix)
	}

	var deviceTransmissionFrequencyFlagDefault string

	_ = cmd.PersistentFlags().String(deviceTransmissionFrequencyFlagName, deviceTransmissionFrequencyFlagDefault, deviceTransmissionFrequencyDescription)

	if err := cmd.RegisterFlagCompletionFunc(deviceTransmissionFrequencyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUispSettingDeviceTransmissionProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deviceTransmissionProfileDescription := `Enum: ["auto","custom"]. Transmission frequency with device.`

	var deviceTransmissionProfileFlagName string
	if cmdPrefix == "" {
		deviceTransmissionProfileFlagName = "deviceTransmissionProfile"
	} else {
		deviceTransmissionProfileFlagName = fmt.Sprintf("%v.deviceTransmissionProfile", cmdPrefix)
	}

	var deviceTransmissionProfileFlagDefault string

	_ = cmd.PersistentFlags().String(deviceTransmissionProfileFlagName, deviceTransmissionProfileFlagDefault, deviceTransmissionProfileDescription)

	if err := cmd.RegisterFlagCompletionFunc(deviceTransmissionProfileFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto","custom"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerUispSettingMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metaFlagName string
	if cmdPrefix == "" {
		metaFlagName = "meta"
	} else {
		metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
	}

	if err := registerModelUispSettingMetaFlags(depth+1, metaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUispSettingOverrideGlobal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	overrideGlobalDescription := `
    If TRUE during update of UISP global settings this device settings will not update if FALSE then yes.
    `

	var overrideGlobalFlagName string
	if cmdPrefix == "" {
		overrideGlobalFlagName = "overrideGlobal"
	} else {
		overrideGlobalFlagName = fmt.Sprintf("%v.overrideGlobal", cmdPrefix)
	}

	var overrideGlobalFlagDefault bool

	_ = cmd.PersistentFlags().Bool(overrideGlobalFlagName, overrideGlobalFlagDefault, overrideGlobalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUispSettingFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deviceGracePeriodOutageAdded := retrieveUispSettingDeviceGracePeriodOutageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceGracePeriodOutageAdded

	err, devicePingAddressAdded := retrieveUispSettingDevicePingAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicePingAddressAdded

	err, devicePingIntervalNormalAdded := retrieveUispSettingDevicePingIntervalNormalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicePingIntervalNormalAdded

	err, devicePingIntervalOutageAdded := retrieveUispSettingDevicePingIntervalOutageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicePingIntervalOutageAdded

	err, deviceTransmissionFrequencyAdded := retrieveUispSettingDeviceTransmissionFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceTransmissionFrequencyAdded

	err, deviceTransmissionProfileAdded := retrieveUispSettingDeviceTransmissionProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceTransmissionProfileAdded

	err, metaAdded := retrieveUispSettingMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	err, overrideGlobalAdded := retrieveUispSettingOverrideGlobalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || overrideGlobalAdded

	return nil, retAdded
}

func retrieveUispSettingDeviceGracePeriodOutageFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceGracePeriodOutageFlagName := fmt.Sprintf("%v.deviceGracePeriodOutage", cmdPrefix)
	if cmd.Flags().Changed(deviceGracePeriodOutageFlagName) {

		var deviceGracePeriodOutageFlagName string
		if cmdPrefix == "" {
			deviceGracePeriodOutageFlagName = "deviceGracePeriodOutage"
		} else {
			deviceGracePeriodOutageFlagName = fmt.Sprintf("%v.deviceGracePeriodOutage", cmdPrefix)
		}

		deviceGracePeriodOutageFlagValue, err := cmd.Flags().GetFloat64(deviceGracePeriodOutageFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceGracePeriodOutage = deviceGracePeriodOutageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUispSettingDevicePingAddressFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicePingAddressFlagName := fmt.Sprintf("%v.devicePingAddress", cmdPrefix)
	if cmd.Flags().Changed(devicePingAddressFlagName) {

		var devicePingAddressFlagName string
		if cmdPrefix == "" {
			devicePingAddressFlagName = "devicePingAddress"
		} else {
			devicePingAddressFlagName = fmt.Sprintf("%v.devicePingAddress", cmdPrefix)
		}

		devicePingAddressFlagValue, err := cmd.Flags().GetString(devicePingAddressFlagName)
		if err != nil {
			return err, false
		}
		m.DevicePingAddress = devicePingAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUispSettingDevicePingIntervalNormalFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicePingIntervalNormalFlagName := fmt.Sprintf("%v.devicePingIntervalNormal", cmdPrefix)
	if cmd.Flags().Changed(devicePingIntervalNormalFlagName) {

		var devicePingIntervalNormalFlagName string
		if cmdPrefix == "" {
			devicePingIntervalNormalFlagName = "devicePingIntervalNormal"
		} else {
			devicePingIntervalNormalFlagName = fmt.Sprintf("%v.devicePingIntervalNormal", cmdPrefix)
		}

		devicePingIntervalNormalFlagValue, err := cmd.Flags().GetFloat64(devicePingIntervalNormalFlagName)
		if err != nil {
			return err, false
		}
		m.DevicePingIntervalNormal = devicePingIntervalNormalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUispSettingDevicePingIntervalOutageFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicePingIntervalOutageFlagName := fmt.Sprintf("%v.devicePingIntervalOutage", cmdPrefix)
	if cmd.Flags().Changed(devicePingIntervalOutageFlagName) {

		var devicePingIntervalOutageFlagName string
		if cmdPrefix == "" {
			devicePingIntervalOutageFlagName = "devicePingIntervalOutage"
		} else {
			devicePingIntervalOutageFlagName = fmt.Sprintf("%v.devicePingIntervalOutage", cmdPrefix)
		}

		devicePingIntervalOutageFlagValue, err := cmd.Flags().GetFloat64(devicePingIntervalOutageFlagName)
		if err != nil {
			return err, false
		}
		m.DevicePingIntervalOutage = devicePingIntervalOutageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUispSettingDeviceTransmissionFrequencyFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceTransmissionFrequencyFlagName := fmt.Sprintf("%v.deviceTransmissionFrequency", cmdPrefix)
	if cmd.Flags().Changed(deviceTransmissionFrequencyFlagName) {

		var deviceTransmissionFrequencyFlagName string
		if cmdPrefix == "" {
			deviceTransmissionFrequencyFlagName = "deviceTransmissionFrequency"
		} else {
			deviceTransmissionFrequencyFlagName = fmt.Sprintf("%v.deviceTransmissionFrequency", cmdPrefix)
		}

		deviceTransmissionFrequencyFlagValue, err := cmd.Flags().GetString(deviceTransmissionFrequencyFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceTransmissionFrequency = deviceTransmissionFrequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUispSettingDeviceTransmissionProfileFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceTransmissionProfileFlagName := fmt.Sprintf("%v.deviceTransmissionProfile", cmdPrefix)
	if cmd.Flags().Changed(deviceTransmissionProfileFlagName) {

		var deviceTransmissionProfileFlagName string
		if cmdPrefix == "" {
			deviceTransmissionProfileFlagName = "deviceTransmissionProfile"
		} else {
			deviceTransmissionProfileFlagName = fmt.Sprintf("%v.deviceTransmissionProfile", cmdPrefix)
		}

		deviceTransmissionProfileFlagValue, err := cmd.Flags().GetString(deviceTransmissionProfileFlagName)
		if err != nil {
			return err, false
		}
		m.DeviceTransmissionProfile = deviceTransmissionProfileFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUispSettingMetaFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {
		// info: complex object meta UispSettingMeta is retrieved outside this Changed() block
	}
	metaFlagValue := m.Meta
	if swag.IsZero(metaFlagValue) {
		metaFlagValue = &models.UispSettingMeta{}
	}

	err, metaAdded := retrieveModelUispSettingMetaFlags(depth+1, metaFlagValue, metaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded
	if metaAdded {
		m.Meta = metaFlagValue
	}

	return nil, retAdded
}

func retrieveUispSettingOverrideGlobalFlags(depth int, m *models.UispSetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	overrideGlobalFlagName := fmt.Sprintf("%v.overrideGlobal", cmdPrefix)
	if cmd.Flags().Changed(overrideGlobalFlagName) {

		var overrideGlobalFlagName string
		if cmdPrefix == "" {
			overrideGlobalFlagName = "overrideGlobal"
		} else {
			overrideGlobalFlagName = fmt.Sprintf("%v.overrideGlobal", cmdPrefix)
		}

		overrideGlobalFlagValue, err := cmd.Flags().GetBool(overrideGlobalFlagName)
		if err != nil {
			return err, false
		}
		m.OverrideGlobal = overrideGlobalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
