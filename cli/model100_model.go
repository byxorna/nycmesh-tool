// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model100

// register flags to command
func registerModelModel100Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel100Detail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel100Error(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel100Message(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel100StatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel100Detail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	detailDescription := `Required. `

	var detailFlagName string
	if cmdPrefix == "" {
		detailFlagName = "detail"
	} else {
		detailFlagName = fmt.Sprintf("%v.detail", cmdPrefix)
	}

	var detailFlagDefault string

	_ = cmd.PersistentFlags().String(detailFlagName, detailFlagDefault, detailDescription)

	return nil
}

func registerModel100Error(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorDescription := ``

	var errorFlagName string
	if cmdPrefix == "" {
		errorFlagName = "error"
	} else {
		errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var errorFlagDefault float64

	_ = cmd.PersistentFlags().Float64(errorFlagName, errorFlagDefault, errorDescription)

	return nil
}

func registerModel100Message(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := `Required. `

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerModel100StatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusCodeDescription := `Required. `

	var statusCodeFlagName string
	if cmdPrefix == "" {
		statusCodeFlagName = "statusCode"
	} else {
		statusCodeFlagName = fmt.Sprintf("%v.statusCode", cmdPrefix)
	}

	var statusCodeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(statusCodeFlagName, statusCodeFlagDefault, statusCodeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel100Flags(depth int, m *models.Model100, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, detailAdded := retrieveModel100DetailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || detailAdded

	err, errorAdded := retrieveModel100ErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorAdded

	err, messageAdded := retrieveModel100MessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, statusCodeAdded := retrieveModel100StatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusCodeAdded

	return nil, retAdded
}

func retrieveModel100DetailFlags(depth int, m *models.Model100, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	detailFlagName := fmt.Sprintf("%v.detail", cmdPrefix)
	if cmd.Flags().Changed(detailFlagName) {

		var detailFlagName string
		if cmdPrefix == "" {
			detailFlagName = "detail"
		} else {
			detailFlagName = fmt.Sprintf("%v.detail", cmdPrefix)
		}

		detailFlagValue, err := cmd.Flags().GetString(detailFlagName)
		if err != nil {
			return err, false
		}
		m.Detail = &detailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel100ErrorFlags(depth int, m *models.Model100, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorFlagName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(errorFlagName) {

		var errorFlagName string
		if cmdPrefix == "" {
			errorFlagName = "error"
		} else {
			errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		errorFlagValue, err := cmd.Flags().GetFloat64(errorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = errorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel100MessageFlags(depth int, m *models.Model100, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = &messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel100StatusCodeFlags(depth int, m *models.Model100, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusCodeFlagName := fmt.Sprintf("%v.statusCode", cmdPrefix)
	if cmd.Flags().Changed(statusCodeFlagName) {

		var statusCodeFlagName string
		if cmdPrefix == "" {
			statusCodeFlagName = "statusCode"
		} else {
			statusCodeFlagName = fmt.Sprintf("%v.statusCode", cmdPrefix)
		}

		statusCodeFlagValue, err := cmd.Flags().GetFloat64(statusCodeFlagName)
		if err != nil {
			return err, false
		}
		m.StatusCode = &statusCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
