// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation

// register flags to command
func registerModelDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAntenna(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationBridgeMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationCountryCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrameLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyBands(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationNoiseFloor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationReceiveChains(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSecurity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSeries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalChain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitChains(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitDutyCycle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitEirp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationWirelessMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAntenna(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	antennaDescription := ``

	var antennaFlagName string
	if cmdPrefix == "" {
		antennaFlagName = "antenna"
	} else {
		antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
	}

	var antennaFlagDefault string

	_ = cmd.PersistentFlags().String(antennaFlagName, antennaFlagDefault, antennaDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var apDeviceFlagName string
	if cmdPrefix == "" {
		apDeviceFlagName = "apDevice"
	} else {
		apDeviceFlagName = fmt.Sprintf("%v.apDevice", cmdPrefix)
	}

	if err := registerModelApDevice1Flags(depth+1, apDeviceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apMacDescription := ``

	var apMacFlagName string
	if cmdPrefix == "" {
		apMacFlagName = "apMac"
	} else {
		apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
	}

	var apMacFlagDefault string

	_ = cmd.PersistentFlags().String(apMacFlagName, apMacFlagDefault, apMacDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationDescription := `Enum: ["psk","psk2","ent","none"]. `

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
	}

	var authenticationFlagDefault string

	_ = cmd.PersistentFlags().String(authenticationFlagName, authenticationFlagDefault, authenticationDescription)

	if err := cmd.RegisterFlagCompletionFunc(authenticationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationBridgeMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bridgeModeDescription := `Enum: ["hw","sw"]. `

	var bridgeModeFlagName string
	if cmdPrefix == "" {
		bridgeModeFlagName = "bridgeMode"
	} else {
		bridgeModeFlagName = fmt.Sprintf("%v.bridgeMode", cmdPrefix)
	}

	var bridgeModeFlagDefault string

	_ = cmd.PersistentFlags().String(bridgeModeFlagName, bridgeModeFlagDefault, bridgeModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(bridgeModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["hw","sw"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := ``

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationCountryCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryCodeDescription := ``

	var countryCodeFlagName string
	if cmdPrefix == "" {
		countryCodeFlagName = "countryCode"
	} else {
		countryCodeFlagName = fmt.Sprintf("%v.countryCode", cmdPrefix)
	}

	var countryCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(countryCodeFlagName, countryCodeFlagDefault, countryCodeDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrameLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frameLengthDescription := ``

	var frameLengthFlagName string
	if cmdPrefix == "" {
		frameLengthFlagName = "frameLength"
	} else {
		frameLengthFlagName = fmt.Sprintf("%v.frameLength", cmdPrefix)
	}

	var frameLengthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frameLengthFlagName, frameLengthFlagDefault, frameLengthDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := ``

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyBands(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: frequencyBands FrequencyBands1 array type is not supported by go-swagger cli yet

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyCenterDescription := ``

	var frequencyCenterFlagName string
	if cmdPrefix == "" {
		frequencyCenterFlagName = "frequencyCenter"
	} else {
		frequencyCenterFlagName = fmt.Sprintf("%v.frequencyCenter", cmdPrefix)
	}

	var frequencyCenterFlagDefault string

	_ = cmd.PersistentFlags().String(frequencyCenterFlagName, frequencyCenterFlagDefault, frequencyCenterDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationNoiseFloor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noiseFloorDescription := ``

	var noiseFloorFlagName string
	if cmdPrefix == "" {
		noiseFloorFlagName = "noiseFloor"
	} else {
		noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	}

	var noiseFloorFlagDefault string

	_ = cmd.PersistentFlags().String(noiseFloorFlagName, noiseFloorFlagDefault, noiseFloorDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationReceiveChains(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	receiveChainsDescription := ``

	var receiveChainsFlagName string
	if cmdPrefix == "" {
		receiveChainsFlagName = "receiveChains"
	} else {
		receiveChainsFlagName = fmt.Sprintf("%v.receiveChains", cmdPrefix)
	}

	var receiveChainsFlagDefault float64

	_ = cmd.PersistentFlags().Float64(receiveChainsFlagName, receiveChainsFlagDefault, receiveChainsDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteSignalDescription := ``

	var remoteSignalFlagName string
	if cmdPrefix == "" {
		remoteSignalFlagName = "remoteSignal"
	} else {
		remoteSignalFlagName = fmt.Sprintf("%v.remoteSignal", cmdPrefix)
	}

	var remoteSignalFlagDefault string

	_ = cmd.PersistentFlags().String(remoteSignalFlagName, remoteSignalFlagDefault, remoteSignalDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSecurity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	securityDescription := `Enum: ["wep","wpa","wpa-psk","wpa2","enabled","none"]. `

	var securityFlagName string
	if cmdPrefix == "" {
		securityFlagName = "security"
	} else {
		securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
	}

	var securityFlagDefault string

	_ = cmd.PersistentFlags().String(securityFlagName, securityFlagDefault, securityDescription)

	if err := cmd.RegisterFlagCompletionFunc(securityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSeries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	seriesDescription := `Enum: ["LTU","classic","G60"]. `

	var seriesFlagName string
	if cmdPrefix == "" {
		seriesFlagName = "series"
	} else {
		seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
	}

	var seriesFlagDefault string

	_ = cmd.PersistentFlags().String(seriesFlagName, seriesFlagDefault, seriesDescription)

	if err := cmd.RegisterFlagCompletionFunc(seriesFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["LTU","classic","G60"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalChain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: signalChain SignalChain array type is not supported by go-swagger cli yet

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: signalRemoteChain SignalRemoteChain array type is not supported by go-swagger cli yet

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := `Required. SSID`

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stationNameDescription := ``

	var stationNameFlagName string
	if cmdPrefix == "" {
		stationNameFlagName = "stationName"
	} else {
		stationNameFlagName = fmt.Sprintf("%v.stationName", cmdPrefix)
	}

	var stationNameFlagDefault string

	_ = cmd.PersistentFlags().String(stationNameFlagName, stationNameFlagDefault, stationNameDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stationsCountDescription := ``

	var stationsCountFlagName string
	if cmdPrefix == "" {
		stationsCountFlagName = "stationsCount"
	} else {
		stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
	}

	var stationsCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(stationsCountFlagName, stationsCountFlagDefault, stationsCountDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitChains(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitChainsDescription := ``

	var transmitChainsFlagName string
	if cmdPrefix == "" {
		transmitChainsFlagName = "transmitChains"
	} else {
		transmitChainsFlagName = fmt.Sprintf("%v.transmitChains", cmdPrefix)
	}

	var transmitChainsFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitChainsFlagName, transmitChainsFlagDefault, transmitChainsDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitDutyCycle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitDutyCycleDescription := ``

	var transmitDutyCycleFlagName string
	if cmdPrefix == "" {
		transmitDutyCycleFlagName = "transmitDutyCycle"
	} else {
		transmitDutyCycleFlagName = fmt.Sprintf("%v.transmitDutyCycle", cmdPrefix)
	}

	var transmitDutyCycleFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitDutyCycleFlagName, transmitDutyCycleFlagDefault, transmitDutyCycleDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitEirp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitEirpDescription := ``

	var transmitEirpFlagName string
	if cmdPrefix == "" {
		transmitEirpFlagName = "transmitEirp"
	} else {
		transmitEirpFlagName = fmt.Sprintf("%v.transmitEirp", cmdPrefix)
	}

	var transmitEirpFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitEirpFlagName, transmitEirpFlagDefault, transmitEirpDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitPowerDescription := ``

	var transmitPowerFlagName string
	if cmdPrefix == "" {
		transmitPowerFlagName = "transmitPower"
	} else {
		transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
	}

	var transmitPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitPowerFlagName, transmitPowerFlagDefault, transmitPowerDescription)

	return nil
}

func registerDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationWirelessMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wirelessModeDescription := `Enum: ["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]. `

	var wirelessModeFlagName string
	if cmdPrefix == "" {
		wirelessModeFlagName = "wirelessMode"
	} else {
		wirelessModeFlagName = fmt.Sprintf("%v.wirelessMode", cmdPrefix)
	}

	var wirelessModeFlagDefault string

	_ = cmd.PersistentFlags().String(wirelessModeFlagName, wirelessModeFlagDefault, wirelessModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(wirelessModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, antennaAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAntennaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded

	err, apDeviceAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apDeviceAdded

	err, apMacAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apMacAdded

	err, authenticationAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, bridgeModeAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationBridgeModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bridgeModeAdded

	err, channelWidthAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, countryCodeAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationCountryCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryCodeAdded

	err, frameLengthAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrameLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frameLengthAdded

	err, frequencyAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, frequencyBandsAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyBandsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyBandsAdded

	err, frequencyCenterAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyCenterAdded

	err, noiseFloorAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationNoiseFloorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noiseFloorAdded

	err, receiveChainsAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationReceiveChainsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || receiveChainsAdded

	err, remoteSignalAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationRemoteSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteSignalAdded

	err, securityAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSecurityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securityAdded

	err, seriesAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSeriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || seriesAdded

	err, signalChainAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalChainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalChainAdded

	err, signalRemoteChainAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalRemoteChainAdded

	err, ssidAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, stationNameAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationNameAdded

	err, stationsCountAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationsCountAdded

	err, transmitChainsAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitChainsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitChainsAdded

	err, transmitDutyCycleAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitDutyCycleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitDutyCycleAdded

	err, transmitEirpAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitEirpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitEirpAdded

	err, transmitPowerAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitPowerAdded

	err, wirelessModeAdded := retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationWirelessModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wirelessModeAdded

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAntennaFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaFlagName := fmt.Sprintf("%v.antenna", cmdPrefix)
	if cmd.Flags().Changed(antennaFlagName) {

		var antennaFlagName string
		if cmdPrefix == "" {
			antennaFlagName = "antenna"
		} else {
			antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
		}

		antennaFlagValue, err := cmd.Flags().GetString(antennaFlagName)
		if err != nil {
			return err, false
		}
		m.Antenna = antennaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApDeviceFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apDeviceFlagName := fmt.Sprintf("%v.apDevice", cmdPrefix)
	if cmd.Flags().Changed(apDeviceFlagName) {
		// info: complex object apDevice ApDevice1 is retrieved outside this Changed() block
	}
	apDeviceFlagValue := m.ApDevice
	if swag.IsZero(apDeviceFlagValue) {
		apDeviceFlagValue = &models.ApDevice1{}
	}

	err, apDeviceAdded := retrieveModelApDevice1Flags(depth+1, apDeviceFlagValue, apDeviceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apDeviceAdded
	if apDeviceAdded {
		m.ApDevice = apDeviceFlagValue
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationApMacFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apMacFlagName := fmt.Sprintf("%v.apMac", cmdPrefix)
	if cmd.Flags().Changed(apMacFlagName) {

		var apMacFlagName string
		if cmdPrefix == "" {
			apMacFlagName = "apMac"
		} else {
			apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
		}

		apMacFlagValue, err := cmd.Flags().GetString(apMacFlagName)
		if err != nil {
			return err, false
		}
		m.ApMac = apMacFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationAuthenticationFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {

		var authenticationFlagName string
		if cmdPrefix == "" {
			authenticationFlagName = "authentication"
		} else {
			authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
		}

		authenticationFlagValue, err := cmd.Flags().GetString(authenticationFlagName)
		if err != nil {
			return err, false
		}
		m.Authentication = authenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationBridgeModeFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bridgeModeFlagName := fmt.Sprintf("%v.bridgeMode", cmdPrefix)
	if cmd.Flags().Changed(bridgeModeFlagName) {

		var bridgeModeFlagName string
		if cmdPrefix == "" {
			bridgeModeFlagName = "bridgeMode"
		} else {
			bridgeModeFlagName = fmt.Sprintf("%v.bridgeMode", cmdPrefix)
		}

		bridgeModeFlagValue, err := cmd.Flags().GetString(bridgeModeFlagName)
		if err != nil {
			return err, false
		}
		m.BridgeMode = bridgeModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationChannelWidthFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetInt64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationCountryCodeFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryCodeFlagName := fmt.Sprintf("%v.countryCode", cmdPrefix)
	if cmd.Flags().Changed(countryCodeFlagName) {

		var countryCodeFlagName string
		if cmdPrefix == "" {
			countryCodeFlagName = "countryCode"
		} else {
			countryCodeFlagName = fmt.Sprintf("%v.countryCode", cmdPrefix)
		}

		countryCodeFlagValue, err := cmd.Flags().GetInt64(countryCodeFlagName)
		if err != nil {
			return err, false
		}
		m.CountryCode = &countryCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrameLengthFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frameLengthFlagName := fmt.Sprintf("%v.frameLength", cmdPrefix)
	if cmd.Flags().Changed(frameLengthFlagName) {

		var frameLengthFlagName string
		if cmdPrefix == "" {
			frameLengthFlagName = "frameLength"
		} else {
			frameLengthFlagName = fmt.Sprintf("%v.frameLength", cmdPrefix)
		}

		frameLengthFlagValue, err := cmd.Flags().GetFloat64(frameLengthFlagName)
		if err != nil {
			return err, false
		}
		m.FrameLength = frameLengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetFloat64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = &frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyBandsFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyBandsFlagName := fmt.Sprintf("%v.frequencyBands", cmdPrefix)
	if cmd.Flags().Changed(frequencyBandsFlagName) {
		// warning: frequencyBands array type FrequencyBands1 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenterFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyCenterFlagName := fmt.Sprintf("%v.frequencyCenter", cmdPrefix)
	if cmd.Flags().Changed(frequencyCenterFlagName) {

		var frequencyCenterFlagName string
		if cmdPrefix == "" {
			frequencyCenterFlagName = "frequencyCenter"
		} else {
			frequencyCenterFlagName = fmt.Sprintf("%v.frequencyCenter", cmdPrefix)
		}

		frequencyCenterFlagValue, err := cmd.Flags().GetString(frequencyCenterFlagName)
		if err != nil {
			return err, false
		}
		m.FrequencyCenter = frequencyCenterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationNoiseFloorFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noiseFloorFlagName := fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	if cmd.Flags().Changed(noiseFloorFlagName) {

		var noiseFloorFlagName string
		if cmdPrefix == "" {
			noiseFloorFlagName = "noiseFloor"
		} else {
			noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
		}

		noiseFloorFlagValue, err := cmd.Flags().GetString(noiseFloorFlagName)
		if err != nil {
			return err, false
		}
		m.NoiseFloor = noiseFloorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationReceiveChainsFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	receiveChainsFlagName := fmt.Sprintf("%v.receiveChains", cmdPrefix)
	if cmd.Flags().Changed(receiveChainsFlagName) {

		var receiveChainsFlagName string
		if cmdPrefix == "" {
			receiveChainsFlagName = "receiveChains"
		} else {
			receiveChainsFlagName = fmt.Sprintf("%v.receiveChains", cmdPrefix)
		}

		receiveChainsFlagValue, err := cmd.Flags().GetFloat64(receiveChainsFlagName)
		if err != nil {
			return err, false
		}
		m.ReceiveChains = receiveChainsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationRemoteSignalFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteSignalFlagName := fmt.Sprintf("%v.remoteSignal", cmdPrefix)
	if cmd.Flags().Changed(remoteSignalFlagName) {

		var remoteSignalFlagName string
		if cmdPrefix == "" {
			remoteSignalFlagName = "remoteSignal"
		} else {
			remoteSignalFlagName = fmt.Sprintf("%v.remoteSignal", cmdPrefix)
		}

		remoteSignalFlagValue, err := cmd.Flags().GetString(remoteSignalFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteSignal = remoteSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSecurityFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securityFlagName := fmt.Sprintf("%v.security", cmdPrefix)
	if cmd.Flags().Changed(securityFlagName) {

		var securityFlagName string
		if cmdPrefix == "" {
			securityFlagName = "security"
		} else {
			securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
		}

		securityFlagValue, err := cmd.Flags().GetString(securityFlagName)
		if err != nil {
			return err, false
		}
		m.Security = securityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSeriesFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	seriesFlagName := fmt.Sprintf("%v.series", cmdPrefix)
	if cmd.Flags().Changed(seriesFlagName) {

		var seriesFlagName string
		if cmdPrefix == "" {
			seriesFlagName = "series"
		} else {
			seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
		}

		seriesFlagValue, err := cmd.Flags().GetString(seriesFlagName)
		if err != nil {
			return err, false
		}
		m.Series = seriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalChainFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalChainFlagName := fmt.Sprintf("%v.signalChain", cmdPrefix)
	if cmd.Flags().Changed(signalChainFlagName) {
		// warning: signalChain array type SignalChain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChainFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalRemoteChainFlagName := fmt.Sprintf("%v.signalRemoteChain", cmdPrefix)
	if cmd.Flags().Changed(signalRemoteChainFlagName) {
		// warning: signalRemoteChain array type SignalRemoteChain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationSsidFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = &ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationNameFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationNameFlagName := fmt.Sprintf("%v.stationName", cmdPrefix)
	if cmd.Flags().Changed(stationNameFlagName) {

		var stationNameFlagName string
		if cmdPrefix == "" {
			stationNameFlagName = "stationName"
		} else {
			stationNameFlagName = fmt.Sprintf("%v.stationName", cmdPrefix)
		}

		stationNameFlagValue, err := cmd.Flags().GetString(stationNameFlagName)
		if err != nil {
			return err, false
		}
		m.StationName = stationNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationStationsCountFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationsCountFlagName := fmt.Sprintf("%v.stationsCount", cmdPrefix)
	if cmd.Flags().Changed(stationsCountFlagName) {

		var stationsCountFlagName string
		if cmdPrefix == "" {
			stationsCountFlagName = "stationsCount"
		} else {
			stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
		}

		stationsCountFlagValue, err := cmd.Flags().GetFloat64(stationsCountFlagName)
		if err != nil {
			return err, false
		}
		m.StationsCount = stationsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitChainsFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitChainsFlagName := fmt.Sprintf("%v.transmitChains", cmdPrefix)
	if cmd.Flags().Changed(transmitChainsFlagName) {

		var transmitChainsFlagName string
		if cmdPrefix == "" {
			transmitChainsFlagName = "transmitChains"
		} else {
			transmitChainsFlagName = fmt.Sprintf("%v.transmitChains", cmdPrefix)
		}

		transmitChainsFlagValue, err := cmd.Flags().GetFloat64(transmitChainsFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitChains = transmitChainsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitDutyCycleFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitDutyCycleFlagName := fmt.Sprintf("%v.transmitDutyCycle", cmdPrefix)
	if cmd.Flags().Changed(transmitDutyCycleFlagName) {

		var transmitDutyCycleFlagName string
		if cmdPrefix == "" {
			transmitDutyCycleFlagName = "transmitDutyCycle"
		} else {
			transmitDutyCycleFlagName = fmt.Sprintf("%v.transmitDutyCycle", cmdPrefix)
		}

		transmitDutyCycleFlagValue, err := cmd.Flags().GetFloat64(transmitDutyCycleFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitDutyCycle = transmitDutyCycleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitEirpFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitEirpFlagName := fmt.Sprintf("%v.transmitEirp", cmdPrefix)
	if cmd.Flags().Changed(transmitEirpFlagName) {

		var transmitEirpFlagName string
		if cmdPrefix == "" {
			transmitEirpFlagName = "transmitEirp"
		} else {
			transmitEirpFlagName = fmt.Sprintf("%v.transmitEirp", cmdPrefix)
		}

		transmitEirpFlagValue, err := cmd.Flags().GetFloat64(transmitEirpFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitEirp = transmitEirpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationTransmitPowerFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitPowerFlagName := fmt.Sprintf("%v.transmitPower", cmdPrefix)
	if cmd.Flags().Changed(transmitPowerFlagName) {

		var transmitPowerFlagName string
		if cmdPrefix == "" {
			transmitPowerFlagName = "transmitPower"
		} else {
			transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
		}

		transmitPowerFlagValue, err := cmd.Flags().GetFloat64(transmitPowerFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitPower = transmitPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStationWirelessModeFlags(depth int, m *models.DEPRECATEDDeviceAirFiberPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wirelessModeFlagName := fmt.Sprintf("%v.wirelessMode", cmdPrefix)
	if cmd.Flags().Changed(wirelessModeFlagName) {

		var wirelessModeFlagName string
		if cmdPrefix == "" {
			wirelessModeFlagName = "wirelessMode"
		} else {
			wirelessModeFlagName = fmt.Sprintf("%v.wirelessMode", cmdPrefix)
		}

		wirelessModeFlagValue, err := cmd.Flags().GetString(wirelessModeFlagName)
		if err != nil {
			return err, false
		}
		m.WirelessMode = wirelessModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
