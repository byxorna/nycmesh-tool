// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/client/tasks"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTasksGetTasksBatchidCmd returns a cmd to handle operation getTasksBatchid
func makeOperationTasksGetTasksBatchidCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTasksBatchid",
		Short: ``,
		RunE:  runOperationTasksGetTasksBatchid,
	}

	if err := registerOperationTasksGetTasksBatchidParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTasksGetTasksBatchid uses cmd flags to call endpoint api
func runOperationTasksGetTasksBatchid(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tasks.NewGetTasksBatchidParams()
	if err, _ := retrieveOperationTasksGetTasksBatchidBatchIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTasksGetTasksBatchidResult(appCli.Tasks.GetTasksBatchid(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationTasksGetTasksBatchidParamFlags registers all flags needed to fill params
func registerOperationTasksGetTasksBatchidParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTasksGetTasksBatchidBatchIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTasksGetTasksBatchidBatchIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	batchIdDescription := `Required. `

	var batchIdFlagName string
	if cmdPrefix == "" {
		batchIdFlagName = "batchId"
	} else {
		batchIdFlagName = fmt.Sprintf("%v.batchId", cmdPrefix)
	}

	var batchIdFlagDefault string

	_ = cmd.PersistentFlags().String(batchIdFlagName, batchIdFlagDefault, batchIdDescription)

	return nil
}

func retrieveOperationTasksGetTasksBatchidBatchIDFlag(m *tasks.GetTasksBatchidParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("batchId") {

		var batchIdFlagName string
		if cmdPrefix == "" {
			batchIdFlagName = "batchId"
		} else {
			batchIdFlagName = fmt.Sprintf("%v.batchId", cmdPrefix)
		}

		batchIdFlagValue, err := cmd.Flags().GetString(batchIdFlagName)
		if err != nil {
			return err, false
		}
		m.BatchID = batchIdFlagValue

	}
	return nil, retAdded
}

// parseOperationTasksGetTasksBatchidResult parses request result and return the string content
func parseOperationTasksGetTasksBatchidResult(resp0 *tasks.GetTasksBatchidOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*tasks.GetTasksBatchidOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*tasks.GetTasksBatchidBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*tasks.GetTasksBatchidUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*tasks.GetTasksBatchidForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*tasks.GetTasksBatchidNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*tasks.GetTasksBatchidInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
