// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for InstallationDevice

// register flags to command
func registerModelInstallationDeviceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstallationDeviceConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceDistance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceFirmwareVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceInstallation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceUpdated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstallationDeviceUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstallationDeviceConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	configurationDescription := `Any device specific configuration.`

	var configurationFlagName string
	if cmdPrefix == "" {
		configurationFlagName = "configuration"
	} else {
		configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
	}

	var configurationFlagDefault string

	_ = cmd.PersistentFlags().String(configurationFlagName, configurationFlagDefault, configurationDescription)

	return nil
}

func registerInstallationDeviceCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive created strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerInstallationDeviceData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataDescription := `Any device specific data that are required during installation.`

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	var dataFlagDefault string

	_ = cmd.PersistentFlags().String(dataFlagName, dataFlagDefault, dataDescription)

	return nil
}

func registerInstallationDeviceDistance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distanceDescription := `Distance in meters from requested location.`

	var distanceFlagName string
	if cmdPrefix == "" {
		distanceFlagName = "distance"
	} else {
		distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
	}

	var distanceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(distanceFlagName, distanceFlagDefault, distanceDescription)

	return nil
}

func registerInstallationDeviceFirmwareVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firmwareVersionDescription := `Device firmware version.`

	var firmwareVersionFlagName string
	if cmdPrefix == "" {
		firmwareVersionFlagName = "firmwareVersion"
	} else {
		firmwareVersionFlagName = fmt.Sprintf("%v.firmwareVersion", cmdPrefix)
	}

	var firmwareVersionFlagDefault string

	_ = cmd.PersistentFlags().String(firmwareVersionFlagName, firmwareVersionFlagDefault, firmwareVersionDescription)

	return nil
}

func registerInstallationDeviceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Installation device id.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerInstallationDeviceInstallation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var installationFlagName string
	if cmdPrefix == "" {
		installationFlagName = "installation"
	} else {
		installationFlagName = fmt.Sprintf("%v.installation", cmdPrefix)
	}

	if err := registerModelInstallationFlags(depth+1, installationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstallationDeviceLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var locationFlagName string
	if cmdPrefix == "" {
		locationFlagName = "location"
	} else {
		locationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	if err := registerModelInstallationDeviceLocationFlags(depth+1, locationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstallationDeviceMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := `Required. Device mac address.`

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

func registerInstallationDeviceModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := `Enum: ["UF-Nano","UF-Loco","UF-Wifi","UF-Instant","UF-OLT","UF-OLT4","UISP-R-Pro","UISP-R-Lite","UNMS-S-Lite","UISP-S-Lite","UISP-S-Pro","UISP-P-Lite","UISP-LTE","ER-X","ER-X-SFP","ERLite-3","ERPoe-5","ERPro-8","ER-8","ER-8-XG","ER-4","ER-6P","ER-12","ER-12P","ER-10X","EP-R8","EP-R6","EP-S16","ES-12F","ES-16-150W","ES-24-250W","ES-24-500W","ES-24-Lite","ES-48-500W","ES-48-750W","ES-48-Lite","ES-8-150W","ES-16-XG","ES-10XP","ES-10X","ES-18X","ES-26X","EP-54V-150W","EP-24V-72W","EP-54V-72W","TSW-PoE","TSW-PoE PRO","ACB-AC","ACB-ISP","ACB-LOCO","AF11FX","AF24","AF24HD","AF2X","AF3X","AF4X","AF5","AF5U","AF5X","AF-5XHD","AF-LTU","LTU-LITE","AF-LTU5","LTU-Rocket","AFLTULR","AF60","AF60-LR","WaveAP","WaveCPE","GBE-LR","GBE","GBE-Plus","GBE-AP","R2N","R2T","R5N","R6N","R36-GPS","RM3-GPS","R2N-GPS","R5N-GPS","R9N-GPS","R5T-GPS","RM3","R36","R9N","N2N","N5N","N6N","NS3","N36","N9N","N9S","LM2","LM5","B2N","B2T","B5N","B5T","BAC","AG2","AG2-HP","AG5","AG5-HP","p2N","p5N","M25","P2B-400","P5B-300","P5B-300-ISO","P5B-400","P5B-400-ISO","P5B-620","LB5-120","LB5","N5B","N5B-16","N5B-19","N5B-300","N5B-400","N5B-Client","N2B","N2B-13","N2B-400","PAP","LAP-HP","LAP","AGW","AGW-LR","AGW-Pro","AGW-Installer","PB5","PB3","P36","PBM10","NB5","NB2","NB3","B36","NB9","SM5","WM5","IS-M5","Loco5AC","NS-5AC","R5AC-PTMP","R5AC-PTP","R5AC-Lite","R5AC-PRISM","R2AC-Prism","R2AC-Gen2","RP-5AC-Gen2","NBE-2AC-13","NBE-5AC-16","NBE-5AC-19","NBE-5AC-Gen2","PBE-5AC-300","PBE-5AC-300-ISO","PBE-5AC-400","PBE-5AC-400-ISO","PBE-5AC-500","PBE-5AC-500-ISO","PBE-5AC-620","PBE-5AC-620-ISO","PBE-2AC-400","PBE-2AC-400-ISO","PBE-5AC-X-Gen2","PBE-5AC-Gen2","PBE-5AC-ISO-Gen2","PBE-5AC-400-ISO-Gen2","LBE-5AC-16-120","LAP-120","LBE-5AC-23","LBE-5AC-Gen2","LBE-5AC-LR","LAP-GPS","IS-5AC","PS-5AC","SolarSwitch","SolarPoint","BulletAC-IP67","B-DB-AC","UNKNOWN"]. Device model.`

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	if err := cmd.RegisterFlagCompletionFunc(modelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UF-Nano","UF-Loco","UF-Wifi","UF-Instant","UF-OLT","UF-OLT4","UISP-R-Pro","UISP-R-Lite","UNMS-S-Lite","UISP-S-Lite","UISP-S-Pro","UISP-P-Lite","UISP-LTE","ER-X","ER-X-SFP","ERLite-3","ERPoe-5","ERPro-8","ER-8","ER-8-XG","ER-4","ER-6P","ER-12","ER-12P","ER-10X","EP-R8","EP-R6","EP-S16","ES-12F","ES-16-150W","ES-24-250W","ES-24-500W","ES-24-Lite","ES-48-500W","ES-48-750W","ES-48-Lite","ES-8-150W","ES-16-XG","ES-10XP","ES-10X","ES-18X","ES-26X","EP-54V-150W","EP-24V-72W","EP-54V-72W","TSW-PoE","TSW-PoE PRO","ACB-AC","ACB-ISP","ACB-LOCO","AF11FX","AF24","AF24HD","AF2X","AF3X","AF4X","AF5","AF5U","AF5X","AF-5XHD","AF-LTU","LTU-LITE","AF-LTU5","LTU-Rocket","AFLTULR","AF60","AF60-LR","WaveAP","WaveCPE","GBE-LR","GBE","GBE-Plus","GBE-AP","R2N","R2T","R5N","R6N","R36-GPS","RM3-GPS","R2N-GPS","R5N-GPS","R9N-GPS","R5T-GPS","RM3","R36","R9N","N2N","N5N","N6N","NS3","N36","N9N","N9S","LM2","LM5","B2N","B2T","B5N","B5T","BAC","AG2","AG2-HP","AG5","AG5-HP","p2N","p5N","M25","P2B-400","P5B-300","P5B-300-ISO","P5B-400","P5B-400-ISO","P5B-620","LB5-120","LB5","N5B","N5B-16","N5B-19","N5B-300","N5B-400","N5B-Client","N2B","N2B-13","N2B-400","PAP","LAP-HP","LAP","AGW","AGW-LR","AGW-Pro","AGW-Installer","PB5","PB3","P36","PBM10","NB5","NB2","NB3","B36","NB9","SM5","WM5","IS-M5","Loco5AC","NS-5AC","R5AC-PTMP","R5AC-PTP","R5AC-Lite","R5AC-PRISM","R2AC-Prism","R2AC-Gen2","RP-5AC-Gen2","NBE-2AC-13","NBE-5AC-16","NBE-5AC-19","NBE-5AC-Gen2","PBE-5AC-300","PBE-5AC-300-ISO","PBE-5AC-400","PBE-5AC-400-ISO","PBE-5AC-500","PBE-5AC-500-ISO","PBE-5AC-620","PBE-5AC-620-ISO","PBE-2AC-400","PBE-2AC-400-ISO","PBE-5AC-X-Gen2","PBE-5AC-Gen2","PBE-5AC-ISO-Gen2","PBE-5AC-400-ISO-Gen2","LBE-5AC-16-120","LAP-120","LBE-5AC-23","LBE-5AC-Gen2","LBE-5AC-LR","LAP-GPS","IS-5AC","PS-5AC","SolarSwitch","SolarPoint","BulletAC-IP67","B-DB-AC","UNKNOWN"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerInstallationDeviceUpdated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive updated strfmt.Date is not supported by go-swagger cli yet

	return nil
}

func registerInstallationDeviceUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	if err := registerModelUser2Flags(depth+1, userFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstallationDeviceFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, configurationAdded := retrieveInstallationDeviceConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configurationAdded

	err, createdAdded := retrieveInstallationDeviceCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, dataAdded := retrieveInstallationDeviceDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	err, distanceAdded := retrieveInstallationDeviceDistanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distanceAdded

	err, firmwareVersionAdded := retrieveInstallationDeviceFirmwareVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firmwareVersionAdded

	err, idAdded := retrieveInstallationDeviceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, installationAdded := retrieveInstallationDeviceInstallationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || installationAdded

	err, locationAdded := retrieveInstallationDeviceLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded

	err, macAdded := retrieveInstallationDeviceMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	err, modelAdded := retrieveInstallationDeviceModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, updatedAdded := retrieveInstallationDeviceUpdatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAdded

	err, userAdded := retrieveInstallationDeviceUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	return nil, retAdded
}

func retrieveInstallationDeviceConfigurationFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configurationFlagName := fmt.Sprintf("%v.configuration", cmdPrefix)
	if cmd.Flags().Changed(configurationFlagName) {

		var configurationFlagName string
		if cmdPrefix == "" {
			configurationFlagName = "configuration"
		} else {
			configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
		}

		configurationFlagValue, err := cmd.Flags().GetString(configurationFlagName)
		if err != nil {
			return err, false
		}
		m.Configuration = configurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceCreatedFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdFlagName := fmt.Sprintf("%v.created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		// warning: primitive created strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceDataFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {

		var dataFlagName string
		if cmdPrefix == "" {
			dataFlagName = "data"
		} else {
			dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
		}

		dataFlagValue, err := cmd.Flags().GetString(dataFlagName)
		if err != nil {
			return err, false
		}
		m.Data = dataFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceDistanceFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distanceFlagName := fmt.Sprintf("%v.distance", cmdPrefix)
	if cmd.Flags().Changed(distanceFlagName) {

		var distanceFlagName string
		if cmdPrefix == "" {
			distanceFlagName = "distance"
		} else {
			distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
		}

		distanceFlagValue, err := cmd.Flags().GetFloat64(distanceFlagName)
		if err != nil {
			return err, false
		}
		m.Distance = &distanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceFirmwareVersionFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firmwareVersionFlagName := fmt.Sprintf("%v.firmwareVersion", cmdPrefix)
	if cmd.Flags().Changed(firmwareVersionFlagName) {

		var firmwareVersionFlagName string
		if cmdPrefix == "" {
			firmwareVersionFlagName = "firmwareVersion"
		} else {
			firmwareVersionFlagName = fmt.Sprintf("%v.firmwareVersion", cmdPrefix)
		}

		firmwareVersionFlagValue, err := cmd.Flags().GetString(firmwareVersionFlagName)
		if err != nil {
			return err, false
		}
		m.FirmwareVersion = firmwareVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceIDFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceInstallationFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	installationFlagName := fmt.Sprintf("%v.installation", cmdPrefix)
	if cmd.Flags().Changed(installationFlagName) {
		// info: complex object installation Installation is retrieved outside this Changed() block
	}
	installationFlagValue := m.Installation
	if swag.IsZero(installationFlagValue) {
		installationFlagValue = &models.Installation{}
	}

	err, installationAdded := retrieveModelInstallationFlags(depth+1, installationFlagValue, installationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || installationAdded
	if installationAdded {
		m.Installation = installationFlagValue
	}

	return nil, retAdded
}

func retrieveInstallationDeviceLocationFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	locationFlagName := fmt.Sprintf("%v.location", cmdPrefix)
	if cmd.Flags().Changed(locationFlagName) {
		// info: complex object location InstallationDeviceLocation is retrieved outside this Changed() block
	}
	locationFlagValue := m.Location
	if swag.IsZero(locationFlagValue) {
		locationFlagValue = &models.InstallationDeviceLocation{}
	}

	err, locationAdded := retrieveModelInstallationDeviceLocationFlags(depth+1, locationFlagValue, locationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded
	if locationAdded {
		m.Location = locationFlagValue
	}

	return nil, retAdded
}

func retrieveInstallationDeviceMacFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = &macFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceModelFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceUpdatedFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedFlagName := fmt.Sprintf("%v.updated", cmdPrefix)
	if cmd.Flags().Changed(updatedFlagName) {

		// warning: primitive updated strfmt.Date is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstallationDeviceUserFlags(depth int, m *models.InstallationDevice, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {
		// info: complex object user User2 is retrieved outside this Changed() block
	}
	userFlagValue := m.User
	if swag.IsZero(userFlagValue) {
		userFlagValue = &models.User2{}
	}

	err, userAdded := retrieveModelUser2Flags(depth+1, userFlagValue, userFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded
	if userAdded {
		m.User = userFlagValue
	}

	return nil, retAdded
}
