// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Model56

// register flags to command
func registerModelModel56Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel56ConntrackModules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel56ConntrackOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel56ConntrackTimeouts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel56ConntrackModules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var conntrackModulesFlagName string
	if cmdPrefix == "" {
		conntrackModulesFlagName = "conntrackModules"
	} else {
		conntrackModulesFlagName = fmt.Sprintf("%v.conntrackModules", cmdPrefix)
	}

	if err := registerModelConntrackModulesFlags(depth+1, conntrackModulesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel56ConntrackOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var conntrackOptionsFlagName string
	if cmdPrefix == "" {
		conntrackOptionsFlagName = "conntrackOptions"
	} else {
		conntrackOptionsFlagName = fmt.Sprintf("%v.conntrackOptions", cmdPrefix)
	}

	if err := registerModelConntrackOptionsFlags(depth+1, conntrackOptionsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel56ConntrackTimeouts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var conntrackTimeoutsFlagName string
	if cmdPrefix == "" {
		conntrackTimeoutsFlagName = "conntrackTimeouts"
	} else {
		conntrackTimeoutsFlagName = fmt.Sprintf("%v.conntrackTimeouts", cmdPrefix)
	}

	if err := registerModelConntrackTimeoutsFlags(depth+1, conntrackTimeoutsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel56Flags(depth int, m *models.Model56, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, conntrackModulesAdded := retrieveModel56ConntrackModulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conntrackModulesAdded

	err, conntrackOptionsAdded := retrieveModel56ConntrackOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conntrackOptionsAdded

	err, conntrackTimeoutsAdded := retrieveModel56ConntrackTimeoutsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conntrackTimeoutsAdded

	return nil, retAdded
}

func retrieveModel56ConntrackModulesFlags(depth int, m *models.Model56, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	conntrackModulesFlagName := fmt.Sprintf("%v.conntrackModules", cmdPrefix)
	if cmd.Flags().Changed(conntrackModulesFlagName) {
		// info: complex object conntrackModules ConntrackModules is retrieved outside this Changed() block
	}
	conntrackModulesFlagValue := m.ConntrackModules
	if swag.IsZero(conntrackModulesFlagValue) {
		conntrackModulesFlagValue = &models.ConntrackModules{}
	}

	err, conntrackModulesAdded := retrieveModelConntrackModulesFlags(depth+1, conntrackModulesFlagValue, conntrackModulesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conntrackModulesAdded
	if conntrackModulesAdded {
		m.ConntrackModules = conntrackModulesFlagValue
	}

	return nil, retAdded
}

func retrieveModel56ConntrackOptionsFlags(depth int, m *models.Model56, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	conntrackOptionsFlagName := fmt.Sprintf("%v.conntrackOptions", cmdPrefix)
	if cmd.Flags().Changed(conntrackOptionsFlagName) {
		// info: complex object conntrackOptions ConntrackOptions is retrieved outside this Changed() block
	}
	conntrackOptionsFlagValue := m.ConntrackOptions
	if swag.IsZero(conntrackOptionsFlagValue) {
		conntrackOptionsFlagValue = &models.ConntrackOptions{}
	}

	err, conntrackOptionsAdded := retrieveModelConntrackOptionsFlags(depth+1, conntrackOptionsFlagValue, conntrackOptionsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conntrackOptionsAdded
	if conntrackOptionsAdded {
		m.ConntrackOptions = conntrackOptionsFlagValue
	}

	return nil, retAdded
}

func retrieveModel56ConntrackTimeoutsFlags(depth int, m *models.Model56, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	conntrackTimeoutsFlagName := fmt.Sprintf("%v.conntrackTimeouts", cmdPrefix)
	if cmd.Flags().Changed(conntrackTimeoutsFlagName) {
		// info: complex object conntrackTimeouts ConntrackTimeouts is retrieved outside this Changed() block
	}
	conntrackTimeoutsFlagValue := m.ConntrackTimeouts
	if swag.IsZero(conntrackTimeoutsFlagValue) {
		conntrackTimeoutsFlagValue = &models.ConntrackTimeouts{}
	}

	err, conntrackTimeoutsAdded := retrieveModelConntrackTimeoutsFlags(depth+1, conntrackTimeoutsFlagValue, conntrackTimeoutsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conntrackTimeoutsAdded
	if conntrackTimeoutsAdded {
		m.ConntrackTimeouts = conntrackTimeoutsFlagValue
	}

	return nil, retAdded
}
