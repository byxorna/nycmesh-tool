// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for InterfaceStatus

// register flags to command
func registerModelInterfaceStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInterfaceStatusCurrentSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInterfaceStatusDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInterfaceStatusPlugged(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInterfaceStatusSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInterfaceStatusStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInterfaceStatusCurrentSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentSpeedDescription := ``

	var currentSpeedFlagName string
	if cmdPrefix == "" {
		currentSpeedFlagName = "currentSpeed"
	} else {
		currentSpeedFlagName = fmt.Sprintf("%v.currentSpeed", cmdPrefix)
	}

	var currentSpeedFlagDefault string

	_ = cmd.PersistentFlags().String(currentSpeedFlagName, currentSpeedFlagDefault, currentSpeedDescription)

	return nil
}

func registerInterfaceStatusDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerInterfaceStatusPlugged(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pluggedDescription := ``

	var pluggedFlagName string
	if cmdPrefix == "" {
		pluggedFlagName = "plugged"
	} else {
		pluggedFlagName = fmt.Sprintf("%v.plugged", cmdPrefix)
	}

	var pluggedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pluggedFlagName, pluggedFlagDefault, pluggedDescription)

	return nil
}

func registerInterfaceStatusSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	speedDescription := ``

	var speedFlagName string
	if cmdPrefix == "" {
		speedFlagName = "speed"
	} else {
		speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
	}

	var speedFlagDefault string

	_ = cmd.PersistentFlags().String(speedFlagName, speedFlagDefault, speedDescription)

	return nil
}

func registerInterfaceStatusStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInterfaceStatusFlags(depth int, m *models.InterfaceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, currentSpeedAdded := retrieveInterfaceStatusCurrentSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentSpeedAdded

	err, descriptionAdded := retrieveInterfaceStatusDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, pluggedAdded := retrieveInterfaceStatusPluggedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluggedAdded

	err, speedAdded := retrieveInterfaceStatusSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedAdded

	err, statusAdded := retrieveInterfaceStatusStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveInterfaceStatusCurrentSpeedFlags(depth int, m *models.InterfaceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentSpeedFlagName := fmt.Sprintf("%v.currentSpeed", cmdPrefix)
	if cmd.Flags().Changed(currentSpeedFlagName) {

		var currentSpeedFlagName string
		if cmdPrefix == "" {
			currentSpeedFlagName = "currentSpeed"
		} else {
			currentSpeedFlagName = fmt.Sprintf("%v.currentSpeed", cmdPrefix)
		}

		currentSpeedFlagValue, err := cmd.Flags().GetString(currentSpeedFlagName)
		if err != nil {
			return err, false
		}
		m.CurrentSpeed = currentSpeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInterfaceStatusDescriptionFlags(depth int, m *models.InterfaceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInterfaceStatusPluggedFlags(depth int, m *models.InterfaceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pluggedFlagName := fmt.Sprintf("%v.plugged", cmdPrefix)
	if cmd.Flags().Changed(pluggedFlagName) {

		var pluggedFlagName string
		if cmdPrefix == "" {
			pluggedFlagName = "plugged"
		} else {
			pluggedFlagName = fmt.Sprintf("%v.plugged", cmdPrefix)
		}

		pluggedFlagValue, err := cmd.Flags().GetBool(pluggedFlagName)
		if err != nil {
			return err, false
		}
		m.Plugged = pluggedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInterfaceStatusSpeedFlags(depth int, m *models.InterfaceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedFlagName := fmt.Sprintf("%v.speed", cmdPrefix)
	if cmd.Flags().Changed(speedFlagName) {

		var speedFlagName string
		if cmdPrefix == "" {
			speedFlagName = "speed"
		} else {
			speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
		}

		speedFlagValue, err := cmd.Flags().GetString(speedFlagName)
		if err != nil {
			return err, false
		}
		m.Speed = speedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInterfaceStatusStatusFlags(depth int, m *models.InterfaceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
