// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Model31

// register flags to command
func registerModelModel31Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel31Addresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel31Device(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel31Hostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel31InterfaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel31Mac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel31Site(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel31Vendor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel31Vlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel31Addresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: addresses Addresses1 array type is not supported by go-swagger cli yet

	return nil
}

func registerModel31Device(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var deviceFlagName string
	if cmdPrefix == "" {
		deviceFlagName = "device"
	} else {
		deviceFlagName = fmt.Sprintf("%v.device", cmdPrefix)
	}

	if err := registerModelDevice1Flags(depth+1, deviceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel31Hostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerModel31InterfaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceIdDescription := ``

	var interfaceIdFlagName string
	if cmdPrefix == "" {
		interfaceIdFlagName = "interfaceId"
	} else {
		interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
	}

	var interfaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceIdFlagName, interfaceIdFlagDefault, interfaceIdDescription)

	return nil
}

func registerModel31Mac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macDescription := ``

	var macFlagName string
	if cmdPrefix == "" {
		macFlagName = "mac"
	} else {
		macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
	}

	var macFlagDefault string

	_ = cmd.PersistentFlags().String(macFlagName, macFlagDefault, macDescription)

	return nil
}

func registerModel31Site(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var siteFlagName string
	if cmdPrefix == "" {
		siteFlagName = "site"
	} else {
		siteFlagName = fmt.Sprintf("%v.site", cmdPrefix)
	}

	if err := registerModelSite4Flags(depth+1, siteFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel31Vendor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vendorDescription := ``

	var vendorFlagName string
	if cmdPrefix == "" {
		vendorFlagName = "vendor"
	} else {
		vendorFlagName = fmt.Sprintf("%v.vendor", cmdPrefix)
	}

	var vendorFlagDefault string

	_ = cmd.PersistentFlags().String(vendorFlagName, vendorFlagDefault, vendorDescription)

	return nil
}

func registerModel31Vlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlanDescription := ``

	var vlanFlagName string
	if cmdPrefix == "" {
		vlanFlagName = "vlan"
	} else {
		vlanFlagName = fmt.Sprintf("%v.vlan", cmdPrefix)
	}

	var vlanFlagDefault float64

	_ = cmd.PersistentFlags().Float64(vlanFlagName, vlanFlagDefault, vlanDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel31Flags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressesAdded := retrieveModel31AddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressesAdded

	err, deviceAdded := retrieveModel31DeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceAdded

	err, hostnameAdded := retrieveModel31HostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, interfaceIdAdded := retrieveModel31InterfaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceIdAdded

	err, macAdded := retrieveModel31MacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAdded

	err, siteAdded := retrieveModel31SiteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded

	err, vendorAdded := retrieveModel31VendorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vendorAdded

	err, vlanAdded := retrieveModel31VlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlanAdded

	return nil, retAdded
}

func retrieveModel31AddressesFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressesFlagName := fmt.Sprintf("%v.addresses", cmdPrefix)
	if cmd.Flags().Changed(addressesFlagName) {
		// warning: addresses array type Addresses1 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel31DeviceFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deviceFlagName := fmt.Sprintf("%v.device", cmdPrefix)
	if cmd.Flags().Changed(deviceFlagName) {
		// info: complex object device Device1 is retrieved outside this Changed() block
	}
	deviceFlagValue := m.Device
	if swag.IsZero(deviceFlagValue) {
		deviceFlagValue = &models.Device1{}
	}

	err, deviceAdded := retrieveModelDevice1Flags(depth+1, deviceFlagValue, deviceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceAdded
	if deviceAdded {
		m.Device = deviceFlagValue
	}

	return nil, retAdded
}

func retrieveModel31HostnameFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel31InterfaceIDFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceIdFlagName := fmt.Sprintf("%v.interfaceId", cmdPrefix)
	if cmd.Flags().Changed(interfaceIdFlagName) {

		var interfaceIdFlagName string
		if cmdPrefix == "" {
			interfaceIdFlagName = "interfaceId"
		} else {
			interfaceIdFlagName = fmt.Sprintf("%v.interfaceId", cmdPrefix)
		}

		interfaceIdFlagValue, err := cmd.Flags().GetString(interfaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.InterfaceID = interfaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel31MacFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macFlagName := fmt.Sprintf("%v.mac", cmdPrefix)
	if cmd.Flags().Changed(macFlagName) {

		var macFlagName string
		if cmdPrefix == "" {
			macFlagName = "mac"
		} else {
			macFlagName = fmt.Sprintf("%v.mac", cmdPrefix)
		}

		macFlagValue, err := cmd.Flags().GetString(macFlagName)
		if err != nil {
			return err, false
		}
		m.Mac = macFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel31SiteFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	siteFlagName := fmt.Sprintf("%v.site", cmdPrefix)
	if cmd.Flags().Changed(siteFlagName) {
		// info: complex object site Site4 is retrieved outside this Changed() block
	}
	siteFlagValue := m.Site
	if swag.IsZero(siteFlagValue) {
		siteFlagValue = &models.Site4{}
	}

	err, siteAdded := retrieveModelSite4Flags(depth+1, siteFlagValue, siteFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded
	if siteAdded {
		m.Site = siteFlagValue
	}

	return nil, retAdded
}

func retrieveModel31VendorFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vendorFlagName := fmt.Sprintf("%v.vendor", cmdPrefix)
	if cmd.Flags().Changed(vendorFlagName) {

		var vendorFlagName string
		if cmdPrefix == "" {
			vendorFlagName = "vendor"
		} else {
			vendorFlagName = fmt.Sprintf("%v.vendor", cmdPrefix)
		}

		vendorFlagValue, err := cmd.Flags().GetString(vendorFlagName)
		if err != nil {
			return err, false
		}
		m.Vendor = vendorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel31VlanFlags(depth int, m *models.Model31, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlanFlagName := fmt.Sprintf("%v.vlan", cmdPrefix)
	if cmd.Flags().Changed(vlanFlagName) {

		var vlanFlagName string
		if cmdPrefix == "" {
			vlanFlagName = "vlan"
		} else {
			vlanFlagName = fmt.Sprintf("%v.vlan", cmdPrefix)
		}

		vlanFlagValue, err := cmd.Flags().GetFloat64(vlanFlagName)
		if err != nil {
			return err, false
		}
		m.Vlan = vlanFlagValue

		retAdded = true
	}

	return nil, retAdded
}
