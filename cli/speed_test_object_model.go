// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for SpeedTestObject

// register flags to command
func registerModelSpeedTestObjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSpeedTestObjectDirection(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestObjectResultIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestObjectSpeed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestObjectSpeedTestID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpeedTestObjectTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSpeedTestObjectDirection(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	directionDescription := `Enum: ["uplink","downlink","bidirectional"]. Required. `

	var directionFlagName string
	if cmdPrefix == "" {
		directionFlagName = "direction"
	} else {
		directionFlagName = fmt.Sprintf("%v.direction", cmdPrefix)
	}

	var directionFlagDefault string

	_ = cmd.PersistentFlags().String(directionFlagName, directionFlagDefault, directionDescription)

	if err := cmd.RegisterFlagCompletionFunc(directionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["uplink","downlink","bidirectional"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpeedTestObjectResultIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resultIndexDescription := `Required. `

	var resultIndexFlagName string
	if cmdPrefix == "" {
		resultIndexFlagName = "resultIndex"
	} else {
		resultIndexFlagName = fmt.Sprintf("%v.resultIndex", cmdPrefix)
	}

	var resultIndexFlagDefault float64

	_ = cmd.PersistentFlags().Float64(resultIndexFlagName, resultIndexFlagDefault, resultIndexDescription)

	return nil
}

func registerSpeedTestObjectSpeed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	speedDescription := `Required. `

	var speedFlagName string
	if cmdPrefix == "" {
		speedFlagName = "speed"
	} else {
		speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
	}

	var speedFlagDefault float64

	_ = cmd.PersistentFlags().Float64(speedFlagName, speedFlagDefault, speedDescription)

	return nil
}

func registerSpeedTestObjectSpeedTestID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	speedTestIdDescription := `Required. `

	var speedTestIdFlagName string
	if cmdPrefix == "" {
		speedTestIdFlagName = "speedTestId"
	} else {
		speedTestIdFlagName = fmt.Sprintf("%v.speedTestId", cmdPrefix)
	}

	var speedTestIdFlagDefault string

	_ = cmd.PersistentFlags().String(speedTestIdFlagName, speedTestIdFlagDefault, speedTestIdDescription)

	return nil
}

func registerSpeedTestObjectTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timestampDescription := `Required. `

	var timestampFlagName string
	if cmdPrefix == "" {
		timestampFlagName = "timestamp"
	} else {
		timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	var timestampFlagDefault float64

	_ = cmd.PersistentFlags().Float64(timestampFlagName, timestampFlagDefault, timestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSpeedTestObjectFlags(depth int, m *models.SpeedTestObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, directionAdded := retrieveSpeedTestObjectDirectionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || directionAdded

	err, resultIndexAdded := retrieveSpeedTestObjectResultIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resultIndexAdded

	err, speedAdded := retrieveSpeedTestObjectSpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedAdded

	err, speedTestIdAdded := retrieveSpeedTestObjectSpeedTestIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedTestIdAdded

	err, timestampAdded := retrieveSpeedTestObjectTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timestampAdded

	return nil, retAdded
}

func retrieveSpeedTestObjectDirectionFlags(depth int, m *models.SpeedTestObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	directionFlagName := fmt.Sprintf("%v.direction", cmdPrefix)
	if cmd.Flags().Changed(directionFlagName) {

		var directionFlagName string
		if cmdPrefix == "" {
			directionFlagName = "direction"
		} else {
			directionFlagName = fmt.Sprintf("%v.direction", cmdPrefix)
		}

		directionFlagValue, err := cmd.Flags().GetString(directionFlagName)
		if err != nil {
			return err, false
		}
		m.Direction = &directionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestObjectResultIndexFlags(depth int, m *models.SpeedTestObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resultIndexFlagName := fmt.Sprintf("%v.resultIndex", cmdPrefix)
	if cmd.Flags().Changed(resultIndexFlagName) {

		var resultIndexFlagName string
		if cmdPrefix == "" {
			resultIndexFlagName = "resultIndex"
		} else {
			resultIndexFlagName = fmt.Sprintf("%v.resultIndex", cmdPrefix)
		}

		resultIndexFlagValue, err := cmd.Flags().GetFloat64(resultIndexFlagName)
		if err != nil {
			return err, false
		}
		m.ResultIndex = &resultIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestObjectSpeedFlags(depth int, m *models.SpeedTestObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedFlagName := fmt.Sprintf("%v.speed", cmdPrefix)
	if cmd.Flags().Changed(speedFlagName) {

		var speedFlagName string
		if cmdPrefix == "" {
			speedFlagName = "speed"
		} else {
			speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
		}

		speedFlagValue, err := cmd.Flags().GetFloat64(speedFlagName)
		if err != nil {
			return err, false
		}
		m.Speed = &speedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestObjectSpeedTestIDFlags(depth int, m *models.SpeedTestObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedTestIdFlagName := fmt.Sprintf("%v.speedTestId", cmdPrefix)
	if cmd.Flags().Changed(speedTestIdFlagName) {

		var speedTestIdFlagName string
		if cmdPrefix == "" {
			speedTestIdFlagName = "speedTestId"
		} else {
			speedTestIdFlagName = fmt.Sprintf("%v.speedTestId", cmdPrefix)
		}

		speedTestIdFlagValue, err := cmd.Flags().GetString(speedTestIdFlagName)
		if err != nil {
			return err, false
		}
		m.SpeedTestID = &speedTestIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpeedTestObjectTimestampFlags(depth int, m *models.SpeedTestObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timestampFlagName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(timestampFlagName) {

		var timestampFlagName string
		if cmdPrefix == "" {
			timestampFlagName = "timestamp"
		} else {
			timestampFlagName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		timestampFlagValue, err := cmd.Flags().GetFloat64(timestampFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamp = &timestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}
