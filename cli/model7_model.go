// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model7

// register flags to command
func registerModelModel7Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel7DisplayName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel7Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel7HasAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel7ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel7Pvid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel7Vid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel7DisplayName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	displayNameDescription := ``

	var displayNameFlagName string
	if cmdPrefix == "" {
		displayNameFlagName = "displayName"
	} else {
		displayNameFlagName = fmt.Sprintf("%v.displayName", cmdPrefix)
	}

	var displayNameFlagDefault string

	_ = cmd.PersistentFlags().String(displayNameFlagName, displayNameFlagDefault, displayNameDescription)

	return nil
}

func registerModel7Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerModel7HasAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hasAddressDescription := `Required. `

	var hasAddressFlagName string
	if cmdPrefix == "" {
		hasAddressFlagName = "hasAddress"
	} else {
		hasAddressFlagName = fmt.Sprintf("%v.hasAddress", cmdPrefix)
	}

	var hasAddressFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hasAddressFlagName, hasAddressFlagDefault, hasAddressDescription)

	return nil
}

func registerModel7ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. `

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel7Pvid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pvidDescription := ``

	var pvidFlagName string
	if cmdPrefix == "" {
		pvidFlagName = "pvid"
	} else {
		pvidFlagName = fmt.Sprintf("%v.pvid", cmdPrefix)
	}

	var pvidFlagDefault string

	_ = cmd.PersistentFlags().String(pvidFlagName, pvidFlagDefault, pvidDescription)

	return nil
}

func registerModel7Vid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: vid Vid array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel7Flags(depth int, m *models.Model7, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, displayNameAdded := retrieveModel7DisplayNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || displayNameAdded

	err, enabledAdded := retrieveModel7EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, hasAddressAdded := retrieveModel7HasAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hasAddressAdded

	err, idAdded := retrieveModel7IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, pvidAdded := retrieveModel7PvidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pvidAdded

	err, vidAdded := retrieveModel7VidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vidAdded

	return nil, retAdded
}

func retrieveModel7DisplayNameFlags(depth int, m *models.Model7, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	displayNameFlagName := fmt.Sprintf("%v.displayName", cmdPrefix)
	if cmd.Flags().Changed(displayNameFlagName) {

		var displayNameFlagName string
		if cmdPrefix == "" {
			displayNameFlagName = "displayName"
		} else {
			displayNameFlagName = fmt.Sprintf("%v.displayName", cmdPrefix)
		}

		displayNameFlagValue, err := cmd.Flags().GetString(displayNameFlagName)
		if err != nil {
			return err, false
		}
		m.DisplayName = displayNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel7EnabledFlags(depth int, m *models.Model7, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel7HasAddressFlags(depth int, m *models.Model7, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hasAddressFlagName := fmt.Sprintf("%v.hasAddress", cmdPrefix)
	if cmd.Flags().Changed(hasAddressFlagName) {

		var hasAddressFlagName string
		if cmdPrefix == "" {
			hasAddressFlagName = "hasAddress"
		} else {
			hasAddressFlagName = fmt.Sprintf("%v.hasAddress", cmdPrefix)
		}

		hasAddressFlagValue, err := cmd.Flags().GetBool(hasAddressFlagName)
		if err != nil {
			return err, false
		}
		m.HasAddress = &hasAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel7IDFlags(depth int, m *models.Model7, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel7PvidFlags(depth int, m *models.Model7, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pvidFlagName := fmt.Sprintf("%v.pvid", cmdPrefix)
	if cmd.Flags().Changed(pvidFlagName) {

		var pvidFlagName string
		if cmdPrefix == "" {
			pvidFlagName = "pvid"
		} else {
			pvidFlagName = fmt.Sprintf("%v.pvid", cmdPrefix)
		}

		pvidFlagValue, err := cmd.Flags().GetString(pvidFlagName)
		if err != nil {
			return err, false
		}
		m.Pvid = pvidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel7VidFlags(depth int, m *models.Model7, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vidFlagName := fmt.Sprintf("%v.vid", cmdPrefix)
	if cmd.Flags().Changed(vidFlagName) {
		// warning: vid array type Vid is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
