// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Feedback

// register flags to command
func registerModelFeedbackFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFeedbackSuggestions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFeedbackWarning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFeedbackSuggestions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: suggestions Suggestions array type is not supported by go-swagger cli yet

	return nil
}

func registerFeedbackWarning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	warningDescription := ``

	var warningFlagName string
	if cmdPrefix == "" {
		warningFlagName = "warning"
	} else {
		warningFlagName = fmt.Sprintf("%v.warning", cmdPrefix)
	}

	var warningFlagDefault string

	_ = cmd.PersistentFlags().String(warningFlagName, warningFlagDefault, warningDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFeedbackFlags(depth int, m *models.Feedback, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, suggestionsAdded := retrieveFeedbackSuggestionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || suggestionsAdded

	err, warningAdded := retrieveFeedbackWarningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || warningAdded

	return nil, retAdded
}

func retrieveFeedbackSuggestionsFlags(depth int, m *models.Feedback, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	suggestionsFlagName := fmt.Sprintf("%v.suggestions", cmdPrefix)
	if cmd.Flags().Changed(suggestionsFlagName) {
		// warning: suggestions array type Suggestions is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveFeedbackWarningFlags(depth int, m *models.Feedback, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	warningFlagName := fmt.Sprintf("%v.warning", cmdPrefix)
	if cmd.Flags().Changed(warningFlagName) {

		var warningFlagName string
		if cmdPrefix == "" {
			warningFlagName = "warning"
		} else {
			warningFlagName = fmt.Sprintf("%v.warning", cmdPrefix)
		}

		warningFlagValue, err := cmd.Flags().GetString(warningFlagName)
		if err != nil {
			return err, false
		}
		m.Warning = warningFlagValue

		retAdded = true
	}

	return nil, retAdded
}
