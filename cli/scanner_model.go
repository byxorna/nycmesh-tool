// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Scanner

// register flags to command
func registerModelScannerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerScannerEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerPassiveOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerScannerEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Enable discovery scanner tool. Device must have DISCOVERY_SCANNER tool capability (aka discovery client).`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerScannerPassiveOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passiveOnlyDescription := `Use only passive discovery protocols (MNDP, CDP and LLDP) and not active protocols (UBNT discovery).`

	var passiveOnlyFlagName string
	if cmdPrefix == "" {
		passiveOnlyFlagName = "passiveOnly"
	} else {
		passiveOnlyFlagName = fmt.Sprintf("%v.passiveOnly", cmdPrefix)
	}

	var passiveOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(passiveOnlyFlagName, passiveOnlyFlagDefault, passiveOnlyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelScannerFlags(depth int, m *models.Scanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, enabledAdded := retrieveScannerEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, passiveOnlyAdded := retrieveScannerPassiveOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passiveOnlyAdded

	return nil, retAdded
}

func retrieveScannerEnabledFlags(depth int, m *models.Scanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerPassiveOnlyFlags(depth int, m *models.Scanner, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passiveOnlyFlagName := fmt.Sprintf("%v.passiveOnly", cmdPrefix)
	if cmd.Flags().Changed(passiveOnlyFlagName) {

		var passiveOnlyFlagName string
		if cmdPrefix == "" {
			passiveOnlyFlagName = "passiveOnly"
		} else {
			passiveOnlyFlagName = fmt.Sprintf("%v.passiveOnly", cmdPrefix)
		}

		passiveOnlyFlagValue, err := cmd.Flags().GetBool(passiveOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.PassiveOnly = passiveOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
