// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model90

// register flags to command
func registerModelModel90Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel90BaseGuesses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90BaseMatches(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90Guesses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90GuessesLog10(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90I(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90J(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90Pattern(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90Repeat(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel90Token(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel90BaseGuesses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	baseGuessesDescription := ``

	var baseGuessesFlagName string
	if cmdPrefix == "" {
		baseGuessesFlagName = "base_guesses"
	} else {
		baseGuessesFlagName = fmt.Sprintf("%v.base_guesses", cmdPrefix)
	}

	var baseGuessesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(baseGuessesFlagName, baseGuessesFlagDefault, baseGuessesDescription)

	return nil
}

func registerModel90BaseMatches(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: base_matches BaseMatches array type is not supported by go-swagger cli yet

	return nil
}

func registerModel90Guesses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	guessesDescription := `Required. `

	var guessesFlagName string
	if cmdPrefix == "" {
		guessesFlagName = "guesses"
	} else {
		guessesFlagName = fmt.Sprintf("%v.guesses", cmdPrefix)
	}

	var guessesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(guessesFlagName, guessesFlagDefault, guessesDescription)

	return nil
}

func registerModel90GuessesLog10(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	guessesLog10Description := `Required. `

	var guessesLog10FlagName string
	if cmdPrefix == "" {
		guessesLog10FlagName = "guesses_log10"
	} else {
		guessesLog10FlagName = fmt.Sprintf("%v.guesses_log10", cmdPrefix)
	}

	var guessesLog10FlagDefault float64

	_ = cmd.PersistentFlags().Float64(guessesLog10FlagName, guessesLog10FlagDefault, guessesLog10Description)

	return nil
}

func registerModel90I(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iDescription := `Required. `

	var iFlagName string
	if cmdPrefix == "" {
		iFlagName = "i"
	} else {
		iFlagName = fmt.Sprintf("%v.i", cmdPrefix)
	}

	var iFlagDefault float64

	_ = cmd.PersistentFlags().Float64(iFlagName, iFlagDefault, iDescription)

	return nil
}

func registerModel90J(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jDescription := `Required. `

	var jFlagName string
	if cmdPrefix == "" {
		jFlagName = "j"
	} else {
		jFlagName = fmt.Sprintf("%v.j", cmdPrefix)
	}

	var jFlagDefault float64

	_ = cmd.PersistentFlags().Float64(jFlagName, jFlagDefault, jDescription)

	return nil
}

func registerModel90Pattern(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	patternDescription := `Required. `

	var patternFlagName string
	if cmdPrefix == "" {
		patternFlagName = "pattern"
	} else {
		patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
	}

	var patternFlagDefault string

	_ = cmd.PersistentFlags().String(patternFlagName, patternFlagDefault, patternDescription)

	return nil
}

func registerModel90Repeat(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repeatDescription := ``

	var repeatFlagName string
	if cmdPrefix == "" {
		repeatFlagName = "repeat"
	} else {
		repeatFlagName = fmt.Sprintf("%v.repeat", cmdPrefix)
	}

	var repeatFlagDefault float64

	_ = cmd.PersistentFlags().Float64(repeatFlagName, repeatFlagDefault, repeatDescription)

	return nil
}

func registerModel90Token(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenDescription := `Required. `

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel90Flags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, baseGuessesAdded := retrieveModel90BaseGuessesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || baseGuessesAdded

	err, baseMatchesAdded := retrieveModel90BaseMatchesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || baseMatchesAdded

	err, guessesAdded := retrieveModel90GuessesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || guessesAdded

	err, guessesLog10Added := retrieveModel90GuessesLog10Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || guessesLog10Added

	err, iAdded := retrieveModel90IFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iAdded

	err, jAdded := retrieveModel90JFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jAdded

	err, patternAdded := retrieveModel90PatternFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || patternAdded

	err, repeatAdded := retrieveModel90RepeatFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repeatAdded

	err, tokenAdded := retrieveModel90TokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenAdded

	return nil, retAdded
}

func retrieveModel90BaseGuessesFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	baseGuessesFlagName := fmt.Sprintf("%v.base_guesses", cmdPrefix)
	if cmd.Flags().Changed(baseGuessesFlagName) {

		var baseGuessesFlagName string
		if cmdPrefix == "" {
			baseGuessesFlagName = "base_guesses"
		} else {
			baseGuessesFlagName = fmt.Sprintf("%v.base_guesses", cmdPrefix)
		}

		baseGuessesFlagValue, err := cmd.Flags().GetFloat64(baseGuessesFlagName)
		if err != nil {
			return err, false
		}
		m.BaseGuesses = baseGuessesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel90BaseMatchesFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	baseMatchesFlagName := fmt.Sprintf("%v.base_matches", cmdPrefix)
	if cmd.Flags().Changed(baseMatchesFlagName) {
		// warning: base_matches array type BaseMatches is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel90GuessesFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	guessesFlagName := fmt.Sprintf("%v.guesses", cmdPrefix)
	if cmd.Flags().Changed(guessesFlagName) {

		var guessesFlagName string
		if cmdPrefix == "" {
			guessesFlagName = "guesses"
		} else {
			guessesFlagName = fmt.Sprintf("%v.guesses", cmdPrefix)
		}

		guessesFlagValue, err := cmd.Flags().GetFloat64(guessesFlagName)
		if err != nil {
			return err, false
		}
		m.Guesses = &guessesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel90GuessesLog10Flags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	guessesLog10FlagName := fmt.Sprintf("%v.guesses_log10", cmdPrefix)
	if cmd.Flags().Changed(guessesLog10FlagName) {

		var guessesLog10FlagName string
		if cmdPrefix == "" {
			guessesLog10FlagName = "guesses_log10"
		} else {
			guessesLog10FlagName = fmt.Sprintf("%v.guesses_log10", cmdPrefix)
		}

		guessesLog10FlagValue, err := cmd.Flags().GetFloat64(guessesLog10FlagName)
		if err != nil {
			return err, false
		}
		m.GuessesLog10 = &guessesLog10FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel90IFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	iFlagName := fmt.Sprintf("%v.i", cmdPrefix)
	if cmd.Flags().Changed(iFlagName) {

		var iFlagName string
		if cmdPrefix == "" {
			iFlagName = "i"
		} else {
			iFlagName = fmt.Sprintf("%v.i", cmdPrefix)
		}

		iFlagValue, err := cmd.Flags().GetFloat64(iFlagName)
		if err != nil {
			return err, false
		}
		m.I = &iFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel90JFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jFlagName := fmt.Sprintf("%v.j", cmdPrefix)
	if cmd.Flags().Changed(jFlagName) {

		var jFlagName string
		if cmdPrefix == "" {
			jFlagName = "j"
		} else {
			jFlagName = fmt.Sprintf("%v.j", cmdPrefix)
		}

		jFlagValue, err := cmd.Flags().GetFloat64(jFlagName)
		if err != nil {
			return err, false
		}
		m.J = &jFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel90PatternFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	patternFlagName := fmt.Sprintf("%v.pattern", cmdPrefix)
	if cmd.Flags().Changed(patternFlagName) {

		var patternFlagName string
		if cmdPrefix == "" {
			patternFlagName = "pattern"
		} else {
			patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
		}

		patternFlagValue, err := cmd.Flags().GetString(patternFlagName)
		if err != nil {
			return err, false
		}
		m.Pattern = &patternFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel90RepeatFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repeatFlagName := fmt.Sprintf("%v.repeat", cmdPrefix)
	if cmd.Flags().Changed(repeatFlagName) {

		var repeatFlagName string
		if cmdPrefix == "" {
			repeatFlagName = "repeat"
		} else {
			repeatFlagName = fmt.Sprintf("%v.repeat", cmdPrefix)
		}

		repeatFlagValue, err := cmd.Flags().GetFloat64(repeatFlagName)
		if err != nil {
			return err, false
		}
		m.Repeat = repeatFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel90TokenFlags(depth int, m *models.Model90, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenFlagName := fmt.Sprintf("%v.token", cmdPrefix)
	if cmd.Flags().Changed(tokenFlagName) {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = &tokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}
