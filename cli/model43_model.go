// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model43

// register flags to command
func registerModelModel43Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel43ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel43Speed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel43ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Identification of port`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel43Speed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	speedDescription := `Enum: ["auto-auto","auto","autodetect","10000-full","1000-full","2500-full","1000-half","100-full","100-half","10-full","10-half"]. Required. Interface link speed `

	var speedFlagName string
	if cmdPrefix == "" {
		speedFlagName = "speed"
	} else {
		speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
	}

	var speedFlagDefault string

	_ = cmd.PersistentFlags().String(speedFlagName, speedFlagDefault, speedDescription)

	if err := cmd.RegisterFlagCompletionFunc(speedFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["auto-auto","auto","autodetect","10000-full","1000-full","2500-full","1000-half","100-full","100-half","10-full","10-half"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel43Flags(depth int, m *models.Model43, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveModel43IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, speedAdded := retrieveModel43SpeedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || speedAdded

	return nil, retAdded
}

func retrieveModel43IDFlags(depth int, m *models.Model43, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel43SpeedFlags(depth int, m *models.Model43, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	speedFlagName := fmt.Sprintf("%v.speed", cmdPrefix)
	if cmd.Flags().Changed(speedFlagName) {

		var speedFlagName string
		if cmdPrefix == "" {
			speedFlagName = "speed"
		} else {
			speedFlagName = fmt.Sprintf("%v.speed", cmdPrefix)
		}

		speedFlagValue, err := cmd.Flags().GetString(speedFlagName)
		if err != nil {
			return err, false
		}
		m.Speed = &speedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
