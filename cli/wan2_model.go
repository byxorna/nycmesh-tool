// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Wan2

// register flags to command
func registerModelWan2Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWan2Gateway6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWan2WanAddress6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWan2WanMode6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWan2Gateway6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gateway6Description := `Required. IPv6 address of gateway`

	var gateway6FlagName string
	if cmdPrefix == "" {
		gateway6FlagName = "gateway6"
	} else {
		gateway6FlagName = fmt.Sprintf("%v.gateway6", cmdPrefix)
	}

	var gateway6FlagDefault string

	_ = cmd.PersistentFlags().String(gateway6FlagName, gateway6FlagDefault, gateway6Description)

	return nil
}

func registerWan2WanAddress6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanAddress6Description := `Required. WAN address of ONU in CIDR format - required if wanMode6 is set to "static"`

	var wanAddress6FlagName string
	if cmdPrefix == "" {
		wanAddress6FlagName = "wanAddress6"
	} else {
		wanAddress6FlagName = fmt.Sprintf("%v.wanAddress6", cmdPrefix)
	}

	var wanAddress6FlagDefault string

	_ = cmd.PersistentFlags().String(wanAddress6FlagName, wanAddress6FlagDefault, wanAddress6Description)

	return nil
}

func registerWan2WanMode6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanMode6Description := `Enum: ["dhcp","slaac","link-local","static"]. Required. IPv6 WAN mode`

	var wanMode6FlagName string
	if cmdPrefix == "" {
		wanMode6FlagName = "wanMode6"
	} else {
		wanMode6FlagName = fmt.Sprintf("%v.wanMode6", cmdPrefix)
	}

	var wanMode6FlagDefault string

	_ = cmd.PersistentFlags().String(wanMode6FlagName, wanMode6FlagDefault, wanMode6Description)

	if err := cmd.RegisterFlagCompletionFunc(wanMode6FlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["dhcp","slaac","link-local","static"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWan2Flags(depth int, m *models.Wan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, gateway6Added := retrieveWan2Gateway6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gateway6Added

	err, wanAddress6Added := retrieveWan2WanAddress6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanAddress6Added

	err, wanMode6Added := retrieveWan2WanMode6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanMode6Added

	return nil, retAdded
}

func retrieveWan2Gateway6Flags(depth int, m *models.Wan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gateway6FlagName := fmt.Sprintf("%v.gateway6", cmdPrefix)
	if cmd.Flags().Changed(gateway6FlagName) {

		var gateway6FlagName string
		if cmdPrefix == "" {
			gateway6FlagName = "gateway6"
		} else {
			gateway6FlagName = fmt.Sprintf("%v.gateway6", cmdPrefix)
		}

		gateway6FlagValue, err := cmd.Flags().GetString(gateway6FlagName)
		if err != nil {
			return err, false
		}
		m.Gateway6 = &gateway6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWan2WanAddress6Flags(depth int, m *models.Wan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanAddress6FlagName := fmt.Sprintf("%v.wanAddress6", cmdPrefix)
	if cmd.Flags().Changed(wanAddress6FlagName) {

		var wanAddress6FlagName string
		if cmdPrefix == "" {
			wanAddress6FlagName = "wanAddress6"
		} else {
			wanAddress6FlagName = fmt.Sprintf("%v.wanAddress6", cmdPrefix)
		}

		wanAddress6FlagValue, err := cmd.Flags().GetString(wanAddress6FlagName)
		if err != nil {
			return err, false
		}
		m.WanAddress6 = &wanAddress6FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWan2WanMode6Flags(depth int, m *models.Wan2, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanMode6FlagName := fmt.Sprintf("%v.wanMode6", cmdPrefix)
	if cmd.Flags().Changed(wanMode6FlagName) {

		var wanMode6FlagName string
		if cmdPrefix == "" {
			wanMode6FlagName = "wanMode6"
		} else {
			wanMode6FlagName = fmt.Sprintf("%v.wanMode6", cmdPrefix)
		}

		wanMode6FlagValue, err := cmd.Flags().GetString(wanMode6FlagName)
		if err != nil {
			return err, false
		}
		m.WanMode6 = &wanMode6FlagValue

		retAdded = true
	}

	return nil, retAdded
}
