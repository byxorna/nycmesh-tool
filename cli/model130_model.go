// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model130

// register flags to command
func registerModelModel130Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel130Comment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel130Enabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel130LanAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel130LanPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel130Protocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel130WanPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel130Comment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commentDescription := `Required. `

	var commentFlagName string
	if cmdPrefix == "" {
		commentFlagName = "comment"
	} else {
		commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
	}

	var commentFlagDefault string

	_ = cmd.PersistentFlags().String(commentFlagName, commentFlagDefault, commentDescription)

	return nil
}

func registerModel130Enabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. `

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerModel130LanAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lanAddressDescription := `Required. `

	var lanAddressFlagName string
	if cmdPrefix == "" {
		lanAddressFlagName = "lanAddress"
	} else {
		lanAddressFlagName = fmt.Sprintf("%v.lanAddress", cmdPrefix)
	}

	var lanAddressFlagDefault string

	_ = cmd.PersistentFlags().String(lanAddressFlagName, lanAddressFlagDefault, lanAddressDescription)

	return nil
}

func registerModel130LanPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lanPortDescription := `Required. `

	var lanPortFlagName string
	if cmdPrefix == "" {
		lanPortFlagName = "lanPort"
	} else {
		lanPortFlagName = fmt.Sprintf("%v.lanPort", cmdPrefix)
	}

	var lanPortFlagDefault float64

	_ = cmd.PersistentFlags().Float64(lanPortFlagName, lanPortFlagDefault, lanPortDescription)

	return nil
}

func registerModel130Protocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protocolDescription := `Enum: ["udp","tcp","tcp_udp"]. Required. `

	var protocolFlagName string
	if cmdPrefix == "" {
		protocolFlagName = "protocol"
	} else {
		protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var protocolFlagDefault string

	_ = cmd.PersistentFlags().String(protocolFlagName, protocolFlagDefault, protocolDescription)

	if err := cmd.RegisterFlagCompletionFunc(protocolFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["udp","tcp","tcp_udp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerModel130WanPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wanPortDescription := `Required. `

	var wanPortFlagName string
	if cmdPrefix == "" {
		wanPortFlagName = "wanPort"
	} else {
		wanPortFlagName = fmt.Sprintf("%v.wanPort", cmdPrefix)
	}

	var wanPortFlagDefault float64

	_ = cmd.PersistentFlags().Float64(wanPortFlagName, wanPortFlagDefault, wanPortDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel130Flags(depth int, m *models.Model130, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commentAdded := retrieveModel130CommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commentAdded

	err, enabledAdded := retrieveModel130EnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, lanAddressAdded := retrieveModel130LanAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanAddressAdded

	err, lanPortAdded := retrieveModel130LanPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lanPortAdded

	err, protocolAdded := retrieveModel130ProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protocolAdded

	err, wanPortAdded := retrieveModel130WanPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wanPortAdded

	return nil, retAdded
}

func retrieveModel130CommentFlags(depth int, m *models.Model130, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commentFlagName := fmt.Sprintf("%v.comment", cmdPrefix)
	if cmd.Flags().Changed(commentFlagName) {

		var commentFlagName string
		if cmdPrefix == "" {
			commentFlagName = "comment"
		} else {
			commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
		}

		commentFlagValue, err := cmd.Flags().GetString(commentFlagName)
		if err != nil {
			return err, false
		}
		m.Comment = &commentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel130EnabledFlags(depth int, m *models.Model130, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = &enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel130LanAddressFlags(depth int, m *models.Model130, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lanAddressFlagName := fmt.Sprintf("%v.lanAddress", cmdPrefix)
	if cmd.Flags().Changed(lanAddressFlagName) {

		var lanAddressFlagName string
		if cmdPrefix == "" {
			lanAddressFlagName = "lanAddress"
		} else {
			lanAddressFlagName = fmt.Sprintf("%v.lanAddress", cmdPrefix)
		}

		lanAddressFlagValue, err := cmd.Flags().GetString(lanAddressFlagName)
		if err != nil {
			return err, false
		}
		m.LanAddress = &lanAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel130LanPortFlags(depth int, m *models.Model130, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lanPortFlagName := fmt.Sprintf("%v.lanPort", cmdPrefix)
	if cmd.Flags().Changed(lanPortFlagName) {

		var lanPortFlagName string
		if cmdPrefix == "" {
			lanPortFlagName = "lanPort"
		} else {
			lanPortFlagName = fmt.Sprintf("%v.lanPort", cmdPrefix)
		}

		lanPortFlagValue, err := cmd.Flags().GetFloat64(lanPortFlagName)
		if err != nil {
			return err, false
		}
		m.LanPort = &lanPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel130ProtocolFlags(depth int, m *models.Model130, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protocolFlagName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(protocolFlagName) {

		var protocolFlagName string
		if cmdPrefix == "" {
			protocolFlagName = "protocol"
		} else {
			protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		protocolFlagValue, err := cmd.Flags().GetString(protocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = &protocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel130WanPortFlags(depth int, m *models.Model130, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wanPortFlagName := fmt.Sprintf("%v.wanPort", cmdPrefix)
	if cmd.Flags().Changed(wanPortFlagName) {

		var wanPortFlagName string
		if cmdPrefix == "" {
			wanPortFlagName = "wanPort"
		} else {
			wanPortFlagName = fmt.Sprintf("%v.wanPort", cmdPrefix)
		}

		wanPortFlagValue, err := cmd.Flags().GetFloat64(wanPortFlagName)
		if err != nil {
			return err, false
		}
		m.WanPort = &wanPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}
