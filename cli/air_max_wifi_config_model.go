// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for AirMaxWifiConfig

// register flags to command
func registerModelAirMaxWifiConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAirMaxWifiConfigAckDistance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAckTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAggregationFrames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAllowedFrequencies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAmsduEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAntennaGain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAntennaID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigApMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAtpcEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigAtpcThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigBand(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigBoardInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigCableLoss(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigCenterFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigControlFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigCountryCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigDeAuthProtectionStatusEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigDevName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigDistanceScale(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigDutyCycle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigExtensionChannel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigFramePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigHideSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIeeeModeString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsACKAutoDistanceEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsAddMtikEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsAutoChannelWidthEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsAutoEIRPLimitEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsAutoTXRateEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsIsolationEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsMulticastEnhanceEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsRxGainAutoEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigIsWDSEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigLedThresholdsConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigMacACLConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigPollingPriority(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigRegulatoryDomainBands(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigRegulatoryDomainChannels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigRxGain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigRxTargetPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigSecurityConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigSensitivityThreshold(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigSensitivityThresholdEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigSyncMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigTddFraming(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigTdmaFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigTxPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigTxPowerMax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigTxRate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirMaxWifiConfigTxRateMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigAckDistance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ackDistanceDescription := `Required. `

	var ackDistanceFlagName string
	if cmdPrefix == "" {
		ackDistanceFlagName = "ackDistance"
	} else {
		ackDistanceFlagName = fmt.Sprintf("%v.ackDistance", cmdPrefix)
	}

	var ackDistanceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ackDistanceFlagName, ackDistanceFlagDefault, ackDistanceDescription)

	return nil
}

func registerAirMaxWifiConfigAckTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ackTimeoutDescription := `Required. `

	var ackTimeoutFlagName string
	if cmdPrefix == "" {
		ackTimeoutFlagName = "ackTimeout"
	} else {
		ackTimeoutFlagName = fmt.Sprintf("%v.ackTimeout", cmdPrefix)
	}

	var ackTimeoutFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ackTimeoutFlagName, ackTimeoutFlagDefault, ackTimeoutDescription)

	return nil
}

func registerAirMaxWifiConfigAggregationFrames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	aggregationFramesDescription := `Required. `

	var aggregationFramesFlagName string
	if cmdPrefix == "" {
		aggregationFramesFlagName = "aggregationFrames"
	} else {
		aggregationFramesFlagName = fmt.Sprintf("%v.aggregationFrames", cmdPrefix)
	}

	var aggregationFramesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(aggregationFramesFlagName, aggregationFramesFlagDefault, aggregationFramesDescription)

	return nil
}

func registerAirMaxWifiConfigAllowedFrequencies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: allowedFrequencies AllowedFrequencies array type is not supported by go-swagger cli yet

	return nil
}

func registerAirMaxWifiConfigAmsduEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	amsduEnabledDescription := `Required. `

	var amsduEnabledFlagName string
	if cmdPrefix == "" {
		amsduEnabledFlagName = "amsduEnabled"
	} else {
		amsduEnabledFlagName = fmt.Sprintf("%v.amsduEnabled", cmdPrefix)
	}

	var amsduEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(amsduEnabledFlagName, amsduEnabledFlagDefault, amsduEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigAntennaGain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	antennaGainDescription := `Required. `

	var antennaGainFlagName string
	if cmdPrefix == "" {
		antennaGainFlagName = "antennaGain"
	} else {
		antennaGainFlagName = fmt.Sprintf("%v.antennaGain", cmdPrefix)
	}

	var antennaGainFlagDefault float64

	_ = cmd.PersistentFlags().Float64(antennaGainFlagName, antennaGainFlagDefault, antennaGainDescription)

	return nil
}

func registerAirMaxWifiConfigAntennaID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	antennaIdDescription := `Required. `

	var antennaIdFlagName string
	if cmdPrefix == "" {
		antennaIdFlagName = "antennaId"
	} else {
		antennaIdFlagName = fmt.Sprintf("%v.antennaId", cmdPrefix)
	}

	var antennaIdFlagDefault float64

	_ = cmd.PersistentFlags().Float64(antennaIdFlagName, antennaIdFlagDefault, antennaIdDescription)

	return nil
}

func registerAirMaxWifiConfigApMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apMacDescription := `Required. MAC address`

	var apMacFlagName string
	if cmdPrefix == "" {
		apMacFlagName = "apMac"
	} else {
		apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
	}

	var apMacFlagDefault string

	_ = cmd.PersistentFlags().String(apMacFlagName, apMacFlagDefault, apMacDescription)

	return nil
}

func registerAirMaxWifiConfigAtpcEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	atpcEnabledDescription := `Required. `

	var atpcEnabledFlagName string
	if cmdPrefix == "" {
		atpcEnabledFlagName = "atpcEnabled"
	} else {
		atpcEnabledFlagName = fmt.Sprintf("%v.atpcEnabled", cmdPrefix)
	}

	var atpcEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(atpcEnabledFlagName, atpcEnabledFlagDefault, atpcEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigAtpcThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	atpcThresholdDescription := `Required. `

	var atpcThresholdFlagName string
	if cmdPrefix == "" {
		atpcThresholdFlagName = "atpcThreshold"
	} else {
		atpcThresholdFlagName = fmt.Sprintf("%v.atpcThreshold", cmdPrefix)
	}

	var atpcThresholdFlagDefault float64

	_ = cmd.PersistentFlags().Float64(atpcThresholdFlagName, atpcThresholdFlagDefault, atpcThresholdDescription)

	return nil
}

func registerAirMaxWifiConfigBand(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bandDescription := `Enum: ["A","G"]. Required. `

	var bandFlagName string
	if cmdPrefix == "" {
		bandFlagName = "band"
	} else {
		bandFlagName = fmt.Sprintf("%v.band", cmdPrefix)
	}

	var bandFlagDefault string

	_ = cmd.PersistentFlags().String(bandFlagName, bandFlagDefault, bandDescription)

	if err := cmd.RegisterFlagCompletionFunc(bandFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["A","G"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigBoardInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var boardInfoFlagName string
	if cmdPrefix == "" {
		boardInfoFlagName = "boardInfo"
	} else {
		boardInfoFlagName = fmt.Sprintf("%v.boardInfo", cmdPrefix)
	}

	if err := registerModelBoardInfoFlags(depth+1, boardInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigCableLoss(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cableLossDescription := `Required. `

	var cableLossFlagName string
	if cmdPrefix == "" {
		cableLossFlagName = "cableLoss"
	} else {
		cableLossFlagName = fmt.Sprintf("%v.cableLoss", cmdPrefix)
	}

	var cableLossFlagDefault float64

	_ = cmd.PersistentFlags().Float64(cableLossFlagName, cableLossFlagDefault, cableLossDescription)

	return nil
}

func registerAirMaxWifiConfigCenterFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	centerFrequencyDescription := `Required. `

	var centerFrequencyFlagName string
	if cmdPrefix == "" {
		centerFrequencyFlagName = "centerFrequency"
	} else {
		centerFrequencyFlagName = fmt.Sprintf("%v.centerFrequency", cmdPrefix)
	}

	var centerFrequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(centerFrequencyFlagName, centerFrequencyFlagDefault, centerFrequencyDescription)

	return nil
}

func registerAirMaxWifiConfigChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := `Required. `

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerAirMaxWifiConfigControlFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	controlFrequencyDescription := `Required. `

	var controlFrequencyFlagName string
	if cmdPrefix == "" {
		controlFrequencyFlagName = "controlFrequency"
	} else {
		controlFrequencyFlagName = fmt.Sprintf("%v.controlFrequency", cmdPrefix)
	}

	var controlFrequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(controlFrequencyFlagName, controlFrequencyFlagDefault, controlFrequencyDescription)

	return nil
}

func registerAirMaxWifiConfigCountryCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryCodeDescription := `Required. `

	var countryCodeFlagName string
	if cmdPrefix == "" {
		countryCodeFlagName = "countryCode"
	} else {
		countryCodeFlagName = fmt.Sprintf("%v.countryCode", cmdPrefix)
	}

	var countryCodeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countryCodeFlagName, countryCodeFlagDefault, countryCodeDescription)

	return nil
}

func registerAirMaxWifiConfigDeAuthProtectionStatusEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deAuthProtectionStatusEnabledDescription := `Required. `

	var deAuthProtectionStatusEnabledFlagName string
	if cmdPrefix == "" {
		deAuthProtectionStatusEnabledFlagName = "deAuthProtectionStatusEnabled"
	} else {
		deAuthProtectionStatusEnabledFlagName = fmt.Sprintf("%v.deAuthProtectionStatusEnabled", cmdPrefix)
	}

	var deAuthProtectionStatusEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deAuthProtectionStatusEnabledFlagName, deAuthProtectionStatusEnabledFlagDefault, deAuthProtectionStatusEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigDevName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	devNameDescription := `Required. `

	var devNameFlagName string
	if cmdPrefix == "" {
		devNameFlagName = "devName"
	} else {
		devNameFlagName = fmt.Sprintf("%v.devName", cmdPrefix)
	}

	var devNameFlagDefault string

	_ = cmd.PersistentFlags().String(devNameFlagName, devNameFlagDefault, devNameDescription)

	return nil
}

func registerAirMaxWifiConfigDistanceScale(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distanceScaleDescription := `Required. `

	var distanceScaleFlagName string
	if cmdPrefix == "" {
		distanceScaleFlagName = "distanceScale"
	} else {
		distanceScaleFlagName = fmt.Sprintf("%v.distanceScale", cmdPrefix)
	}

	var distanceScaleFlagDefault float64

	_ = cmd.PersistentFlags().Float64(distanceScaleFlagName, distanceScaleFlagDefault, distanceScaleDescription)

	return nil
}

func registerAirMaxWifiConfigDutyCycle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dutyCycleDescription := `Required. `

	var dutyCycleFlagName string
	if cmdPrefix == "" {
		dutyCycleFlagName = "dutyCycle"
	} else {
		dutyCycleFlagName = fmt.Sprintf("%v.dutyCycle", cmdPrefix)
	}

	var dutyCycleFlagDefault float64

	_ = cmd.PersistentFlags().Float64(dutyCycleFlagName, dutyCycleFlagDefault, dutyCycleDescription)

	return nil
}

func registerAirMaxWifiConfigExtensionChannel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	extensionChannelDescription := `Enum: ["plus","minus"]. Required. `

	var extensionChannelFlagName string
	if cmdPrefix == "" {
		extensionChannelFlagName = "extensionChannel"
	} else {
		extensionChannelFlagName = fmt.Sprintf("%v.extensionChannel", cmdPrefix)
	}

	var extensionChannelFlagDefault string

	_ = cmd.PersistentFlags().String(extensionChannelFlagName, extensionChannelFlagDefault, extensionChannelDescription)

	if err := cmd.RegisterFlagCompletionFunc(extensionChannelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["plus","minus"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigFramePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	framePeriodDescription := `Required. `

	var framePeriodFlagName string
	if cmdPrefix == "" {
		framePeriodFlagName = "framePeriod"
	} else {
		framePeriodFlagName = fmt.Sprintf("%v.framePeriod", cmdPrefix)
	}

	var framePeriodFlagDefault float64

	_ = cmd.PersistentFlags().Float64(framePeriodFlagName, framePeriodFlagDefault, framePeriodDescription)

	return nil
}

func registerAirMaxWifiConfigHideSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hideSsidDescription := `Required. `

	var hideSsidFlagName string
	if cmdPrefix == "" {
		hideSsidFlagName = "hideSsid"
	} else {
		hideSsidFlagName = fmt.Sprintf("%v.hideSsid", cmdPrefix)
	}

	var hideSsidFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hideSsidFlagName, hideSsidFlagDefault, hideSsidDescription)

	return nil
}

func registerAirMaxWifiConfigIeeeModeString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ieeeModeStringDescription := `Required. `

	var ieeeModeStringFlagName string
	if cmdPrefix == "" {
		ieeeModeStringFlagName = "ieeeModeString"
	} else {
		ieeeModeStringFlagName = fmt.Sprintf("%v.ieeeModeString", cmdPrefix)
	}

	var ieeeModeStringFlagDefault string

	_ = cmd.PersistentFlags().String(ieeeModeStringFlagName, ieeeModeStringFlagDefault, ieeeModeStringDescription)

	return nil
}

func registerAirMaxWifiConfigIsACKAutoDistanceEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isACKAutoDistanceEnabledDescription := `Required. `

	var isACKAutoDistanceEnabledFlagName string
	if cmdPrefix == "" {
		isACKAutoDistanceEnabledFlagName = "isACKAutoDistanceEnabled"
	} else {
		isACKAutoDistanceEnabledFlagName = fmt.Sprintf("%v.isACKAutoDistanceEnabled", cmdPrefix)
	}

	var isACKAutoDistanceEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isACKAutoDistanceEnabledFlagName, isACKAutoDistanceEnabledFlagDefault, isACKAutoDistanceEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsAddMtikEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isAddMtikEnabledDescription := `Required. `

	var isAddMtikEnabledFlagName string
	if cmdPrefix == "" {
		isAddMtikEnabledFlagName = "isAddMtikEnabled"
	} else {
		isAddMtikEnabledFlagName = fmt.Sprintf("%v.isAddMtikEnabled", cmdPrefix)
	}

	var isAddMtikEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isAddMtikEnabledFlagName, isAddMtikEnabledFlagDefault, isAddMtikEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsAutoChannelWidthEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isAutoChannelWidthEnabledDescription := `Required. `

	var isAutoChannelWidthEnabledFlagName string
	if cmdPrefix == "" {
		isAutoChannelWidthEnabledFlagName = "isAutoChannelWidthEnabled"
	} else {
		isAutoChannelWidthEnabledFlagName = fmt.Sprintf("%v.isAutoChannelWidthEnabled", cmdPrefix)
	}

	var isAutoChannelWidthEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isAutoChannelWidthEnabledFlagName, isAutoChannelWidthEnabledFlagDefault, isAutoChannelWidthEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsAutoEIRPLimitEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isAutoEIRPLimitEnabledDescription := `Required. `

	var isAutoEIRPLimitEnabledFlagName string
	if cmdPrefix == "" {
		isAutoEIRPLimitEnabledFlagName = "isAutoEIRPLimitEnabled"
	} else {
		isAutoEIRPLimitEnabledFlagName = fmt.Sprintf("%v.isAutoEIRPLimitEnabled", cmdPrefix)
	}

	var isAutoEIRPLimitEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isAutoEIRPLimitEnabledFlagName, isAutoEIRPLimitEnabledFlagDefault, isAutoEIRPLimitEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsAutoTXRateEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isAutoTXRateEnabledDescription := `Required. `

	var isAutoTXRateEnabledFlagName string
	if cmdPrefix == "" {
		isAutoTXRateEnabledFlagName = "isAutoTXRateEnabled"
	} else {
		isAutoTXRateEnabledFlagName = fmt.Sprintf("%v.isAutoTXRateEnabled", cmdPrefix)
	}

	var isAutoTXRateEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isAutoTXRateEnabledFlagName, isAutoTXRateEnabledFlagDefault, isAutoTXRateEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsIsolationEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isIsolationEnabledDescription := `Required. `

	var isIsolationEnabledFlagName string
	if cmdPrefix == "" {
		isIsolationEnabledFlagName = "isIsolationEnabled"
	} else {
		isIsolationEnabledFlagName = fmt.Sprintf("%v.isIsolationEnabled", cmdPrefix)
	}

	var isIsolationEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isIsolationEnabledFlagName, isIsolationEnabledFlagDefault, isIsolationEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsMulticastEnhanceEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isMulticastEnhanceEnabledDescription := `Required. `

	var isMulticastEnhanceEnabledFlagName string
	if cmdPrefix == "" {
		isMulticastEnhanceEnabledFlagName = "isMulticastEnhanceEnabled"
	} else {
		isMulticastEnhanceEnabledFlagName = fmt.Sprintf("%v.isMulticastEnhanceEnabled", cmdPrefix)
	}

	var isMulticastEnhanceEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isMulticastEnhanceEnabledFlagName, isMulticastEnhanceEnabledFlagDefault, isMulticastEnhanceEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsRxGainAutoEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isRxGainAutoEnabledDescription := `Required. `

	var isRxGainAutoEnabledFlagName string
	if cmdPrefix == "" {
		isRxGainAutoEnabledFlagName = "isRxGainAutoEnabled"
	} else {
		isRxGainAutoEnabledFlagName = fmt.Sprintf("%v.isRxGainAutoEnabled", cmdPrefix)
	}

	var isRxGainAutoEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isRxGainAutoEnabledFlagName, isRxGainAutoEnabledFlagDefault, isRxGainAutoEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigIsWDSEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isWDSEnabledDescription := `Required. `

	var isWDSEnabledFlagName string
	if cmdPrefix == "" {
		isWDSEnabledFlagName = "isWDSEnabled"
	} else {
		isWDSEnabledFlagName = fmt.Sprintf("%v.isWDSEnabled", cmdPrefix)
	}

	var isWDSEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isWDSEnabledFlagName, isWDSEnabledFlagDefault, isWDSEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigLedThresholdsConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ledThresholdsConfig LedThresholdsConfig map type is not supported by go-swagger cli yet

	return nil
}

func registerAirMaxWifiConfigMacACLConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var macAclConfigFlagName string
	if cmdPrefix == "" {
		macAclConfigFlagName = "macACLConfig"
	} else {
		macAclConfigFlagName = fmt.Sprintf("%v.macACLConfig", cmdPrefix)
	}

	if err := registerModelMacACLConfigFlags(depth+1, macAclConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `Enum: ["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]. Required. `

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
	}

	var modeFlagDefault string

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	if err := cmd.RegisterFlagCompletionFunc(modeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigPollingPriority(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pollingPriorityDescription := `Required. `

	var pollingPriorityFlagName string
	if cmdPrefix == "" {
		pollingPriorityFlagName = "pollingPriority"
	} else {
		pollingPriorityFlagName = fmt.Sprintf("%v.pollingPriority", cmdPrefix)
	}

	var pollingPriorityFlagDefault float64

	_ = cmd.PersistentFlags().Float64(pollingPriorityFlagName, pollingPriorityFlagDefault, pollingPriorityDescription)

	return nil
}

func registerAirMaxWifiConfigRegulatoryDomainBands(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: regulatoryDomainBands RegulatoryDomainBands array type is not supported by go-swagger cli yet

	return nil
}

func registerAirMaxWifiConfigRegulatoryDomainChannels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: regulatoryDomainChannels RegulatoryDomainChannels array type is not supported by go-swagger cli yet

	return nil
}

func registerAirMaxWifiConfigRxGain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxGainDescription := `Required. `

	var rxGainFlagName string
	if cmdPrefix == "" {
		rxGainFlagName = "rxGain"
	} else {
		rxGainFlagName = fmt.Sprintf("%v.rxGain", cmdPrefix)
	}

	var rxGainFlagDefault float64

	_ = cmd.PersistentFlags().Float64(rxGainFlagName, rxGainFlagDefault, rxGainDescription)

	return nil
}

func registerAirMaxWifiConfigRxTargetPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxTargetPowerDescription := `Required. `

	var rxTargetPowerFlagName string
	if cmdPrefix == "" {
		rxTargetPowerFlagName = "rxTargetPower"
	} else {
		rxTargetPowerFlagName = fmt.Sprintf("%v.rxTargetPower", cmdPrefix)
	}

	var rxTargetPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(rxTargetPowerFlagName, rxTargetPowerFlagDefault, rxTargetPowerDescription)

	return nil
}

func registerAirMaxWifiConfigSecurityConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var securityConfigFlagName string
	if cmdPrefix == "" {
		securityConfigFlagName = "securityConfig"
	} else {
		securityConfigFlagName = fmt.Sprintf("%v.securityConfig", cmdPrefix)
	}

	if err := registerModelSecurityConfigFlags(depth+1, securityConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigSensitivityThreshold(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sensitivityThresholdDescription := `Required. `

	var sensitivityThresholdFlagName string
	if cmdPrefix == "" {
		sensitivityThresholdFlagName = "sensitivityThreshold"
	} else {
		sensitivityThresholdFlagName = fmt.Sprintf("%v.sensitivityThreshold", cmdPrefix)
	}

	var sensitivityThresholdFlagDefault float64

	_ = cmd.PersistentFlags().Float64(sensitivityThresholdFlagName, sensitivityThresholdFlagDefault, sensitivityThresholdDescription)

	return nil
}

func registerAirMaxWifiConfigSensitivityThresholdEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sensitivityThresholdEnabledDescription := `Required. `

	var sensitivityThresholdEnabledFlagName string
	if cmdPrefix == "" {
		sensitivityThresholdEnabledFlagName = "sensitivityThresholdEnabled"
	} else {
		sensitivityThresholdEnabledFlagName = fmt.Sprintf("%v.sensitivityThresholdEnabled", cmdPrefix)
	}

	var sensitivityThresholdEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sensitivityThresholdEnabledFlagName, sensitivityThresholdEnabledFlagDefault, sensitivityThresholdEnabledDescription)

	return nil
}

func registerAirMaxWifiConfigSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := `Required. `

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerAirMaxWifiConfigSyncMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	syncModeDescription := `Enum: [1,2]. Required. `

	var syncModeFlagName string
	if cmdPrefix == "" {
		syncModeFlagName = "syncMode"
	} else {
		syncModeFlagName = fmt.Sprintf("%v.syncMode", cmdPrefix)
	}

	var syncModeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(syncModeFlagName, syncModeFlagDefault, syncModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(syncModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigTddFraming(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tddFramingFlagName string
	if cmdPrefix == "" {
		tddFramingFlagName = "tddFraming"
	} else {
		tddFramingFlagName = fmt.Sprintf("%v.tddFraming", cmdPrefix)
	}

	if err := registerModelTddFramingFlags(depth+1, tddFramingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirMaxWifiConfigTdmaFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tdmaFilterDescription := `Required. `

	var tdmaFilterFlagName string
	if cmdPrefix == "" {
		tdmaFilterFlagName = "tdmaFilter"
	} else {
		tdmaFilterFlagName = fmt.Sprintf("%v.tdmaFilter", cmdPrefix)
	}

	var tdmaFilterFlagDefault float64

	_ = cmd.PersistentFlags().Float64(tdmaFilterFlagName, tdmaFilterFlagDefault, tdmaFilterDescription)

	return nil
}

func registerAirMaxWifiConfigTxPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txPowerDescription := `Required. `

	var txPowerFlagName string
	if cmdPrefix == "" {
		txPowerFlagName = "txPower"
	} else {
		txPowerFlagName = fmt.Sprintf("%v.txPower", cmdPrefix)
	}

	var txPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(txPowerFlagName, txPowerFlagDefault, txPowerDescription)

	return nil
}

func registerAirMaxWifiConfigTxPowerMax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txPowerMaxDescription := `Required. `

	var txPowerMaxFlagName string
	if cmdPrefix == "" {
		txPowerMaxFlagName = "txPowerMax"
	} else {
		txPowerMaxFlagName = fmt.Sprintf("%v.txPowerMax", cmdPrefix)
	}

	var txPowerMaxFlagDefault float64

	_ = cmd.PersistentFlags().Float64(txPowerMaxFlagName, txPowerMaxFlagDefault, txPowerMaxDescription)

	return nil
}

func registerAirMaxWifiConfigTxRate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txRateDescription := `Required. `

	var txRateFlagName string
	if cmdPrefix == "" {
		txRateFlagName = "txRate"
	} else {
		txRateFlagName = fmt.Sprintf("%v.txRate", cmdPrefix)
	}

	var txRateFlagDefault float64

	_ = cmd.PersistentFlags().Float64(txRateFlagName, txRateFlagDefault, txRateDescription)

	return nil
}

func registerAirMaxWifiConfigTxRateMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	txRateModeDescription := `Required. `

	var txRateModeFlagName string
	if cmdPrefix == "" {
		txRateModeFlagName = "txRateMode"
	} else {
		txRateModeFlagName = fmt.Sprintf("%v.txRateMode", cmdPrefix)
	}

	var txRateModeFlagDefault float64

	_ = cmd.PersistentFlags().Float64(txRateModeFlagName, txRateModeFlagDefault, txRateModeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAirMaxWifiConfigFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ackDistanceAdded := retrieveAirMaxWifiConfigAckDistanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ackDistanceAdded

	err, ackTimeoutAdded := retrieveAirMaxWifiConfigAckTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ackTimeoutAdded

	err, aggregationFramesAdded := retrieveAirMaxWifiConfigAggregationFramesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aggregationFramesAdded

	err, allowedFrequenciesAdded := retrieveAirMaxWifiConfigAllowedFrequenciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || allowedFrequenciesAdded

	err, amsduEnabledAdded := retrieveAirMaxWifiConfigAmsduEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || amsduEnabledAdded

	err, antennaGainAdded := retrieveAirMaxWifiConfigAntennaGainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaGainAdded

	err, antennaIdAdded := retrieveAirMaxWifiConfigAntennaIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaIdAdded

	err, apMacAdded := retrieveAirMaxWifiConfigApMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apMacAdded

	err, atpcEnabledAdded := retrieveAirMaxWifiConfigAtpcEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || atpcEnabledAdded

	err, atpcThresholdAdded := retrieveAirMaxWifiConfigAtpcThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || atpcThresholdAdded

	err, bandAdded := retrieveAirMaxWifiConfigBandFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bandAdded

	err, boardInfoAdded := retrieveAirMaxWifiConfigBoardInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || boardInfoAdded

	err, cableLossAdded := retrieveAirMaxWifiConfigCableLossFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cableLossAdded

	err, centerFrequencyAdded := retrieveAirMaxWifiConfigCenterFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || centerFrequencyAdded

	err, channelWidthAdded := retrieveAirMaxWifiConfigChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, controlFrequencyAdded := retrieveAirMaxWifiConfigControlFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || controlFrequencyAdded

	err, countryCodeAdded := retrieveAirMaxWifiConfigCountryCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryCodeAdded

	err, deAuthProtectionStatusEnabledAdded := retrieveAirMaxWifiConfigDeAuthProtectionStatusEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deAuthProtectionStatusEnabledAdded

	err, devNameAdded := retrieveAirMaxWifiConfigDevNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devNameAdded

	err, distanceScaleAdded := retrieveAirMaxWifiConfigDistanceScaleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distanceScaleAdded

	err, dutyCycleAdded := retrieveAirMaxWifiConfigDutyCycleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dutyCycleAdded

	err, extensionChannelAdded := retrieveAirMaxWifiConfigExtensionChannelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || extensionChannelAdded

	err, framePeriodAdded := retrieveAirMaxWifiConfigFramePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || framePeriodAdded

	err, hideSsidAdded := retrieveAirMaxWifiConfigHideSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hideSsidAdded

	err, ieeeModeStringAdded := retrieveAirMaxWifiConfigIeeeModeStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ieeeModeStringAdded

	err, isACKAutoDistanceEnabledAdded := retrieveAirMaxWifiConfigIsACKAutoDistanceEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isACKAutoDistanceEnabledAdded

	err, isAddMtikEnabledAdded := retrieveAirMaxWifiConfigIsAddMtikEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isAddMtikEnabledAdded

	err, isAutoChannelWidthEnabledAdded := retrieveAirMaxWifiConfigIsAutoChannelWidthEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isAutoChannelWidthEnabledAdded

	err, isAutoEIRPLimitEnabledAdded := retrieveAirMaxWifiConfigIsAutoEIRPLimitEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isAutoEIRPLimitEnabledAdded

	err, isAutoTXRateEnabledAdded := retrieveAirMaxWifiConfigIsAutoTXRateEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isAutoTXRateEnabledAdded

	err, isIsolationEnabledAdded := retrieveAirMaxWifiConfigIsIsolationEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isIsolationEnabledAdded

	err, isMulticastEnhanceEnabledAdded := retrieveAirMaxWifiConfigIsMulticastEnhanceEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isMulticastEnhanceEnabledAdded

	err, isRxGainAutoEnabledAdded := retrieveAirMaxWifiConfigIsRxGainAutoEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isRxGainAutoEnabledAdded

	err, isWDSEnabledAdded := retrieveAirMaxWifiConfigIsWDSEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isWDSEnabledAdded

	err, ledThresholdsConfigAdded := retrieveAirMaxWifiConfigLedThresholdsConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ledThresholdsConfigAdded

	err, macAclConfigAdded := retrieveAirMaxWifiConfigMacACLConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAclConfigAdded

	err, modeAdded := retrieveAirMaxWifiConfigModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, pollingPriorityAdded := retrieveAirMaxWifiConfigPollingPriorityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pollingPriorityAdded

	err, regulatoryDomainBandsAdded := retrieveAirMaxWifiConfigRegulatoryDomainBandsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regulatoryDomainBandsAdded

	err, regulatoryDomainChannelsAdded := retrieveAirMaxWifiConfigRegulatoryDomainChannelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regulatoryDomainChannelsAdded

	err, rxGainAdded := retrieveAirMaxWifiConfigRxGainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxGainAdded

	err, rxTargetPowerAdded := retrieveAirMaxWifiConfigRxTargetPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxTargetPowerAdded

	err, securityConfigAdded := retrieveAirMaxWifiConfigSecurityConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securityConfigAdded

	err, sensitivityThresholdAdded := retrieveAirMaxWifiConfigSensitivityThresholdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sensitivityThresholdAdded

	err, sensitivityThresholdEnabledAdded := retrieveAirMaxWifiConfigSensitivityThresholdEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sensitivityThresholdEnabledAdded

	err, ssidAdded := retrieveAirMaxWifiConfigSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, syncModeAdded := retrieveAirMaxWifiConfigSyncModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || syncModeAdded

	err, tddFramingAdded := retrieveAirMaxWifiConfigTddFramingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tddFramingAdded

	err, tdmaFilterAdded := retrieveAirMaxWifiConfigTdmaFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tdmaFilterAdded

	err, txPowerAdded := retrieveAirMaxWifiConfigTxPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txPowerAdded

	err, txPowerMaxAdded := retrieveAirMaxWifiConfigTxPowerMaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txPowerMaxAdded

	err, txRateAdded := retrieveAirMaxWifiConfigTxRateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txRateAdded

	err, txRateModeAdded := retrieveAirMaxWifiConfigTxRateModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || txRateModeAdded

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAckDistanceFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ackDistanceFlagName := fmt.Sprintf("%v.ackDistance", cmdPrefix)
	if cmd.Flags().Changed(ackDistanceFlagName) {

		var ackDistanceFlagName string
		if cmdPrefix == "" {
			ackDistanceFlagName = "ackDistance"
		} else {
			ackDistanceFlagName = fmt.Sprintf("%v.ackDistance", cmdPrefix)
		}

		ackDistanceFlagValue, err := cmd.Flags().GetFloat64(ackDistanceFlagName)
		if err != nil {
			return err, false
		}
		m.AckDistance = &ackDistanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAckTimeoutFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ackTimeoutFlagName := fmt.Sprintf("%v.ackTimeout", cmdPrefix)
	if cmd.Flags().Changed(ackTimeoutFlagName) {

		var ackTimeoutFlagName string
		if cmdPrefix == "" {
			ackTimeoutFlagName = "ackTimeout"
		} else {
			ackTimeoutFlagName = fmt.Sprintf("%v.ackTimeout", cmdPrefix)
		}

		ackTimeoutFlagValue, err := cmd.Flags().GetFloat64(ackTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.AckTimeout = &ackTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAggregationFramesFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	aggregationFramesFlagName := fmt.Sprintf("%v.aggregationFrames", cmdPrefix)
	if cmd.Flags().Changed(aggregationFramesFlagName) {

		var aggregationFramesFlagName string
		if cmdPrefix == "" {
			aggregationFramesFlagName = "aggregationFrames"
		} else {
			aggregationFramesFlagName = fmt.Sprintf("%v.aggregationFrames", cmdPrefix)
		}

		aggregationFramesFlagValue, err := cmd.Flags().GetFloat64(aggregationFramesFlagName)
		if err != nil {
			return err, false
		}
		m.AggregationFrames = &aggregationFramesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAllowedFrequenciesFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	allowedFrequenciesFlagName := fmt.Sprintf("%v.allowedFrequencies", cmdPrefix)
	if cmd.Flags().Changed(allowedFrequenciesFlagName) {
		// warning: allowedFrequencies array type AllowedFrequencies is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAmsduEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	amsduEnabledFlagName := fmt.Sprintf("%v.amsduEnabled", cmdPrefix)
	if cmd.Flags().Changed(amsduEnabledFlagName) {

		var amsduEnabledFlagName string
		if cmdPrefix == "" {
			amsduEnabledFlagName = "amsduEnabled"
		} else {
			amsduEnabledFlagName = fmt.Sprintf("%v.amsduEnabled", cmdPrefix)
		}

		amsduEnabledFlagValue, err := cmd.Flags().GetBool(amsduEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.AmsduEnabled = &amsduEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAntennaGainFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaGainFlagName := fmt.Sprintf("%v.antennaGain", cmdPrefix)
	if cmd.Flags().Changed(antennaGainFlagName) {

		var antennaGainFlagName string
		if cmdPrefix == "" {
			antennaGainFlagName = "antennaGain"
		} else {
			antennaGainFlagName = fmt.Sprintf("%v.antennaGain", cmdPrefix)
		}

		antennaGainFlagValue, err := cmd.Flags().GetFloat64(antennaGainFlagName)
		if err != nil {
			return err, false
		}
		m.AntennaGain = &antennaGainFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAntennaIDFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaIdFlagName := fmt.Sprintf("%v.antennaId", cmdPrefix)
	if cmd.Flags().Changed(antennaIdFlagName) {

		var antennaIdFlagName string
		if cmdPrefix == "" {
			antennaIdFlagName = "antennaId"
		} else {
			antennaIdFlagName = fmt.Sprintf("%v.antennaId", cmdPrefix)
		}

		antennaIdFlagValue, err := cmd.Flags().GetFloat64(antennaIdFlagName)
		if err != nil {
			return err, false
		}
		m.AntennaID = &antennaIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigApMacFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apMacFlagName := fmt.Sprintf("%v.apMac", cmdPrefix)
	if cmd.Flags().Changed(apMacFlagName) {

		var apMacFlagName string
		if cmdPrefix == "" {
			apMacFlagName = "apMac"
		} else {
			apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
		}

		apMacFlagValue, err := cmd.Flags().GetString(apMacFlagName)
		if err != nil {
			return err, false
		}
		m.ApMac = &apMacFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAtpcEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	atpcEnabledFlagName := fmt.Sprintf("%v.atpcEnabled", cmdPrefix)
	if cmd.Flags().Changed(atpcEnabledFlagName) {

		var atpcEnabledFlagName string
		if cmdPrefix == "" {
			atpcEnabledFlagName = "atpcEnabled"
		} else {
			atpcEnabledFlagName = fmt.Sprintf("%v.atpcEnabled", cmdPrefix)
		}

		atpcEnabledFlagValue, err := cmd.Flags().GetBool(atpcEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.AtpcEnabled = &atpcEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigAtpcThresholdFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	atpcThresholdFlagName := fmt.Sprintf("%v.atpcThreshold", cmdPrefix)
	if cmd.Flags().Changed(atpcThresholdFlagName) {

		var atpcThresholdFlagName string
		if cmdPrefix == "" {
			atpcThresholdFlagName = "atpcThreshold"
		} else {
			atpcThresholdFlagName = fmt.Sprintf("%v.atpcThreshold", cmdPrefix)
		}

		atpcThresholdFlagValue, err := cmd.Flags().GetFloat64(atpcThresholdFlagName)
		if err != nil {
			return err, false
		}
		m.AtpcThreshold = &atpcThresholdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigBandFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bandFlagName := fmt.Sprintf("%v.band", cmdPrefix)
	if cmd.Flags().Changed(bandFlagName) {

		var bandFlagName string
		if cmdPrefix == "" {
			bandFlagName = "band"
		} else {
			bandFlagName = fmt.Sprintf("%v.band", cmdPrefix)
		}

		bandFlagValue, err := cmd.Flags().GetString(bandFlagName)
		if err != nil {
			return err, false
		}
		m.Band = &bandFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigBoardInfoFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	boardInfoFlagName := fmt.Sprintf("%v.boardInfo", cmdPrefix)
	if cmd.Flags().Changed(boardInfoFlagName) {
		// info: complex object boardInfo BoardInfo is retrieved outside this Changed() block
	}
	boardInfoFlagValue := m.BoardInfo
	if swag.IsZero(boardInfoFlagValue) {
		boardInfoFlagValue = &models.BoardInfo{}
	}

	err, boardInfoAdded := retrieveModelBoardInfoFlags(depth+1, boardInfoFlagValue, boardInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || boardInfoAdded
	if boardInfoAdded {
		m.BoardInfo = boardInfoFlagValue
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigCableLossFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cableLossFlagName := fmt.Sprintf("%v.cableLoss", cmdPrefix)
	if cmd.Flags().Changed(cableLossFlagName) {

		var cableLossFlagName string
		if cmdPrefix == "" {
			cableLossFlagName = "cableLoss"
		} else {
			cableLossFlagName = fmt.Sprintf("%v.cableLoss", cmdPrefix)
		}

		cableLossFlagValue, err := cmd.Flags().GetFloat64(cableLossFlagName)
		if err != nil {
			return err, false
		}
		m.CableLoss = &cableLossFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigCenterFrequencyFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	centerFrequencyFlagName := fmt.Sprintf("%v.centerFrequency", cmdPrefix)
	if cmd.Flags().Changed(centerFrequencyFlagName) {

		var centerFrequencyFlagName string
		if cmdPrefix == "" {
			centerFrequencyFlagName = "centerFrequency"
		} else {
			centerFrequencyFlagName = fmt.Sprintf("%v.centerFrequency", cmdPrefix)
		}

		centerFrequencyFlagValue, err := cmd.Flags().GetFloat64(centerFrequencyFlagName)
		if err != nil {
			return err, false
		}
		m.CenterFrequency = &centerFrequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigChannelWidthFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetFloat64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigControlFrequencyFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	controlFrequencyFlagName := fmt.Sprintf("%v.controlFrequency", cmdPrefix)
	if cmd.Flags().Changed(controlFrequencyFlagName) {

		var controlFrequencyFlagName string
		if cmdPrefix == "" {
			controlFrequencyFlagName = "controlFrequency"
		} else {
			controlFrequencyFlagName = fmt.Sprintf("%v.controlFrequency", cmdPrefix)
		}

		controlFrequencyFlagValue, err := cmd.Flags().GetFloat64(controlFrequencyFlagName)
		if err != nil {
			return err, false
		}
		m.ControlFrequency = &controlFrequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigCountryCodeFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryCodeFlagName := fmt.Sprintf("%v.countryCode", cmdPrefix)
	if cmd.Flags().Changed(countryCodeFlagName) {

		var countryCodeFlagName string
		if cmdPrefix == "" {
			countryCodeFlagName = "countryCode"
		} else {
			countryCodeFlagName = fmt.Sprintf("%v.countryCode", cmdPrefix)
		}

		countryCodeFlagValue, err := cmd.Flags().GetFloat64(countryCodeFlagName)
		if err != nil {
			return err, false
		}
		m.CountryCode = &countryCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigDeAuthProtectionStatusEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deAuthProtectionStatusEnabledFlagName := fmt.Sprintf("%v.deAuthProtectionStatusEnabled", cmdPrefix)
	if cmd.Flags().Changed(deAuthProtectionStatusEnabledFlagName) {

		var deAuthProtectionStatusEnabledFlagName string
		if cmdPrefix == "" {
			deAuthProtectionStatusEnabledFlagName = "deAuthProtectionStatusEnabled"
		} else {
			deAuthProtectionStatusEnabledFlagName = fmt.Sprintf("%v.deAuthProtectionStatusEnabled", cmdPrefix)
		}

		deAuthProtectionStatusEnabledFlagValue, err := cmd.Flags().GetBool(deAuthProtectionStatusEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.DeAuthProtectionStatusEnabled = &deAuthProtectionStatusEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigDevNameFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devNameFlagName := fmt.Sprintf("%v.devName", cmdPrefix)
	if cmd.Flags().Changed(devNameFlagName) {

		var devNameFlagName string
		if cmdPrefix == "" {
			devNameFlagName = "devName"
		} else {
			devNameFlagName = fmt.Sprintf("%v.devName", cmdPrefix)
		}

		devNameFlagValue, err := cmd.Flags().GetString(devNameFlagName)
		if err != nil {
			return err, false
		}
		m.DevName = &devNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigDistanceScaleFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distanceScaleFlagName := fmt.Sprintf("%v.distanceScale", cmdPrefix)
	if cmd.Flags().Changed(distanceScaleFlagName) {

		var distanceScaleFlagName string
		if cmdPrefix == "" {
			distanceScaleFlagName = "distanceScale"
		} else {
			distanceScaleFlagName = fmt.Sprintf("%v.distanceScale", cmdPrefix)
		}

		distanceScaleFlagValue, err := cmd.Flags().GetFloat64(distanceScaleFlagName)
		if err != nil {
			return err, false
		}
		m.DistanceScale = &distanceScaleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigDutyCycleFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dutyCycleFlagName := fmt.Sprintf("%v.dutyCycle", cmdPrefix)
	if cmd.Flags().Changed(dutyCycleFlagName) {

		var dutyCycleFlagName string
		if cmdPrefix == "" {
			dutyCycleFlagName = "dutyCycle"
		} else {
			dutyCycleFlagName = fmt.Sprintf("%v.dutyCycle", cmdPrefix)
		}

		dutyCycleFlagValue, err := cmd.Flags().GetFloat64(dutyCycleFlagName)
		if err != nil {
			return err, false
		}
		m.DutyCycle = &dutyCycleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigExtensionChannelFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	extensionChannelFlagName := fmt.Sprintf("%v.extensionChannel", cmdPrefix)
	if cmd.Flags().Changed(extensionChannelFlagName) {

		var extensionChannelFlagName string
		if cmdPrefix == "" {
			extensionChannelFlagName = "extensionChannel"
		} else {
			extensionChannelFlagName = fmt.Sprintf("%v.extensionChannel", cmdPrefix)
		}

		extensionChannelFlagValue, err := cmd.Flags().GetString(extensionChannelFlagName)
		if err != nil {
			return err, false
		}
		m.ExtensionChannel = &extensionChannelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigFramePeriodFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	framePeriodFlagName := fmt.Sprintf("%v.framePeriod", cmdPrefix)
	if cmd.Flags().Changed(framePeriodFlagName) {

		var framePeriodFlagName string
		if cmdPrefix == "" {
			framePeriodFlagName = "framePeriod"
		} else {
			framePeriodFlagName = fmt.Sprintf("%v.framePeriod", cmdPrefix)
		}

		framePeriodFlagValue, err := cmd.Flags().GetFloat64(framePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.FramePeriod = &framePeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigHideSsidFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hideSsidFlagName := fmt.Sprintf("%v.hideSsid", cmdPrefix)
	if cmd.Flags().Changed(hideSsidFlagName) {

		var hideSsidFlagName string
		if cmdPrefix == "" {
			hideSsidFlagName = "hideSsid"
		} else {
			hideSsidFlagName = fmt.Sprintf("%v.hideSsid", cmdPrefix)
		}

		hideSsidFlagValue, err := cmd.Flags().GetBool(hideSsidFlagName)
		if err != nil {
			return err, false
		}
		m.HideSsid = &hideSsidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIeeeModeStringFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ieeeModeStringFlagName := fmt.Sprintf("%v.ieeeModeString", cmdPrefix)
	if cmd.Flags().Changed(ieeeModeStringFlagName) {

		var ieeeModeStringFlagName string
		if cmdPrefix == "" {
			ieeeModeStringFlagName = "ieeeModeString"
		} else {
			ieeeModeStringFlagName = fmt.Sprintf("%v.ieeeModeString", cmdPrefix)
		}

		ieeeModeStringFlagValue, err := cmd.Flags().GetString(ieeeModeStringFlagName)
		if err != nil {
			return err, false
		}
		m.IeeeModeString = &ieeeModeStringFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsACKAutoDistanceEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isACKAutoDistanceEnabledFlagName := fmt.Sprintf("%v.isACKAutoDistanceEnabled", cmdPrefix)
	if cmd.Flags().Changed(isACKAutoDistanceEnabledFlagName) {

		var isACKAutoDistanceEnabledFlagName string
		if cmdPrefix == "" {
			isACKAutoDistanceEnabledFlagName = "isACKAutoDistanceEnabled"
		} else {
			isACKAutoDistanceEnabledFlagName = fmt.Sprintf("%v.isACKAutoDistanceEnabled", cmdPrefix)
		}

		isACKAutoDistanceEnabledFlagValue, err := cmd.Flags().GetBool(isACKAutoDistanceEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsACKAutoDistanceEnabled = &isACKAutoDistanceEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsAddMtikEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isAddMtikEnabledFlagName := fmt.Sprintf("%v.isAddMtikEnabled", cmdPrefix)
	if cmd.Flags().Changed(isAddMtikEnabledFlagName) {

		var isAddMtikEnabledFlagName string
		if cmdPrefix == "" {
			isAddMtikEnabledFlagName = "isAddMtikEnabled"
		} else {
			isAddMtikEnabledFlagName = fmt.Sprintf("%v.isAddMtikEnabled", cmdPrefix)
		}

		isAddMtikEnabledFlagValue, err := cmd.Flags().GetBool(isAddMtikEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsAddMtikEnabled = &isAddMtikEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsAutoChannelWidthEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isAutoChannelWidthEnabledFlagName := fmt.Sprintf("%v.isAutoChannelWidthEnabled", cmdPrefix)
	if cmd.Flags().Changed(isAutoChannelWidthEnabledFlagName) {

		var isAutoChannelWidthEnabledFlagName string
		if cmdPrefix == "" {
			isAutoChannelWidthEnabledFlagName = "isAutoChannelWidthEnabled"
		} else {
			isAutoChannelWidthEnabledFlagName = fmt.Sprintf("%v.isAutoChannelWidthEnabled", cmdPrefix)
		}

		isAutoChannelWidthEnabledFlagValue, err := cmd.Flags().GetBool(isAutoChannelWidthEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsAutoChannelWidthEnabled = &isAutoChannelWidthEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsAutoEIRPLimitEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isAutoEIRPLimitEnabledFlagName := fmt.Sprintf("%v.isAutoEIRPLimitEnabled", cmdPrefix)
	if cmd.Flags().Changed(isAutoEIRPLimitEnabledFlagName) {

		var isAutoEIRPLimitEnabledFlagName string
		if cmdPrefix == "" {
			isAutoEIRPLimitEnabledFlagName = "isAutoEIRPLimitEnabled"
		} else {
			isAutoEIRPLimitEnabledFlagName = fmt.Sprintf("%v.isAutoEIRPLimitEnabled", cmdPrefix)
		}

		isAutoEIRPLimitEnabledFlagValue, err := cmd.Flags().GetBool(isAutoEIRPLimitEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsAutoEIRPLimitEnabled = &isAutoEIRPLimitEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsAutoTXRateEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isAutoTXRateEnabledFlagName := fmt.Sprintf("%v.isAutoTXRateEnabled", cmdPrefix)
	if cmd.Flags().Changed(isAutoTXRateEnabledFlagName) {

		var isAutoTXRateEnabledFlagName string
		if cmdPrefix == "" {
			isAutoTXRateEnabledFlagName = "isAutoTXRateEnabled"
		} else {
			isAutoTXRateEnabledFlagName = fmt.Sprintf("%v.isAutoTXRateEnabled", cmdPrefix)
		}

		isAutoTXRateEnabledFlagValue, err := cmd.Flags().GetBool(isAutoTXRateEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsAutoTXRateEnabled = &isAutoTXRateEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsIsolationEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isIsolationEnabledFlagName := fmt.Sprintf("%v.isIsolationEnabled", cmdPrefix)
	if cmd.Flags().Changed(isIsolationEnabledFlagName) {

		var isIsolationEnabledFlagName string
		if cmdPrefix == "" {
			isIsolationEnabledFlagName = "isIsolationEnabled"
		} else {
			isIsolationEnabledFlagName = fmt.Sprintf("%v.isIsolationEnabled", cmdPrefix)
		}

		isIsolationEnabledFlagValue, err := cmd.Flags().GetBool(isIsolationEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsIsolationEnabled = &isIsolationEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsMulticastEnhanceEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isMulticastEnhanceEnabledFlagName := fmt.Sprintf("%v.isMulticastEnhanceEnabled", cmdPrefix)
	if cmd.Flags().Changed(isMulticastEnhanceEnabledFlagName) {

		var isMulticastEnhanceEnabledFlagName string
		if cmdPrefix == "" {
			isMulticastEnhanceEnabledFlagName = "isMulticastEnhanceEnabled"
		} else {
			isMulticastEnhanceEnabledFlagName = fmt.Sprintf("%v.isMulticastEnhanceEnabled", cmdPrefix)
		}

		isMulticastEnhanceEnabledFlagValue, err := cmd.Flags().GetBool(isMulticastEnhanceEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsMulticastEnhanceEnabled = &isMulticastEnhanceEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsRxGainAutoEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isRxGainAutoEnabledFlagName := fmt.Sprintf("%v.isRxGainAutoEnabled", cmdPrefix)
	if cmd.Flags().Changed(isRxGainAutoEnabledFlagName) {

		var isRxGainAutoEnabledFlagName string
		if cmdPrefix == "" {
			isRxGainAutoEnabledFlagName = "isRxGainAutoEnabled"
		} else {
			isRxGainAutoEnabledFlagName = fmt.Sprintf("%v.isRxGainAutoEnabled", cmdPrefix)
		}

		isRxGainAutoEnabledFlagValue, err := cmd.Flags().GetBool(isRxGainAutoEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsRxGainAutoEnabled = &isRxGainAutoEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigIsWDSEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isWDSEnabledFlagName := fmt.Sprintf("%v.isWDSEnabled", cmdPrefix)
	if cmd.Flags().Changed(isWDSEnabledFlagName) {

		var isWDSEnabledFlagName string
		if cmdPrefix == "" {
			isWDSEnabledFlagName = "isWDSEnabled"
		} else {
			isWDSEnabledFlagName = fmt.Sprintf("%v.isWDSEnabled", cmdPrefix)
		}

		isWDSEnabledFlagValue, err := cmd.Flags().GetBool(isWDSEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsWDSEnabled = &isWDSEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigLedThresholdsConfigFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ledThresholdsConfigFlagName := fmt.Sprintf("%v.ledThresholdsConfig", cmdPrefix)
	if cmd.Flags().Changed(ledThresholdsConfigFlagName) {
		// warning: ledThresholdsConfig map type LedThresholdsConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigMacACLConfigFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macAclConfigFlagName := fmt.Sprintf("%v.macACLConfig", cmdPrefix)
	if cmd.Flags().Changed(macAclConfigFlagName) {
		// info: complex object macACLConfig MacACLConfig is retrieved outside this Changed() block
	}
	macAclConfigFlagValue := m.MacACLConfig
	if swag.IsZero(macAclConfigFlagValue) {
		macAclConfigFlagValue = &models.MacACLConfig{}
	}

	err, macAclConfigAdded := retrieveModelMacACLConfigFlags(depth+1, macAclConfigFlagValue, macAclConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAclConfigAdded
	if macAclConfigAdded {
		m.MacACLConfig = macAclConfigFlagValue
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigModeFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modeFlagName := fmt.Sprintf("%v.mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = &modeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigPollingPriorityFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pollingPriorityFlagName := fmt.Sprintf("%v.pollingPriority", cmdPrefix)
	if cmd.Flags().Changed(pollingPriorityFlagName) {

		var pollingPriorityFlagName string
		if cmdPrefix == "" {
			pollingPriorityFlagName = "pollingPriority"
		} else {
			pollingPriorityFlagName = fmt.Sprintf("%v.pollingPriority", cmdPrefix)
		}

		pollingPriorityFlagValue, err := cmd.Flags().GetFloat64(pollingPriorityFlagName)
		if err != nil {
			return err, false
		}
		m.PollingPriority = &pollingPriorityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigRegulatoryDomainBandsFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regulatoryDomainBandsFlagName := fmt.Sprintf("%v.regulatoryDomainBands", cmdPrefix)
	if cmd.Flags().Changed(regulatoryDomainBandsFlagName) {
		// warning: regulatoryDomainBands array type RegulatoryDomainBands is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigRegulatoryDomainChannelsFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regulatoryDomainChannelsFlagName := fmt.Sprintf("%v.regulatoryDomainChannels", cmdPrefix)
	if cmd.Flags().Changed(regulatoryDomainChannelsFlagName) {
		// warning: regulatoryDomainChannels array type RegulatoryDomainChannels is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigRxGainFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxGainFlagName := fmt.Sprintf("%v.rxGain", cmdPrefix)
	if cmd.Flags().Changed(rxGainFlagName) {

		var rxGainFlagName string
		if cmdPrefix == "" {
			rxGainFlagName = "rxGain"
		} else {
			rxGainFlagName = fmt.Sprintf("%v.rxGain", cmdPrefix)
		}

		rxGainFlagValue, err := cmd.Flags().GetFloat64(rxGainFlagName)
		if err != nil {
			return err, false
		}
		m.RxGain = &rxGainFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigRxTargetPowerFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxTargetPowerFlagName := fmt.Sprintf("%v.rxTargetPower", cmdPrefix)
	if cmd.Flags().Changed(rxTargetPowerFlagName) {

		var rxTargetPowerFlagName string
		if cmdPrefix == "" {
			rxTargetPowerFlagName = "rxTargetPower"
		} else {
			rxTargetPowerFlagName = fmt.Sprintf("%v.rxTargetPower", cmdPrefix)
		}

		rxTargetPowerFlagValue, err := cmd.Flags().GetFloat64(rxTargetPowerFlagName)
		if err != nil {
			return err, false
		}
		m.RxTargetPower = &rxTargetPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigSecurityConfigFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securityConfigFlagName := fmt.Sprintf("%v.securityConfig", cmdPrefix)
	if cmd.Flags().Changed(securityConfigFlagName) {
		// info: complex object securityConfig SecurityConfig is retrieved outside this Changed() block
	}
	securityConfigFlagValue := m.SecurityConfig
	if swag.IsZero(securityConfigFlagValue) {
		securityConfigFlagValue = &models.SecurityConfig{}
	}

	err, securityConfigAdded := retrieveModelSecurityConfigFlags(depth+1, securityConfigFlagValue, securityConfigFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securityConfigAdded
	if securityConfigAdded {
		m.SecurityConfig = securityConfigFlagValue
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigSensitivityThresholdFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sensitivityThresholdFlagName := fmt.Sprintf("%v.sensitivityThreshold", cmdPrefix)
	if cmd.Flags().Changed(sensitivityThresholdFlagName) {

		var sensitivityThresholdFlagName string
		if cmdPrefix == "" {
			sensitivityThresholdFlagName = "sensitivityThreshold"
		} else {
			sensitivityThresholdFlagName = fmt.Sprintf("%v.sensitivityThreshold", cmdPrefix)
		}

		sensitivityThresholdFlagValue, err := cmd.Flags().GetFloat64(sensitivityThresholdFlagName)
		if err != nil {
			return err, false
		}
		m.SensitivityThreshold = &sensitivityThresholdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigSensitivityThresholdEnabledFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sensitivityThresholdEnabledFlagName := fmt.Sprintf("%v.sensitivityThresholdEnabled", cmdPrefix)
	if cmd.Flags().Changed(sensitivityThresholdEnabledFlagName) {

		var sensitivityThresholdEnabledFlagName string
		if cmdPrefix == "" {
			sensitivityThresholdEnabledFlagName = "sensitivityThresholdEnabled"
		} else {
			sensitivityThresholdEnabledFlagName = fmt.Sprintf("%v.sensitivityThresholdEnabled", cmdPrefix)
		}

		sensitivityThresholdEnabledFlagValue, err := cmd.Flags().GetBool(sensitivityThresholdEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.SensitivityThresholdEnabled = &sensitivityThresholdEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigSsidFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = &ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigSyncModeFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	syncModeFlagName := fmt.Sprintf("%v.syncMode", cmdPrefix)
	if cmd.Flags().Changed(syncModeFlagName) {

		var syncModeFlagName string
		if cmdPrefix == "" {
			syncModeFlagName = "syncMode"
		} else {
			syncModeFlagName = fmt.Sprintf("%v.syncMode", cmdPrefix)
		}

		syncModeFlagValue, err := cmd.Flags().GetFloat64(syncModeFlagName)
		if err != nil {
			return err, false
		}
		m.SyncMode = &syncModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigTddFramingFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tddFramingFlagName := fmt.Sprintf("%v.tddFraming", cmdPrefix)
	if cmd.Flags().Changed(tddFramingFlagName) {
		// info: complex object tddFraming TddFraming is retrieved outside this Changed() block
	}
	tddFramingFlagValue := m.TddFraming
	if swag.IsZero(tddFramingFlagValue) {
		tddFramingFlagValue = &models.TddFraming{}
	}

	err, tddFramingAdded := retrieveModelTddFramingFlags(depth+1, tddFramingFlagValue, tddFramingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tddFramingAdded
	if tddFramingAdded {
		m.TddFraming = tddFramingFlagValue
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigTdmaFilterFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tdmaFilterFlagName := fmt.Sprintf("%v.tdmaFilter", cmdPrefix)
	if cmd.Flags().Changed(tdmaFilterFlagName) {

		var tdmaFilterFlagName string
		if cmdPrefix == "" {
			tdmaFilterFlagName = "tdmaFilter"
		} else {
			tdmaFilterFlagName = fmt.Sprintf("%v.tdmaFilter", cmdPrefix)
		}

		tdmaFilterFlagValue, err := cmd.Flags().GetFloat64(tdmaFilterFlagName)
		if err != nil {
			return err, false
		}
		m.TdmaFilter = &tdmaFilterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigTxPowerFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txPowerFlagName := fmt.Sprintf("%v.txPower", cmdPrefix)
	if cmd.Flags().Changed(txPowerFlagName) {

		var txPowerFlagName string
		if cmdPrefix == "" {
			txPowerFlagName = "txPower"
		} else {
			txPowerFlagName = fmt.Sprintf("%v.txPower", cmdPrefix)
		}

		txPowerFlagValue, err := cmd.Flags().GetFloat64(txPowerFlagName)
		if err != nil {
			return err, false
		}
		m.TxPower = &txPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigTxPowerMaxFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txPowerMaxFlagName := fmt.Sprintf("%v.txPowerMax", cmdPrefix)
	if cmd.Flags().Changed(txPowerMaxFlagName) {

		var txPowerMaxFlagName string
		if cmdPrefix == "" {
			txPowerMaxFlagName = "txPowerMax"
		} else {
			txPowerMaxFlagName = fmt.Sprintf("%v.txPowerMax", cmdPrefix)
		}

		txPowerMaxFlagValue, err := cmd.Flags().GetFloat64(txPowerMaxFlagName)
		if err != nil {
			return err, false
		}
		m.TxPowerMax = &txPowerMaxFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigTxRateFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txRateFlagName := fmt.Sprintf("%v.txRate", cmdPrefix)
	if cmd.Flags().Changed(txRateFlagName) {

		var txRateFlagName string
		if cmdPrefix == "" {
			txRateFlagName = "txRate"
		} else {
			txRateFlagName = fmt.Sprintf("%v.txRate", cmdPrefix)
		}

		txRateFlagValue, err := cmd.Flags().GetFloat64(txRateFlagName)
		if err != nil {
			return err, false
		}
		m.TxRate = &txRateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirMaxWifiConfigTxRateModeFlags(depth int, m *models.AirMaxWifiConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	txRateModeFlagName := fmt.Sprintf("%v.txRateMode", cmdPrefix)
	if cmd.Flags().Changed(txRateModeFlagName) {

		var txRateModeFlagName string
		if cmdPrefix == "" {
			txRateModeFlagName = "txRateMode"
		} else {
			txRateModeFlagName = fmt.Sprintf("%v.txRateMode", cmdPrefix)
		}

		txRateModeFlagValue, err := cmd.Flags().GetFloat64(txRateModeFlagName)
		if err != nil {
			return err, false
		}
		m.TxRateMode = &txRateModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
