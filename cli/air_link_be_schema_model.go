// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
  "github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for AirLinkBeSchema

// register flags to command
func registerModelAirLinkBeSchemaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAirLinkBeSchemaDistance(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAirLinkBeSchemaElevations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAirLinkBeSchemaDistance(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distanceDescription := `Required. `

	var distanceFlagName string
	if cmdPrefix == "" {
		distanceFlagName = "distance"
	} else {
		distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
	}

	var distanceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(distanceFlagName, distanceFlagDefault, distanceDescription)

	return nil
}

func registerAirLinkBeSchemaElevations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var elevationsFlagName string
	if cmdPrefix == "" {
		elevationsFlagName = "elevations"
	} else {
		elevationsFlagName = fmt.Sprintf("%v.elevations", cmdPrefix)
	}

	if err := registerModelElevations1Flags(depth+1, elevationsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAirLinkBeSchemaFlags(depth int, m *models.AirLinkBeSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, distanceAdded := retrieveAirLinkBeSchemaDistanceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distanceAdded

	err, elevationsAdded := retrieveAirLinkBeSchemaElevationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || elevationsAdded

	return nil, retAdded
}

func retrieveAirLinkBeSchemaDistanceFlags(depth int, m *models.AirLinkBeSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distanceFlagName := fmt.Sprintf("%v.distance", cmdPrefix)
	if cmd.Flags().Changed(distanceFlagName) {

		var distanceFlagName string
		if cmdPrefix == "" {
			distanceFlagName = "distance"
		} else {
			distanceFlagName = fmt.Sprintf("%v.distance", cmdPrefix)
		}

		distanceFlagValue, err := cmd.Flags().GetFloat64(distanceFlagName)
		if err != nil {
			return err, false
		}
		m.Distance = &distanceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAirLinkBeSchemaElevationsFlags(depth int, m *models.AirLinkBeSchema, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	elevationsFlagName := fmt.Sprintf("%v.elevations", cmdPrefix)
	if cmd.Flags().Changed(elevationsFlagName) {
		// info: complex object elevations Elevations1 is retrieved outside this Changed() block
	}
	elevationsFlagValue := m.Elevations
	if swag.IsZero(elevationsFlagValue) {
		elevationsFlagValue = &models.Elevations1{}
	}

	err, elevationsAdded := retrieveModelElevations1Flags(depth+1, elevationsFlagValue, elevationsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || elevationsAdded
	if elevationsAdded {
		m.Elevations = elevationsFlagValue
	}

	return nil, retAdded
}
