// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model67

// register flags to command
func registerModelModel67Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel67DisplayName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel67ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel67UsableForGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel67UsedAuto(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel67DisplayName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	displayNameDescription := ``

	var displayNameFlagName string
	if cmdPrefix == "" {
		displayNameFlagName = "displayName"
	} else {
		displayNameFlagName = fmt.Sprintf("%v.displayName", cmdPrefix)
	}

	var displayNameFlagDefault string

	_ = cmd.PersistentFlags().String(displayNameFlagName, displayNameFlagDefault, displayNameDescription)

	return nil
}

func registerModel67ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Interface name.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerModel67UsableForGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usableForGatewayDescription := ``

	var usableForGatewayFlagName string
	if cmdPrefix == "" {
		usableForGatewayFlagName = "usableForGateway"
	} else {
		usableForGatewayFlagName = fmt.Sprintf("%v.usableForGateway", cmdPrefix)
	}

	var usableForGatewayFlagDefault bool

	_ = cmd.PersistentFlags().Bool(usableForGatewayFlagName, usableForGatewayFlagDefault, usableForGatewayDescription)

	return nil
}

func registerModel67UsedAuto(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usedAutoDescription := ``

	var usedAutoFlagName string
	if cmdPrefix == "" {
		usedAutoFlagName = "usedAuto"
	} else {
		usedAutoFlagName = fmt.Sprintf("%v.usedAuto", cmdPrefix)
	}

	var usedAutoFlagDefault bool

	_ = cmd.PersistentFlags().Bool(usedAutoFlagName, usedAutoFlagDefault, usedAutoDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel67Flags(depth int, m *models.Model67, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, displayNameAdded := retrieveModel67DisplayNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || displayNameAdded

	err, idAdded := retrieveModel67IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, usableForGatewayAdded := retrieveModel67UsableForGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usableForGatewayAdded

	err, usedAutoAdded := retrieveModel67UsedAutoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usedAutoAdded

	return nil, retAdded
}

func retrieveModel67DisplayNameFlags(depth int, m *models.Model67, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	displayNameFlagName := fmt.Sprintf("%v.displayName", cmdPrefix)
	if cmd.Flags().Changed(displayNameFlagName) {

		var displayNameFlagName string
		if cmdPrefix == "" {
			displayNameFlagName = "displayName"
		} else {
			displayNameFlagName = fmt.Sprintf("%v.displayName", cmdPrefix)
		}

		displayNameFlagValue, err := cmd.Flags().GetString(displayNameFlagName)
		if err != nil {
			return err, false
		}
		m.DisplayName = displayNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel67IDFlags(depth int, m *models.Model67, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel67UsableForGatewayFlags(depth int, m *models.Model67, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usableForGatewayFlagName := fmt.Sprintf("%v.usableForGateway", cmdPrefix)
	if cmd.Flags().Changed(usableForGatewayFlagName) {

		var usableForGatewayFlagName string
		if cmdPrefix == "" {
			usableForGatewayFlagName = "usableForGateway"
		} else {
			usableForGatewayFlagName = fmt.Sprintf("%v.usableForGateway", cmdPrefix)
		}

		usableForGatewayFlagValue, err := cmd.Flags().GetBool(usableForGatewayFlagName)
		if err != nil {
			return err, false
		}
		m.UsableForGateway = usableForGatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel67UsedAutoFlags(depth int, m *models.Model67, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usedAutoFlagName := fmt.Sprintf("%v.usedAuto", cmdPrefix)
	if cmd.Flags().Changed(usedAutoFlagName) {

		var usedAutoFlagName string
		if cmdPrefix == "" {
			usedAutoFlagName = "usedAuto"
		} else {
			usedAutoFlagName = fmt.Sprintf("%v.usedAuto", cmdPrefix)
		}

		usedAutoFlagValue, err := cmd.Flags().GetBool(usedAutoFlagName)
		if err != nil {
			return err, false
		}
		m.UsedAuto = usedAutoFlagValue

		retAdded = true
	}

	return nil, retAdded
}
