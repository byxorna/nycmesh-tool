// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for OspfConfig

// register flags to command
func registerModelOspfConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOspfConfigAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOspfConfigAuthKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOspfConfigAuthKeysMD5(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOspfConfigCost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOspfConfigEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOspfConfigAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authDescription := ``

	var authFlagName string
	if cmdPrefix == "" {
		authFlagName = "auth"
	} else {
		authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
	}

	var authFlagDefault string

	_ = cmd.PersistentFlags().String(authFlagName, authFlagDefault, authDescription)

	return nil
}

func registerOspfConfigAuthKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authKeyDescription := ``

	var authKeyFlagName string
	if cmdPrefix == "" {
		authKeyFlagName = "authKey"
	} else {
		authKeyFlagName = fmt.Sprintf("%v.authKey", cmdPrefix)
	}

	var authKeyFlagDefault string

	_ = cmd.PersistentFlags().String(authKeyFlagName, authKeyFlagDefault, authKeyDescription)

	return nil
}

func registerOspfConfigAuthKeysMD5(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: authKeysMD5 AuthKeysMD5 array type is not supported by go-swagger cli yet

	return nil
}

func registerOspfConfigCost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	costDescription := ``

	var costFlagName string
	if cmdPrefix == "" {
		costFlagName = "cost"
	} else {
		costFlagName = fmt.Sprintf("%v.cost", cmdPrefix)
	}

	var costFlagDefault string

	_ = cmd.PersistentFlags().String(costFlagName, costFlagDefault, costDescription)

	return nil
}

func registerOspfConfigEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOspfConfigFlags(depth int, m *models.OspfConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authAdded := retrieveOspfConfigAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authAdded

	err, authKeyAdded := retrieveOspfConfigAuthKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authKeyAdded

	err, authKeysMD5Added := retrieveOspfConfigAuthKeysMD5Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authKeysMD5Added

	err, costAdded := retrieveOspfConfigCostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || costAdded

	err, enabledAdded := retrieveOspfConfigEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	return nil, retAdded
}

func retrieveOspfConfigAuthFlags(depth int, m *models.OspfConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authFlagName := fmt.Sprintf("%v.auth", cmdPrefix)
	if cmd.Flags().Changed(authFlagName) {

		var authFlagName string
		if cmdPrefix == "" {
			authFlagName = "auth"
		} else {
			authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
		}

		authFlagValue, err := cmd.Flags().GetString(authFlagName)
		if err != nil {
			return err, false
		}
		m.Auth = authFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOspfConfigAuthKeyFlags(depth int, m *models.OspfConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authKeyFlagName := fmt.Sprintf("%v.authKey", cmdPrefix)
	if cmd.Flags().Changed(authKeyFlagName) {

		var authKeyFlagName string
		if cmdPrefix == "" {
			authKeyFlagName = "authKey"
		} else {
			authKeyFlagName = fmt.Sprintf("%v.authKey", cmdPrefix)
		}

		authKeyFlagValue, err := cmd.Flags().GetString(authKeyFlagName)
		if err != nil {
			return err, false
		}
		m.AuthKey = authKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOspfConfigAuthKeysMD5Flags(depth int, m *models.OspfConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authKeysMD5FlagName := fmt.Sprintf("%v.authKeysMD5", cmdPrefix)
	if cmd.Flags().Changed(authKeysMD5FlagName) {
		// warning: authKeysMD5 array type AuthKeysMD5 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveOspfConfigCostFlags(depth int, m *models.OspfConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	costFlagName := fmt.Sprintf("%v.cost", cmdPrefix)
	if cmd.Flags().Changed(costFlagName) {

		var costFlagName string
		if cmdPrefix == "" {
			costFlagName = "cost"
		} else {
			costFlagName = fmt.Sprintf("%v.cost", cmdPrefix)
		}

		costFlagValue, err := cmd.Flags().GetString(costFlagName)
		if err != nil {
			return err, false
		}
		m.Cost = costFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOspfConfigEnabledFlags(depth int, m *models.OspfConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}
