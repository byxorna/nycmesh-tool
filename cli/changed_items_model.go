// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for ChangedItems

// register flags to command
func registerModelChangedItemsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerChangedItemsAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChangedItemsDeletedSites(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChangedItemsSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChangedItemsSites(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChangedItemsUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerChangedItemsAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := `Server address, null if hostname cannot be resolved.`

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerChangedItemsDeletedSites(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: deletedSites DeletedSitesList array type is not supported by go-swagger cli yet

	return nil
}

func registerChangedItemsSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var settingsFlagName string
	if cmdPrefix == "" {
		settingsFlagName = "settings"
	} else {
		settingsFlagName = fmt.Sprintf("%v.settings", cmdPrefix)
	}

	if err := registerModelNmsSettingsFlags(depth+1, settingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerChangedItemsSites(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: sites SitesList array type is not supported by go-swagger cli yet

	return nil
}

func registerChangedItemsUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: users UserList array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelChangedItemsFlags(depth int, m *models.ChangedItems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveChangedItemsAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, deletedSitesAdded := retrieveChangedItemsDeletedSitesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletedSitesAdded

	err, settingsAdded := retrieveChangedItemsSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || settingsAdded

	err, sitesAdded := retrieveChangedItemsSitesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sitesAdded

	err, usersAdded := retrieveChangedItemsUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usersAdded

	return nil, retAdded
}

func retrieveChangedItemsAddressFlags(depth int, m *models.ChangedItems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveChangedItemsDeletedSitesFlags(depth int, m *models.ChangedItems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletedSitesFlagName := fmt.Sprintf("%v.deletedSites", cmdPrefix)
	if cmd.Flags().Changed(deletedSitesFlagName) {
		// warning: deletedSites array type DeletedSitesList is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveChangedItemsSettingsFlags(depth int, m *models.ChangedItems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	settingsFlagName := fmt.Sprintf("%v.settings", cmdPrefix)
	if cmd.Flags().Changed(settingsFlagName) {
		// info: complex object settings NmsSettings is retrieved outside this Changed() block
	}
	settingsFlagValue := m.Settings
	if swag.IsZero(settingsFlagValue) {
		settingsFlagValue = &models.NmsSettings{}
	}

	err, settingsAdded := retrieveModelNmsSettingsFlags(depth+1, settingsFlagValue, settingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || settingsAdded
	if settingsAdded {
		m.Settings = settingsFlagValue
	}

	return nil, retAdded
}

func retrieveChangedItemsSitesFlags(depth int, m *models.ChangedItems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sitesFlagName := fmt.Sprintf("%v.sites", cmdPrefix)
	if cmd.Flags().Changed(sitesFlagName) {
		// warning: sites array type SitesList is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveChangedItemsUsersFlags(depth int, m *models.ChangedItems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usersFlagName := fmt.Sprintf("%v.users", cmdPrefix)
	if cmd.Flags().Changed(usersFlagName) {
		// warning: users array type UserList is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
