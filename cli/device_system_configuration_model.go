// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for DeviceSystemConfiguration

// register flags to command
func registerModelDeviceSystemConfigurationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceSystemConfigurationAccessFromSfp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationAdmin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationClientIsolation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationDhcpOption82(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationDns1(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationDns2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationDNSServers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationDomainName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIgmpSnooping(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationInbandManagementVlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIPV4Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIPV4AddressType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIPV4Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIPV6AddressType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIPV6Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationIPV6SlaacEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationJumboMtu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationMtu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationReadOnlyAccount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationStp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationTimezone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceSystemConfigurationTimezoneList(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemConfigurationAccessFromSfp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessFromSfpDescription := ``

	var accessFromSfpFlagName string
	if cmdPrefix == "" {
		accessFromSfpFlagName = "accessFromSfp"
	} else {
		accessFromSfpFlagName = fmt.Sprintf("%v.accessFromSfp", cmdPrefix)
	}

	var accessFromSfpFlagDefault bool

	_ = cmd.PersistentFlags().Bool(accessFromSfpFlagName, accessFromSfpFlagDefault, accessFromSfpDescription)

	return nil
}

func registerDeviceSystemConfigurationAdmin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var adminFlagName string
	if cmdPrefix == "" {
		adminFlagName = "admin"
	} else {
		adminFlagName = fmt.Sprintf("%v.admin", cmdPrefix)
	}

	if err := registerModelAdminFlags(depth+1, adminFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemConfigurationClientIsolation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientIsolationDescription := ``

	var clientIsolationFlagName string
	if cmdPrefix == "" {
		clientIsolationFlagName = "clientIsolation"
	} else {
		clientIsolationFlagName = fmt.Sprintf("%v.clientIsolation", cmdPrefix)
	}

	var clientIsolationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(clientIsolationFlagName, clientIsolationFlagDefault, clientIsolationDescription)

	return nil
}

func registerDeviceSystemConfigurationDhcpOption82(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpOption82Description := `Set to true to allow DHCP option 82`

	var dhcpOption82FlagName string
	if cmdPrefix == "" {
		dhcpOption82FlagName = "dhcpOption82"
	} else {
		dhcpOption82FlagName = fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
	}

	var dhcpOption82FlagDefault bool

	_ = cmd.PersistentFlags().Bool(dhcpOption82FlagName, dhcpOption82FlagDefault, dhcpOption82Description)

	return nil
}

func registerDeviceSystemConfigurationDns1(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dns1Description := ``

	var dns1FlagName string
	if cmdPrefix == "" {
		dns1FlagName = "dns1"
	} else {
		dns1FlagName = fmt.Sprintf("%v.dns1", cmdPrefix)
	}

	var dns1FlagDefault string

	_ = cmd.PersistentFlags().String(dns1FlagName, dns1FlagDefault, dns1Description)

	return nil
}

func registerDeviceSystemConfigurationDns2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dns2Description := ``

	var dns2FlagName string
	if cmdPrefix == "" {
		dns2FlagName = "dns2"
	} else {
		dns2FlagName = fmt.Sprintf("%v.dns2", cmdPrefix)
	}

	var dns2FlagDefault string

	_ = cmd.PersistentFlags().String(dns2FlagName, dns2FlagDefault, dns2Description)

	return nil
}

func registerDeviceSystemConfigurationDNSServers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dnsServers DNSServers array type is not supported by go-swagger cli yet

	return nil
}

func registerDeviceSystemConfigurationDomainName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	domainNameDescription := ``

	var domainNameFlagName string
	if cmdPrefix == "" {
		domainNameFlagName = "domainName"
	} else {
		domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
	}

	var domainNameFlagDefault string

	_ = cmd.PersistentFlags().String(domainNameFlagName, domainNameFlagDefault, domainNameDescription)

	return nil
}

func registerDeviceSystemConfigurationGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := ``

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerDeviceSystemConfigurationIgmpSnooping(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	igmpSnoopingDescription := ``

	var igmpSnoopingFlagName string
	if cmdPrefix == "" {
		igmpSnoopingFlagName = "igmpSnooping"
	} else {
		igmpSnoopingFlagName = fmt.Sprintf("%v.igmpSnooping", cmdPrefix)
	}

	var igmpSnoopingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(igmpSnoopingFlagName, igmpSnoopingFlagDefault, igmpSnoopingDescription)

	return nil
}

func registerDeviceSystemConfigurationInbandManagementVlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inbandManagementVlanDescription := ``

	var inbandManagementVlanFlagName string
	if cmdPrefix == "" {
		inbandManagementVlanFlagName = "inbandManagementVlan"
	} else {
		inbandManagementVlanFlagName = fmt.Sprintf("%v.inbandManagementVlan", cmdPrefix)
	}

	var inbandManagementVlanFlagDefault string

	_ = cmd.PersistentFlags().String(inbandManagementVlanFlagName, inbandManagementVlanFlagDefault, inbandManagementVlanDescription)

	return nil
}

func registerDeviceSystemConfigurationIPV4Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV4AddressDescription := ``

	var ipV4AddressFlagName string
	if cmdPrefix == "" {
		ipV4AddressFlagName = "ipV4Address"
	} else {
		ipV4AddressFlagName = fmt.Sprintf("%v.ipV4Address", cmdPrefix)
	}

	var ipV4AddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipV4AddressFlagName, ipV4AddressFlagDefault, ipV4AddressDescription)

	return nil
}

func registerDeviceSystemConfigurationIPV4AddressType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV4AddressTypeDescription := `Enum: ["dhcp","slaac","linkLocal","static"]. `

	var ipV4AddressTypeFlagName string
	if cmdPrefix == "" {
		ipV4AddressTypeFlagName = "ipV4AddressType"
	} else {
		ipV4AddressTypeFlagName = fmt.Sprintf("%v.ipV4AddressType", cmdPrefix)
	}

	var ipV4AddressTypeFlagDefault string

	_ = cmd.PersistentFlags().String(ipV4AddressTypeFlagName, ipV4AddressTypeFlagDefault, ipV4AddressTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(ipV4AddressTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["dhcp","slaac","linkLocal","static"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemConfigurationIPV4Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV4GatewayDescription := ``

	var ipV4GatewayFlagName string
	if cmdPrefix == "" {
		ipV4GatewayFlagName = "ipV4Gateway"
	} else {
		ipV4GatewayFlagName = fmt.Sprintf("%v.ipV4Gateway", cmdPrefix)
	}

	var ipV4GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(ipV4GatewayFlagName, ipV4GatewayFlagDefault, ipV4GatewayDescription)

	return nil
}

func registerDeviceSystemConfigurationIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6AddressDescription := ``

	var ipV6AddressFlagName string
	if cmdPrefix == "" {
		ipV6AddressFlagName = "ipV6Address"
	} else {
		ipV6AddressFlagName = fmt.Sprintf("%v.ipV6Address", cmdPrefix)
	}

	var ipV6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipV6AddressFlagName, ipV6AddressFlagDefault, ipV6AddressDescription)

	return nil
}

func registerDeviceSystemConfigurationIPV6AddressType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6AddressTypeDescription := `Enum: ["dhcp","slaac","linkLocal","static"]. `

	var ipV6AddressTypeFlagName string
	if cmdPrefix == "" {
		ipV6AddressTypeFlagName = "ipV6AddressType"
	} else {
		ipV6AddressTypeFlagName = fmt.Sprintf("%v.ipV6AddressType", cmdPrefix)
	}

	var ipV6AddressTypeFlagDefault string

	_ = cmd.PersistentFlags().String(ipV6AddressTypeFlagName, ipV6AddressTypeFlagDefault, ipV6AddressTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(ipV6AddressTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["dhcp","slaac","linkLocal","static"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemConfigurationIPV6Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6GatewayDescription := ``

	var ipV6GatewayFlagName string
	if cmdPrefix == "" {
		ipV6GatewayFlagName = "ipV6Gateway"
	} else {
		ipV6GatewayFlagName = fmt.Sprintf("%v.ipV6Gateway", cmdPrefix)
	}

	var ipV6GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(ipV6GatewayFlagName, ipV6GatewayFlagDefault, ipV6GatewayDescription)

	return nil
}

func registerDeviceSystemConfigurationIPV6SlaacEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipV6SlaacEnabledDescription := `Set to true if Edge Switch has a SLAAC IPv6 address.`

	var ipV6SlaacEnabledFlagName string
	if cmdPrefix == "" {
		ipV6SlaacEnabledFlagName = "ipV6SlaacEnabled"
	} else {
		ipV6SlaacEnabledFlagName = fmt.Sprintf("%v.ipV6SlaacEnabled", cmdPrefix)
	}

	var ipV6SlaacEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ipV6SlaacEnabledFlagName, ipV6SlaacEnabledFlagDefault, ipV6SlaacEnabledDescription)

	return nil
}

func registerDeviceSystemConfigurationJumboMtu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var jumboMtuFlagName string
	if cmdPrefix == "" {
		jumboMtuFlagName = "jumboMtu"
	} else {
		jumboMtuFlagName = fmt.Sprintf("%v.jumboMtu", cmdPrefix)
	}

	if err := registerModelJumboMtuFlags(depth+1, jumboMtuFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemConfigurationMtu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mtuDescription := ``

	var mtuFlagName string
	if cmdPrefix == "" {
		mtuFlagName = "mtu"
	} else {
		mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
	}

	var mtuFlagDefault string

	_ = cmd.PersistentFlags().String(mtuFlagName, mtuFlagDefault, mtuDescription)

	return nil
}

func registerDeviceSystemConfigurationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDeviceSystemConfigurationReadOnlyAccount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var readOnlyAccountFlagName string
	if cmdPrefix == "" {
		readOnlyAccountFlagName = "readOnlyAccount"
	} else {
		readOnlyAccountFlagName = fmt.Sprintf("%v.readOnlyAccount", cmdPrefix)
	}

	if err := registerModelReadOnlyAccountFlags(depth+1, readOnlyAccountFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemConfigurationStp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var stpFlagName string
	if cmdPrefix == "" {
		stpFlagName = "stp"
	} else {
		stpFlagName = fmt.Sprintf("%v.stp", cmdPrefix)
	}

	if err := registerModelSpanningTreeProtocolSchemaFlags(depth+1, stpFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceSystemConfigurationTimezone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timezoneDescription := ``

	var timezoneFlagName string
	if cmdPrefix == "" {
		timezoneFlagName = "timezone"
	} else {
		timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
	}

	var timezoneFlagDefault string

	_ = cmd.PersistentFlags().String(timezoneFlagName, timezoneFlagDefault, timezoneDescription)

	return nil
}

func registerDeviceSystemConfigurationTimezoneList(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: timezoneList TimezoneList array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceSystemConfigurationFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessFromSfpAdded := retrieveDeviceSystemConfigurationAccessFromSfpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessFromSfpAdded

	err, adminAdded := retrieveDeviceSystemConfigurationAdminFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminAdded

	err, clientIsolationAdded := retrieveDeviceSystemConfigurationClientIsolationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientIsolationAdded

	err, dhcpOption82Added := retrieveDeviceSystemConfigurationDhcpOption82Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpOption82Added

	err, dns1Added := retrieveDeviceSystemConfigurationDns1Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dns1Added

	err, dns2Added := retrieveDeviceSystemConfigurationDns2Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dns2Added

	err, dnsServersAdded := retrieveDeviceSystemConfigurationDNSServersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsServersAdded

	err, domainNameAdded := retrieveDeviceSystemConfigurationDomainNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainNameAdded

	err, gatewayAdded := retrieveDeviceSystemConfigurationGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, igmpSnoopingAdded := retrieveDeviceSystemConfigurationIgmpSnoopingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || igmpSnoopingAdded

	err, inbandManagementVlanAdded := retrieveDeviceSystemConfigurationInbandManagementVlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inbandManagementVlanAdded

	err, ipV4AddressAdded := retrieveDeviceSystemConfigurationIPV4AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV4AddressAdded

	err, ipV4AddressTypeAdded := retrieveDeviceSystemConfigurationIPV4AddressTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV4AddressTypeAdded

	err, ipV4GatewayAdded := retrieveDeviceSystemConfigurationIPV4GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV4GatewayAdded

	err, ipV6AddressAdded := retrieveDeviceSystemConfigurationIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6AddressAdded

	err, ipV6AddressTypeAdded := retrieveDeviceSystemConfigurationIPV6AddressTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6AddressTypeAdded

	err, ipV6GatewayAdded := retrieveDeviceSystemConfigurationIPV6GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6GatewayAdded

	err, ipV6SlaacEnabledAdded := retrieveDeviceSystemConfigurationIPV6SlaacEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipV6SlaacEnabledAdded

	err, jumboMtuAdded := retrieveDeviceSystemConfigurationJumboMtuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jumboMtuAdded

	err, mtuAdded := retrieveDeviceSystemConfigurationMtuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mtuAdded

	err, nameAdded := retrieveDeviceSystemConfigurationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, readOnlyAccountAdded := retrieveDeviceSystemConfigurationReadOnlyAccountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAccountAdded

	err, stpAdded := retrieveDeviceSystemConfigurationStpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stpAdded

	err, timezoneAdded := retrieveDeviceSystemConfigurationTimezoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timezoneAdded

	err, timezoneListAdded := retrieveDeviceSystemConfigurationTimezoneListFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timezoneListAdded

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationAccessFromSfpFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessFromSfpFlagName := fmt.Sprintf("%v.accessFromSfp", cmdPrefix)
	if cmd.Flags().Changed(accessFromSfpFlagName) {

		var accessFromSfpFlagName string
		if cmdPrefix == "" {
			accessFromSfpFlagName = "accessFromSfp"
		} else {
			accessFromSfpFlagName = fmt.Sprintf("%v.accessFromSfp", cmdPrefix)
		}

		accessFromSfpFlagValue, err := cmd.Flags().GetBool(accessFromSfpFlagName)
		if err != nil {
			return err, false
		}
		m.AccessFromSfp = accessFromSfpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationAdminFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	adminFlagName := fmt.Sprintf("%v.admin", cmdPrefix)
	if cmd.Flags().Changed(adminFlagName) {
		// info: complex object admin Admin is retrieved outside this Changed() block
	}
	adminFlagValue := m.Admin
	if swag.IsZero(adminFlagValue) {
		adminFlagValue = &models.Admin{}
	}

	err, adminAdded := retrieveModelAdminFlags(depth+1, adminFlagValue, adminFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminAdded
	if adminAdded {
		m.Admin = adminFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationClientIsolationFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientIsolationFlagName := fmt.Sprintf("%v.clientIsolation", cmdPrefix)
	if cmd.Flags().Changed(clientIsolationFlagName) {

		var clientIsolationFlagName string
		if cmdPrefix == "" {
			clientIsolationFlagName = "clientIsolation"
		} else {
			clientIsolationFlagName = fmt.Sprintf("%v.clientIsolation", cmdPrefix)
		}

		clientIsolationFlagValue, err := cmd.Flags().GetBool(clientIsolationFlagName)
		if err != nil {
			return err, false
		}
		m.ClientIsolation = clientIsolationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationDhcpOption82Flags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpOption82FlagName := fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
	if cmd.Flags().Changed(dhcpOption82FlagName) {

		var dhcpOption82FlagName string
		if cmdPrefix == "" {
			dhcpOption82FlagName = "dhcpOption82"
		} else {
			dhcpOption82FlagName = fmt.Sprintf("%v.dhcpOption82", cmdPrefix)
		}

		dhcpOption82FlagValue, err := cmd.Flags().GetBool(dhcpOption82FlagName)
		if err != nil {
			return err, false
		}
		m.DhcpOption82 = dhcpOption82FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationDns1Flags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dns1FlagName := fmt.Sprintf("%v.dns1", cmdPrefix)
	if cmd.Flags().Changed(dns1FlagName) {

		var dns1FlagName string
		if cmdPrefix == "" {
			dns1FlagName = "dns1"
		} else {
			dns1FlagName = fmt.Sprintf("%v.dns1", cmdPrefix)
		}

		dns1FlagValue, err := cmd.Flags().GetString(dns1FlagName)
		if err != nil {
			return err, false
		}
		m.Dns1 = dns1FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationDns2Flags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dns2FlagName := fmt.Sprintf("%v.dns2", cmdPrefix)
	if cmd.Flags().Changed(dns2FlagName) {

		var dns2FlagName string
		if cmdPrefix == "" {
			dns2FlagName = "dns2"
		} else {
			dns2FlagName = fmt.Sprintf("%v.dns2", cmdPrefix)
		}

		dns2FlagValue, err := cmd.Flags().GetString(dns2FlagName)
		if err != nil {
			return err, false
		}
		m.Dns2 = dns2FlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationDNSServersFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsServersFlagName := fmt.Sprintf("%v.dnsServers", cmdPrefix)
	if cmd.Flags().Changed(dnsServersFlagName) {
		// warning: dnsServers array type DNSServers is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationDomainNameFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainNameFlagName := fmt.Sprintf("%v.domainName", cmdPrefix)
	if cmd.Flags().Changed(domainNameFlagName) {

		var domainNameFlagName string
		if cmdPrefix == "" {
			domainNameFlagName = "domainName"
		} else {
			domainNameFlagName = fmt.Sprintf("%v.domainName", cmdPrefix)
		}

		domainNameFlagValue, err := cmd.Flags().GetString(domainNameFlagName)
		if err != nil {
			return err, false
		}
		m.DomainName = domainNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationGatewayFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gatewayFlagName := fmt.Sprintf("%v.gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = gatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIgmpSnoopingFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	igmpSnoopingFlagName := fmt.Sprintf("%v.igmpSnooping", cmdPrefix)
	if cmd.Flags().Changed(igmpSnoopingFlagName) {

		var igmpSnoopingFlagName string
		if cmdPrefix == "" {
			igmpSnoopingFlagName = "igmpSnooping"
		} else {
			igmpSnoopingFlagName = fmt.Sprintf("%v.igmpSnooping", cmdPrefix)
		}

		igmpSnoopingFlagValue, err := cmd.Flags().GetBool(igmpSnoopingFlagName)
		if err != nil {
			return err, false
		}
		m.IgmpSnooping = igmpSnoopingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationInbandManagementVlanFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inbandManagementVlanFlagName := fmt.Sprintf("%v.inbandManagementVlan", cmdPrefix)
	if cmd.Flags().Changed(inbandManagementVlanFlagName) {

		var inbandManagementVlanFlagName string
		if cmdPrefix == "" {
			inbandManagementVlanFlagName = "inbandManagementVlan"
		} else {
			inbandManagementVlanFlagName = fmt.Sprintf("%v.inbandManagementVlan", cmdPrefix)
		}

		inbandManagementVlanFlagValue, err := cmd.Flags().GetString(inbandManagementVlanFlagName)
		if err != nil {
			return err, false
		}
		m.InbandManagementVlan = inbandManagementVlanFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIPV4AddressFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV4AddressFlagName := fmt.Sprintf("%v.ipV4Address", cmdPrefix)
	if cmd.Flags().Changed(ipV4AddressFlagName) {

		var ipV4AddressFlagName string
		if cmdPrefix == "" {
			ipV4AddressFlagName = "ipV4Address"
		} else {
			ipV4AddressFlagName = fmt.Sprintf("%v.ipV4Address", cmdPrefix)
		}

		ipV4AddressFlagValue, err := cmd.Flags().GetString(ipV4AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Address = ipV4AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIPV4AddressTypeFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV4AddressTypeFlagName := fmt.Sprintf("%v.ipV4AddressType", cmdPrefix)
	if cmd.Flags().Changed(ipV4AddressTypeFlagName) {

		var ipV4AddressTypeFlagName string
		if cmdPrefix == "" {
			ipV4AddressTypeFlagName = "ipV4AddressType"
		} else {
			ipV4AddressTypeFlagName = fmt.Sprintf("%v.ipV4AddressType", cmdPrefix)
		}

		ipV4AddressTypeFlagValue, err := cmd.Flags().GetString(ipV4AddressTypeFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4AddressType = ipV4AddressTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIPV4GatewayFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV4GatewayFlagName := fmt.Sprintf("%v.ipV4Gateway", cmdPrefix)
	if cmd.Flags().Changed(ipV4GatewayFlagName) {

		var ipV4GatewayFlagName string
		if cmdPrefix == "" {
			ipV4GatewayFlagName = "ipV4Gateway"
		} else {
			ipV4GatewayFlagName = fmt.Sprintf("%v.ipV4Gateway", cmdPrefix)
		}

		ipV4GatewayFlagValue, err := cmd.Flags().GetString(ipV4GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Gateway = ipV4GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIPV6AddressFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6AddressFlagName := fmt.Sprintf("%v.ipV6Address", cmdPrefix)
	if cmd.Flags().Changed(ipV6AddressFlagName) {

		var ipV6AddressFlagName string
		if cmdPrefix == "" {
			ipV6AddressFlagName = "ipV6Address"
		} else {
			ipV6AddressFlagName = fmt.Sprintf("%v.ipV6Address", cmdPrefix)
		}

		ipV6AddressFlagValue, err := cmd.Flags().GetString(ipV6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Address = ipV6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIPV6AddressTypeFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6AddressTypeFlagName := fmt.Sprintf("%v.ipV6AddressType", cmdPrefix)
	if cmd.Flags().Changed(ipV6AddressTypeFlagName) {

		var ipV6AddressTypeFlagName string
		if cmdPrefix == "" {
			ipV6AddressTypeFlagName = "ipV6AddressType"
		} else {
			ipV6AddressTypeFlagName = fmt.Sprintf("%v.ipV6AddressType", cmdPrefix)
		}

		ipV6AddressTypeFlagValue, err := cmd.Flags().GetString(ipV6AddressTypeFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6AddressType = ipV6AddressTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIPV6GatewayFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6GatewayFlagName := fmt.Sprintf("%v.ipV6Gateway", cmdPrefix)
	if cmd.Flags().Changed(ipV6GatewayFlagName) {

		var ipV6GatewayFlagName string
		if cmdPrefix == "" {
			ipV6GatewayFlagName = "ipV6Gateway"
		} else {
			ipV6GatewayFlagName = fmt.Sprintf("%v.ipV6Gateway", cmdPrefix)
		}

		ipV6GatewayFlagValue, err := cmd.Flags().GetString(ipV6GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Gateway = ipV6GatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationIPV6SlaacEnabledFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipV6SlaacEnabledFlagName := fmt.Sprintf("%v.ipV6SlaacEnabled", cmdPrefix)
	if cmd.Flags().Changed(ipV6SlaacEnabledFlagName) {

		var ipV6SlaacEnabledFlagName string
		if cmdPrefix == "" {
			ipV6SlaacEnabledFlagName = "ipV6SlaacEnabled"
		} else {
			ipV6SlaacEnabledFlagName = fmt.Sprintf("%v.ipV6SlaacEnabled", cmdPrefix)
		}

		ipV6SlaacEnabledFlagValue, err := cmd.Flags().GetBool(ipV6SlaacEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6SlaacEnabled = ipV6SlaacEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationJumboMtuFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jumboMtuFlagName := fmt.Sprintf("%v.jumboMtu", cmdPrefix)
	if cmd.Flags().Changed(jumboMtuFlagName) {
		// info: complex object jumboMtu JumboMtu is retrieved outside this Changed() block
	}
	jumboMtuFlagValue := m.JumboMtu
	if swag.IsZero(jumboMtuFlagValue) {
		jumboMtuFlagValue = &models.JumboMtu{}
	}

	err, jumboMtuAdded := retrieveModelJumboMtuFlags(depth+1, jumboMtuFlagValue, jumboMtuFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jumboMtuAdded
	if jumboMtuAdded {
		m.JumboMtu = jumboMtuFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationMtuFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mtuFlagName := fmt.Sprintf("%v.mtu", cmdPrefix)
	if cmd.Flags().Changed(mtuFlagName) {

		var mtuFlagName string
		if cmdPrefix == "" {
			mtuFlagName = "mtu"
		} else {
			mtuFlagName = fmt.Sprintf("%v.mtu", cmdPrefix)
		}

		mtuFlagValue, err := cmd.Flags().GetString(mtuFlagName)
		if err != nil {
			return err, false
		}
		m.Mtu = mtuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationNameFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationReadOnlyAccountFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyAccountFlagName := fmt.Sprintf("%v.readOnlyAccount", cmdPrefix)
	if cmd.Flags().Changed(readOnlyAccountFlagName) {
		// info: complex object readOnlyAccount ReadOnlyAccount is retrieved outside this Changed() block
	}
	readOnlyAccountFlagValue := m.ReadOnlyAccount
	if swag.IsZero(readOnlyAccountFlagValue) {
		readOnlyAccountFlagValue = &models.ReadOnlyAccount{}
	}

	err, readOnlyAccountAdded := retrieveModelReadOnlyAccountFlags(depth+1, readOnlyAccountFlagValue, readOnlyAccountFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAccountAdded
	if readOnlyAccountAdded {
		m.ReadOnlyAccount = readOnlyAccountFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationStpFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stpFlagName := fmt.Sprintf("%v.stp", cmdPrefix)
	if cmd.Flags().Changed(stpFlagName) {
		// info: complex object stp SpanningTreeProtocolSchema is retrieved outside this Changed() block
	}
	stpFlagValue := m.Stp
	if swag.IsZero(stpFlagValue) {
		stpFlagValue = &models.SpanningTreeProtocolSchema{}
	}

	err, stpAdded := retrieveModelSpanningTreeProtocolSchemaFlags(depth+1, stpFlagValue, stpFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stpAdded
	if stpAdded {
		m.Stp = stpFlagValue
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationTimezoneFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timezoneFlagName := fmt.Sprintf("%v.timezone", cmdPrefix)
	if cmd.Flags().Changed(timezoneFlagName) {

		var timezoneFlagName string
		if cmdPrefix == "" {
			timezoneFlagName = "timezone"
		} else {
			timezoneFlagName = fmt.Sprintf("%v.timezone", cmdPrefix)
		}

		timezoneFlagValue, err := cmd.Flags().GetString(timezoneFlagName)
		if err != nil {
			return err, false
		}
		m.Timezone = timezoneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceSystemConfigurationTimezoneListFlags(depth int, m *models.DeviceSystemConfiguration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timezoneListFlagName := fmt.Sprintf("%v.timezoneList", cmdPrefix)
	if cmd.Flags().Changed(timezoneListFlagName) {
		// warning: timezoneList array type TimezoneList is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
