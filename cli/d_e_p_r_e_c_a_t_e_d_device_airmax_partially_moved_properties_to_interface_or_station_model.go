// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation

// register flags to command
func registerModelDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAntenna(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApMac(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAuthentication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAvailableTxPowerRange(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableSnr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCcq(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationChannelWidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCountryCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyBands(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationGpsSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationNoiseFloor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationPolling(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationReceiveChains(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal60g(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRxCinr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSecurity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSeries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalChain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSsid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationsCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTddFraming(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitChains(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWirelessMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanRxBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanTxBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAntenna(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	antennaDescription := ``

	var antennaFlagName string
	if cmdPrefix == "" {
		antennaFlagName = "antenna"
	} else {
		antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
	}

	var antennaFlagDefault string

	_ = cmd.PersistentFlags().String(antennaFlagName, antennaFlagDefault, antennaDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var apDeviceFlagName string
	if cmdPrefix == "" {
		apDeviceFlagName = "apDevice"
	} else {
		apDeviceFlagName = fmt.Sprintf("%v.apDevice", cmdPrefix)
	}

	if err := registerModelApDeviceFlags(depth+1, apDeviceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApMac(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apMacDescription := ``

	var apMacFlagName string
	if cmdPrefix == "" {
		apMacFlagName = "apMac"
	} else {
		apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
	}

	var apMacFlagDefault string

	_ = cmd.PersistentFlags().String(apMacFlagName, apMacFlagDefault, apMacDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAuthentication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationDescription := `Enum: ["psk","psk2","ent","none"]. Required. `

	var authenticationFlagName string
	if cmdPrefix == "" {
		authenticationFlagName = "authentication"
	} else {
		authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
	}

	var authenticationFlagDefault string

	_ = cmd.PersistentFlags().String(authenticationFlagName, authenticationFlagDefault, authenticationDescription)

	if err := cmd.RegisterFlagCompletionFunc(authenticationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAvailableTxPowerRange(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var availableTxPowerRangeFlagName string
	if cmdPrefix == "" {
		availableTxPowerRangeFlagName = "availableTxPowerRange"
	} else {
		availableTxPowerRangeFlagName = fmt.Sprintf("%v.availableTxPowerRange", cmdPrefix)
	}

	if err := registerModelAvailableTxPowerRangeFlags(depth+1, availableTxPowerRangeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cableLengthDescription := `Cable Length from eth0 interface in meters. When below values is null cable is long less then 20m.`

	var cableLengthFlagName string
	if cmdPrefix == "" {
		cableLengthFlagName = "cableLength"
	} else {
		cableLengthFlagName = fmt.Sprintf("%v.cableLength", cmdPrefix)
	}

	var cableLengthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(cableLengthFlagName, cableLengthFlagDefault, cableLengthDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableSnr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cableSnrDescription := `Average signal-to-noise ratio on eth0 interface in dB`

	var cableSnrFlagName string
	if cmdPrefix == "" {
		cableSnrFlagName = "cableSnr"
	} else {
		cableSnrFlagName = fmt.Sprintf("%v.cableSnr", cmdPrefix)
	}

	var cableSnrFlagDefault float64

	_ = cmd.PersistentFlags().Float64(cableSnrFlagName, cableSnrFlagDefault, cableSnrDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCcq(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ccqDescription := ``

	var ccqFlagName string
	if cmdPrefix == "" {
		ccqFlagName = "ccq"
	} else {
		ccqFlagName = fmt.Sprintf("%v.ccq", cmdPrefix)
	}

	var ccqFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ccqFlagName, ccqFlagDefault, ccqDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationChannelWidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	channelWidthDescription := `Required. `

	var channelWidthFlagName string
	if cmdPrefix == "" {
		channelWidthFlagName = "channelWidth"
	} else {
		channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
	}

	var channelWidthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(channelWidthFlagName, channelWidthFlagDefault, channelWidthDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCountryCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryCodeDescription := `Required. `

	var countryCodeFlagName string
	if cmdPrefix == "" {
		countryCodeFlagName = "countryCode"
	} else {
		countryCodeFlagName = fmt.Sprintf("%v.countryCode", cmdPrefix)
	}

	var countryCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(countryCodeFlagName, countryCodeFlagDefault, countryCodeDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyDescription := ``

	var frequencyFlagName string
	if cmdPrefix == "" {
		frequencyFlagName = "frequency"
	} else {
		frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
	}

	var frequencyFlagDefault float64

	_ = cmd.PersistentFlags().Float64(frequencyFlagName, frequencyFlagDefault, frequencyDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyBands(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: frequencyBands FrequencyBands array type is not supported by go-swagger cli yet

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	frequencyCenterDescription := ``

	var frequencyCenterFlagName string
	if cmdPrefix == "" {
		frequencyCenterFlagName = "frequencyCenter"
	} else {
		frequencyCenterFlagName = fmt.Sprintf("%v.frequencyCenter", cmdPrefix)
	}

	var frequencyCenterFlagDefault string

	_ = cmd.PersistentFlags().String(frequencyCenterFlagName, frequencyCenterFlagDefault, frequencyCenterDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationGpsSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gpsSignalDescription := ``

	var gpsSignalFlagName string
	if cmdPrefix == "" {
		gpsSignalFlagName = "gpsSignal"
	} else {
		gpsSignalFlagName = fmt.Sprintf("%v.gpsSignal", cmdPrefix)
	}

	var gpsSignalFlagDefault float64

	_ = cmd.PersistentFlags().Float64(gpsSignalFlagName, gpsSignalFlagDefault, gpsSignalDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var locationFlagName string
	if cmdPrefix == "" {
		locationFlagName = "location"
	} else {
		locationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	if err := registerModelLocationFlags(depth+1, locationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationNoiseFloor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noiseFloorDescription := ``

	var noiseFloorFlagName string
	if cmdPrefix == "" {
		noiseFloorFlagName = "noiseFloor"
	} else {
		noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	}

	var noiseFloorFlagDefault string

	_ = cmd.PersistentFlags().String(noiseFloorFlagName, noiseFloorFlagDefault, noiseFloorDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationPolling(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pollingFlagName string
	if cmdPrefix == "" {
		pollingFlagName = "polling"
	} else {
		pollingFlagName = fmt.Sprintf("%v.polling", cmdPrefix)
	}

	if err := registerModelPollingFlags(depth+1, pollingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationReceiveChains(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	receiveChainsDescription := ``

	var receiveChainsFlagName string
	if cmdPrefix == "" {
		receiveChainsFlagName = "receiveChains"
	} else {
		receiveChainsFlagName = fmt.Sprintf("%v.receiveChains", cmdPrefix)
	}

	var receiveChainsFlagDefault float64

	_ = cmd.PersistentFlags().Float64(receiveChainsFlagName, receiveChainsFlagDefault, receiveChainsDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteSignalDescription := ``

	var remoteSignalFlagName string
	if cmdPrefix == "" {
		remoteSignalFlagName = "remoteSignal"
	} else {
		remoteSignalFlagName = fmt.Sprintf("%v.remoteSignal", cmdPrefix)
	}

	var remoteSignalFlagDefault float64

	_ = cmd.PersistentFlags().Float64(remoteSignalFlagName, remoteSignalFlagDefault, remoteSignalDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal60g(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteSignal60gDescription := ``

	var remoteSignal60gFlagName string
	if cmdPrefix == "" {
		remoteSignal60gFlagName = "remoteSignal60g"
	} else {
		remoteSignal60gFlagName = fmt.Sprintf("%v.remoteSignal60g", cmdPrefix)
	}

	var remoteSignal60gFlagDefault float64

	_ = cmd.PersistentFlags().Float64(remoteSignal60gFlagName, remoteSignal60gFlagDefault, remoteSignal60gDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRxCinr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rxCinrDescription := `Carrier to Interference-plus-Noise Ratio in dB on wireless`

	var rxCinrFlagName string
	if cmdPrefix == "" {
		rxCinrFlagName = "rxCinr"
	} else {
		rxCinrFlagName = fmt.Sprintf("%v.rxCinr", cmdPrefix)
	}

	var rxCinrFlagDefault float64

	_ = cmd.PersistentFlags().Float64(rxCinrFlagName, rxCinrFlagDefault, rxCinrDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSecurity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	securityDescription := `Enum: ["wep","wpa","wpa-psk","wpa2","enabled","none"]. Required. `

	var securityFlagName string
	if cmdPrefix == "" {
		securityFlagName = "security"
	} else {
		securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
	}

	var securityFlagDefault string

	_ = cmd.PersistentFlags().String(securityFlagName, securityFlagDefault, securityDescription)

	if err := cmd.RegisterFlagCompletionFunc(securityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSeries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	seriesDescription := `Enum: ["AC","M","G60"]. Required. `

	var seriesFlagName string
	if cmdPrefix == "" {
		seriesFlagName = "series"
	} else {
		seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
	}

	var seriesFlagDefault string

	_ = cmd.PersistentFlags().String(seriesFlagName, seriesFlagDefault, seriesDescription)

	if err := cmd.RegisterFlagCompletionFunc(seriesFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["AC","M","G60"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalChain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: signalChain SignalChain array type is not supported by go-swagger cli yet

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: signalRemoteChain SignalRemoteChain array type is not supported by go-swagger cli yet

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSsid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ssidDescription := `SSID`

	var ssidFlagName string
	if cmdPrefix == "" {
		ssidFlagName = "ssid"
	} else {
		ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
	}

	var ssidFlagDefault string

	_ = cmd.PersistentFlags().String(ssidFlagName, ssidFlagDefault, ssidDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stationNameDescription := ``

	var stationNameFlagName string
	if cmdPrefix == "" {
		stationNameFlagName = "stationName"
	} else {
		stationNameFlagName = fmt.Sprintf("%v.stationName", cmdPrefix)
	}

	var stationNameFlagDefault string

	_ = cmd.PersistentFlags().String(stationNameFlagName, stationNameFlagDefault, stationNameDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationsCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stationsCountDescription := ``

	var stationsCountFlagName string
	if cmdPrefix == "" {
		stationsCountFlagName = "stationsCount"
	} else {
		stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
	}

	var stationsCountFlagDefault float64

	_ = cmd.PersistentFlags().Float64(stationsCountFlagName, stationsCountFlagDefault, stationsCountDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTddFraming(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tddFramingDescription := ``

	var tddFramingFlagName string
	if cmdPrefix == "" {
		tddFramingFlagName = "tddFraming"
	} else {
		tddFramingFlagName = fmt.Sprintf("%v.tddFraming", cmdPrefix)
	}

	var tddFramingFlagDefault string

	_ = cmd.PersistentFlags().String(tddFramingFlagName, tddFramingFlagDefault, tddFramingDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitChains(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitChainsDescription := ``

	var transmitChainsFlagName string
	if cmdPrefix == "" {
		transmitChainsFlagName = "transmitChains"
	} else {
		transmitChainsFlagName = fmt.Sprintf("%v.transmitChains", cmdPrefix)
	}

	var transmitChainsFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitChainsFlagName, transmitChainsFlagDefault, transmitChainsDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	transmitPowerDescription := ``

	var transmitPowerFlagName string
	if cmdPrefix == "" {
		transmitPowerFlagName = "transmitPower"
	} else {
		transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
	}

	var transmitPowerFlagDefault float64

	_ = cmd.PersistentFlags().Float64(transmitPowerFlagName, transmitPowerFlagDefault, transmitPowerDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wdsDescription := ``

	var wdsFlagName string
	if cmdPrefix == "" {
		wdsFlagName = "wds"
	} else {
		wdsFlagName = fmt.Sprintf("%v.wds", cmdPrefix)
	}

	var wdsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(wdsFlagName, wdsFlagDefault, wdsDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWirelessMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wirelessModeDescription := `Enum: ["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]. `

	var wirelessModeFlagName string
	if cmdPrefix == "" {
		wirelessModeFlagName = "wirelessMode"
	} else {
		wirelessModeFlagName = fmt.Sprintf("%v.wirelessMode", cmdPrefix)
	}

	var wirelessModeFlagDefault string

	_ = cmd.PersistentFlags().String(wirelessModeFlagName, wirelessModeFlagDefault, wirelessModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(wirelessModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanRxBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wlanRxBytesDescription := ``

	var wlanRxBytesFlagName string
	if cmdPrefix == "" {
		wlanRxBytesFlagName = "wlanRxBytes"
	} else {
		wlanRxBytesFlagName = fmt.Sprintf("%v.wlanRxBytes", cmdPrefix)
	}

	var wlanRxBytesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(wlanRxBytesFlagName, wlanRxBytesFlagDefault, wlanRxBytesDescription)

	return nil
}

func registerDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanTxBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	wlanTxBytesDescription := ``

	var wlanTxBytesFlagName string
	if cmdPrefix == "" {
		wlanTxBytesFlagName = "wlanTxBytes"
	} else {
		wlanTxBytesFlagName = fmt.Sprintf("%v.wlanTxBytes", cmdPrefix)
	}

	var wlanTxBytesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(wlanTxBytesFlagName, wlanTxBytesFlagDefault, wlanTxBytesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, antennaAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAntennaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || antennaAdded

	err, apDeviceAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apDeviceAdded

	err, apMacAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApMacFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apMacAdded

	err, authenticationAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAuthenticationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationAdded

	err, availableTxPowerRangeAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAvailableTxPowerRangeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availableTxPowerRangeAdded

	err, cableLengthAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cableLengthAdded

	err, cableSnrAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableSnrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cableSnrAdded

	err, ccqAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCcqFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ccqAdded

	err, channelWidthAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationChannelWidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || channelWidthAdded

	err, countryCodeAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCountryCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryCodeAdded

	err, frequencyAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyAdded

	err, frequencyBandsAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyBandsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyBandsAdded

	err, frequencyCenterAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || frequencyCenterAdded

	err, gpsSignalAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationGpsSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpsSignalAdded

	err, locationAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded

	err, noiseFloorAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationNoiseFloorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noiseFloorAdded

	err, pollingAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationPollingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pollingAdded

	err, receiveChainsAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationReceiveChainsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || receiveChainsAdded

	err, remoteSignalAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteSignalAdded

	err, remoteSignal60gAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal60gFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteSignal60gAdded

	err, rxCinrAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRxCinrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rxCinrAdded

	err, securityAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSecurityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securityAdded

	err, seriesAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSeriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || seriesAdded

	err, signalChainAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalChainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalChainAdded

	err, signalRemoteChainAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signalRemoteChainAdded

	err, ssidAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSsidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ssidAdded

	err, stationNameAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationNameAdded

	err, stationsCountAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationsCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationsCountAdded

	err, tddFramingAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTddFramingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tddFramingAdded

	err, transmitChainsAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitChainsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitChainsAdded

	err, transmitPowerAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || transmitPowerAdded

	err, wdsAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wdsAdded

	err, wirelessModeAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWirelessModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wirelessModeAdded

	err, wlanRxBytesAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanRxBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wlanRxBytesAdded

	err, wlanTxBytesAdded := retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanTxBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || wlanTxBytesAdded

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAntennaFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	antennaFlagName := fmt.Sprintf("%v.antenna", cmdPrefix)
	if cmd.Flags().Changed(antennaFlagName) {

		var antennaFlagName string
		if cmdPrefix == "" {
			antennaFlagName = "antenna"
		} else {
			antennaFlagName = fmt.Sprintf("%v.antenna", cmdPrefix)
		}

		antennaFlagValue, err := cmd.Flags().GetString(antennaFlagName)
		if err != nil {
			return err, false
		}
		m.Antenna = antennaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApDeviceFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apDeviceFlagName := fmt.Sprintf("%v.apDevice", cmdPrefix)
	if cmd.Flags().Changed(apDeviceFlagName) {
		// info: complex object apDevice ApDevice is retrieved outside this Changed() block
	}
	apDeviceFlagValue := m.ApDevice
	if swag.IsZero(apDeviceFlagValue) {
		apDeviceFlagValue = &models.ApDevice{}
	}

	err, apDeviceAdded := retrieveModelApDeviceFlags(depth+1, apDeviceFlagValue, apDeviceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apDeviceAdded
	if apDeviceAdded {
		m.ApDevice = apDeviceFlagValue
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationApMacFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apMacFlagName := fmt.Sprintf("%v.apMac", cmdPrefix)
	if cmd.Flags().Changed(apMacFlagName) {

		var apMacFlagName string
		if cmdPrefix == "" {
			apMacFlagName = "apMac"
		} else {
			apMacFlagName = fmt.Sprintf("%v.apMac", cmdPrefix)
		}

		apMacFlagValue, err := cmd.Flags().GetString(apMacFlagName)
		if err != nil {
			return err, false
		}
		m.ApMac = apMacFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAuthenticationFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFlagName := fmt.Sprintf("%v.authentication", cmdPrefix)
	if cmd.Flags().Changed(authenticationFlagName) {

		var authenticationFlagName string
		if cmdPrefix == "" {
			authenticationFlagName = "authentication"
		} else {
			authenticationFlagName = fmt.Sprintf("%v.authentication", cmdPrefix)
		}

		authenticationFlagValue, err := cmd.Flags().GetString(authenticationFlagName)
		if err != nil {
			return err, false
		}
		m.Authentication = &authenticationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationAvailableTxPowerRangeFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	availableTxPowerRangeFlagName := fmt.Sprintf("%v.availableTxPowerRange", cmdPrefix)
	if cmd.Flags().Changed(availableTxPowerRangeFlagName) {
		// info: complex object availableTxPowerRange AvailableTxPowerRange is retrieved outside this Changed() block
	}
	availableTxPowerRangeFlagValue := m.AvailableTxPowerRange
	if swag.IsZero(availableTxPowerRangeFlagValue) {
		availableTxPowerRangeFlagValue = &models.AvailableTxPowerRange{}
	}

	err, availableTxPowerRangeAdded := retrieveModelAvailableTxPowerRangeFlags(depth+1, availableTxPowerRangeFlagValue, availableTxPowerRangeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availableTxPowerRangeAdded
	if availableTxPowerRangeAdded {
		m.AvailableTxPowerRange = availableTxPowerRangeFlagValue
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableLengthFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cableLengthFlagName := fmt.Sprintf("%v.cableLength", cmdPrefix)
	if cmd.Flags().Changed(cableLengthFlagName) {

		var cableLengthFlagName string
		if cmdPrefix == "" {
			cableLengthFlagName = "cableLength"
		} else {
			cableLengthFlagName = fmt.Sprintf("%v.cableLength", cmdPrefix)
		}

		cableLengthFlagValue, err := cmd.Flags().GetFloat64(cableLengthFlagName)
		if err != nil {
			return err, false
		}
		m.CableLength = cableLengthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCableSnrFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cableSnrFlagName := fmt.Sprintf("%v.cableSnr", cmdPrefix)
	if cmd.Flags().Changed(cableSnrFlagName) {

		var cableSnrFlagName string
		if cmdPrefix == "" {
			cableSnrFlagName = "cableSnr"
		} else {
			cableSnrFlagName = fmt.Sprintf("%v.cableSnr", cmdPrefix)
		}

		cableSnrFlagValue, err := cmd.Flags().GetFloat64(cableSnrFlagName)
		if err != nil {
			return err, false
		}
		m.CableSnr = cableSnrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCcqFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ccqFlagName := fmt.Sprintf("%v.ccq", cmdPrefix)
	if cmd.Flags().Changed(ccqFlagName) {

		var ccqFlagName string
		if cmdPrefix == "" {
			ccqFlagName = "ccq"
		} else {
			ccqFlagName = fmt.Sprintf("%v.ccq", cmdPrefix)
		}

		ccqFlagValue, err := cmd.Flags().GetFloat64(ccqFlagName)
		if err != nil {
			return err, false
		}
		m.Ccq = ccqFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationChannelWidthFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	channelWidthFlagName := fmt.Sprintf("%v.channelWidth", cmdPrefix)
	if cmd.Flags().Changed(channelWidthFlagName) {

		var channelWidthFlagName string
		if cmdPrefix == "" {
			channelWidthFlagName = "channelWidth"
		} else {
			channelWidthFlagName = fmt.Sprintf("%v.channelWidth", cmdPrefix)
		}

		channelWidthFlagValue, err := cmd.Flags().GetInt64(channelWidthFlagName)
		if err != nil {
			return err, false
		}
		m.ChannelWidth = &channelWidthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationCountryCodeFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryCodeFlagName := fmt.Sprintf("%v.countryCode", cmdPrefix)
	if cmd.Flags().Changed(countryCodeFlagName) {

		var countryCodeFlagName string
		if cmdPrefix == "" {
			countryCodeFlagName = "countryCode"
		} else {
			countryCodeFlagName = fmt.Sprintf("%v.countryCode", cmdPrefix)
		}

		countryCodeFlagValue, err := cmd.Flags().GetInt64(countryCodeFlagName)
		if err != nil {
			return err, false
		}
		m.CountryCode = &countryCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyFlagName := fmt.Sprintf("%v.frequency", cmdPrefix)
	if cmd.Flags().Changed(frequencyFlagName) {

		var frequencyFlagName string
		if cmdPrefix == "" {
			frequencyFlagName = "frequency"
		} else {
			frequencyFlagName = fmt.Sprintf("%v.frequency", cmdPrefix)
		}

		frequencyFlagValue, err := cmd.Flags().GetFloat64(frequencyFlagName)
		if err != nil {
			return err, false
		}
		m.Frequency = &frequencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyBandsFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyBandsFlagName := fmt.Sprintf("%v.frequencyBands", cmdPrefix)
	if cmd.Flags().Changed(frequencyBandsFlagName) {
		// warning: frequencyBands array type FrequencyBands is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationFrequencyCenterFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	frequencyCenterFlagName := fmt.Sprintf("%v.frequencyCenter", cmdPrefix)
	if cmd.Flags().Changed(frequencyCenterFlagName) {

		var frequencyCenterFlagName string
		if cmdPrefix == "" {
			frequencyCenterFlagName = "frequencyCenter"
		} else {
			frequencyCenterFlagName = fmt.Sprintf("%v.frequencyCenter", cmdPrefix)
		}

		frequencyCenterFlagValue, err := cmd.Flags().GetString(frequencyCenterFlagName)
		if err != nil {
			return err, false
		}
		m.FrequencyCenter = frequencyCenterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationGpsSignalFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpsSignalFlagName := fmt.Sprintf("%v.gpsSignal", cmdPrefix)
	if cmd.Flags().Changed(gpsSignalFlagName) {

		var gpsSignalFlagName string
		if cmdPrefix == "" {
			gpsSignalFlagName = "gpsSignal"
		} else {
			gpsSignalFlagName = fmt.Sprintf("%v.gpsSignal", cmdPrefix)
		}

		gpsSignalFlagValue, err := cmd.Flags().GetFloat64(gpsSignalFlagName)
		if err != nil {
			return err, false
		}
		m.GpsSignal = &gpsSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationLocationFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	locationFlagName := fmt.Sprintf("%v.location", cmdPrefix)
	if cmd.Flags().Changed(locationFlagName) {
		// info: complex object location Location is retrieved outside this Changed() block
	}
	locationFlagValue := m.Location
	if swag.IsZero(locationFlagValue) {
		locationFlagValue = &models.Location{}
	}

	err, locationAdded := retrieveModelLocationFlags(depth+1, locationFlagValue, locationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded
	if locationAdded {
		m.Location = locationFlagValue
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationNoiseFloorFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noiseFloorFlagName := fmt.Sprintf("%v.noiseFloor", cmdPrefix)
	if cmd.Flags().Changed(noiseFloorFlagName) {

		var noiseFloorFlagName string
		if cmdPrefix == "" {
			noiseFloorFlagName = "noiseFloor"
		} else {
			noiseFloorFlagName = fmt.Sprintf("%v.noiseFloor", cmdPrefix)
		}

		noiseFloorFlagValue, err := cmd.Flags().GetString(noiseFloorFlagName)
		if err != nil {
			return err, false
		}
		m.NoiseFloor = noiseFloorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationPollingFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pollingFlagName := fmt.Sprintf("%v.polling", cmdPrefix)
	if cmd.Flags().Changed(pollingFlagName) {
		// info: complex object polling Polling is retrieved outside this Changed() block
	}
	pollingFlagValue := m.Polling
	if swag.IsZero(pollingFlagValue) {
		pollingFlagValue = &models.Polling{}
	}

	err, pollingAdded := retrieveModelPollingFlags(depth+1, pollingFlagValue, pollingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pollingAdded
	if pollingAdded {
		m.Polling = pollingFlagValue
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationReceiveChainsFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	receiveChainsFlagName := fmt.Sprintf("%v.receiveChains", cmdPrefix)
	if cmd.Flags().Changed(receiveChainsFlagName) {

		var receiveChainsFlagName string
		if cmdPrefix == "" {
			receiveChainsFlagName = "receiveChains"
		} else {
			receiveChainsFlagName = fmt.Sprintf("%v.receiveChains", cmdPrefix)
		}

		receiveChainsFlagValue, err := cmd.Flags().GetFloat64(receiveChainsFlagName)
		if err != nil {
			return err, false
		}
		m.ReceiveChains = receiveChainsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignalFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteSignalFlagName := fmt.Sprintf("%v.remoteSignal", cmdPrefix)
	if cmd.Flags().Changed(remoteSignalFlagName) {

		var remoteSignalFlagName string
		if cmdPrefix == "" {
			remoteSignalFlagName = "remoteSignal"
		} else {
			remoteSignalFlagName = fmt.Sprintf("%v.remoteSignal", cmdPrefix)
		}

		remoteSignalFlagValue, err := cmd.Flags().GetFloat64(remoteSignalFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteSignal = remoteSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRemoteSignal60gFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteSignal60gFlagName := fmt.Sprintf("%v.remoteSignal60g", cmdPrefix)
	if cmd.Flags().Changed(remoteSignal60gFlagName) {

		var remoteSignal60gFlagName string
		if cmdPrefix == "" {
			remoteSignal60gFlagName = "remoteSignal60g"
		} else {
			remoteSignal60gFlagName = fmt.Sprintf("%v.remoteSignal60g", cmdPrefix)
		}

		remoteSignal60gFlagValue, err := cmd.Flags().GetFloat64(remoteSignal60gFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteSignal60g = remoteSignal60gFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationRxCinrFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rxCinrFlagName := fmt.Sprintf("%v.rxCinr", cmdPrefix)
	if cmd.Flags().Changed(rxCinrFlagName) {

		var rxCinrFlagName string
		if cmdPrefix == "" {
			rxCinrFlagName = "rxCinr"
		} else {
			rxCinrFlagName = fmt.Sprintf("%v.rxCinr", cmdPrefix)
		}

		rxCinrFlagValue, err := cmd.Flags().GetFloat64(rxCinrFlagName)
		if err != nil {
			return err, false
		}
		m.RxCinr = rxCinrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSecurityFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securityFlagName := fmt.Sprintf("%v.security", cmdPrefix)
	if cmd.Flags().Changed(securityFlagName) {

		var securityFlagName string
		if cmdPrefix == "" {
			securityFlagName = "security"
		} else {
			securityFlagName = fmt.Sprintf("%v.security", cmdPrefix)
		}

		securityFlagValue, err := cmd.Flags().GetString(securityFlagName)
		if err != nil {
			return err, false
		}
		m.Security = &securityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSeriesFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	seriesFlagName := fmt.Sprintf("%v.series", cmdPrefix)
	if cmd.Flags().Changed(seriesFlagName) {

		var seriesFlagName string
		if cmdPrefix == "" {
			seriesFlagName = "series"
		} else {
			seriesFlagName = fmt.Sprintf("%v.series", cmdPrefix)
		}

		seriesFlagValue, err := cmd.Flags().GetString(seriesFlagName)
		if err != nil {
			return err, false
		}
		m.Series = &seriesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalChainFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalChainFlagName := fmt.Sprintf("%v.signalChain", cmdPrefix)
	if cmd.Flags().Changed(signalChainFlagName) {
		// warning: signalChain array type SignalChain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSignalRemoteChainFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signalRemoteChainFlagName := fmt.Sprintf("%v.signalRemoteChain", cmdPrefix)
	if cmd.Flags().Changed(signalRemoteChainFlagName) {
		// warning: signalRemoteChain array type SignalRemoteChain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationSsidFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ssidFlagName := fmt.Sprintf("%v.ssid", cmdPrefix)
	if cmd.Flags().Changed(ssidFlagName) {

		var ssidFlagName string
		if cmdPrefix == "" {
			ssidFlagName = "ssid"
		} else {
			ssidFlagName = fmt.Sprintf("%v.ssid", cmdPrefix)
		}

		ssidFlagValue, err := cmd.Flags().GetString(ssidFlagName)
		if err != nil {
			return err, false
		}
		m.Ssid = ssidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationNameFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationNameFlagName := fmt.Sprintf("%v.stationName", cmdPrefix)
	if cmd.Flags().Changed(stationNameFlagName) {

		var stationNameFlagName string
		if cmdPrefix == "" {
			stationNameFlagName = "stationName"
		} else {
			stationNameFlagName = fmt.Sprintf("%v.stationName", cmdPrefix)
		}

		stationNameFlagValue, err := cmd.Flags().GetString(stationNameFlagName)
		if err != nil {
			return err, false
		}
		m.StationName = stationNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationStationsCountFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationsCountFlagName := fmt.Sprintf("%v.stationsCount", cmdPrefix)
	if cmd.Flags().Changed(stationsCountFlagName) {

		var stationsCountFlagName string
		if cmdPrefix == "" {
			stationsCountFlagName = "stationsCount"
		} else {
			stationsCountFlagName = fmt.Sprintf("%v.stationsCount", cmdPrefix)
		}

		stationsCountFlagValue, err := cmd.Flags().GetFloat64(stationsCountFlagName)
		if err != nil {
			return err, false
		}
		m.StationsCount = stationsCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTddFramingFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tddFramingFlagName := fmt.Sprintf("%v.tddFraming", cmdPrefix)
	if cmd.Flags().Changed(tddFramingFlagName) {

		var tddFramingFlagName string
		if cmdPrefix == "" {
			tddFramingFlagName = "tddFraming"
		} else {
			tddFramingFlagName = fmt.Sprintf("%v.tddFraming", cmdPrefix)
		}

		tddFramingFlagValue, err := cmd.Flags().GetString(tddFramingFlagName)
		if err != nil {
			return err, false
		}
		m.TddFraming = tddFramingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitChainsFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitChainsFlagName := fmt.Sprintf("%v.transmitChains", cmdPrefix)
	if cmd.Flags().Changed(transmitChainsFlagName) {

		var transmitChainsFlagName string
		if cmdPrefix == "" {
			transmitChainsFlagName = "transmitChains"
		} else {
			transmitChainsFlagName = fmt.Sprintf("%v.transmitChains", cmdPrefix)
		}

		transmitChainsFlagValue, err := cmd.Flags().GetFloat64(transmitChainsFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitChains = transmitChainsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationTransmitPowerFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	transmitPowerFlagName := fmt.Sprintf("%v.transmitPower", cmdPrefix)
	if cmd.Flags().Changed(transmitPowerFlagName) {

		var transmitPowerFlagName string
		if cmdPrefix == "" {
			transmitPowerFlagName = "transmitPower"
		} else {
			transmitPowerFlagName = fmt.Sprintf("%v.transmitPower", cmdPrefix)
		}

		transmitPowerFlagValue, err := cmd.Flags().GetFloat64(transmitPowerFlagName)
		if err != nil {
			return err, false
		}
		m.TransmitPower = transmitPowerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWdsFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wdsFlagName := fmt.Sprintf("%v.wds", cmdPrefix)
	if cmd.Flags().Changed(wdsFlagName) {

		var wdsFlagName string
		if cmdPrefix == "" {
			wdsFlagName = "wds"
		} else {
			wdsFlagName = fmt.Sprintf("%v.wds", cmdPrefix)
		}

		wdsFlagValue, err := cmd.Flags().GetBool(wdsFlagName)
		if err != nil {
			return err, false
		}
		m.Wds = wdsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWirelessModeFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wirelessModeFlagName := fmt.Sprintf("%v.wirelessMode", cmdPrefix)
	if cmd.Flags().Changed(wirelessModeFlagName) {

		var wirelessModeFlagName string
		if cmdPrefix == "" {
			wirelessModeFlagName = "wirelessMode"
		} else {
			wirelessModeFlagName = fmt.Sprintf("%v.wirelessMode", cmdPrefix)
		}

		wirelessModeFlagValue, err := cmd.Flags().GetString(wirelessModeFlagName)
		if err != nil {
			return err, false
		}
		m.WirelessMode = wirelessModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanRxBytesFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wlanRxBytesFlagName := fmt.Sprintf("%v.wlanRxBytes", cmdPrefix)
	if cmd.Flags().Changed(wlanRxBytesFlagName) {

		var wlanRxBytesFlagName string
		if cmdPrefix == "" {
			wlanRxBytesFlagName = "wlanRxBytes"
		} else {
			wlanRxBytesFlagName = fmt.Sprintf("%v.wlanRxBytes", cmdPrefix)
		}

		wlanRxBytesFlagValue, err := cmd.Flags().GetFloat64(wlanRxBytesFlagName)
		if err != nil {
			return err, false
		}
		m.WlanRxBytes = wlanRxBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStationWlanTxBytesFlags(depth int, m *models.DEPRECATEDDeviceAirmaxPartiallyMovedPropertiesToInterfaceOrStation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	wlanTxBytesFlagName := fmt.Sprintf("%v.wlanTxBytes", cmdPrefix)
	if cmd.Flags().Changed(wlanTxBytesFlagName) {

		var wlanTxBytesFlagName string
		if cmdPrefix == "" {
			wlanTxBytesFlagName = "wlanTxBytes"
		} else {
			wlanTxBytesFlagName = fmt.Sprintf("%v.wlanTxBytes", cmdPrefix)
		}

		wlanTxBytesFlagValue, err := cmd.Flags().GetFloat64(wlanTxBytesFlagName)
		if err != nil {
			return err, false
		}
		m.WlanTxBytes = wlanTxBytesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
