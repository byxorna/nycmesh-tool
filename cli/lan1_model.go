// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Lan1

// register flags to command
func registerModelLan1Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLan1DhcpLeaseTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan1DhcpPoolEnd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan1DhcpPoolStart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan1DhcpRelay(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan1DhcpServerMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan1DNSProxyEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLan1DNSResolvers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLan1DhcpLeaseTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpLeaseTimeDescription := `Required. DHCP lease time in seconds`

	var dhcpLeaseTimeFlagName string
	if cmdPrefix == "" {
		dhcpLeaseTimeFlagName = "dhcpLeaseTime"
	} else {
		dhcpLeaseTimeFlagName = fmt.Sprintf("%v.dhcpLeaseTime", cmdPrefix)
	}

	var dhcpLeaseTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dhcpLeaseTimeFlagName, dhcpLeaseTimeFlagDefault, dhcpLeaseTimeDescription)

	return nil
}

func registerLan1DhcpPoolEnd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpPoolEndDescription := `Required. IPv4 DHCP range start`

	var dhcpPoolEndFlagName string
	if cmdPrefix == "" {
		dhcpPoolEndFlagName = "dhcpPoolEnd"
	} else {
		dhcpPoolEndFlagName = fmt.Sprintf("%v.dhcpPoolEnd", cmdPrefix)
	}

	var dhcpPoolEndFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpPoolEndFlagName, dhcpPoolEndFlagDefault, dhcpPoolEndDescription)

	return nil
}

func registerLan1DhcpPoolStart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpPoolStartDescription := `Required. IPv4 DHCP range start`

	var dhcpPoolStartFlagName string
	if cmdPrefix == "" {
		dhcpPoolStartFlagName = "dhcpPoolStart"
	} else {
		dhcpPoolStartFlagName = fmt.Sprintf("%v.dhcpPoolStart", cmdPrefix)
	}

	var dhcpPoolStartFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpPoolStartFlagName, dhcpPoolStartFlagDefault, dhcpPoolStartDescription)

	return nil
}

func registerLan1DhcpRelay(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpRelayDescription := `Required. IPv4 address of DHCP relay`

	var dhcpRelayFlagName string
	if cmdPrefix == "" {
		dhcpRelayFlagName = "dhcpRelay"
	} else {
		dhcpRelayFlagName = fmt.Sprintf("%v.dhcpRelay", cmdPrefix)
	}

	var dhcpRelayFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpRelayFlagName, dhcpRelayFlagDefault, dhcpRelayDescription)

	return nil
}

func registerLan1DhcpServerMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dhcpServerModeDescription := `Enum: ["enabled","disabled","relay"]. Required. DHCP server mode`

	var dhcpServerModeFlagName string
	if cmdPrefix == "" {
		dhcpServerModeFlagName = "dhcpServerMode"
	} else {
		dhcpServerModeFlagName = fmt.Sprintf("%v.dhcpServerMode", cmdPrefix)
	}

	var dhcpServerModeFlagDefault string

	_ = cmd.PersistentFlags().String(dhcpServerModeFlagName, dhcpServerModeFlagDefault, dhcpServerModeDescription)

	if err := cmd.RegisterFlagCompletionFunc(dhcpServerModeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enabled","disabled","relay"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerLan1DNSProxyEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dnsProxyEnabledDescription := `Required. Set to true to enable DNS proxying`

	var dnsProxyEnabledFlagName string
	if cmdPrefix == "" {
		dnsProxyEnabledFlagName = "dnsProxyEnabled"
	} else {
		dnsProxyEnabledFlagName = fmt.Sprintf("%v.dnsProxyEnabled", cmdPrefix)
	}

	var dnsProxyEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(dnsProxyEnabledFlagName, dnsProxyEnabledFlagDefault, dnsProxyEnabledDescription)

	return nil
}

func registerLan1DNSResolvers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dnsResolvers DNSResolvers array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLan1Flags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dhcpLeaseTimeAdded := retrieveLan1DhcpLeaseTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpLeaseTimeAdded

	err, dhcpPoolEndAdded := retrieveLan1DhcpPoolEndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpPoolEndAdded

	err, dhcpPoolStartAdded := retrieveLan1DhcpPoolStartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpPoolStartAdded

	err, dhcpRelayAdded := retrieveLan1DhcpRelayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpRelayAdded

	err, dhcpServerModeAdded := retrieveLan1DhcpServerModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dhcpServerModeAdded

	err, dnsProxyEnabledAdded := retrieveLan1DNSProxyEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsProxyEnabledAdded

	err, dnsResolversAdded := retrieveLan1DNSResolversFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsResolversAdded

	return nil, retAdded
}

func retrieveLan1DhcpLeaseTimeFlags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpLeaseTimeFlagName := fmt.Sprintf("%v.dhcpLeaseTime", cmdPrefix)
	if cmd.Flags().Changed(dhcpLeaseTimeFlagName) {

		var dhcpLeaseTimeFlagName string
		if cmdPrefix == "" {
			dhcpLeaseTimeFlagName = "dhcpLeaseTime"
		} else {
			dhcpLeaseTimeFlagName = fmt.Sprintf("%v.dhcpLeaseTime", cmdPrefix)
		}

		dhcpLeaseTimeFlagValue, err := cmd.Flags().GetInt64(dhcpLeaseTimeFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpLeaseTime = &dhcpLeaseTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan1DhcpPoolEndFlags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpPoolEndFlagName := fmt.Sprintf("%v.dhcpPoolEnd", cmdPrefix)
	if cmd.Flags().Changed(dhcpPoolEndFlagName) {

		var dhcpPoolEndFlagName string
		if cmdPrefix == "" {
			dhcpPoolEndFlagName = "dhcpPoolEnd"
		} else {
			dhcpPoolEndFlagName = fmt.Sprintf("%v.dhcpPoolEnd", cmdPrefix)
		}

		dhcpPoolEndFlagValue, err := cmd.Flags().GetString(dhcpPoolEndFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpPoolEnd = &dhcpPoolEndFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan1DhcpPoolStartFlags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpPoolStartFlagName := fmt.Sprintf("%v.dhcpPoolStart", cmdPrefix)
	if cmd.Flags().Changed(dhcpPoolStartFlagName) {

		var dhcpPoolStartFlagName string
		if cmdPrefix == "" {
			dhcpPoolStartFlagName = "dhcpPoolStart"
		} else {
			dhcpPoolStartFlagName = fmt.Sprintf("%v.dhcpPoolStart", cmdPrefix)
		}

		dhcpPoolStartFlagValue, err := cmd.Flags().GetString(dhcpPoolStartFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpPoolStart = &dhcpPoolStartFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan1DhcpRelayFlags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpRelayFlagName := fmt.Sprintf("%v.dhcpRelay", cmdPrefix)
	if cmd.Flags().Changed(dhcpRelayFlagName) {

		var dhcpRelayFlagName string
		if cmdPrefix == "" {
			dhcpRelayFlagName = "dhcpRelay"
		} else {
			dhcpRelayFlagName = fmt.Sprintf("%v.dhcpRelay", cmdPrefix)
		}

		dhcpRelayFlagValue, err := cmd.Flags().GetString(dhcpRelayFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpRelay = &dhcpRelayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan1DhcpServerModeFlags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dhcpServerModeFlagName := fmt.Sprintf("%v.dhcpServerMode", cmdPrefix)
	if cmd.Flags().Changed(dhcpServerModeFlagName) {

		var dhcpServerModeFlagName string
		if cmdPrefix == "" {
			dhcpServerModeFlagName = "dhcpServerMode"
		} else {
			dhcpServerModeFlagName = fmt.Sprintf("%v.dhcpServerMode", cmdPrefix)
		}

		dhcpServerModeFlagValue, err := cmd.Flags().GetString(dhcpServerModeFlagName)
		if err != nil {
			return err, false
		}
		m.DhcpServerMode = &dhcpServerModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan1DNSProxyEnabledFlags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsProxyEnabledFlagName := fmt.Sprintf("%v.dnsProxyEnabled", cmdPrefix)
	if cmd.Flags().Changed(dnsProxyEnabledFlagName) {

		var dnsProxyEnabledFlagName string
		if cmdPrefix == "" {
			dnsProxyEnabledFlagName = "dnsProxyEnabled"
		} else {
			dnsProxyEnabledFlagName = fmt.Sprintf("%v.dnsProxyEnabled", cmdPrefix)
		}

		dnsProxyEnabledFlagValue, err := cmd.Flags().GetBool(dnsProxyEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.DNSProxyEnabled = &dnsProxyEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLan1DNSResolversFlags(depth int, m *models.Lan1, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsResolversFlagName := fmt.Sprintf("%v.dnsResolvers", cmdPrefix)
	if cmd.Flags().Changed(dnsResolversFlagName) {
		// warning: dnsResolvers array type DNSResolvers is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
