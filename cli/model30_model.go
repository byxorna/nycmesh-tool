// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for Model30

// register flags to command
func registerModelModel30Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerModel30TrunkUndefinedVlans(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel30Trunks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerModel30Vlans(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerModel30TrunkUndefinedVlans(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trunkUndefinedVlansDescription := `Required. If enabled, trunks ports carries all VLANs, except those defined as excluded in VLANs array.`

	var trunkUndefinedVlansFlagName string
	if cmdPrefix == "" {
		trunkUndefinedVlansFlagName = "trunkUndefinedVlans"
	} else {
		trunkUndefinedVlansFlagName = fmt.Sprintf("%v.trunkUndefinedVlans", cmdPrefix)
	}

	var trunkUndefinedVlansFlagDefault bool

	_ = cmd.PersistentFlags().Bool(trunkUndefinedVlansFlagName, trunkUndefinedVlansFlagDefault, trunkUndefinedVlansDescription)

	return nil
}

func registerModel30Trunks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: trunks Trunks array type is not supported by go-swagger cli yet

	return nil
}

func registerModel30Vlans(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: vlans Vlans2 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelModel30Flags(depth int, m *models.Model30, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, trunkUndefinedVlansAdded := retrieveModel30TrunkUndefinedVlansFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trunkUndefinedVlansAdded

	err, trunksAdded := retrieveModel30TrunksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trunksAdded

	err, vlansAdded := retrieveModel30VlansFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlansAdded

	return nil, retAdded
}

func retrieveModel30TrunkUndefinedVlansFlags(depth int, m *models.Model30, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trunkUndefinedVlansFlagName := fmt.Sprintf("%v.trunkUndefinedVlans", cmdPrefix)
	if cmd.Flags().Changed(trunkUndefinedVlansFlagName) {

		var trunkUndefinedVlansFlagName string
		if cmdPrefix == "" {
			trunkUndefinedVlansFlagName = "trunkUndefinedVlans"
		} else {
			trunkUndefinedVlansFlagName = fmt.Sprintf("%v.trunkUndefinedVlans", cmdPrefix)
		}

		trunkUndefinedVlansFlagValue, err := cmd.Flags().GetBool(trunkUndefinedVlansFlagName)
		if err != nil {
			return err, false
		}
		m.TrunkUndefinedVlans = &trunkUndefinedVlansFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveModel30TrunksFlags(depth int, m *models.Model30, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	trunksFlagName := fmt.Sprintf("%v.trunks", cmdPrefix)
	if cmd.Flags().Changed(trunksFlagName) {
		// warning: trunks array type Trunks is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveModel30VlansFlags(depth int, m *models.Model30, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlansFlagName := fmt.Sprintf("%v.vlans", cmdPrefix)
	if cmd.Flags().Changed(vlansFlagName) {
		// warning: vlans array type Vlans2 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
