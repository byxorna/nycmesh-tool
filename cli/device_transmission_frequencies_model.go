// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/byxorna/nycmesh-tool/models"
	"github.com/spf13/cobra"
)

// Schema cli for DeviceTransmissionFrequencies

// register flags to command
func registerModelDeviceTransmissionFrequenciesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceTransmissionFrequenciesAp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceTransmissionFrequenciesGpon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceTransmissionFrequenciesOther(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceTransmissionFrequenciesRouter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceTransmissionFrequenciesStation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceTransmissionFrequenciesSwitch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceTransmissionFrequenciesUps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceTransmissionFrequenciesAp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apDescription := `Enum: ["minimal","low","medium","high","realtime"]. Required. `

	var apFlagName string
	if cmdPrefix == "" {
		apFlagName = "ap"
	} else {
		apFlagName = fmt.Sprintf("%v.ap", cmdPrefix)
	}

	var apFlagDefault string

	_ = cmd.PersistentFlags().String(apFlagName, apFlagDefault, apDescription)

	if err := cmd.RegisterFlagCompletionFunc(apFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceTransmissionFrequenciesGpon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gponDescription := `Enum: ["minimal","low","medium","high","realtime"]. Required. `

	var gponFlagName string
	if cmdPrefix == "" {
		gponFlagName = "gpon"
	} else {
		gponFlagName = fmt.Sprintf("%v.gpon", cmdPrefix)
	}

	var gponFlagDefault string

	_ = cmd.PersistentFlags().String(gponFlagName, gponFlagDefault, gponDescription)

	if err := cmd.RegisterFlagCompletionFunc(gponFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceTransmissionFrequenciesOther(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	otherDescription := `Enum: ["minimal","low","medium","high","realtime"]. Required. `

	var otherFlagName string
	if cmdPrefix == "" {
		otherFlagName = "other"
	} else {
		otherFlagName = fmt.Sprintf("%v.other", cmdPrefix)
	}

	var otherFlagDefault string

	_ = cmd.PersistentFlags().String(otherFlagName, otherFlagDefault, otherDescription)

	if err := cmd.RegisterFlagCompletionFunc(otherFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceTransmissionFrequenciesRouter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	routerDescription := `Enum: ["minimal","low","medium","high","realtime"]. Required. `

	var routerFlagName string
	if cmdPrefix == "" {
		routerFlagName = "router"
	} else {
		routerFlagName = fmt.Sprintf("%v.router", cmdPrefix)
	}

	var routerFlagDefault string

	_ = cmd.PersistentFlags().String(routerFlagName, routerFlagDefault, routerDescription)

	if err := cmd.RegisterFlagCompletionFunc(routerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceTransmissionFrequenciesStation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stationDescription := `Enum: ["minimal","low","medium","high","realtime"]. Required. `

	var stationFlagName string
	if cmdPrefix == "" {
		stationFlagName = "station"
	} else {
		stationFlagName = fmt.Sprintf("%v.station", cmdPrefix)
	}

	var stationFlagDefault string

	_ = cmd.PersistentFlags().String(stationFlagName, stationFlagDefault, stationDescription)

	if err := cmd.RegisterFlagCompletionFunc(stationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceTransmissionFrequenciesSwitch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	switchDescription := `Enum: ["minimal","low","medium","high","realtime"]. Required. `

	var switchFlagName string
	if cmdPrefix == "" {
		switchFlagName = "switch"
	} else {
		switchFlagName = fmt.Sprintf("%v.switch", cmdPrefix)
	}

	var switchFlagDefault string

	_ = cmd.PersistentFlags().String(switchFlagName, switchFlagDefault, switchDescription)

	if err := cmd.RegisterFlagCompletionFunc(switchFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDeviceTransmissionFrequenciesUps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	upsDescription := `Enum: ["minimal","low","medium","high","realtime"]. Required. `

	var upsFlagName string
	if cmdPrefix == "" {
		upsFlagName = "ups"
	} else {
		upsFlagName = fmt.Sprintf("%v.ups", cmdPrefix)
	}

	var upsFlagDefault string

	_ = cmd.PersistentFlags().String(upsFlagName, upsFlagDefault, upsDescription)

	if err := cmd.RegisterFlagCompletionFunc(upsFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["minimal","low","medium","high","realtime"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceTransmissionFrequenciesFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, apAdded := retrieveDeviceTransmissionFrequenciesApFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apAdded

	err, gponAdded := retrieveDeviceTransmissionFrequenciesGponFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gponAdded

	err, otherAdded := retrieveDeviceTransmissionFrequenciesOtherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || otherAdded

	err, routerAdded := retrieveDeviceTransmissionFrequenciesRouterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || routerAdded

	err, stationAdded := retrieveDeviceTransmissionFrequenciesStationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stationAdded

	err, switchAdded := retrieveDeviceTransmissionFrequenciesSwitchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || switchAdded

	err, upsAdded := retrieveDeviceTransmissionFrequenciesUpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upsAdded

	return nil, retAdded
}

func retrieveDeviceTransmissionFrequenciesApFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apFlagName := fmt.Sprintf("%v.ap", cmdPrefix)
	if cmd.Flags().Changed(apFlagName) {

		var apFlagName string
		if cmdPrefix == "" {
			apFlagName = "ap"
		} else {
			apFlagName = fmt.Sprintf("%v.ap", cmdPrefix)
		}

		apFlagValue, err := cmd.Flags().GetString(apFlagName)
		if err != nil {
			return err, false
		}
		m.Ap = &apFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceTransmissionFrequenciesGponFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gponFlagName := fmt.Sprintf("%v.gpon", cmdPrefix)
	if cmd.Flags().Changed(gponFlagName) {

		var gponFlagName string
		if cmdPrefix == "" {
			gponFlagName = "gpon"
		} else {
			gponFlagName = fmt.Sprintf("%v.gpon", cmdPrefix)
		}

		gponFlagValue, err := cmd.Flags().GetString(gponFlagName)
		if err != nil {
			return err, false
		}
		m.Gpon = &gponFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceTransmissionFrequenciesOtherFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	otherFlagName := fmt.Sprintf("%v.other", cmdPrefix)
	if cmd.Flags().Changed(otherFlagName) {

		var otherFlagName string
		if cmdPrefix == "" {
			otherFlagName = "other"
		} else {
			otherFlagName = fmt.Sprintf("%v.other", cmdPrefix)
		}

		otherFlagValue, err := cmd.Flags().GetString(otherFlagName)
		if err != nil {
			return err, false
		}
		m.Other = &otherFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceTransmissionFrequenciesRouterFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	routerFlagName := fmt.Sprintf("%v.router", cmdPrefix)
	if cmd.Flags().Changed(routerFlagName) {

		var routerFlagName string
		if cmdPrefix == "" {
			routerFlagName = "router"
		} else {
			routerFlagName = fmt.Sprintf("%v.router", cmdPrefix)
		}

		routerFlagValue, err := cmd.Flags().GetString(routerFlagName)
		if err != nil {
			return err, false
		}
		m.Router = &routerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceTransmissionFrequenciesStationFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stationFlagName := fmt.Sprintf("%v.station", cmdPrefix)
	if cmd.Flags().Changed(stationFlagName) {

		var stationFlagName string
		if cmdPrefix == "" {
			stationFlagName = "station"
		} else {
			stationFlagName = fmt.Sprintf("%v.station", cmdPrefix)
		}

		stationFlagValue, err := cmd.Flags().GetString(stationFlagName)
		if err != nil {
			return err, false
		}
		m.Station = &stationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceTransmissionFrequenciesSwitchFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	switchFlagName := fmt.Sprintf("%v.switch", cmdPrefix)
	if cmd.Flags().Changed(switchFlagName) {

		var switchFlagName string
		if cmdPrefix == "" {
			switchFlagName = "switch"
		} else {
			switchFlagName = fmt.Sprintf("%v.switch", cmdPrefix)
		}

		switchFlagValue, err := cmd.Flags().GetString(switchFlagName)
		if err != nil {
			return err, false
		}
		m.Switch = &switchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDeviceTransmissionFrequenciesUpsFlags(depth int, m *models.DeviceTransmissionFrequencies, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upsFlagName := fmt.Sprintf("%v.ups", cmdPrefix)
	if cmd.Flags().Changed(upsFlagName) {

		var upsFlagName string
		if cmdPrefix == "" {
			upsFlagName = "ups"
		} else {
			upsFlagName = fmt.Sprintf("%v.ups", cmdPrefix)
		}

		upsFlagValue, err := cmd.Flags().GetString(upsFlagName)
		if err != nil {
			return err, false
		}
		m.Ups = &upsFlagValue

		retAdded = true
	}

	return nil, retAdded
}
