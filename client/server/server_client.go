// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetNmsAddress(params *GetNmsAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsAddressOK, error)

	GetNmsBlogPosts(params *GetNmsBlogPostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsBlogPostsOK, error)

	GetNmsChanged(params *GetNmsChangedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsChangedOK, error)

	GetNmsConnection(params *GetNmsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsConnectionOK, error)

	GetNmsEnums(params *GetNmsEnumsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsEnumsOK, error)

	GetNmsHeartbeat(params *GetNmsHeartbeatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsHeartbeatOK, error)

	GetNmsLogverbosity(params *GetNmsLogverbosityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsLogverbosityOK, error)

	GetNmsMailserver(params *GetNmsMailserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsMailserverOK, error)

	GetNmsMaintenanceBackup(params *GetNmsMaintenanceBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetNmsMaintenanceBackupRestore(params *GetNmsMaintenanceBackupRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsMaintenanceBackupRestoreOK, error)

	GetNmsMaintenanceSupportinfo(params *GetNmsMaintenanceSupportinfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetNmsNews(params *GetNmsNewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsNewsOK, error)

	GetNmsQuestionnairesActive(params *GetNmsQuestionnairesActiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsQuestionnairesActiveOK, error)

	GetNmsSearch(params *GetNmsSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSearchOK, error)

	GetNmsServerconfig(params *GetNmsServerconfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsServerconfigOK, error)

	GetNmsServertime(params *GetNmsServertimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsServertimeOK, error)

	GetNmsSettings(params *GetNmsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSettingsOK, error)

	GetNmsSetup(params *GetNmsSetupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSetupOK, error)

	GetNmsStatistics(params *GetNmsStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsStatisticsOK, error)

	GetNmsSummary(params *GetNmsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSummaryOK, error)

	GetNmsTrafficBlacklist(params *GetNmsTrafficBlacklistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsTrafficBlacklistOK, error)

	GetNmsTrafficSubnets(params *GetNmsTrafficSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsTrafficSubnetsOK, error)

	GetNmsUpdate(params *GetNmsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsUpdateOK, error)

	GetNmsUpdateLog(params *GetNmsUpdateLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsUpdateLogOK, error)

	GetNmsVersion(params *GetNmsVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsVersionOK, error)

	GetNmsVersionLatest(params *GetNmsVersionLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsVersionLatestOK, error)

	PostNmsBlogPostsPostidRead(params *PostNmsBlogPostsPostidReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsBlogPostsPostidReadOK, error)

	PostNmsBlogPostsReadall(params *PostNmsBlogPostsReadallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsBlogPostsReadallOK, error)

	PostNmsLogverbosity(params *PostNmsLogverbosityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsLogverbosityOK, error)

	PostNmsMailserverTest(params *PostNmsMailserverTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsMailserverTestOK, error)

	PostNmsQuestionnairesIDSubmit(params *PostNmsQuestionnairesIDSubmitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsQuestionnairesIDSubmitOK, error)

	PostNmsQuestionnairesIDTouch(params *PostNmsQuestionnairesIDTouchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsQuestionnairesIDTouchOK, error)

	PostNmsSetup(params *PostNmsSetupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsSetupOK, error)

	PostNmsSetupStart(params *PostNmsSetupStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsSetupStartOK, error)

	PostNmsSetupSurvey(params *PostNmsSetupSurveyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsSetupSurveyOK, error)

	PostNmsTrafficBlacklist(params *PostNmsTrafficBlacklistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsTrafficBlacklistOK, error)

	PostNmsTrafficSubnets(params *PostNmsTrafficSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsTrafficSubnetsOK, error)

	PutNmsMailserver(params *PutNmsMailserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsMailserverOK, error)

	PutNmsMaintenanceBackup(params *PutNmsMaintenanceBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsMaintenanceBackupOK, error)

	PutNmsRefreshcertificate(params *PutNmsRefreshcertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsRefreshcertificateOK, error)

	PutNmsSettings(params *PutNmsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsSettingsOK, error)

	PutNmsUpdate(params *PutNmsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetNmsAddress gets IP address of the UI s p server resolve hostname if necessary
*/
func (a *Client) GetNmsAddress(params *GetNmsAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsAddress",
		Method:             "GET",
		PathPattern:        "/nms/address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsBlogPosts gets blog posts
*/
func (a *Client) GetNmsBlogPosts(params *GetNmsBlogPostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsBlogPostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsBlogPostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsBlogPosts",
		Method:             "GET",
		PathPattern:        "/nms/blog/posts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsBlogPostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsBlogPostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsBlogPosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsChanged lists of items in UI s p that changed since given timestamp
*/
func (a *Client) GetNmsChanged(params *GetNmsChangedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsChangedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsChangedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsChanged",
		Method:             "GET",
		PathPattern:        "/nms/changed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsChangedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsChangedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsChanged: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsConnection returns UI s p key for UI s p server
*/
func (a *Client) GetNmsConnection(params *GetNmsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsConnection",
		Method:             "GET",
		PathPattern:        "/nms/connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsEnums returns UI s p enumerations
*/
func (a *Client) GetNmsEnums(params *GetNmsEnumsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsEnumsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsEnumsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsEnums",
		Method:             "GET",
		PathPattern:        "/nms/enums",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsEnumsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsEnumsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsEnums: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsHeartbeat livenesses check
*/
func (a *Client) GetNmsHeartbeat(params *GetNmsHeartbeatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsHeartbeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsHeartbeatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsHeartbeat",
		Method:             "GET",
		PathPattern:        "/nms/heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsHeartbeatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsHeartbeatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsHeartbeat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsLogverbosity gets current server log verbosity
*/
func (a *Client) GetNmsLogverbosity(params *GetNmsLogverbosityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsLogverbosityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsLogverbosityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsLogverbosity",
		Method:             "GET",
		PathPattern:        "/nms/log-verbosity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsLogverbosityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsLogverbosityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsLogverbosity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsMailserver fetches mail server settings
*/
func (a *Client) GetNmsMailserver(params *GetNmsMailserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsMailserverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsMailserverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsMailserver",
		Method:             "GET",
		PathPattern:        "/nms/mailserver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsMailserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsMailserverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsMailserver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsMaintenanceBackup downloads data backup
*/
func (a *Client) GetNmsMaintenanceBackup(params *GetNmsMaintenanceBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsMaintenanceBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsMaintenanceBackup",
		Method:             "GET",
		PathPattern:        "/nms/maintenance/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsMaintenanceBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetNmsMaintenanceBackupRestore restores uploaded UI s p backup file
*/
func (a *Client) GetNmsMaintenanceBackupRestore(params *GetNmsMaintenanceBackupRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsMaintenanceBackupRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsMaintenanceBackupRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsMaintenanceBackupRestore",
		Method:             "GET",
		PathPattern:        "/nms/maintenance/backup/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsMaintenanceBackupRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsMaintenanceBackupRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsMaintenanceBackupRestore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsMaintenanceSupportinfo downloads UI s p support file
*/
func (a *Client) GetNmsMaintenanceSupportinfo(params *GetNmsMaintenanceSupportinfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsMaintenanceSupportinfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsMaintenanceSupportinfo",
		Method:             "GET",
		PathPattern:        "/nms/maintenance/supportinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsMaintenanceSupportinfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetNmsNews gets news from UI s p feed for user
*/
func (a *Client) GetNmsNews(params *GetNmsNewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsNewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsNewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsNews",
		Method:             "GET",
		PathPattern:        "/nms/news",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsNewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsNewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsNews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsQuestionnairesActive gets currently active questionnaire
*/
func (a *Client) GetNmsQuestionnairesActive(params *GetNmsQuestionnairesActiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsQuestionnairesActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsQuestionnairesActiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsQuestionnairesActive",
		Method:             "GET",
		PathPattern:        "/nms/questionnaires/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsQuestionnairesActiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsQuestionnairesActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsQuestionnairesActive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsSearch searches UI s p
*/
func (a *Client) GetNmsSearch(params *GetNmsSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsSearch",
		Method:             "GET",
		PathPattern:        "/nms/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsServerconfig returns UI s p server configuration
*/
func (a *Client) GetNmsServerconfig(params *GetNmsServerconfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsServerconfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsServerconfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsServerconfig",
		Method:             "GET",
		PathPattern:        "/nms/server-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsServerconfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsServerconfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsServerconfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsServertime gets server time of the UI s p server
*/
func (a *Client) GetNmsServertime(params *GetNmsServertimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsServertimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsServertimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsServertime",
		Method:             "GET",
		PathPattern:        "/nms/server-time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsServertimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsServertimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsServertime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsSettings gets UI s p settings
*/
func (a *Client) GetNmsSettings(params *GetNmsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsSettings",
		Method:             "GET",
		PathPattern:        "/nms/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsSetup returns status of UI s p setup
*/
func (a *Client) GetNmsSetup(params *GetNmsSetupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSetupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsSetupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsSetup",
		Method:             "GET",
		PathPattern:        "/nms/setup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsSetupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsSetupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsSetup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsStatistics gets UI s p network statistics
*/
func (a *Client) GetNmsStatistics(params *GetNmsStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsStatistics",
		Method:             "GET",
		PathPattern:        "/nms/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsStatisticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsStatistics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsSummary various badge count like values e g unread logs count
*/
func (a *Client) GetNmsSummary(params *GetNmsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsSummary",
		Method:             "GET",
		PathPattern:        "/nms/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsTrafficBlacklist gets subnets that are ignored by traffic collection
*/
func (a *Client) GetNmsTrafficBlacklist(params *GetNmsTrafficBlacklistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsTrafficBlacklistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsTrafficBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsTrafficBlacklist",
		Method:             "GET",
		PathPattern:        "/nms/traffic/blacklist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsTrafficBlacklistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsTrafficBlacklistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsTrafficBlacklist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsTrafficSubnets gets subnets that are relevant for traffic collection
*/
func (a *Client) GetNmsTrafficSubnets(params *GetNmsTrafficSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsTrafficSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsTrafficSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsTrafficSubnets",
		Method:             "GET",
		PathPattern:        "/nms/traffic/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsTrafficSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsTrafficSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsTrafficSubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsUpdate gets UI s p update status
*/
func (a *Client) GetNmsUpdate(params *GetNmsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsUpdate",
		Method:             "GET",
		PathPattern:        "/nms/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsUpdateLog gets latest update log
*/
func (a *Client) GetNmsUpdateLog(params *GetNmsUpdateLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsUpdateLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsUpdateLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsUpdateLog",
		Method:             "GET",
		PathPattern:        "/nms/update/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsUpdateLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsUpdateLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsUpdateLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsVersion gets UI s p version
*/
func (a *Client) GetNmsVersion(params *GetNmsVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsVersion",
		Method:             "GET",
		PathPattern:        "/nms/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNmsVersionLatest gets latest UI s p version
*/
func (a *Client) GetNmsVersionLatest(params *GetNmsVersionLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNmsVersionLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNmsVersionLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNmsVersionLatest",
		Method:             "GET",
		PathPattern:        "/nms/version/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNmsVersionLatestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNmsVersionLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNmsVersionLatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsBlogPostsPostidRead sets blog post as read
*/
func (a *Client) PostNmsBlogPostsPostidRead(params *PostNmsBlogPostsPostidReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsBlogPostsPostidReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsBlogPostsPostidReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsBlogPostsPostidRead",
		Method:             "POST",
		PathPattern:        "/nms/blog/posts/{postId}/read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsBlogPostsPostidReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsBlogPostsPostidReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsBlogPostsPostidRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsBlogPostsReadall sets all blog posts as read
*/
func (a *Client) PostNmsBlogPostsReadall(params *PostNmsBlogPostsReadallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsBlogPostsReadallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsBlogPostsReadallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsBlogPostsReadall",
		Method:             "POST",
		PathPattern:        "/nms/blog/posts/readall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsBlogPostsReadallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsBlogPostsReadallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsBlogPostsReadall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsLogverbosity changes current server log verbosity
*/
func (a *Client) PostNmsLogverbosity(params *PostNmsLogverbosityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsLogverbosityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsLogverbosityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsLogverbosity",
		Method:             "POST",
		PathPattern:        "/nms/log-verbosity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsLogverbosityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsLogverbosityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsLogverbosity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsMailserverTest tests mail server settings by sending email
*/
func (a *Client) PostNmsMailserverTest(params *PostNmsMailserverTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsMailserverTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsMailserverTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsMailserverTest",
		Method:             "POST",
		PathPattern:        "/nms/mailserver/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsMailserverTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsMailserverTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsMailserverTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsQuestionnairesIDSubmit submits answers to questionnaire
*/
func (a *Client) PostNmsQuestionnairesIDSubmit(params *PostNmsQuestionnairesIDSubmitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsQuestionnairesIDSubmitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsQuestionnairesIDSubmitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsQuestionnairesIdSubmit",
		Method:             "POST",
		PathPattern:        "/nms/questionnaires/{id}/submit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsQuestionnairesIDSubmitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsQuestionnairesIDSubmitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsQuestionnairesIdSubmit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsQuestionnairesIDTouch marks the questionnaire as visited it will pop up later if it is not submitted
*/
func (a *Client) PostNmsQuestionnairesIDTouch(params *PostNmsQuestionnairesIDTouchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsQuestionnairesIDTouchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsQuestionnairesIDTouchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsQuestionnairesIdTouch",
		Method:             "POST",
		PathPattern:        "/nms/questionnaires/{id}/touch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsQuestionnairesIDTouchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsQuestionnairesIDTouchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsQuestionnairesIdTouch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsSetup setups UI s p instance
*/
func (a *Client) PostNmsSetup(params *PostNmsSetupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsSetupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsSetupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsSetup",
		Method:             "POST",
		PathPattern:        "/nms/setup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsSetupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsSetupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsSetup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsSetupStart sets UI s p setup started
*/
func (a *Client) PostNmsSetupStart(params *PostNmsSetupStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsSetupStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsSetupStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsSetupStart",
		Method:             "POST",
		PathPattern:        "/nms/setup/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsSetupStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsSetupStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsSetupStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsSetupSurvey submits setup survey
*/
func (a *Client) PostNmsSetupSurvey(params *PostNmsSetupSurveyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsSetupSurveyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsSetupSurveyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsSetupSurvey",
		Method:             "POST",
		PathPattern:        "/nms/setup/survey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsSetupSurveyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsSetupSurveyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsSetupSurvey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsTrafficBlacklist sets subnets that are ignored by traffic collection
*/
func (a *Client) PostNmsTrafficBlacklist(params *PostNmsTrafficBlacklistParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsTrafficBlacklistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsTrafficBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsTrafficBlacklist",
		Method:             "POST",
		PathPattern:        "/nms/traffic/blacklist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsTrafficBlacklistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsTrafficBlacklistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsTrafficBlacklist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostNmsTrafficSubnets sets subnets that are relevant for traffic collection
*/
func (a *Client) PostNmsTrafficSubnets(params *PostNmsTrafficSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostNmsTrafficSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNmsTrafficSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postNmsTrafficSubnets",
		Method:             "POST",
		PathPattern:        "/nms/traffic/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNmsTrafficSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNmsTrafficSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postNmsTrafficSubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutNmsMailserver updates mail server settings
*/
func (a *Client) PutNmsMailserver(params *PutNmsMailserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsMailserverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNmsMailserverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putNmsMailserver",
		Method:             "PUT",
		PathPattern:        "/nms/mailserver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNmsMailserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNmsMailserverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putNmsMailserver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutNmsMaintenanceBackup uploads data backup
*/
func (a *Client) PutNmsMaintenanceBackup(params *PutNmsMaintenanceBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsMaintenanceBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNmsMaintenanceBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putNmsMaintenanceBackup",
		Method:             "PUT",
		PathPattern:        "/nms/maintenance/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNmsMaintenanceBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNmsMaintenanceBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putNmsMaintenanceBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutNmsRefreshcertificate refreshes UI s p certificate
*/
func (a *Client) PutNmsRefreshcertificate(params *PutNmsRefreshcertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsRefreshcertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNmsRefreshcertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putNmsRefreshcertificate",
		Method:             "PUT",
		PathPattern:        "/nms/refresh-certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNmsRefreshcertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNmsRefreshcertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putNmsRefreshcertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutNmsSettings updates UI s p settings
*/
func (a *Client) PutNmsSettings(params *PutNmsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNmsSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putNmsSettings",
		Method:             "PUT",
		PathPattern:        "/nms/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNmsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNmsSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putNmsSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutNmsUpdate requests UI s p update
*/
func (a *Client) PutNmsUpdate(params *PutNmsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutNmsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNmsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putNmsUpdate",
		Method:             "PUT",
		PathPattern:        "/nms/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNmsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutNmsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putNmsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
