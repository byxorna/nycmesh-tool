// Code generated by go-swagger; DO NOT EDIT.

package installations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new installations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for installations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInstallationsDevices(params *GetInstallationsDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstallationsDevicesOK, error)

	GetInstallationsID(params *GetInstallationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstallationsIDOK, error)

	GetInstallationsIDMacConfiguration(params *GetInstallationsIDMacConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstallationsIDMacConfigurationOK, error)

	PostInstallations(params *PostInstallationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsOK, error)

	PostInstallationsCoverage(params *PostInstallationsCoverageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsCoverageOK, error)

	PostInstallationsDevices(params *PostInstallationsDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsDevicesOK, error)

	PostInstallationsIDChat(params *PostInstallationsIDChatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsIDChatOK, error)

	PostUserLocation(params *PostUserLocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserLocationOK, error)

	PutInstallationsIDMac(params *PutInstallationsIDMacParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutInstallationsIDMacOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetInstallationsDevices gets devices registered for installation ordered by current user s location
*/
func (a *Client) GetInstallationsDevices(params *GetInstallationsDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstallationsDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstallationsDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstallationsDevices",
		Method:             "GET",
		PathPattern:        "/installations/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstallationsDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstallationsDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstallationsDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstallationsID gets installation data
*/
func (a *Client) GetInstallationsID(params *GetInstallationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstallationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstallationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstallationsId",
		Method:             "GET",
		PathPattern:        "/installations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstallationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstallationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstallationsId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstallationsIDMacConfiguration gets recommended device configuration
*/
func (a *Client) GetInstallationsIDMacConfiguration(params *GetInstallationsIDMacConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstallationsIDMacConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstallationsIDMacConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstallationsIdMacConfiguration",
		Method:             "GET",
		PathPattern:        "/installations/{id}/{mac}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstallationsIDMacConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstallationsIDMacConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstallationsIdMacConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostInstallations initiates new installation
*/
func (a *Client) PostInstallations(params *PostInstallationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstallationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postInstallations",
		Method:             "POST",
		PathPattern:        "/installations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstallationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInstallationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postInstallations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostInstallationsCoverage returns modulation coverage in monitored area
*/
func (a *Client) PostInstallationsCoverage(params *PostInstallationsCoverageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsCoverageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstallationsCoverageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postInstallationsCoverage",
		Method:             "POST",
		PathPattern:        "/installations/coverage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstallationsCoverageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInstallationsCoverageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postInstallationsCoverage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostInstallationsDevices registers device for installation
*/
func (a *Client) PostInstallationsDevices(params *PostInstallationsDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstallationsDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postInstallationsDevices",
		Method:             "POST",
		PathPattern:        "/installations/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstallationsDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInstallationsDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postInstallationsDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostInstallationsIDChat adds chat message to the installation
*/
func (a *Client) PostInstallationsIDChat(params *PostInstallationsIDChatParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInstallationsIDChatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstallationsIDChatParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postInstallationsIdChat",
		Method:             "POST",
		PathPattern:        "/installations/{id}/chat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstallationsIDChatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInstallationsIDChatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postInstallationsIdChat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUserLocation updates user s location
*/
func (a *Client) PostUserLocation(params *PostUserLocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUserLocation",
		Method:             "POST",
		PathPattern:        "/user/location",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUserLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutInstallationsIDMac sets device installation data
*/
func (a *Client) PutInstallationsIDMac(params *PutInstallationsIDMacParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutInstallationsIDMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInstallationsIDMacParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putInstallationsIdMac",
		Method:             "PUT",
		PathPattern:        "/installations/{id}/{mac}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInstallationsIDMacReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutInstallationsIDMacOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putInstallationsIdMac: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
