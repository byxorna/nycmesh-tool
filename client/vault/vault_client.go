// Code generated by go-swagger; DO NOT EDIT.

package vault

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vault API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vault API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetVaultCredentials(params *GetVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultCredentialsOK, error)

	GetVaultCredentialsDevices(params *GetVaultCredentialsDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultCredentialsDevicesOK, error)

	GetVaultDeviceidCredentials(params *GetVaultDeviceidCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultDeviceidCredentialsOK, error)

	PostVaultCredentials(params *PostVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultCredentialsOK, error)

	PostVaultCredentialsRegenerate(params *PostVaultCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultCredentialsRegenerateOK, error)

	PostVaultCredentialsUnlock(params *PostVaultCredentialsUnlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultCredentialsUnlockOK, error)

	PostVaultDeviceidCredentialsRegenerate(params *PostVaultDeviceidCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultDeviceidCredentialsRegenerateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetVaultCredentials gets credentials vault status
*/
func (a *Client) GetVaultCredentials(params *GetVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVaultCredentials",
		Method:             "GET",
		PathPattern:        "/vault/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVaultCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVaultCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVaultCredentialsDevices gets all devices credentials
*/
func (a *Client) GetVaultCredentialsDevices(params *GetVaultCredentialsDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultCredentialsDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultCredentialsDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVaultCredentialsDevices",
		Method:             "GET",
		PathPattern:        "/vault/credentials/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVaultCredentialsDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultCredentialsDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVaultCredentialsDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVaultDeviceidCredentials gets device credentials
*/
func (a *Client) GetVaultDeviceidCredentials(params *GetVaultDeviceidCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVaultDeviceidCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVaultDeviceidCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVaultDeviceidCredentials",
		Method:             "GET",
		PathPattern:        "/vault/{deviceId}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVaultDeviceidCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVaultDeviceidCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVaultDeviceidCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultCredentials updates credentials vault status
*/
func (a *Client) PostVaultCredentials(params *PostVaultCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postVaultCredentials",
		Method:             "POST",
		PathPattern:        "/vault/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultCredentialsRegenerate generates new password for devices returns status
*/
func (a *Client) PostVaultCredentialsRegenerate(params *PostVaultCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultCredentialsRegenerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultCredentialsRegenerateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postVaultCredentialsRegenerate",
		Method:             "POST",
		PathPattern:        "/vault/credentials/regenerate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultCredentialsRegenerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultCredentialsRegenerateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultCredentialsRegenerate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultCredentialsUnlock unlocks private pgp key
*/
func (a *Client) PostVaultCredentialsUnlock(params *PostVaultCredentialsUnlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultCredentialsUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultCredentialsUnlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postVaultCredentialsUnlock",
		Method:             "POST",
		PathPattern:        "/vault/credentials/unlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultCredentialsUnlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultCredentialsUnlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultCredentialsUnlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostVaultDeviceidCredentialsRegenerate generates new password for device this endpoint is d e p r e c a t e d please refer to nms api v2 1 vault credentials regenerate instead
*/
func (a *Client) PostVaultDeviceidCredentialsRegenerate(params *PostVaultDeviceidCredentialsRegenerateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaultDeviceidCredentialsRegenerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaultDeviceidCredentialsRegenerateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postVaultDeviceidCredentialsRegenerate",
		Method:             "POST",
		PathPattern:        "/vault/{deviceId}/credentials/regenerate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVaultDeviceidCredentialsRegenerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaultDeviceidCredentialsRegenerateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postVaultDeviceidCredentialsRegenerate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
