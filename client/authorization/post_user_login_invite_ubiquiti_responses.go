// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/models"
)

// PostUserLoginInviteUbiquitiReader is a Reader for the PostUserLoginInviteUbiquiti structure.
type PostUserLoginInviteUbiquitiReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUserLoginInviteUbiquitiReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUserLoginInviteUbiquitiOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUserLoginInviteUbiquitiBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostUserLoginInviteUbiquitiUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUserLoginInviteUbiquitiInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUserLoginInviteUbiquitiOK creates a PostUserLoginInviteUbiquitiOK with default headers values
func NewPostUserLoginInviteUbiquitiOK() *PostUserLoginInviteUbiquitiOK {
	return &PostUserLoginInviteUbiquitiOK{}
}

/* PostUserLoginInviteUbiquitiOK describes a response with status code 200, with default header values.

Successful
*/
type PostUserLoginInviteUbiquitiOK struct {

	/* User authorization token
	 */
	XAuthToken string

	Payload *models.UserLogin
}

func (o *PostUserLoginInviteUbiquitiOK) Error() string {
	return fmt.Sprintf("[POST /user/login/invite/ubiquiti][%d] postUserLoginInviteUbiquitiOK  %+v", 200, o.Payload)
}
func (o *PostUserLoginInviteUbiquitiOK) GetPayload() *models.UserLogin {
	return o.Payload
}

func (o *PostUserLoginInviteUbiquitiOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-auth-token
	hdrXAuthToken := response.GetHeader("x-auth-token")

	if hdrXAuthToken != "" {
		o.XAuthToken = hdrXAuthToken
	}

	o.Payload = new(models.UserLogin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserLoginInviteUbiquitiBadRequest creates a PostUserLoginInviteUbiquitiBadRequest with default headers values
func NewPostUserLoginInviteUbiquitiBadRequest() *PostUserLoginInviteUbiquitiBadRequest {
	return &PostUserLoginInviteUbiquitiBadRequest{}
}

/* PostUserLoginInviteUbiquitiBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostUserLoginInviteUbiquitiBadRequest struct {
	Payload *models.Error
}

func (o *PostUserLoginInviteUbiquitiBadRequest) Error() string {
	return fmt.Sprintf("[POST /user/login/invite/ubiquiti][%d] postUserLoginInviteUbiquitiBadRequest  %+v", 400, o.Payload)
}
func (o *PostUserLoginInviteUbiquitiBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUserLoginInviteUbiquitiBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserLoginInviteUbiquitiUnauthorized creates a PostUserLoginInviteUbiquitiUnauthorized with default headers values
func NewPostUserLoginInviteUbiquitiUnauthorized() *PostUserLoginInviteUbiquitiUnauthorized {
	return &PostUserLoginInviteUbiquitiUnauthorized{}
}

/* PostUserLoginInviteUbiquitiUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostUserLoginInviteUbiquitiUnauthorized struct {
	Payload *models.Error
}

func (o *PostUserLoginInviteUbiquitiUnauthorized) Error() string {
	return fmt.Sprintf("[POST /user/login/invite/ubiquiti][%d] postUserLoginInviteUbiquitiUnauthorized  %+v", 401, o.Payload)
}
func (o *PostUserLoginInviteUbiquitiUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUserLoginInviteUbiquitiUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserLoginInviteUbiquitiInternalServerError creates a PostUserLoginInviteUbiquitiInternalServerError with default headers values
func NewPostUserLoginInviteUbiquitiInternalServerError() *PostUserLoginInviteUbiquitiInternalServerError {
	return &PostUserLoginInviteUbiquitiInternalServerError{}
}

/* PostUserLoginInviteUbiquitiInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostUserLoginInviteUbiquitiInternalServerError struct {
	Payload *models.Error
}

func (o *PostUserLoginInviteUbiquitiInternalServerError) Error() string {
	return fmt.Sprintf("[POST /user/login/invite/ubiquiti][%d] postUserLoginInviteUbiquitiInternalServerError  %+v", 500, o.Payload)
}
func (o *PostUserLoginInviteUbiquitiInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostUserLoginInviteUbiquitiInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
