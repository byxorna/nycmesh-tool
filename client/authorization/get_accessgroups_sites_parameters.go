// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAccessgroupsSitesParams creates a new GetAccessgroupsSitesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAccessgroupsSitesParams() *GetAccessgroupsSitesParams {
	return &GetAccessgroupsSitesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccessgroupsSitesParamsWithTimeout creates a new GetAccessgroupsSitesParams object
// with the ability to set a timeout on a request.
func NewGetAccessgroupsSitesParamsWithTimeout(timeout time.Duration) *GetAccessgroupsSitesParams {
	return &GetAccessgroupsSitesParams{
		timeout: timeout,
	}
}

// NewGetAccessgroupsSitesParamsWithContext creates a new GetAccessgroupsSitesParams object
// with the ability to set a context for a request.
func NewGetAccessgroupsSitesParamsWithContext(ctx context.Context) *GetAccessgroupsSitesParams {
	return &GetAccessgroupsSitesParams{
		Context: ctx,
	}
}

// NewGetAccessgroupsSitesParamsWithHTTPClient creates a new GetAccessgroupsSitesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAccessgroupsSitesParamsWithHTTPClient(client *http.Client) *GetAccessgroupsSitesParams {
	return &GetAccessgroupsSitesParams{
		HTTPClient: client,
	}
}

/* GetAccessgroupsSitesParams contains all the parameters to send to the API endpoint
   for the get accessgroups sites operation.

   Typically these are written to a http.Request.
*/
type GetAccessgroupsSitesParams struct {

	// GroupID.
	GroupID []string

	/* WithInternal.

	   Whether to include internal access groups.
	*/
	WithInternal *bool

	/* WithOverview.

	   Whether to include site and user counts.
	*/
	WithOverview *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get accessgroups sites params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccessgroupsSitesParams) WithDefaults() *GetAccessgroupsSitesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get accessgroups sites params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccessgroupsSitesParams) SetDefaults() {
	var (
		groupIDDefault = []string{}

		withInternalDefault = bool(false)

		withOverviewDefault = bool(false)
	)

	val := GetAccessgroupsSitesParams{
		GroupID:      groupIDDefault,
		WithInternal: &withInternalDefault,
		WithOverview: &withOverviewDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) WithTimeout(timeout time.Duration) *GetAccessgroupsSitesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) WithContext(ctx context.Context) *GetAccessgroupsSitesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) WithHTTPClient(client *http.Client) *GetAccessgroupsSitesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupID adds the groupID to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) WithGroupID(groupID []string) *GetAccessgroupsSitesParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) SetGroupID(groupID []string) {
	o.GroupID = groupID
}

// WithWithInternal adds the withInternal to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) WithWithInternal(withInternal *bool) *GetAccessgroupsSitesParams {
	o.SetWithInternal(withInternal)
	return o
}

// SetWithInternal adds the withInternal to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) SetWithInternal(withInternal *bool) {
	o.WithInternal = withInternal
}

// WithWithOverview adds the withOverview to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) WithWithOverview(withOverview *bool) *GetAccessgroupsSitesParams {
	o.SetWithOverview(withOverview)
	return o
}

// SetWithOverview adds the withOverview to the get accessgroups sites params
func (o *GetAccessgroupsSitesParams) SetWithOverview(withOverview *bool) {
	o.WithOverview = withOverview
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccessgroupsSitesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GroupID != nil {

		// binding items for groupId
		joinedGroupID := o.bindParamGroupID(reg)

		// query array param groupId
		if err := r.SetQueryParam("groupId", joinedGroupID...); err != nil {
			return err
		}
	}

	if o.WithInternal != nil {

		// query param withInternal
		var qrWithInternal bool

		if o.WithInternal != nil {
			qrWithInternal = *o.WithInternal
		}
		qWithInternal := swag.FormatBool(qrWithInternal)
		if qWithInternal != "" {

			if err := r.SetQueryParam("withInternal", qWithInternal); err != nil {
				return err
			}
		}
	}

	if o.WithOverview != nil {

		// query param withOverview
		var qrWithOverview bool

		if o.WithOverview != nil {
			qrWithOverview = *o.WithOverview
		}
		qWithOverview := swag.FormatBool(qrWithOverview)
		if qWithOverview != "" {

			if err := r.SetQueryParam("withOverview", qWithOverview); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAccessgroupsSites binds the parameter groupId
func (o *GetAccessgroupsSitesParams) bindParamGroupID(formats strfmt.Registry) []string {
	groupIDIR := o.GroupID

	var groupIDIC []string
	for _, groupIDIIR := range groupIDIR { // explode []string

		groupIDIIV := groupIDIIR // string as string
		groupIDIC = append(groupIDIC, groupIDIIV)
	}

	// items.CollectionFormat: "multi"
	groupIDIS := swag.JoinByFormat(groupIDIC, "multi")

	return groupIDIS
}
