// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/models"
)

// PutAccessgroupsSitesGroupidSiteidReader is a Reader for the PutAccessgroupsSitesGroupidSiteid structure.
type PutAccessgroupsSitesGroupidSiteidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAccessgroupsSitesGroupidSiteidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutAccessgroupsSitesGroupidSiteidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutAccessgroupsSitesGroupidSiteidBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutAccessgroupsSitesGroupidSiteidUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutAccessgroupsSitesGroupidSiteidForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutAccessgroupsSitesGroupidSiteidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutAccessgroupsSitesGroupidSiteidConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutAccessgroupsSitesGroupidSiteidInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutAccessgroupsSitesGroupidSiteidOK creates a PutAccessgroupsSitesGroupidSiteidOK with default headers values
func NewPutAccessgroupsSitesGroupidSiteidOK() *PutAccessgroupsSitesGroupidSiteidOK {
	return &PutAccessgroupsSitesGroupidSiteidOK{}
}

/* PutAccessgroupsSitesGroupidSiteidOK describes a response with status code 200, with default header values.

Successful
*/
type PutAccessgroupsSitesGroupidSiteidOK struct {
	Payload *models.Status
}

func (o *PutAccessgroupsSitesGroupidSiteidOK) Error() string {
	return fmt.Sprintf("[PUT /access-groups/sites/{groupId}/{siteId}][%d] putAccessgroupsSitesGroupidSiteidOK  %+v", 200, o.Payload)
}
func (o *PutAccessgroupsSitesGroupidSiteidOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *PutAccessgroupsSitesGroupidSiteidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAccessgroupsSitesGroupidSiteidBadRequest creates a PutAccessgroupsSitesGroupidSiteidBadRequest with default headers values
func NewPutAccessgroupsSitesGroupidSiteidBadRequest() *PutAccessgroupsSitesGroupidSiteidBadRequest {
	return &PutAccessgroupsSitesGroupidSiteidBadRequest{}
}

/* PutAccessgroupsSitesGroupidSiteidBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutAccessgroupsSitesGroupidSiteidBadRequest struct {
	Payload *models.Error
}

func (o *PutAccessgroupsSitesGroupidSiteidBadRequest) Error() string {
	return fmt.Sprintf("[PUT /access-groups/sites/{groupId}/{siteId}][%d] putAccessgroupsSitesGroupidSiteidBadRequest  %+v", 400, o.Payload)
}
func (o *PutAccessgroupsSitesGroupidSiteidBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAccessgroupsSitesGroupidSiteidBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAccessgroupsSitesGroupidSiteidUnauthorized creates a PutAccessgroupsSitesGroupidSiteidUnauthorized with default headers values
func NewPutAccessgroupsSitesGroupidSiteidUnauthorized() *PutAccessgroupsSitesGroupidSiteidUnauthorized {
	return &PutAccessgroupsSitesGroupidSiteidUnauthorized{}
}

/* PutAccessgroupsSitesGroupidSiteidUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutAccessgroupsSitesGroupidSiteidUnauthorized struct {
	Payload *models.Error
}

func (o *PutAccessgroupsSitesGroupidSiteidUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /access-groups/sites/{groupId}/{siteId}][%d] putAccessgroupsSitesGroupidSiteidUnauthorized  %+v", 401, o.Payload)
}
func (o *PutAccessgroupsSitesGroupidSiteidUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAccessgroupsSitesGroupidSiteidUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAccessgroupsSitesGroupidSiteidForbidden creates a PutAccessgroupsSitesGroupidSiteidForbidden with default headers values
func NewPutAccessgroupsSitesGroupidSiteidForbidden() *PutAccessgroupsSitesGroupidSiteidForbidden {
	return &PutAccessgroupsSitesGroupidSiteidForbidden{}
}

/* PutAccessgroupsSitesGroupidSiteidForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutAccessgroupsSitesGroupidSiteidForbidden struct {
	Payload *models.Error
}

func (o *PutAccessgroupsSitesGroupidSiteidForbidden) Error() string {
	return fmt.Sprintf("[PUT /access-groups/sites/{groupId}/{siteId}][%d] putAccessgroupsSitesGroupidSiteidForbidden  %+v", 403, o.Payload)
}
func (o *PutAccessgroupsSitesGroupidSiteidForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAccessgroupsSitesGroupidSiteidForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAccessgroupsSitesGroupidSiteidNotFound creates a PutAccessgroupsSitesGroupidSiteidNotFound with default headers values
func NewPutAccessgroupsSitesGroupidSiteidNotFound() *PutAccessgroupsSitesGroupidSiteidNotFound {
	return &PutAccessgroupsSitesGroupidSiteidNotFound{}
}

/* PutAccessgroupsSitesGroupidSiteidNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutAccessgroupsSitesGroupidSiteidNotFound struct {
	Payload *models.Error
}

func (o *PutAccessgroupsSitesGroupidSiteidNotFound) Error() string {
	return fmt.Sprintf("[PUT /access-groups/sites/{groupId}/{siteId}][%d] putAccessgroupsSitesGroupidSiteidNotFound  %+v", 404, o.Payload)
}
func (o *PutAccessgroupsSitesGroupidSiteidNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAccessgroupsSitesGroupidSiteidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAccessgroupsSitesGroupidSiteidConflict creates a PutAccessgroupsSitesGroupidSiteidConflict with default headers values
func NewPutAccessgroupsSitesGroupidSiteidConflict() *PutAccessgroupsSitesGroupidSiteidConflict {
	return &PutAccessgroupsSitesGroupidSiteidConflict{}
}

/* PutAccessgroupsSitesGroupidSiteidConflict describes a response with status code 409, with default header values.

Conflict
*/
type PutAccessgroupsSitesGroupidSiteidConflict struct {
	Payload *models.Error
}

func (o *PutAccessgroupsSitesGroupidSiteidConflict) Error() string {
	return fmt.Sprintf("[PUT /access-groups/sites/{groupId}/{siteId}][%d] putAccessgroupsSitesGroupidSiteidConflict  %+v", 409, o.Payload)
}
func (o *PutAccessgroupsSitesGroupidSiteidConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAccessgroupsSitesGroupidSiteidConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAccessgroupsSitesGroupidSiteidInternalServerError creates a PutAccessgroupsSitesGroupidSiteidInternalServerError with default headers values
func NewPutAccessgroupsSitesGroupidSiteidInternalServerError() *PutAccessgroupsSitesGroupidSiteidInternalServerError {
	return &PutAccessgroupsSitesGroupidSiteidInternalServerError{}
}

/* PutAccessgroupsSitesGroupidSiteidInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PutAccessgroupsSitesGroupidSiteidInternalServerError struct {
	Payload *models.Error
}

func (o *PutAccessgroupsSitesGroupidSiteidInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /access-groups/sites/{groupId}/{siteId}][%d] putAccessgroupsSitesGroupidSiteidInternalServerError  %+v", 500, o.Payload)
}
func (o *PutAccessgroupsSitesGroupidSiteidInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutAccessgroupsSitesGroupidSiteidInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
