// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams creates a new DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams() *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	return &DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParamsWithTimeout creates a new DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams object
// with the ability to set a timeout on a request.
func NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParamsWithTimeout(timeout time.Duration) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	return &DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams{
		timeout: timeout,
	}
}

// NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParamsWithContext creates a new DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams object
// with the ability to set a context for a request.
func NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParamsWithContext(ctx context.Context) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	return &DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams{
		Context: ctx,
	}
}

// NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParamsWithHTTPClient creates a new DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParamsWithHTTPClient(client *http.Client) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	return &DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams{
		HTTPClient: client,
	}
}

/* DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams contains all the parameters to send to the API endpoint
   for the delete devices uisprs Id firewall filters filtername rule ruleid operation.

   Typically these are written to a http.Request.
*/
type DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams struct {

	// FilterName.
	FilterName string

	// ID.
	ID string

	// IsForceApply.
	IsForceApply *string

	// RuleID.
	RuleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete devices uisprs Id firewall filters filtername rule ruleid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithDefaults() *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete devices uisprs Id firewall filters filtername rule ruleid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithTimeout(timeout time.Duration) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithContext(ctx context.Context) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithHTTPClient(client *http.Client) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterName adds the filterName to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithFilterName(filterName string) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetFilterName(filterName)
	return o
}

// SetFilterName adds the filterName to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetFilterName(filterName string) {
	o.FilterName = filterName
}

// WithID adds the id to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithID(id string) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetID(id string) {
	o.ID = id
}

// WithIsForceApply adds the isForceApply to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithIsForceApply(isForceApply *string) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetIsForceApply(isForceApply)
	return o
}

// SetIsForceApply adds the isForceApply to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetIsForceApply(isForceApply *string) {
	o.IsForceApply = isForceApply
}

// WithRuleID adds the ruleID to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WithRuleID(ruleID string) *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the delete devices uisprs Id firewall filters filtername rule ruleid params
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) SetRuleID(ruleID string) {
	o.RuleID = ruleID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDevicesUisprsIDFirewallFiltersFilternameRuleRuleidParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param filterName
	if err := r.SetPathParam("filterName", o.FilterName); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IsForceApply != nil {

		// query param isForceApply
		var qrIsForceApply string

		if o.IsForceApply != nil {
			qrIsForceApply = *o.IsForceApply
		}
		qIsForceApply := qrIsForceApply
		if qIsForceApply != "" {

			if err := r.SetQueryParam("isForceApply", qIsForceApply); err != nil {
				return err
			}
		}
	}

	// path param ruleId
	if err := r.SetPathParam("ruleId", o.RuleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
