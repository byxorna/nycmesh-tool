// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/models"
)

// DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidReader is a Reader for the DeleteDevicesUisprsIDDhcpLeasesServernameLeaseid structure.
type DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK creates a DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK with default headers values
func NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK() *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK {
	return &DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK{}
}

/* DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK describes a response with status code 200, with default header values.

Successful
*/
type DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK struct {
	Payload *models.Status
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK) Error() string {
	return fmt.Sprintf("[DELETE /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] deleteDevicesUisprsIdDhcpLeasesServernameLeaseidOK  %+v", 200, o.Payload)
}
func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest creates a DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest with default headers values
func NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest() *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest {
	return &DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest{}
}

/* DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest struct {
	Payload *models.Error
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] deleteDevicesUisprsIdDhcpLeasesServernameLeaseidBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized creates a DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized with default headers values
func NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized() *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized {
	return &DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized{}
}

/* DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] deleteDevicesUisprsIdDhcpLeasesServernameLeaseidUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden creates a DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden with default headers values
func NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden() *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden {
	return &DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden{}
}

/* DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden struct {
	Payload *models.Error
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden) Error() string {
	return fmt.Sprintf("[DELETE /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] deleteDevicesUisprsIdDhcpLeasesServernameLeaseidForbidden  %+v", 403, o.Payload)
}
func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound creates a DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound with default headers values
func NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound() *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound {
	return &DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound{}
}

/* DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound struct {
	Payload *models.Error
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound) Error() string {
	return fmt.Sprintf("[DELETE /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] deleteDevicesUisprsIdDhcpLeasesServernameLeaseidNotFound  %+v", 404, o.Payload)
}
func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError creates a DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError with default headers values
func NewDeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError() *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError {
	return &DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError{}
}

/* DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /devices/uisprs/{id}/dhcp/leases/{serverName}/{leaseId}][%d] deleteDevicesUisprsIdDhcpLeasesServernameLeaseidInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDevicesUisprsIDDhcpLeasesServernameLeaseidInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
