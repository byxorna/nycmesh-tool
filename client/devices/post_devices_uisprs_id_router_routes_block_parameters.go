// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/models"
)

// NewPostDevicesUisprsIDRouterRoutesBlockParams creates a new PostDevicesUisprsIDRouterRoutesBlockParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostDevicesUisprsIDRouterRoutesBlockParams() *PostDevicesUisprsIDRouterRoutesBlockParams {
	return &PostDevicesUisprsIDRouterRoutesBlockParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostDevicesUisprsIDRouterRoutesBlockParamsWithTimeout creates a new PostDevicesUisprsIDRouterRoutesBlockParams object
// with the ability to set a timeout on a request.
func NewPostDevicesUisprsIDRouterRoutesBlockParamsWithTimeout(timeout time.Duration) *PostDevicesUisprsIDRouterRoutesBlockParams {
	return &PostDevicesUisprsIDRouterRoutesBlockParams{
		timeout: timeout,
	}
}

// NewPostDevicesUisprsIDRouterRoutesBlockParamsWithContext creates a new PostDevicesUisprsIDRouterRoutesBlockParams object
// with the ability to set a context for a request.
func NewPostDevicesUisprsIDRouterRoutesBlockParamsWithContext(ctx context.Context) *PostDevicesUisprsIDRouterRoutesBlockParams {
	return &PostDevicesUisprsIDRouterRoutesBlockParams{
		Context: ctx,
	}
}

// NewPostDevicesUisprsIDRouterRoutesBlockParamsWithHTTPClient creates a new PostDevicesUisprsIDRouterRoutesBlockParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostDevicesUisprsIDRouterRoutesBlockParamsWithHTTPClient(client *http.Client) *PostDevicesUisprsIDRouterRoutesBlockParams {
	return &PostDevicesUisprsIDRouterRoutesBlockParams{
		HTTPClient: client,
	}
}

/* PostDevicesUisprsIDRouterRoutesBlockParams contains all the parameters to send to the API endpoint
   for the post devices uisprs Id router routes block operation.

   Typically these are written to a http.Request.
*/
type PostDevicesUisprsIDRouterRoutesBlockParams struct {

	// Body.
	Body *models.RouterRoute3

	// ID.
	ID string

	// IsForceApply.
	IsForceApply *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post devices uisprs Id router routes block params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WithDefaults() *PostDevicesUisprsIDRouterRoutesBlockParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post devices uisprs Id router routes block params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WithTimeout(timeout time.Duration) *PostDevicesUisprsIDRouterRoutesBlockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WithContext(ctx context.Context) *PostDevicesUisprsIDRouterRoutesBlockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WithHTTPClient(client *http.Client) *PostDevicesUisprsIDRouterRoutesBlockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WithBody(body *models.RouterRoute3) *PostDevicesUisprsIDRouterRoutesBlockParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) SetBody(body *models.RouterRoute3) {
	o.Body = body
}

// WithID adds the id to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WithID(id string) *PostDevicesUisprsIDRouterRoutesBlockParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) SetID(id string) {
	o.ID = id
}

// WithIsForceApply adds the isForceApply to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WithIsForceApply(isForceApply *string) *PostDevicesUisprsIDRouterRoutesBlockParams {
	o.SetIsForceApply(isForceApply)
	return o
}

// SetIsForceApply adds the isForceApply to the post devices uisprs Id router routes block params
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) SetIsForceApply(isForceApply *string) {
	o.IsForceApply = isForceApply
}

// WriteToRequest writes these params to a swagger request
func (o *PostDevicesUisprsIDRouterRoutesBlockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IsForceApply != nil {

		// query param isForceApply
		var qrIsForceApply string

		if o.IsForceApply != nil {
			qrIsForceApply = *o.IsForceApply
		}
		qIsForceApply := qrIsForceApply
		if qIsForceApply != "" {

			if err := r.SetQueryParam("isForceApply", qIsForceApply); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
