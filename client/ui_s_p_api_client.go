// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/byxorna/nycmesh-tool/client/authorization"
	"github.com/byxorna/nycmesh-tool/client/backups"
	"github.com/byxorna/nycmesh-tool/client/c_r_m"
	"github.com/byxorna/nycmesh-tool/client/data_links"
	"github.com/byxorna/nycmesh-tool/client/devices"
	"github.com/byxorna/nycmesh-tool/client/discovery"
	"github.com/byxorna/nycmesh-tool/client/export"
	"github.com/byxorna/nycmesh-tool/client/firmware"
	"github.com/byxorna/nycmesh-tool/client/gateways"
	"github.com/byxorna/nycmesh-tool/client/installations"
	"github.com/byxorna/nycmesh-tool/client/logs"
	"github.com/byxorna/nycmesh-tool/client/outages"
	serverops "github.com/byxorna/nycmesh-tool/client/server"
	"github.com/byxorna/nycmesh-tool/client/simulation"
	"github.com/byxorna/nycmesh-tool/client/sites"
	"github.com/byxorna/nycmesh-tool/client/speed_test"
	"github.com/byxorna/nycmesh-tool/client/tasks"
	"github.com/byxorna/nycmesh-tool/client/token"
	"github.com/byxorna/nycmesh-tool/client/traffic"
	"github.com/byxorna/nycmesh-tool/client/users"
	"github.com/byxorna/nycmesh-tool/client/vault"
	"github.com/byxorna/nycmesh-tool/client/web_socket"
)

// Default UI s p API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/nms/api/v2.1"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new UI s p API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *UISPAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new UI s p API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *UISPAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new UI s p API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *UISPAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(UISPAPI)
	cli.Transport = transport
	cli.Authorization = authorization.New(transport, formats)
	cli.Backups = backups.New(transport, formats)
	cli.Crm = c_r_m.New(transport, formats)
	cli.DataLinks = data_links.New(transport, formats)
	cli.Devices = devices.New(transport, formats)
	cli.Discovery = discovery.New(transport, formats)
	cli.Export = export.New(transport, formats)
	cli.Firmware = firmware.New(transport, formats)
	cli.Gateways = gateways.New(transport, formats)
	cli.Installations = installations.New(transport, formats)
	cli.Logs = logs.New(transport, formats)
	cli.Outages = outages.New(transport, formats)
	cli.Server = serverops.New(transport, formats)
	cli.Simulation = simulation.New(transport, formats)
	cli.Sites = sites.New(transport, formats)
	cli.SpeedTest = speed_test.New(transport, formats)
	cli.Tasks = tasks.New(transport, formats)
	cli.Token = token.New(transport, formats)
	cli.Traffic = traffic.New(transport, formats)
	cli.Users = users.New(transport, formats)
	cli.Vault = vault.New(transport, formats)
	cli.WebSocket = web_socket.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// UISPAPI is a client for UI s p API
type UISPAPI struct {
	Authorization authorization.ClientService

	Backups backups.ClientService

	Crm c_r_m.ClientService

	DataLinks data_links.ClientService

	Devices devices.ClientService

	Discovery discovery.ClientService

	Export export.ClientService

	Firmware firmware.ClientService

	Gateways gateways.ClientService

	Installations installations.ClientService

	Logs logs.ClientService

	Outages outages.ClientService

	Server serverops.ClientService

	Simulation simulation.ClientService

	Sites sites.ClientService

	SpeedTest speed_test.ClientService

	Tasks tasks.ClientService

	Token token.ClientService

	Traffic traffic.ClientService

	Users users.ClientService

	Vault vault.ClientService

	WebSocket web_socket.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *UISPAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Authorization.SetTransport(transport)
	c.Backups.SetTransport(transport)
	c.Crm.SetTransport(transport)
	c.DataLinks.SetTransport(transport)
	c.Devices.SetTransport(transport)
	c.Discovery.SetTransport(transport)
	c.Export.SetTransport(transport)
	c.Firmware.SetTransport(transport)
	c.Gateways.SetTransport(transport)
	c.Installations.SetTransport(transport)
	c.Logs.SetTransport(transport)
	c.Outages.SetTransport(transport)
	c.Server.SetTransport(transport)
	c.Simulation.SetTransport(transport)
	c.Sites.SetTransport(transport)
	c.SpeedTest.SetTransport(transport)
	c.Tasks.SetTransport(transport)
	c.Token.SetTransport(transport)
	c.Traffic.SetTransport(transport)
	c.Users.SetTransport(transport)
	c.Vault.SetTransport(transport)
	c.WebSocket.SetTransport(transport)
}
