// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectivityIPQueue connectivity Ip queue
//
// swagger:model connectivityIpQueue
type ConnectivityIPQueue struct {

	// Sum of all client sites traffic shaping download values in kbps.
	// Example: 1000
	// Minimum: 0
	ClientsDownloadSpeedSum *int64 `json:"clientsDownloadSpeedSum,omitempty"`

	// Sum of all client sites traffic shaping upload values in kbps.
	// Example: 1000
	// Minimum: 0
	ClientsUploadSpeedSum *int64 `json:"clientsUploadSpeedSum,omitempty"`

	// Max speed given in kbps. If 0 value is configured then ingress traffic for this tariff is blocked. If null, no maximum speed is assumed.
	// Example: 1000
	// Required: true
	// Minimum: 0
	DownloadSpeed *int64 `json:"downloadSpeed"`

	// Interface name, for example eth0 which handles connectivity to WAN network. If null, speed limits are applied on all interfaces.
	// Example: eth0
	// Required: true
	InterfaceID *string `json:"interfaceId"`

	// Max speed given in kbps. If 0 value is configured then egress traffic for this tariff is blocked. If null, no maximum speed is assumed.
	// Example: 1000
	// Required: true
	// Minimum: 0
	UploadSpeed *int64 `json:"uploadSpeed"`
}

// Validate validates this connectivity Ip queue
func (m *ConnectivityIPQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientsDownloadSpeedSum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientsUploadSpeedSum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadSpeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectivityIPQueue) validateClientsDownloadSpeedSum(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientsDownloadSpeedSum) { // not required
		return nil
	}

	if err := validate.MinimumInt("clientsDownloadSpeedSum", "body", *m.ClientsDownloadSpeedSum, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ConnectivityIPQueue) validateClientsUploadSpeedSum(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientsUploadSpeedSum) { // not required
		return nil
	}

	if err := validate.MinimumInt("clientsUploadSpeedSum", "body", *m.ClientsUploadSpeedSum, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ConnectivityIPQueue) validateDownloadSpeed(formats strfmt.Registry) error {

	if err := validate.Required("downloadSpeed", "body", m.DownloadSpeed); err != nil {
		return err
	}

	if err := validate.MinimumInt("downloadSpeed", "body", *m.DownloadSpeed, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ConnectivityIPQueue) validateInterfaceID(formats strfmt.Registry) error {

	if err := validate.Required("interfaceId", "body", m.InterfaceID); err != nil {
		return err
	}

	return nil
}

func (m *ConnectivityIPQueue) validateUploadSpeed(formats strfmt.Registry) error {

	if err := validate.Required("uploadSpeed", "body", m.UploadSpeed); err != nil {
		return err
	}

	if err := validate.MinimumInt("uploadSpeed", "body", *m.UploadSpeed, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this connectivity Ip queue based on context it is used
func (m *ConnectivityIPQueue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectivityIPQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectivityIPQueue) UnmarshalBinary(b []byte) error {
	var res ConnectivityIPQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
