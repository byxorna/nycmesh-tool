// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model79 model 79
//
// swagger:model Model 79
type Model79 struct {

	// connection Id
	// Required: true
	ConnectionID *string `json:"connectionId"`

	// message
	// Required: true
	Message *string `json:"message"`

	// result
	// Required: true
	Result *bool `json:"result"`
}

// Validate validates this model 79
func (m *Model79) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model79) validateConnectionID(formats strfmt.Registry) error {

	if err := validate.Required("connectionId", "body", m.ConnectionID); err != nil {
		return err
	}

	return nil
}

func (m *Model79) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *Model79) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model 79 based on context it is used
func (m *Model79) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Model79) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model79) UnmarshalBinary(b []byte) error {
	var res Model79
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
