// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinkScore link score
//
// swagger:model linkScore
type LinkScore struct {

	// Score airTime 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	AirTimeScore *float64 `json:"airTimeScore,omitempty"`

	// Result score 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	LinkScore *float64 `json:"linkScore,omitempty"`

	// Hint for better score.
	LinkScoreHint string `json:"linkScoreHint,omitempty"`

	// Score 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	Score *float64 `json:"score,omitempty"`

	// Score max 0 - 1, for example 0.33 is 33%.
	// Maximum: 1
	// Minimum: 0
	ScoreMax *float64 `json:"scoreMax,omitempty"`

	// theoretical downlink capacity
	TheoreticalDownlinkCapacity int64 `json:"theoreticalDownlinkCapacity,omitempty"`

	// theoretical uplink capacity
	TheoreticalUplinkCapacity int64 `json:"theoreticalUplinkCapacity,omitempty"`
}

// Validate validates this link score
func (m *LinkScore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirTimeScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreMax(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkScore) validateAirTimeScore(formats strfmt.Registry) error {
	if swag.IsZero(m.AirTimeScore) { // not required
		return nil
	}

	if err := validate.Minimum("airTimeScore", "body", *m.AirTimeScore, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("airTimeScore", "body", *m.AirTimeScore, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LinkScore) validateLinkScore(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkScore) { // not required
		return nil
	}

	if err := validate.Minimum("linkScore", "body", *m.LinkScore, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("linkScore", "body", *m.LinkScore, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LinkScore) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if err := validate.Minimum("score", "body", *m.Score, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("score", "body", *m.Score, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LinkScore) validateScoreMax(formats strfmt.Registry) error {
	if swag.IsZero(m.ScoreMax) { // not required
		return nil
	}

	if err := validate.Minimum("scoreMax", "body", *m.ScoreMax, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("scoreMax", "body", *m.ScoreMax, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this link score based on context it is used
func (m *LinkScore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LinkScore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinkScore) UnmarshalBinary(b []byte) error {
	var res LinkScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
