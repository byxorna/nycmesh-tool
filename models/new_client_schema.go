// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewClientSchema new client schema
//
// swagger:model NewClientSchema
type NewClientSchema struct {

	// Address of the Client site.
	// Example: 221b Baker street, London
	Address string `json:"address,omitempty"`

	// address data
	AddressData *AddressData `json:"addressData,omitempty"`

	// Client's e-mail.
	// Example: drwatson@example.com
	Email string `json:"email,omitempty"`

	// First name of the Client.
	// Example: Dr
	// Required: true
	FirstName *string `json:"firstName"`

	// Last name of the Client.
	// Example: Watson
	// Required: true
	LastName *string `json:"lastName"`

	// location
	Location *NewClientLocation `json:"location,omitempty"`

	// Custom note.
	// Example: Someone else acutally lives here
	Note string `json:"note,omitempty"`

	// Client's phone number.
	// Example: +44123456789
	Phone string `json:"phone,omitempty"`

	// ID of the CRM Service plan that should be assigned to the new Client
	// Example: 1
	// Required: true
	ServicePlanID *string `json:"servicePlanId"`
}

// Validate validates this new client schema
func (m *NewClientSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicePlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewClientSchema) validateAddressData(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressData) { // not required
		return nil
	}

	if m.AddressData != nil {
		if err := m.AddressData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressData")
			}
			return err
		}
	}

	return nil
}

func (m *NewClientSchema) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *NewClientSchema) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *NewClientSchema) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *NewClientSchema) validateServicePlanID(formats strfmt.Registry) error {

	if err := validate.Required("servicePlanId", "body", m.ServicePlanID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this new client schema based on the context it is used
func (m *NewClientSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewClientSchema) contextValidateAddressData(ctx context.Context, formats strfmt.Registry) error {

	if m.AddressData != nil {
		if err := m.AddressData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressData")
			}
			return err
		}
	}

	return nil
}

func (m *NewClientSchema) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewClientSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewClientSchema) UnmarshalBinary(b []byte) error {
	var res NewClientSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
