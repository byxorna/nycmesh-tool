// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataComingFromCableTestOnESDevices data coming from cable test on e s devices
//
// swagger:model Data coming from cable test on ES devices
type DataComingFromCableTestOnESDevices struct {

	// length from
	// Required: true
	LengthFrom *float64 `json:"lengthFrom"`

	// length to
	// Required: true
	LengthTo *float64 `json:"lengthTo"`

	// pairs
	Pairs *Pairs `json:"pairs,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this data coming from cable test on e s devices
func (m *DataComingFromCableTestOnESDevices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLengthFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLengthTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePairs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataComingFromCableTestOnESDevices) validateLengthFrom(formats strfmt.Registry) error {

	if err := validate.Required("lengthFrom", "body", m.LengthFrom); err != nil {
		return err
	}

	return nil
}

func (m *DataComingFromCableTestOnESDevices) validateLengthTo(formats strfmt.Registry) error {

	if err := validate.Required("lengthTo", "body", m.LengthTo); err != nil {
		return err
	}

	return nil
}

func (m *DataComingFromCableTestOnESDevices) validatePairs(formats strfmt.Registry) error {
	if swag.IsZero(m.Pairs) { // not required
		return nil
	}

	if m.Pairs != nil {
		if err := m.Pairs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pairs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pairs")
			}
			return err
		}
	}

	return nil
}

func (m *DataComingFromCableTestOnESDevices) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data coming from cable test on e s devices based on the context it is used
func (m *DataComingFromCableTestOnESDevices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePairs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataComingFromCableTestOnESDevices) contextValidatePairs(ctx context.Context, formats strfmt.Registry) error {

	if m.Pairs != nil {
		if err := m.Pairs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pairs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pairs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataComingFromCableTestOnESDevices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataComingFromCableTestOnESDevices) UnmarshalBinary(b []byte) error {
	var res DataComingFromCableTestOnESDevices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
