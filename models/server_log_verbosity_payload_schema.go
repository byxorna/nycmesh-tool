// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerLogVerbosityPayloadSchema server log verbosity payload schema
//
// swagger:model ServerLogVerbosityPayloadSchema
type ServerLogVerbosityPayloadSchema struct {

	// Duration in milliseconds.
	// Required: true
	// Maximum: 2.592e+09
	// Enum: [-1]
	Duration *int64 `json:"duration"`

	// verbosity
	// Required: true
	// Enum: [trace debug info warn error fatal]
	Verbosity *string `json:"verbosity"`
}

// Validate validates this server log verbosity payload schema
func (m *ServerLogVerbosityPayloadSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerbosity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serverLogVerbosityPayloadSchemaTypeDurationPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[-1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverLogVerbosityPayloadSchemaTypeDurationPropEnum = append(serverLogVerbosityPayloadSchemaTypeDurationPropEnum, v)
	}
}

// prop value enum
func (m *ServerLogVerbosityPayloadSchema) validateDurationEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, serverLogVerbosityPayloadSchemaTypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerLogVerbosityPayloadSchema) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	if err := validate.MaximumInt("duration", "body", *m.Duration, 2.592e+09, false); err != nil {
		return err
	}

	// value enum
	if err := m.validateDurationEnum("duration", "body", *m.Duration); err != nil {
		return err
	}

	return nil
}

var serverLogVerbosityPayloadSchemaTypeVerbosityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trace","debug","info","warn","error","fatal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverLogVerbosityPayloadSchemaTypeVerbosityPropEnum = append(serverLogVerbosityPayloadSchemaTypeVerbosityPropEnum, v)
	}
}

const (

	// ServerLogVerbosityPayloadSchemaVerbosityTrace captures enum value "trace"
	ServerLogVerbosityPayloadSchemaVerbosityTrace string = "trace"

	// ServerLogVerbosityPayloadSchemaVerbosityDebug captures enum value "debug"
	ServerLogVerbosityPayloadSchemaVerbosityDebug string = "debug"

	// ServerLogVerbosityPayloadSchemaVerbosityInfo captures enum value "info"
	ServerLogVerbosityPayloadSchemaVerbosityInfo string = "info"

	// ServerLogVerbosityPayloadSchemaVerbosityWarn captures enum value "warn"
	ServerLogVerbosityPayloadSchemaVerbosityWarn string = "warn"

	// ServerLogVerbosityPayloadSchemaVerbosityError captures enum value "error"
	ServerLogVerbosityPayloadSchemaVerbosityError string = "error"

	// ServerLogVerbosityPayloadSchemaVerbosityFatal captures enum value "fatal"
	ServerLogVerbosityPayloadSchemaVerbosityFatal string = "fatal"
)

// prop value enum
func (m *ServerLogVerbosityPayloadSchema) validateVerbosityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverLogVerbosityPayloadSchemaTypeVerbosityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerLogVerbosityPayloadSchema) validateVerbosity(formats strfmt.Registry) error {

	if err := validate.Required("verbosity", "body", m.Verbosity); err != nil {
		return err
	}

	// value enum
	if err := m.validateVerbosityEnum("verbosity", "body", *m.Verbosity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server log verbosity payload schema based on context it is used
func (m *ServerLogVerbosityPayloadSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerLogVerbosityPayloadSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerLogVerbosityPayloadSchema) UnmarshalBinary(b []byte) error {
	var res ServerLogVerbosityPayloadSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
