// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IPV6 LAN and WAN IPv6 settings
// Example: {"lan":{"lanAddress6":"0:0:0:0:0:ffff:5ca8:d101","lanMode6":"auto","routerAdvertisementMode":"auto","routerAdvertisementPrefix":"0:0:0:0:0:ffff:5ca8:d101/24"},"wan":{"gateway6":"0:0:0:0:0:ffff:5ca8:d101","wanAddress6":"0:0:0:0:0:ffff:5ca8:d101/24","wanMode6":"slaac"}}
//
// swagger:model ipv6
type IPV6 struct {

	// lan
	Lan *Lan2 `json:"lan,omitempty"`

	// wan
	Wan *Wan2 `json:"wan,omitempty"`
}

// Validate validates this ipv6
func (m *IPV6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPV6) validateLan(formats strfmt.Registry) error {
	if swag.IsZero(m.Lan) { // not required
		return nil
	}

	if m.Lan != nil {
		if err := m.Lan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lan")
			}
			return err
		}
	}

	return nil
}

func (m *IPV6) validateWan(formats strfmt.Registry) error {
	if swag.IsZero(m.Wan) { // not required
		return nil
	}

	if m.Wan != nil {
		if err := m.Wan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipv6 based on the context it is used
func (m *IPV6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPV6) contextValidateLan(ctx context.Context, formats strfmt.Registry) error {

	if m.Lan != nil {
		if err := m.Lan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lan")
			}
			return err
		}
	}

	return nil
}

func (m *IPV6) contextValidateWan(ctx context.Context, formats strfmt.Registry) error {

	if m.Wan != nil {
		if err := m.Wan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPV6) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPV6) UnmarshalBinary(b []byte) error {
	var res IPV6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
