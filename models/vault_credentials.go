// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VaultCredentials vault credentials
//
// swagger:model VaultCredentials
type VaultCredentials struct {

	// is cloud vault enabled
	// Required: true
	IsCloudVaultEnabled *bool `json:"isCloudVaultEnabled"`

	// is vault enabled
	// Required: true
	IsVaultEnabled *bool `json:"isVaultEnabled"`

	// passphrase
	Passphrase string `json:"passphrase,omitempty"`

	// regenerate pgp keys
	RegeneratePgpKeys bool `json:"regeneratePgpKeys,omitempty"`
}

// Validate validates this vault credentials
func (m *VaultCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsCloudVaultEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsVaultEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultCredentials) validateIsCloudVaultEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isCloudVaultEnabled", "body", m.IsCloudVaultEnabled); err != nil {
		return err
	}

	return nil
}

func (m *VaultCredentials) validateIsVaultEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isVaultEnabled", "body", m.IsVaultEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vault credentials based on context it is used
func (m *VaultCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VaultCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultCredentials) UnmarshalBinary(b []byte) error {
	var res VaultCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
