// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Lan lan
//
// swagger:model lan
type Lan struct {

	// cidr
	// Required: true
	Cidr *string `json:"cidr"`

	// dhcp
	Dhcp *Dhcp `json:"dhcp,omitempty"`

	// dns
	DNS DNS `json:"dns,omitempty"`

	// gateway
	// Required: true
	Gateway *string `json:"gateway"`

	// interface names
	// Required: true
	InterfaceNames InterfaceNames `json:"interfaceNames"`

	// proto
	// Required: true
	// Enum: [static dhcp pppoe]
	Proto *string `json:"proto"`

	// type
	// Required: true
	// Enum: [bridge router soho]
	Type *string `json:"type"`
}

// Validate validates this lan
func (m *Lan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lan) validateCidr(formats strfmt.Registry) error {

	if err := validate.Required("cidr", "body", m.Cidr); err != nil {
		return err
	}

	return nil
}

func (m *Lan) validateDhcp(formats strfmt.Registry) error {
	if swag.IsZero(m.Dhcp) { // not required
		return nil
	}

	if m.Dhcp != nil {
		if err := m.Dhcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp")
			}
			return err
		}
	}

	return nil
}

func (m *Lan) validateDNS(formats strfmt.Registry) error {
	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	if err := m.DNS.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dns")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dns")
		}
		return err
	}

	return nil
}

func (m *Lan) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *Lan) validateInterfaceNames(formats strfmt.Registry) error {

	if err := validate.Required("interfaceNames", "body", m.InterfaceNames); err != nil {
		return err
	}

	if err := m.InterfaceNames.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interfaceNames")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("interfaceNames")
		}
		return err
	}

	return nil
}

var lanTypeProtoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dhcp","pppoe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lanTypeProtoPropEnum = append(lanTypeProtoPropEnum, v)
	}
}

const (

	// LanProtoStatic captures enum value "static"
	LanProtoStatic string = "static"

	// LanProtoDhcp captures enum value "dhcp"
	LanProtoDhcp string = "dhcp"

	// LanProtoPppoe captures enum value "pppoe"
	LanProtoPppoe string = "pppoe"
)

// prop value enum
func (m *Lan) validateProtoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lanTypeProtoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Lan) validateProto(formats strfmt.Registry) error {

	if err := validate.Required("proto", "body", m.Proto); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtoEnum("proto", "body", *m.Proto); err != nil {
		return err
	}

	return nil
}

var lanTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bridge","router","soho"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lanTypeTypePropEnum = append(lanTypeTypePropEnum, v)
	}
}

const (

	// LanTypeBridge captures enum value "bridge"
	LanTypeBridge string = "bridge"

	// LanTypeRouter captures enum value "router"
	LanTypeRouter string = "router"

	// LanTypeSoho captures enum value "soho"
	LanTypeSoho string = "soho"
)

// prop value enum
func (m *Lan) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lanTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Lan) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this lan based on the context it is used
func (m *Lan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaceNames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lan) contextValidateDhcp(ctx context.Context, formats strfmt.Registry) error {

	if m.Dhcp != nil {
		if err := m.Dhcp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp")
			}
			return err
		}
	}

	return nil
}

func (m *Lan) contextValidateDNS(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DNS.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dns")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dns")
		}
		return err
	}

	return nil
}

func (m *Lan) contextValidateInterfaceNames(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InterfaceNames.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interfaceNames")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("interfaceNames")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lan) UnmarshalBinary(b []byte) error {
	var res Lan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
