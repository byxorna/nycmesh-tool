// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGateway new gateway
//
// swagger:model NewGateway
type NewGateway struct {

	// connectivity Ip queue
	ConnectivityIPQueue *ConnectivityIPQueue `json:"connectivityIpQueue,omitempty"`

	// default Ip queue
	DefaultIPQueue *DefaultIPQueue `json:"defaultIpQueue,omitempty"`

	// device
	// Required: true
	Device *NewGatewayDevice `json:"device"`

	// Set to true to force write new NetFlow settings to device over current device's settings.
	// Example: false
	ForceOverwrite bool `json:"forceOverwrite,omitempty"`

	// Set to true to enable alerts.
	// Example: true
	// Required: true
	NetflowAlerts *bool `json:"netflowAlerts"`

	// Set to true to enable NetFlow.
	// Example: true
	// Required: true
	NetflowEnabled *bool `json:"netflowEnabled"`

	// Set to true to enable traffic shaping.
	// Example: true
	// Required: true
	QosEnabled *bool `json:"qosEnabled"`

	// Set to true to enable suspend.
	// Example: true
	// Required: true
	Suspend *bool `json:"suspend"`

	// suspend allowed ips
	SuspendAllowedIps SuspendAllowedIps `json:"suspendAllowedIps,omitempty"`
}

// Validate validates this new gateway
func (m *NewGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectivityIPQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultIPQueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetflowEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspendAllowedIps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewGateway) validateConnectivityIPQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectivityIPQueue) { // not required
		return nil
	}

	if m.ConnectivityIPQueue != nil {
		if err := m.ConnectivityIPQueue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectivityIpQueue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectivityIpQueue")
			}
			return err
		}
	}

	return nil
}

func (m *NewGateway) validateDefaultIPQueue(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultIPQueue) { // not required
		return nil
	}

	if m.DefaultIPQueue != nil {
		if err := m.DefaultIPQueue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultIpQueue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultIpQueue")
			}
			return err
		}
	}

	return nil
}

func (m *NewGateway) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *NewGateway) validateNetflowAlerts(formats strfmt.Registry) error {

	if err := validate.Required("netflowAlerts", "body", m.NetflowAlerts); err != nil {
		return err
	}

	return nil
}

func (m *NewGateway) validateNetflowEnabled(formats strfmt.Registry) error {

	if err := validate.Required("netflowEnabled", "body", m.NetflowEnabled); err != nil {
		return err
	}

	return nil
}

func (m *NewGateway) validateQosEnabled(formats strfmt.Registry) error {

	if err := validate.Required("qosEnabled", "body", m.QosEnabled); err != nil {
		return err
	}

	return nil
}

func (m *NewGateway) validateSuspend(formats strfmt.Registry) error {

	if err := validate.Required("suspend", "body", m.Suspend); err != nil {
		return err
	}

	return nil
}

func (m *NewGateway) validateSuspendAllowedIps(formats strfmt.Registry) error {
	if swag.IsZero(m.SuspendAllowedIps) { // not required
		return nil
	}

	if err := m.SuspendAllowedIps.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("suspendAllowedIps")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("suspendAllowedIps")
		}
		return err
	}

	return nil
}

// ContextValidate validate this new gateway based on the context it is used
func (m *NewGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectivityIPQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultIPQueue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuspendAllowedIps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewGateway) contextValidateConnectivityIPQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectivityIPQueue != nil {
		if err := m.ConnectivityIPQueue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectivityIpQueue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectivityIpQueue")
			}
			return err
		}
	}

	return nil
}

func (m *NewGateway) contextValidateDefaultIPQueue(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultIPQueue != nil {
		if err := m.DefaultIPQueue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultIpQueue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultIpQueue")
			}
			return err
		}
	}

	return nil
}

func (m *NewGateway) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {
		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *NewGateway) contextValidateSuspendAllowedIps(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SuspendAllowedIps.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("suspendAllowedIps")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("suspendAllowedIps")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewGateway) UnmarshalBinary(b []byte) error {
	var res NewGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
