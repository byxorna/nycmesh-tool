// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicesAPSProfile devices a p s profile
//
// swagger:model DevicesAPSProfile
type DevicesAPSProfile struct {

	// airfiber
	Airfiber *Airfiber `json:"airfiber,omitempty"`

	// airmax
	Airmax *Airmax `json:"airmax,omitempty"`

	// authentication
	// Required: true
	// Enum: [psk psk2 ent none]
	Authentication *string `json:"authentication"`

	// backup radio
	BackupRadio *BackupRadio `json:"backupRadio,omitempty"`

	// channel width
	// Required: true
	// Minimum: 0
	ChannelWidth *int64 `json:"channelWidth"`

	// country code
	// Required: true
	// Minimum: 0
	CountryCode *int64 `json:"countryCode"`

	// device
	Device *Device `json:"device,omitempty"`

	// frame length
	// Minimum: 0
	FrameLength *float64 `json:"frameLength,omitempty"`

	// frequency
	// Example: 5400
	// Required: true
	// Minimum: 0
	Frequency *float64 `json:"frequency"`

	// Pre shared key
	// Required: true
	Key *string `json:"key"`

	// location
	Location *Location2 `json:"location,omitempty"`

	// MAC address
	// Required: true
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac *string `json:"mac"`

	// security
	// Required: true
	// Enum: [wep wpa wpa-psk wpa2 enabled none]
	Security *string `json:"security"`

	// SSID
	// Required: true
	Ssid *string `json:"ssid"`

	// wireless mode
	// Enum: [ap ap-ptp ap-ptmp ap-ptmp-airmax ap-ptmp-airmax-mixed ap-ptmp-airmax-ac sta sta-ptp sta-ptmp aprepeater repeater mesh]
	WirelessMode string `json:"wirelessMode,omitempty"`
}

// Validate validates this devices a p s profile
func (m *DevicesAPSProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirfiber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirmax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRadio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWirelessMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicesAPSProfile) validateAirfiber(formats strfmt.Registry) error {
	if swag.IsZero(m.Airfiber) { // not required
		return nil
	}

	if m.Airfiber != nil {
		if err := m.Airfiber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airfiber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airfiber")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) validateAirmax(formats strfmt.Registry) error {
	if swag.IsZero(m.Airmax) { // not required
		return nil
	}

	if m.Airmax != nil {
		if err := m.Airmax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airmax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airmax")
			}
			return err
		}
	}

	return nil
}

var devicesAPSProfileTypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk","psk2","ent","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicesAPSProfileTypeAuthenticationPropEnum = append(devicesAPSProfileTypeAuthenticationPropEnum, v)
	}
}

const (

	// DevicesAPSProfileAuthenticationPsk captures enum value "psk"
	DevicesAPSProfileAuthenticationPsk string = "psk"

	// DevicesAPSProfileAuthenticationPsk2 captures enum value "psk2"
	DevicesAPSProfileAuthenticationPsk2 string = "psk2"

	// DevicesAPSProfileAuthenticationEnt captures enum value "ent"
	DevicesAPSProfileAuthenticationEnt string = "ent"

	// DevicesAPSProfileAuthenticationNone captures enum value "none"
	DevicesAPSProfileAuthenticationNone string = "none"
)

// prop value enum
func (m *DevicesAPSProfile) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicesAPSProfileTypeAuthenticationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicesAPSProfile) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("authentication", "body", m.Authentication); err != nil {
		return err
	}

	// value enum
	if err := m.validateAuthenticationEnum("authentication", "body", *m.Authentication); err != nil {
		return err
	}

	return nil
}

func (m *DevicesAPSProfile) validateBackupRadio(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRadio) { // not required
		return nil
	}

	if m.BackupRadio != nil {
		if err := m.BackupRadio.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRadio")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRadio")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) validateChannelWidth(formats strfmt.Registry) error {

	if err := validate.Required("channelWidth", "body", m.ChannelWidth); err != nil {
		return err
	}

	if err := validate.MinimumInt("channelWidth", "body", *m.ChannelWidth, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DevicesAPSProfile) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	if err := validate.MinimumInt("countryCode", "body", *m.CountryCode, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DevicesAPSProfile) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) validateFrameLength(formats strfmt.Registry) error {
	if swag.IsZero(m.FrameLength) { // not required
		return nil
	}

	if err := validate.Minimum("frameLength", "body", *m.FrameLength, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DevicesAPSProfile) validateFrequency(formats strfmt.Registry) error {

	if err := validate.Required("frequency", "body", m.Frequency); err != nil {
		return err
	}

	if err := validate.Minimum("frequency", "body", *m.Frequency, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DevicesAPSProfile) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *DevicesAPSProfile) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	if err := validate.Pattern("mac", "body", *m.Mac, `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

var devicesAPSProfileTypeSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa","wpa-psk","wpa2","enabled","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicesAPSProfileTypeSecurityPropEnum = append(devicesAPSProfileTypeSecurityPropEnum, v)
	}
}

const (

	// DevicesAPSProfileSecurityWep captures enum value "wep"
	DevicesAPSProfileSecurityWep string = "wep"

	// DevicesAPSProfileSecurityWpa captures enum value "wpa"
	DevicesAPSProfileSecurityWpa string = "wpa"

	// DevicesAPSProfileSecurityWpaDashPsk captures enum value "wpa-psk"
	DevicesAPSProfileSecurityWpaDashPsk string = "wpa-psk"

	// DevicesAPSProfileSecurityWpa2 captures enum value "wpa2"
	DevicesAPSProfileSecurityWpa2 string = "wpa2"

	// DevicesAPSProfileSecurityEnabled captures enum value "enabled"
	DevicesAPSProfileSecurityEnabled string = "enabled"

	// DevicesAPSProfileSecurityNone captures enum value "none"
	DevicesAPSProfileSecurityNone string = "none"
)

// prop value enum
func (m *DevicesAPSProfile) validateSecurityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicesAPSProfileTypeSecurityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicesAPSProfile) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	// value enum
	if err := m.validateSecurityEnum("security", "body", *m.Security); err != nil {
		return err
	}

	return nil
}

func (m *DevicesAPSProfile) validateSsid(formats strfmt.Registry) error {

	if err := validate.Required("ssid", "body", m.Ssid); err != nil {
		return err
	}

	return nil
}

var devicesAPSProfileTypeWirelessModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ap-ptp","ap-ptmp","ap-ptmp-airmax","ap-ptmp-airmax-mixed","ap-ptmp-airmax-ac","sta","sta-ptp","sta-ptmp","aprepeater","repeater","mesh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicesAPSProfileTypeWirelessModePropEnum = append(devicesAPSProfileTypeWirelessModePropEnum, v)
	}
}

const (

	// DevicesAPSProfileWirelessModeAp captures enum value "ap"
	DevicesAPSProfileWirelessModeAp string = "ap"

	// DevicesAPSProfileWirelessModeApDashPtp captures enum value "ap-ptp"
	DevicesAPSProfileWirelessModeApDashPtp string = "ap-ptp"

	// DevicesAPSProfileWirelessModeApDashPtmp captures enum value "ap-ptmp"
	DevicesAPSProfileWirelessModeApDashPtmp string = "ap-ptmp"

	// DevicesAPSProfileWirelessModeApDashPtmpDashAirmax captures enum value "ap-ptmp-airmax"
	DevicesAPSProfileWirelessModeApDashPtmpDashAirmax string = "ap-ptmp-airmax"

	// DevicesAPSProfileWirelessModeApDashPtmpDashAirmaxDashMixed captures enum value "ap-ptmp-airmax-mixed"
	DevicesAPSProfileWirelessModeApDashPtmpDashAirmaxDashMixed string = "ap-ptmp-airmax-mixed"

	// DevicesAPSProfileWirelessModeApDashPtmpDashAirmaxDashAc captures enum value "ap-ptmp-airmax-ac"
	DevicesAPSProfileWirelessModeApDashPtmpDashAirmaxDashAc string = "ap-ptmp-airmax-ac"

	// DevicesAPSProfileWirelessModeSta captures enum value "sta"
	DevicesAPSProfileWirelessModeSta string = "sta"

	// DevicesAPSProfileWirelessModeStaDashPtp captures enum value "sta-ptp"
	DevicesAPSProfileWirelessModeStaDashPtp string = "sta-ptp"

	// DevicesAPSProfileWirelessModeStaDashPtmp captures enum value "sta-ptmp"
	DevicesAPSProfileWirelessModeStaDashPtmp string = "sta-ptmp"

	// DevicesAPSProfileWirelessModeAprepeater captures enum value "aprepeater"
	DevicesAPSProfileWirelessModeAprepeater string = "aprepeater"

	// DevicesAPSProfileWirelessModeRepeater captures enum value "repeater"
	DevicesAPSProfileWirelessModeRepeater string = "repeater"

	// DevicesAPSProfileWirelessModeMesh captures enum value "mesh"
	DevicesAPSProfileWirelessModeMesh string = "mesh"
)

// prop value enum
func (m *DevicesAPSProfile) validateWirelessModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicesAPSProfileTypeWirelessModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicesAPSProfile) validateWirelessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.WirelessMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWirelessModeEnum("wirelessMode", "body", m.WirelessMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this devices a p s profile based on the context it is used
func (m *DevicesAPSProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAirfiber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAirmax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRadio(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicesAPSProfile) contextValidateAirfiber(ctx context.Context, formats strfmt.Registry) error {

	if m.Airfiber != nil {
		if err := m.Airfiber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airfiber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airfiber")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) contextValidateAirmax(ctx context.Context, formats strfmt.Registry) error {

	if m.Airmax != nil {
		if err := m.Airmax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airmax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airmax")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) contextValidateBackupRadio(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRadio != nil {
		if err := m.BackupRadio.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRadio")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backupRadio")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if m.Device != nil {
		if err := m.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *DevicesAPSProfile) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicesAPSProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicesAPSProfile) UnmarshalBinary(b []byte) error {
	var res DevicesAPSProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
