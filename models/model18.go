// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model18 model 18
//
// swagger:model Model 18
type Model18 struct {

	// data
	// Required: true
	Data *DeviceStatusOverview1 `json:"data"`

	// matches
	// Required: true
	Matches SearchResultMatches `json:"matches"`

	// type
	// Example: device
	// Required: true
	// Enum: [device]
	Type *string `json:"type"`
}

// Validate validates this model 18
func (m *Model18) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model18) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *Model18) validateMatches(formats strfmt.Registry) error {

	if err := validate.Required("matches", "body", m.Matches); err != nil {
		return err
	}

	if err := m.Matches.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("matches")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("matches")
		}
		return err
	}

	return nil
}

var model18TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["device"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model18TypeTypePropEnum = append(model18TypeTypePropEnum, v)
	}
}

const (

	// Model18TypeDevice captures enum value "device"
	Model18TypeDevice string = "device"
)

// prop value enum
func (m *Model18) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model18TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model18) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 18 based on the context it is used
func (m *Model18) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model18) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *Model18) contextValidateMatches(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Matches.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("matches")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("matches")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model18) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model18) UnmarshalBinary(b []byte) error {
	var res Model18
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
