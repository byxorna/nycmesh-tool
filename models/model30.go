// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model30 model 30
//
// swagger:model Model 30
type Model30 struct {

	// If enabled, trunks ports carries all VLANs, except those defined as excluded in VLANs array.
	// Example: true
	// Required: true
	TrunkUndefinedVlans *bool `json:"trunkUndefinedVlans"`

	// trunks
	Trunks Trunks `json:"trunks,omitempty"`

	// vlans
	Vlans Vlans2 `json:"vlans,omitempty"`
}

// Validate validates this model 30
func (m *Model30) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTrunkUndefinedVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrunks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model30) validateTrunkUndefinedVlans(formats strfmt.Registry) error {

	if err := validate.Required("trunkUndefinedVlans", "body", m.TrunkUndefinedVlans); err != nil {
		return err
	}

	return nil
}

func (m *Model30) validateTrunks(formats strfmt.Registry) error {
	if swag.IsZero(m.Trunks) { // not required
		return nil
	}

	if err := m.Trunks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trunks")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trunks")
		}
		return err
	}

	return nil
}

func (m *Model30) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	if err := m.Vlans.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vlans")
		}
		return err
	}

	return nil
}

// ContextValidate validate this model 30 based on the context it is used
func (m *Model30) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTrunks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model30) contextValidateTrunks(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Trunks.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trunks")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trunks")
		}
		return err
	}

	return nil
}

func (m *Model30) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Vlans.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vlans")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model30) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model30) UnmarshalBinary(b []byte) error {
	var res Model30
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
