// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model95 model 95
//
// swagger:model Model 95
type Model95 struct {

	// addresses
	// Required: true
	Addresses Addresses4 `json:"addresses"`

	// bridge
	Bridge *Bridge1 `json:"bridge,omitempty"`

	// bridge Id
	// Required: true
	BridgeID *int64 `json:"bridgeId"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// proxy a r p
	ProxyARP bool `json:"proxyARP,omitempty"`
}

// Validate validates this model 95
func (m *Model95) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBridge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBridgeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model95) validateAddresses(formats strfmt.Registry) error {

	if err := validate.Required("addresses", "body", m.Addresses); err != nil {
		return err
	}

	if err := m.Addresses.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("addresses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("addresses")
		}
		return err
	}

	return nil
}

func (m *Model95) validateBridge(formats strfmt.Registry) error {
	if swag.IsZero(m.Bridge) { // not required
		return nil
	}

	if m.Bridge != nil {
		if err := m.Bridge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bridge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bridge")
			}
			return err
		}
	}

	return nil
}

func (m *Model95) validateBridgeID(formats strfmt.Registry) error {

	if err := validate.Required("bridgeId", "body", m.BridgeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 95 based on the context it is used
func (m *Model95) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBridge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model95) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Addresses.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("addresses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("addresses")
		}
		return err
	}

	return nil
}

func (m *Model95) contextValidateBridge(ctx context.Context, formats strfmt.Registry) error {

	if m.Bridge != nil {
		if err := m.Bridge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bridge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bridge")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model95) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model95) UnmarshalBinary(b []byte) error {
	var res Model95
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
