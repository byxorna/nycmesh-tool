// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SubnetList subnet list
//
// swagger:model SubnetList
type SubnetList struct {

	// invalid subnets
	InvalidSubnets InvalidSubnets `json:"invalidSubnets,omitempty"`

	// valid subnets
	ValidSubnets ValidSubnets `json:"validSubnets,omitempty"`
}

// Validate validates this subnet list
func (m *SubnetList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvalidSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidSubnets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetList) validateInvalidSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.InvalidSubnets) { // not required
		return nil
	}

	if err := m.InvalidSubnets.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("invalidSubnets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("invalidSubnets")
		}
		return err
	}

	return nil
}

func (m *SubnetList) validateValidSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidSubnets) { // not required
		return nil
	}

	if err := m.ValidSubnets.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("validSubnets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("validSubnets")
		}
		return err
	}

	return nil
}

// ContextValidate validate this subnet list based on the context it is used
func (m *SubnetList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvalidSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetList) contextValidateInvalidSubnets(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InvalidSubnets.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("invalidSubnets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("invalidSubnets")
		}
		return err
	}

	return nil
}

func (m *SubnetList) contextValidateValidSubnets(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ValidSubnets.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("validSubnets")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("validSubnets")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubnetList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubnetList) UnmarshalBinary(b []byte) error {
	var res SubnetList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
