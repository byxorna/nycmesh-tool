// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VlansInterfaceSchema vlans interface schema
//
// swagger:model VlansInterfaceSchema
type VlansInterfaceSchema struct {

	// Unique interface id
	// Example: port1
	// Required: true
	ID *string `json:"id"`

	// Interface mac address
	// Example: 04:18:d6:a0:f0:47
	// Required: true
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac *string `json:"mac"`

	// Custom interface name
	// Example: Port one
	// Required: true
	Name *string `json:"name"`

	// Interface type
	// Example: port
	// Required: true
	// Enum: [eth switch port pon br pppoe vlan sfp+ wlan ath lag loopback tunnel]
	Type *string `json:"type"`
}

// Validate validates this vlans interface schema
func (m *VlansInterfaceSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlansInterfaceSchema) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VlansInterfaceSchema) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	if err := validate.Pattern("mac", "body", *m.Mac, `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

func (m *VlansInterfaceSchema) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var vlansInterfaceSchemaTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eth","switch","port","pon","br","pppoe","vlan","sfp+","wlan","ath","lag","loopback","tunnel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vlansInterfaceSchemaTypeTypePropEnum = append(vlansInterfaceSchemaTypeTypePropEnum, v)
	}
}

const (

	// VlansInterfaceSchemaTypeEth captures enum value "eth"
	VlansInterfaceSchemaTypeEth string = "eth"

	// VlansInterfaceSchemaTypeSwitch captures enum value "switch"
	VlansInterfaceSchemaTypeSwitch string = "switch"

	// VlansInterfaceSchemaTypePort captures enum value "port"
	VlansInterfaceSchemaTypePort string = "port"

	// VlansInterfaceSchemaTypePon captures enum value "pon"
	VlansInterfaceSchemaTypePon string = "pon"

	// VlansInterfaceSchemaTypeBr captures enum value "br"
	VlansInterfaceSchemaTypeBr string = "br"

	// VlansInterfaceSchemaTypePppoe captures enum value "pppoe"
	VlansInterfaceSchemaTypePppoe string = "pppoe"

	// VlansInterfaceSchemaTypeVlan captures enum value "vlan"
	VlansInterfaceSchemaTypeVlan string = "vlan"

	// VlansInterfaceSchemaTypeSfpPlus captures enum value "sfp+"
	VlansInterfaceSchemaTypeSfpPlus string = "sfp+"

	// VlansInterfaceSchemaTypeWlan captures enum value "wlan"
	VlansInterfaceSchemaTypeWlan string = "wlan"

	// VlansInterfaceSchemaTypeAth captures enum value "ath"
	VlansInterfaceSchemaTypeAth string = "ath"

	// VlansInterfaceSchemaTypeLag captures enum value "lag"
	VlansInterfaceSchemaTypeLag string = "lag"

	// VlansInterfaceSchemaTypeLoopback captures enum value "loopback"
	VlansInterfaceSchemaTypeLoopback string = "loopback"

	// VlansInterfaceSchemaTypeTunnel captures enum value "tunnel"
	VlansInterfaceSchemaTypeTunnel string = "tunnel"
)

// prop value enum
func (m *VlansInterfaceSchema) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vlansInterfaceSchemaTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VlansInterfaceSchema) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vlans interface schema based on context it is used
func (m *VlansInterfaceSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VlansInterfaceSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VlansInterfaceSchema) UnmarshalBinary(b []byte) error {
	var res VlansInterfaceSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
