// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stp stp
//
// swagger:model stp
type Stp struct {

	// edge port
	// Enum: [auto enable disable]
	EdgePort string `json:"edgePort,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// path cost
	PathCost float64 `json:"pathCost,omitempty"`

	// port priority
	PortPriority float64 `json:"portPriority,omitempty"`
}

// Validate validates this stp
func (m *Stp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdgePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stpTypeEdgePortPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stpTypeEdgePortPropEnum = append(stpTypeEdgePortPropEnum, v)
	}
}

const (

	// StpEdgePortAuto captures enum value "auto"
	StpEdgePortAuto string = "auto"

	// StpEdgePortEnable captures enum value "enable"
	StpEdgePortEnable string = "enable"

	// StpEdgePortDisable captures enum value "disable"
	StpEdgePortDisable string = "disable"
)

// prop value enum
func (m *Stp) validateEdgePortEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stpTypeEdgePortPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stp) validateEdgePort(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgePort) { // not required
		return nil
	}

	// value enum
	if err := m.validateEdgePortEnum("edgePort", "body", m.EdgePort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stp based on context it is used
func (m *Stp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Stp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stp) UnmarshalBinary(b []byte) error {
	var res Stp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
