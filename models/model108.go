// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model108 model 108
//
// swagger:model Model 108
type Model108 struct {

	// description
	Description string `json:"description,omitempty"`

	// destination
	Destination *Destination `json:"destination,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	// Minimum: 0
	ID *int64 `json:"id,omitempty"`

	// in interface
	InInterface *InInterface1 `json:"inInterface,omitempty"`

	// ip version
	// Required: true
	// Enum: [both v4only v6only]
	IPVersion *string `json:"ipVersion"`

	// log
	Log bool `json:"log,omitempty"`

	// negate in interface
	NegateInInterface bool `json:"negateInInterface,omitempty"`

	// negate out interface
	NegateOutInterface bool `json:"negateOutInterface,omitempty"`

	// out interface
	OutInterface *OutInterface1 `json:"outInterface,omitempty"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// source
	Source *Source `json:"source,omitempty"`

	// target
	// Required: true
	Target *string `json:"target"`

	// tproxy mark
	// Enum: [1]
	TproxyMark int64 `json:"tproxyMark,omitempty"`

	// tproxy on Ip
	// Enum: [both v4only v6only]
	TproxyOnIP string `json:"tproxyOnIp,omitempty"`

	// tproxy on port
	// Minimum: 0
	TproxyOnPort *int64 `json:"tproxyOnPort,omitempty"`
}

// Validate validates this model 108
func (m *Model108) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTproxyMark(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTproxyOnIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTproxyOnPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model108) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Model108) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", *m.ID, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Model108) validateInInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.InInterface) { // not required
		return nil
	}

	if m.InInterface != nil {
		if err := m.InInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inInterface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inInterface")
			}
			return err
		}
	}

	return nil
}

var model108TypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["both","v4only","v6only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model108TypeIPVersionPropEnum = append(model108TypeIPVersionPropEnum, v)
	}
}

const (

	// Model108IPVersionBoth captures enum value "both"
	Model108IPVersionBoth string = "both"

	// Model108IPVersionV4only captures enum value "v4only"
	Model108IPVersionV4only string = "v4only"

	// Model108IPVersionV6only captures enum value "v6only"
	Model108IPVersionV6only string = "v6only"
)

// prop value enum
func (m *Model108) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model108TypeIPVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model108) validateIPVersion(formats strfmt.Registry) error {

	if err := validate.Required("ipVersion", "body", m.IPVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validateIPVersionEnum("ipVersion", "body", *m.IPVersion); err != nil {
		return err
	}

	return nil
}

func (m *Model108) validateOutInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.OutInterface) { // not required
		return nil
	}

	if m.OutInterface != nil {
		if err := m.OutInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outInterface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outInterface")
			}
			return err
		}
	}

	return nil
}

func (m *Model108) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *Model108) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *Model108) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

var model108TypeTproxyMarkPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model108TypeTproxyMarkPropEnum = append(model108TypeTproxyMarkPropEnum, v)
	}
}

// prop value enum
func (m *Model108) validateTproxyMarkEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, model108TypeTproxyMarkPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model108) validateTproxyMark(formats strfmt.Registry) error {
	if swag.IsZero(m.TproxyMark) { // not required
		return nil
	}

	// value enum
	if err := m.validateTproxyMarkEnum("tproxyMark", "body", m.TproxyMark); err != nil {
		return err
	}

	return nil
}

var model108TypeTproxyOnIPPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["both","v4only","v6only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model108TypeTproxyOnIPPropEnum = append(model108TypeTproxyOnIPPropEnum, v)
	}
}

const (

	// Model108TproxyOnIPBoth captures enum value "both"
	Model108TproxyOnIPBoth string = "both"

	// Model108TproxyOnIPV4only captures enum value "v4only"
	Model108TproxyOnIPV4only string = "v4only"

	// Model108TproxyOnIPV6only captures enum value "v6only"
	Model108TproxyOnIPV6only string = "v6only"
)

// prop value enum
func (m *Model108) validateTproxyOnIPEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model108TypeTproxyOnIPPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model108) validateTproxyOnIP(formats strfmt.Registry) error {
	if swag.IsZero(m.TproxyOnIP) { // not required
		return nil
	}

	// value enum
	if err := m.validateTproxyOnIPEnum("tproxyOnIp", "body", m.TproxyOnIP); err != nil {
		return err
	}

	return nil
}

func (m *Model108) validateTproxyOnPort(formats strfmt.Registry) error {
	if swag.IsZero(m.TproxyOnPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("tproxyOnPort", "body", *m.TproxyOnPort, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 108 based on the context it is used
func (m *Model108) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model108) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {
		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Model108) contextValidateInInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.InInterface != nil {
		if err := m.InInterface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inInterface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inInterface")
			}
			return err
		}
	}

	return nil
}

func (m *Model108) contextValidateOutInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.OutInterface != nil {
		if err := m.OutInterface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outInterface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outInterface")
			}
			return err
		}
	}

	return nil
}

func (m *Model108) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model108) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model108) UnmarshalBinary(b []byte) error {
	var res Model108
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
