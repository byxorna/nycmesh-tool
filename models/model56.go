// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model56 model 56
//
// swagger:model Model 56
type Model56 struct {

	// conntrack modules
	// Required: true
	ConntrackModules *ConntrackModules `json:"conntrackModules"`

	// conntrack options
	// Required: true
	ConntrackOptions *ConntrackOptions `json:"conntrackOptions"`

	// conntrack timeouts
	// Required: true
	ConntrackTimeouts *ConntrackTimeouts `json:"conntrackTimeouts"`
}

// Validate validates this model 56
func (m *Model56) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConntrackModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConntrackOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConntrackTimeouts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model56) validateConntrackModules(formats strfmt.Registry) error {

	if err := validate.Required("conntrackModules", "body", m.ConntrackModules); err != nil {
		return err
	}

	if m.ConntrackModules != nil {
		if err := m.ConntrackModules.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conntrackModules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conntrackModules")
			}
			return err
		}
	}

	return nil
}

func (m *Model56) validateConntrackOptions(formats strfmt.Registry) error {

	if err := validate.Required("conntrackOptions", "body", m.ConntrackOptions); err != nil {
		return err
	}

	if m.ConntrackOptions != nil {
		if err := m.ConntrackOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conntrackOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conntrackOptions")
			}
			return err
		}
	}

	return nil
}

func (m *Model56) validateConntrackTimeouts(formats strfmt.Registry) error {

	if err := validate.Required("conntrackTimeouts", "body", m.ConntrackTimeouts); err != nil {
		return err
	}

	if m.ConntrackTimeouts != nil {
		if err := m.ConntrackTimeouts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conntrackTimeouts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conntrackTimeouts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this model 56 based on the context it is used
func (m *Model56) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConntrackModules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConntrackOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConntrackTimeouts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model56) contextValidateConntrackModules(ctx context.Context, formats strfmt.Registry) error {

	if m.ConntrackModules != nil {
		if err := m.ConntrackModules.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conntrackModules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conntrackModules")
			}
			return err
		}
	}

	return nil
}

func (m *Model56) contextValidateConntrackOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ConntrackOptions != nil {
		if err := m.ConntrackOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conntrackOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conntrackOptions")
			}
			return err
		}
	}

	return nil
}

func (m *Model56) contextValidateConntrackTimeouts(ctx context.Context, formats strfmt.Registry) error {

	if m.ConntrackTimeouts != nil {
		if err := m.ConntrackTimeouts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conntrackTimeouts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conntrackTimeouts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model56) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model56) UnmarshalBinary(b []byte) error {
	var res Model56
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
