// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Aggregation aggregation
//
// swagger:model aggregation
type Aggregation struct {

	// all count
	// Required: true
	// Minimum: 0
	AllCount *int64 `json:"allCount"`

	// error count
	// Required: true
	// Minimum: 0
	ErrorCount *int64 `json:"errorCount"`

	// info count
	// Required: true
	// Minimum: 0
	InfoCount *int64 `json:"infoCount"`

	// warning count
	// Required: true
	// Minimum: 0
	WarningCount *int64 `json:"warningCount"`
}

// Validate validates this aggregation
func (m *Aggregation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfoCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarningCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Aggregation) validateAllCount(formats strfmt.Registry) error {

	if err := validate.Required("allCount", "body", m.AllCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("allCount", "body", *m.AllCount, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Aggregation) validateErrorCount(formats strfmt.Registry) error {

	if err := validate.Required("errorCount", "body", m.ErrorCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("errorCount", "body", *m.ErrorCount, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Aggregation) validateInfoCount(formats strfmt.Registry) error {

	if err := validate.Required("infoCount", "body", m.InfoCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("infoCount", "body", *m.InfoCount, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Aggregation) validateWarningCount(formats strfmt.Registry) error {

	if err := validate.Required("warningCount", "body", m.WarningCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("warningCount", "body", *m.WarningCount, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aggregation based on context it is used
func (m *Aggregation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Aggregation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Aggregation) UnmarshalBinary(b []byte) error {
	var res Aggregation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
