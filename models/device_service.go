// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceService device service
//
// swagger:model DeviceService
type DeviceService struct {

	// discovery
	// Required: true
	Discovery *Discovery1 `json:"discovery"`

	// ntp client
	// Required: true
	NtpClient *NtpClient `json:"ntpClient"`

	// snmp agent
	// Required: true
	SnmpAgent *SnmpAgent `json:"snmpAgent"`

	// ssh server
	// Required: true
	SSHServer *SSHServer `json:"sshServer"`

	// system log
	// Required: true
	SystemLog *SystemLog `json:"systemLog"`

	// telnet server
	TelnetServer *TelnetServer `json:"telnetServer,omitempty"`

	// web server
	// Required: true
	WebServer *WebServer `json:"webServer"`
}

// Validate validates this device service
func (m *DeviceService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscovery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelnetServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceService) validateDiscovery(formats strfmt.Registry) error {

	if err := validate.Required("discovery", "body", m.Discovery); err != nil {
		return err
	}

	if m.Discovery != nil {
		if err := m.Discovery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discovery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discovery")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateNtpClient(formats strfmt.Registry) error {

	if err := validate.Required("ntpClient", "body", m.NtpClient); err != nil {
		return err
	}

	if m.NtpClient != nil {
		if err := m.NtpClient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntpClient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntpClient")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateSnmpAgent(formats strfmt.Registry) error {

	if err := validate.Required("snmpAgent", "body", m.SnmpAgent); err != nil {
		return err
	}

	if m.SnmpAgent != nil {
		if err := m.SnmpAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snmpAgent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snmpAgent")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateSSHServer(formats strfmt.Registry) error {

	if err := validate.Required("sshServer", "body", m.SSHServer); err != nil {
		return err
	}

	if m.SSHServer != nil {
		if err := m.SSHServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshServer")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateSystemLog(formats strfmt.Registry) error {

	if err := validate.Required("systemLog", "body", m.SystemLog); err != nil {
		return err
	}

	if m.SystemLog != nil {
		if err := m.SystemLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("systemLog")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateTelnetServer(formats strfmt.Registry) error {
	if swag.IsZero(m.TelnetServer) { // not required
		return nil
	}

	if m.TelnetServer != nil {
		if err := m.TelnetServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("telnetServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("telnetServer")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) validateWebServer(formats strfmt.Registry) error {

	if err := validate.Required("webServer", "body", m.WebServer); err != nil {
		return err
	}

	if m.WebServer != nil {
		if err := m.WebServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webServer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device service based on the context it is used
func (m *DeviceService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscovery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnmpAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTelnetServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceService) contextValidateDiscovery(ctx context.Context, formats strfmt.Registry) error {

	if m.Discovery != nil {
		if err := m.Discovery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discovery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discovery")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) contextValidateNtpClient(ctx context.Context, formats strfmt.Registry) error {

	if m.NtpClient != nil {
		if err := m.NtpClient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntpClient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntpClient")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) contextValidateSnmpAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.SnmpAgent != nil {
		if err := m.SnmpAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snmpAgent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snmpAgent")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) contextValidateSSHServer(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHServer != nil {
		if err := m.SSHServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshServer")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) contextValidateSystemLog(ctx context.Context, formats strfmt.Registry) error {

	if m.SystemLog != nil {
		if err := m.SystemLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("systemLog")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) contextValidateTelnetServer(ctx context.Context, formats strfmt.Registry) error {

	if m.TelnetServer != nil {
		if err := m.TelnetServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("telnetServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("telnetServer")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceService) contextValidateWebServer(ctx context.Context, formats strfmt.Registry) error {

	if m.WebServer != nil {
		if err := m.WebServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webServer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webServer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceService) UnmarshalBinary(b []byte) error {
	var res DeviceService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
