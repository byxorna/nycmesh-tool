// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Features features
//
// swagger:model features
type Features struct {

	// Experimental flag for cloud-managed vault key.
	// Example: false
	// Required: true
	CloudVault *bool `json:"cloudVault"`

	// Experimental flag for linkScore.
	// Example: false
	// Required: true
	LinkScore *bool `json:"linkScore"`

	// Experimental flag for new user roles.
	// Example: false
	// Required: true
	NewUserRoles *bool `json:"newUserRoles"`

	// Experimental flag for wifiMan.
	// Example: false
	// Required: true
	WifiMan *bool `json:"wifiMan"`
}

// Validate validates this features
func (m *Features) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudVault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewUserRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiMan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Features) validateCloudVault(formats strfmt.Registry) error {

	if err := validate.Required("cloudVault", "body", m.CloudVault); err != nil {
		return err
	}

	return nil
}

func (m *Features) validateLinkScore(formats strfmt.Registry) error {

	if err := validate.Required("linkScore", "body", m.LinkScore); err != nil {
		return err
	}

	return nil
}

func (m *Features) validateNewUserRoles(formats strfmt.Registry) error {

	if err := validate.Required("newUserRoles", "body", m.NewUserRoles); err != nil {
		return err
	}

	return nil
}

func (m *Features) validateWifiMan(formats strfmt.Registry) error {

	if err := validate.Required("wifiMan", "body", m.WifiMan); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this features based on context it is used
func (m *Features) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Features) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Features) UnmarshalBinary(b []byte) error {
	var res Features
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
