// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model44 model 44
//
// swagger:model Model 44
type Model44 struct {

	// include vlans
	IncludeVlans IncludeVlans `json:"includeVlans,omitempty"`

	// Native VLAN identification
	// Example: 4063
	// Required: true
	// Maximum: 4063
	// Minimum: 1
	NativeVlan *int64 `json:"nativeVlan"`

	// Identification of port
	// Example: 1
	// Required: true
	Port *string `json:"port"`
}

// Validate validates this model 44
func (m *Model44) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncludeVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNativeVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model44) validateIncludeVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludeVlans) { // not required
		return nil
	}

	if err := m.IncludeVlans.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("includeVlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("includeVlans")
		}
		return err
	}

	return nil
}

func (m *Model44) validateNativeVlan(formats strfmt.Registry) error {

	if err := validate.Required("nativeVlan", "body", m.NativeVlan); err != nil {
		return err
	}

	if err := validate.MinimumInt("nativeVlan", "body", *m.NativeVlan, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("nativeVlan", "body", *m.NativeVlan, 4063, false); err != nil {
		return err
	}

	return nil
}

func (m *Model44) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 44 based on the context it is used
func (m *Model44) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncludeVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model44) contextValidateIncludeVlans(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IncludeVlans.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("includeVlans")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("includeVlans")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model44) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model44) UnmarshalBinary(b []byte) error {
	var res Model44
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
