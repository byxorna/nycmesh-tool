// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model97 model 97
//
// swagger:model Model 97
type Model97 struct {

	// addresses
	// Required: true
	Addresses Addresses5 `json:"addresses"`

	// description
	Description string `json:"description,omitempty"`

	// interface
	// Required: true
	Interface *string `json:"interface"`

	// mtu
	// Required: true
	// Minimum: 1
	Mtu *float64 `json:"mtu"`

	// name
	Name string `json:"name,omitempty"`

	// proxy a r p
	ProxyARP bool `json:"proxyARP,omitempty"`

	// vlan Id
	// Required: true
	VlanID *int64 `json:"vlanId"`
}

// Validate validates this model 97
func (m *Model97) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model97) validateAddresses(formats strfmt.Registry) error {

	if err := validate.Required("addresses", "body", m.Addresses); err != nil {
		return err
	}

	if err := m.Addresses.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("addresses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("addresses")
		}
		return err
	}

	return nil
}

func (m *Model97) validateInterface(formats strfmt.Registry) error {

	if err := validate.Required("interface", "body", m.Interface); err != nil {
		return err
	}

	return nil
}

func (m *Model97) validateMtu(formats strfmt.Registry) error {

	if err := validate.Required("mtu", "body", m.Mtu); err != nil {
		return err
	}

	if err := validate.Minimum("mtu", "body", *m.Mtu, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Model97) validateVlanID(formats strfmt.Registry) error {

	if err := validate.Required("vlanId", "body", m.VlanID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model 97 based on the context it is used
func (m *Model97) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model97) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Addresses.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("addresses")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("addresses")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model97) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model97) UnmarshalBinary(b []byte) error {
	var res Model97
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
