// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UispBackup uisp backup
//
// swagger:model UispBackup
type UispBackup struct {

	// Flag if the backup is compatible with current UISP version.
	// Required: true
	Compatible *bool `json:"compatible"`

	// created at
	// Required: true
	// Format: date
	CreatedAt *strfmt.Date `json:"createdAt"`

	// id
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	ID *string `json:"id"`

	// origin
	// Required: true
	// Enum: [auto manual]
	Origin *string `json:"origin"`

	// Size in bytes.
	// Required: true
	Size *int64 `json:"size"`

	// state
	// Required: true
	// Enum: [success in-progress failed]
	State *string `json:"state"`

	// unms version
	// Required: true
	UnmsVersion *UnmsVersion `json:"unmsVersion"`
}

// Validate validates this uisp backup
func (m *UispBackup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompatible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmsVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UispBackup) validateCompatible(formats strfmt.Registry) error {

	if err := validate.Required("compatible", "body", m.Compatible); err != nil {
		return err
	}

	return nil
}

func (m *UispBackup) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UispBackup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var uispBackupTypeOriginPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		uispBackupTypeOriginPropEnum = append(uispBackupTypeOriginPropEnum, v)
	}
}

const (

	// UispBackupOriginAuto captures enum value "auto"
	UispBackupOriginAuto string = "auto"

	// UispBackupOriginManual captures enum value "manual"
	UispBackupOriginManual string = "manual"
)

// prop value enum
func (m *UispBackup) validateOriginEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, uispBackupTypeOriginPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UispBackup) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	// value enum
	if err := m.validateOriginEnum("origin", "body", *m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *UispBackup) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

var uispBackupTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","in-progress","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		uispBackupTypeStatePropEnum = append(uispBackupTypeStatePropEnum, v)
	}
}

const (

	// UispBackupStateSuccess captures enum value "success"
	UispBackupStateSuccess string = "success"

	// UispBackupStateInDashProgress captures enum value "in-progress"
	UispBackupStateInDashProgress string = "in-progress"

	// UispBackupStateFailed captures enum value "failed"
	UispBackupStateFailed string = "failed"
)

// prop value enum
func (m *UispBackup) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, uispBackupTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UispBackup) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *UispBackup) validateUnmsVersion(formats strfmt.Registry) error {

	if err := validate.Required("unmsVersion", "body", m.UnmsVersion); err != nil {
		return err
	}

	if m.UnmsVersion != nil {
		if err := m.UnmsVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unmsVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unmsVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this uisp backup based on the context it is used
func (m *UispBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUnmsVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UispBackup) contextValidateUnmsVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.UnmsVersion != nil {
		if err := m.UnmsVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unmsVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unmsVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UispBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UispBackup) UnmarshalBinary(b []byte) error {
	var res UispBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
