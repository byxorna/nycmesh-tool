// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model24 model 24
//
// swagger:model Model 24
type Model24 struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Enum: [running complete error none]
	Status string `json:"status,omitempty"`
}

// Validate validates this model 24
func (m *Model24) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model24) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

var model24TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","complete","error","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model24TypeStatusPropEnum = append(model24TypeStatusPropEnum, v)
	}
}

const (

	// Model24StatusRunning captures enum value "running"
	Model24StatusRunning string = "running"

	// Model24StatusComplete captures enum value "complete"
	Model24StatusComplete string = "complete"

	// Model24StatusError captures enum value "error"
	Model24StatusError string = "error"

	// Model24StatusNone captures enum value "none"
	Model24StatusNone string = "none"
)

// prop value enum
func (m *Model24) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model24TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model24) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model 24 based on context it is used
func (m *Model24) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Model24) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model24) UnmarshalBinary(b []byte) error {
	var res Model24
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
