// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model35 model 35
//
// swagger:model Model 35
type Model35 struct {

	// created at
	// Format: date
	CreatedAt strfmt.Date `json:"createdAt,omitempty"`

	// device Id
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	DeviceID *string `json:"deviceId"`

	// https port
	// Maximum: 65535
	// Minimum: 0
	HTTPSPort *int64 `json:"httpsPort,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// read only
	ReadOnly bool `json:"readOnly,omitempty"`

	// ssh port
	// Maximum: 65535
	// Minimum: 0
	SSHPort *int64 `json:"sshPort,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this model 35
func (m *Model35) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model35) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Model35) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *Model35) validateHTTPSPort(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPSPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("httpsPort", "body", *m.HTTPSPort, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("httpsPort", "body", *m.HTTPSPort, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *Model35) validateSSHPort(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("sshPort", "body", *m.SSHPort, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sshPort", "body", *m.SSHPort, 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model 35 based on context it is used
func (m *Model35) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Model35) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model35) UnmarshalBinary(b []byte) error {
	var res Model35
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
