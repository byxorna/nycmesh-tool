// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnableSso enable sso
//
// swagger:model EnableSso
type EnableSso struct {

	// UISP user password.
	// Required: true
	// Max Length: 64
	// Min Length: 4
	Password *string `json:"password"`

	// sso user
	// Required: true
	SsoUser *SsoUserSchema1 `json:"ssoUser"`

	// UISP user 2FA verification code. Not required when 2FA is not enabled for the account.
	VerificationCode string `json:"verificationCode,omitempty"`
}

// Validate validates this enable sso
func (m *EnableSso) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsoUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnableSso) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 64); err != nil {
		return err
	}

	return nil
}

func (m *EnableSso) validateSsoUser(formats strfmt.Registry) error {

	if err := validate.Required("ssoUser", "body", m.SsoUser); err != nil {
		return err
	}

	if m.SsoUser != nil {
		if err := m.SsoUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssoUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ssoUser")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this enable sso based on the context it is used
func (m *EnableSso) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSsoUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnableSso) contextValidateSsoUser(ctx context.Context, formats strfmt.Registry) error {

	if m.SsoUser != nil {
		if err := m.SsoUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ssoUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ssoUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnableSso) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnableSso) UnmarshalBinary(b []byte) error {
	var res EnableSso
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
