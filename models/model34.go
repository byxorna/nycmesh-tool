// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model34 model 34
//
// swagger:model Model 34
type Model34 struct {

	// Device ID.
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	DeviceID *string `json:"deviceId"`

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// device type
	// Enum: [onu olt uispp uispr uisps uispLte erouter eswitch epower airCube airMax airFiber toughSwitch solarBeam wave blackBox]
	DeviceType string `json:"deviceType,omitempty"`

	// Interface name.
	// Example: eth0
	InterfaceID string `json:"interfaceId,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`
}

// Validate validates this model 34
func (m *Model34) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model34) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

var model34TypeDeviceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["onu","olt","uispp","uispr","uisps","uispLte","erouter","eswitch","epower","airCube","airMax","airFiber","toughSwitch","solarBeam","wave","blackBox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		model34TypeDeviceTypePropEnum = append(model34TypeDeviceTypePropEnum, v)
	}
}

const (

	// Model34DeviceTypeOnu captures enum value "onu"
	Model34DeviceTypeOnu string = "onu"

	// Model34DeviceTypeOlt captures enum value "olt"
	Model34DeviceTypeOlt string = "olt"

	// Model34DeviceTypeUispp captures enum value "uispp"
	Model34DeviceTypeUispp string = "uispp"

	// Model34DeviceTypeUispr captures enum value "uispr"
	Model34DeviceTypeUispr string = "uispr"

	// Model34DeviceTypeUisps captures enum value "uisps"
	Model34DeviceTypeUisps string = "uisps"

	// Model34DeviceTypeUispLte captures enum value "uispLte"
	Model34DeviceTypeUispLte string = "uispLte"

	// Model34DeviceTypeErouter captures enum value "erouter"
	Model34DeviceTypeErouter string = "erouter"

	// Model34DeviceTypeEswitch captures enum value "eswitch"
	Model34DeviceTypeEswitch string = "eswitch"

	// Model34DeviceTypeEpower captures enum value "epower"
	Model34DeviceTypeEpower string = "epower"

	// Model34DeviceTypeAirCube captures enum value "airCube"
	Model34DeviceTypeAirCube string = "airCube"

	// Model34DeviceTypeAirMax captures enum value "airMax"
	Model34DeviceTypeAirMax string = "airMax"

	// Model34DeviceTypeAirFiber captures enum value "airFiber"
	Model34DeviceTypeAirFiber string = "airFiber"

	// Model34DeviceTypeToughSwitch captures enum value "toughSwitch"
	Model34DeviceTypeToughSwitch string = "toughSwitch"

	// Model34DeviceTypeSolarBeam captures enum value "solarBeam"
	Model34DeviceTypeSolarBeam string = "solarBeam"

	// Model34DeviceTypeWave captures enum value "wave"
	Model34DeviceTypeWave string = "wave"

	// Model34DeviceTypeBlackBox captures enum value "blackBox"
	Model34DeviceTypeBlackBox string = "blackBox"
)

// prop value enum
func (m *Model34) validateDeviceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, model34TypeDeviceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Model34) validateDeviceType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceTypeEnum("deviceType", "body", m.DeviceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model 34 based on context it is used
func (m *Model34) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Model34) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model34) UnmarshalBinary(b []byte) error {
	var res Model34
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
