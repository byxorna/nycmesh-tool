// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerLogVerbosityResponseSchema server log verbosity response schema
//
// swagger:model ServerLogVerbosityResponseSchema
type ServerLogVerbosityResponseSchema struct {

	// expires at
	// Required: true
	// Format: date
	ExpiresAt *strfmt.Date `json:"expiresAt"`

	// verbosity
	// Required: true
	// Enum: [trace debug info warn error fatal]
	Verbosity *string `json:"verbosity"`
}

// Validate validates this server log verbosity response schema
func (m *ServerLogVerbosityResponseSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerbosity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerLogVerbosityResponseSchema) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expiresAt", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("expiresAt", "body", "date", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var serverLogVerbosityResponseSchemaTypeVerbosityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trace","debug","info","warn","error","fatal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverLogVerbosityResponseSchemaTypeVerbosityPropEnum = append(serverLogVerbosityResponseSchemaTypeVerbosityPropEnum, v)
	}
}

const (

	// ServerLogVerbosityResponseSchemaVerbosityTrace captures enum value "trace"
	ServerLogVerbosityResponseSchemaVerbosityTrace string = "trace"

	// ServerLogVerbosityResponseSchemaVerbosityDebug captures enum value "debug"
	ServerLogVerbosityResponseSchemaVerbosityDebug string = "debug"

	// ServerLogVerbosityResponseSchemaVerbosityInfo captures enum value "info"
	ServerLogVerbosityResponseSchemaVerbosityInfo string = "info"

	// ServerLogVerbosityResponseSchemaVerbosityWarn captures enum value "warn"
	ServerLogVerbosityResponseSchemaVerbosityWarn string = "warn"

	// ServerLogVerbosityResponseSchemaVerbosityError captures enum value "error"
	ServerLogVerbosityResponseSchemaVerbosityError string = "error"

	// ServerLogVerbosityResponseSchemaVerbosityFatal captures enum value "fatal"
	ServerLogVerbosityResponseSchemaVerbosityFatal string = "fatal"
)

// prop value enum
func (m *ServerLogVerbosityResponseSchema) validateVerbosityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverLogVerbosityResponseSchemaTypeVerbosityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerLogVerbosityResponseSchema) validateVerbosity(formats strfmt.Registry) error {

	if err := validate.Required("verbosity", "body", m.Verbosity); err != nil {
		return err
	}

	// value enum
	if err := m.validateVerbosityEnum("verbosity", "body", *m.Verbosity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server log verbosity response schema based on context it is used
func (m *ServerLogVerbosityResponseSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerLogVerbosityResponseSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerLogVerbosityResponseSchema) UnmarshalBinary(b []byte) error {
	var res ServerLogVerbosityResponseSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
