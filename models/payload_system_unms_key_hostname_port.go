// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PayloadSystemUnmsKeyHostnamePort payload system unms key hostname port
//
// swagger:model PayloadSystemUnmsKeyHostnamePort
type PayloadSystemUnmsKeyHostnamePort struct {

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// macs
	// Required: true
	Macs Macs `json:"macs"`

	// UISP port to migrate to.
	// Example: 443
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	Port *int64 `json:"port"`
}

// Validate validates this payload system unms key hostname port
func (m *PayloadSystemUnmsKeyHostnamePort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayloadSystemUnmsKeyHostnamePort) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *PayloadSystemUnmsKeyHostnamePort) validateMacs(formats strfmt.Registry) error {

	if err := validate.Required("macs", "body", m.Macs); err != nil {
		return err
	}

	if err := m.Macs.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("macs")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("macs")
		}
		return err
	}

	return nil
}

func (m *PayloadSystemUnmsKeyHostnamePort) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payload system unms key hostname port based on the context it is used
func (m *PayloadSystemUnmsKeyHostnamePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMacs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayloadSystemUnmsKeyHostnamePort) contextValidateMacs(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Macs.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("macs")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("macs")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PayloadSystemUnmsKeyHostnamePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PayloadSystemUnmsKeyHostnamePort) UnmarshalBinary(b []byte) error {
	var res PayloadSystemUnmsKeyHostnamePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
