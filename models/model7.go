// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Model7 model 7
//
// swagger:model Model 7
type Model7 struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// has address
	// Required: true
	HasAddress *bool `json:"hasAddress"`

	// id
	// Required: true
	ID *string `json:"id"`

	// pvid
	Pvid string `json:"pvid,omitempty"`

	// vid
	Vid Vid `json:"vid,omitempty"`
}

// Validate validates this model 7
func (m *Model7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model7) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *Model7) validateHasAddress(formats strfmt.Registry) error {

	if err := validate.Required("hasAddress", "body", m.HasAddress); err != nil {
		return err
	}

	return nil
}

func (m *Model7) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Model7) validateVid(formats strfmt.Registry) error {
	if swag.IsZero(m.Vid) { // not required
		return nil
	}

	if err := m.Vid.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vid")
		}
		return err
	}

	return nil
}

// ContextValidate validate this model 7 based on the context it is used
func (m *Model7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Model7) contextValidateVid(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Vid.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vid")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Model7) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Model7) UnmarshalBinary(b []byte) error {
	var res Model7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
