// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterfacePoe interface poe
//
// swagger:model InterfacePoe
type InterfacePoe struct {

	// capacities
	Capacities Capacities `json:"capacities,omitempty"`

	// output
	// Example: off
	// Enum: [off active 24v 48v 54v 24v-4pair 54v-4pair pthru]
	Output string `json:"output,omitempty"`
}

// Validate validates this interface poe
func (m *InterfacePoe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfacePoe) validateCapacities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacities) { // not required
		return nil
	}

	if err := m.Capacities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacities")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacities")
		}
		return err
	}

	return nil
}

var interfacePoeTypeOutputPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["off","active","24v","48v","54v","24v-4pair","54v-4pair","pthru"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfacePoeTypeOutputPropEnum = append(interfacePoeTypeOutputPropEnum, v)
	}
}

const (

	// InterfacePoeOutputOff captures enum value "off"
	InterfacePoeOutputOff string = "off"

	// InterfacePoeOutputActive captures enum value "active"
	InterfacePoeOutputActive string = "active"

	// InterfacePoeOutputNr24v captures enum value "24v"
	InterfacePoeOutputNr24v string = "24v"

	// InterfacePoeOutputNr48v captures enum value "48v"
	InterfacePoeOutputNr48v string = "48v"

	// InterfacePoeOutputNr54v captures enum value "54v"
	InterfacePoeOutputNr54v string = "54v"

	// InterfacePoeOutputNr24vDash4pair captures enum value "24v-4pair"
	InterfacePoeOutputNr24vDash4pair string = "24v-4pair"

	// InterfacePoeOutputNr54vDash4pair captures enum value "54v-4pair"
	InterfacePoeOutputNr54vDash4pair string = "54v-4pair"

	// InterfacePoeOutputPthru captures enum value "pthru"
	InterfacePoeOutputPthru string = "pthru"
)

// prop value enum
func (m *InterfacePoe) validateOutputEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfacePoeTypeOutputPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterfacePoe) validateOutput(formats strfmt.Registry) error {
	if swag.IsZero(m.Output) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutputEnum("output", "body", m.Output); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this interface poe based on the context it is used
func (m *InterfacePoe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterfacePoe) contextValidateCapacities(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Capacities.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capacities")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capacities")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterfacePoe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterfacePoe) UnmarshalBinary(b []byte) error {
	var res InterfacePoe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
