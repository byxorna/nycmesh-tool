// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceSystemConfiguration device system configuration
//
// swagger:model DeviceSystemConfiguration
type DeviceSystemConfiguration struct {

	// access from sfp
	AccessFromSfp bool `json:"accessFromSfp,omitempty"`

	// admin
	Admin *Admin `json:"admin,omitempty"`

	// client isolation
	ClientIsolation bool `json:"clientIsolation,omitempty"`

	// Set to true to allow DHCP option 82
	// Example: true
	DhcpOption82 bool `json:"dhcpOption82,omitempty"`

	// dns1
	Dns1 string `json:"dns1,omitempty"`

	// dns2
	Dns2 string `json:"dns2,omitempty"`

	// dns servers
	DNSServers DNSServers `json:"dnsServers,omitempty"`

	// domain name
	DomainName string `json:"domainName,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// igmp snooping
	IgmpSnooping bool `json:"igmpSnooping,omitempty"`

	// inband management vlan
	InbandManagementVlan string `json:"inbandManagementVlan,omitempty"`

	// ip v4 address
	IPV4Address string `json:"ipV4Address,omitempty"`

	// ip v4 address type
	// Enum: [dhcp slaac linkLocal static]
	IPV4AddressType string `json:"ipV4AddressType,omitempty"`

	// ip v4 gateway
	IPV4Gateway string `json:"ipV4Gateway,omitempty"`

	// ip v6 address
	IPV6Address string `json:"ipV6Address,omitempty"`

	// ip v6 address type
	// Enum: [dhcp slaac linkLocal static]
	IPV6AddressType string `json:"ipV6AddressType,omitempty"`

	// ip v6 gateway
	IPV6Gateway string `json:"ipV6Gateway,omitempty"`

	// Set to true if Edge Switch has a SLAAC IPv6 address.
	// Example: true
	IPV6SlaacEnabled bool `json:"ipV6SlaacEnabled,omitempty"`

	// jumbo mtu
	JumboMtu *JumboMtu `json:"jumboMtu,omitempty"`

	// mtu
	Mtu string `json:"mtu,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// read only account
	ReadOnlyAccount *ReadOnlyAccount `json:"readOnlyAccount,omitempty"`

	// stp
	Stp *SpanningTreeProtocolSchema `json:"stp,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// timezone list
	TimezoneList TimezoneList `json:"timezoneList,omitempty"`
}

// Validate validates this device system configuration
func (m *DeviceSystemConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4AddressType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6AddressType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJumboMtu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnlyAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezoneList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSystemConfiguration) validateAdmin(formats strfmt.Registry) error {
	if swag.IsZero(m.Admin) { // not required
		return nil
	}

	if m.Admin != nil {
		if err := m.Admin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admin")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) validateDNSServers(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSServers) { // not required
		return nil
	}

	if err := m.DNSServers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dnsServers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dnsServers")
		}
		return err
	}

	return nil
}

var deviceSystemConfigurationTypeIPV4AddressTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dhcp","slaac","linkLocal","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceSystemConfigurationTypeIPV4AddressTypePropEnum = append(deviceSystemConfigurationTypeIPV4AddressTypePropEnum, v)
	}
}

const (

	// DeviceSystemConfigurationIPV4AddressTypeDhcp captures enum value "dhcp"
	DeviceSystemConfigurationIPV4AddressTypeDhcp string = "dhcp"

	// DeviceSystemConfigurationIPV4AddressTypeSlaac captures enum value "slaac"
	DeviceSystemConfigurationIPV4AddressTypeSlaac string = "slaac"

	// DeviceSystemConfigurationIPV4AddressTypeLinkLocal captures enum value "linkLocal"
	DeviceSystemConfigurationIPV4AddressTypeLinkLocal string = "linkLocal"

	// DeviceSystemConfigurationIPV4AddressTypeStatic captures enum value "static"
	DeviceSystemConfigurationIPV4AddressTypeStatic string = "static"
)

// prop value enum
func (m *DeviceSystemConfiguration) validateIPV4AddressTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceSystemConfigurationTypeIPV4AddressTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceSystemConfiguration) validateIPV4AddressType(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4AddressType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPV4AddressTypeEnum("ipV4AddressType", "body", m.IPV4AddressType); err != nil {
		return err
	}

	return nil
}

var deviceSystemConfigurationTypeIPV6AddressTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dhcp","slaac","linkLocal","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceSystemConfigurationTypeIPV6AddressTypePropEnum = append(deviceSystemConfigurationTypeIPV6AddressTypePropEnum, v)
	}
}

const (

	// DeviceSystemConfigurationIPV6AddressTypeDhcp captures enum value "dhcp"
	DeviceSystemConfigurationIPV6AddressTypeDhcp string = "dhcp"

	// DeviceSystemConfigurationIPV6AddressTypeSlaac captures enum value "slaac"
	DeviceSystemConfigurationIPV6AddressTypeSlaac string = "slaac"

	// DeviceSystemConfigurationIPV6AddressTypeLinkLocal captures enum value "linkLocal"
	DeviceSystemConfigurationIPV6AddressTypeLinkLocal string = "linkLocal"

	// DeviceSystemConfigurationIPV6AddressTypeStatic captures enum value "static"
	DeviceSystemConfigurationIPV6AddressTypeStatic string = "static"
)

// prop value enum
func (m *DeviceSystemConfiguration) validateIPV6AddressTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceSystemConfigurationTypeIPV6AddressTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceSystemConfiguration) validateIPV6AddressType(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6AddressType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPV6AddressTypeEnum("ipV6AddressType", "body", m.IPV6AddressType); err != nil {
		return err
	}

	return nil
}

func (m *DeviceSystemConfiguration) validateJumboMtu(formats strfmt.Registry) error {
	if swag.IsZero(m.JumboMtu) { // not required
		return nil
	}

	if m.JumboMtu != nil {
		if err := m.JumboMtu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jumboMtu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jumboMtu")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) validateReadOnlyAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadOnlyAccount) { // not required
		return nil
	}

	if m.ReadOnlyAccount != nil {
		if err := m.ReadOnlyAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readOnlyAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readOnlyAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) validateStp(formats strfmt.Registry) error {
	if swag.IsZero(m.Stp) { // not required
		return nil
	}

	if m.Stp != nil {
		if err := m.Stp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stp")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) validateTimezoneList(formats strfmt.Registry) error {
	if swag.IsZero(m.TimezoneList) { // not required
		return nil
	}

	if err := m.TimezoneList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timezoneList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timezoneList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this device system configuration based on the context it is used
func (m *DeviceSystemConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdmin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJumboMtu(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReadOnlyAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimezoneList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSystemConfiguration) contextValidateAdmin(ctx context.Context, formats strfmt.Registry) error {

	if m.Admin != nil {
		if err := m.Admin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("admin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("admin")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) contextValidateDNSServers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DNSServers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dnsServers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dnsServers")
		}
		return err
	}

	return nil
}

func (m *DeviceSystemConfiguration) contextValidateJumboMtu(ctx context.Context, formats strfmt.Registry) error {

	if m.JumboMtu != nil {
		if err := m.JumboMtu.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jumboMtu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jumboMtu")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) contextValidateReadOnlyAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.ReadOnlyAccount != nil {
		if err := m.ReadOnlyAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readOnlyAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readOnlyAccount")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) contextValidateStp(ctx context.Context, formats strfmt.Registry) error {

	if m.Stp != nil {
		if err := m.Stp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stp")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceSystemConfiguration) contextValidateTimezoneList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TimezoneList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timezoneList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timezoneList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemConfiguration) UnmarshalBinary(b []byte) error {
	var res DeviceSystemConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
